
b5_ngat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bb8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001d4c  08001d4c  00011d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d7c  08001d7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d7c  08001d7c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d7c  08001d7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d7c  08001d7c  00011d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d80  08001d80  00011d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001d90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001d90  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004777  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000df1  00000000  00000000  000247b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003f0  00000000  00000000  000255a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000368  00000000  00000000  00025998  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e222  00000000  00000000  00025d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000441c  00000000  00000000  00043f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b6c58  00000000  00000000  0004833e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fef96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dd8  00000000  00000000  000ff014  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001d34 	.word	0x08001d34

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001d34 	.word	0x08001d34

080001d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	80fb      	strh	r3, [r7, #6]
	counter++;
 80001de:	4b17      	ldr	r3, [pc, #92]	; (800023c <HAL_GPIO_EXTI_Callback+0x68>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	3301      	adds	r3, #1
 80001e4:	b2da      	uxtb	r2, r3
 80001e6:	4b15      	ldr	r3, [pc, #84]	; (800023c <HAL_GPIO_EXTI_Callback+0x68>)
 80001e8:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0;i<10000;i++);
 80001ea:	2300      	movs	r3, #0
 80001ec:	81fb      	strh	r3, [r7, #14]
 80001ee:	e002      	b.n	80001f6 <HAL_GPIO_EXTI_Callback+0x22>
 80001f0:	89fb      	ldrh	r3, [r7, #14]
 80001f2:	3301      	adds	r3, #1
 80001f4:	81fb      	strh	r3, [r7, #14]
 80001f6:	89fb      	ldrh	r3, [r7, #14]
 80001f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80001fc:	4293      	cmp	r3, r2
 80001fe:	d9f7      	bls.n	80001f0 <HAL_GPIO_EXTI_Callback+0x1c>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==GPIO_PIN_RESET);
 8000200:	bf00      	nop
 8000202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000206:	480e      	ldr	r0, [pc, #56]	; (8000240 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000208:	f000 fc3c 	bl	8000a84 <HAL_GPIO_ReadPin>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d0f7      	beq.n	8000202 <HAL_GPIO_EXTI_Callback+0x2e>
	for(uint16_t i=0;i<10000;i++);
 8000212:	2300      	movs	r3, #0
 8000214:	81bb      	strh	r3, [r7, #12]
 8000216:	e002      	b.n	800021e <HAL_GPIO_EXTI_Callback+0x4a>
 8000218:	89bb      	ldrh	r3, [r7, #12]
 800021a:	3301      	adds	r3, #1
 800021c:	81bb      	strh	r3, [r7, #12]
 800021e:	89bb      	ldrh	r3, [r7, #12]
 8000220:	f242 720f 	movw	r2, #9999	; 0x270f
 8000224:	4293      	cmp	r3, r2
 8000226:	d9f7      	bls.n	8000218 <HAL_GPIO_EXTI_Callback+0x44>
	EXTI->PR |= GPIO_PIN_13;
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_GPIO_EXTI_Callback+0x70>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	4a05      	ldr	r2, [pc, #20]	; (8000244 <HAL_GPIO_EXTI_Callback+0x70>)
 800022e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000232:	6153      	str	r3, [r2, #20]

}
 8000234:	bf00      	nop
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000028 	.word	0x20000028
 8000240:	48000800 	.word	0x48000800
 8000244:	40010400 	.word	0x40010400

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024c:	f000 f918 	bl	8000480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000250:	f000 f803 	bl	800025a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000254:	f000 f83c 	bl	80002d0 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000258:	e7fe      	b.n	8000258 <main+0x10>

0800025a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025a:	b580      	push	{r7, lr}
 800025c:	b090      	sub	sp, #64	; 0x40
 800025e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000260:	f107 0318 	add.w	r3, r7, #24
 8000264:	2228      	movs	r2, #40	; 0x28
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f001 fd5b 	bl	8001d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027c:	2302      	movs	r3, #2
 800027e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	2301      	movs	r3, #1
 8000282:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000284:	2310      	movs	r3, #16
 8000286:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000288:	2300      	movs	r3, #0
 800028a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	f107 0318 	add.w	r3, r7, #24
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fc27 	bl	8000ae4 <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800029c:	f000 f85a 	bl	8000354 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a0:	230f      	movs	r3, #15
 80002a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2100      	movs	r1, #0
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 fb29 	bl	8001910 <HAL_RCC_ClockConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002c4:	f000 f846 	bl	8000354 <Error_Handler>
  }
}
 80002c8:	bf00      	nop
 80002ca:	3740      	adds	r7, #64	; 0x40
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b088      	sub	sp, #32
 80002d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	f107 030c 	add.w	r3, r7, #12
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e6:	4b18      	ldr	r3, [pc, #96]	; (8000348 <MX_GPIO_Init+0x78>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	4a17      	ldr	r2, [pc, #92]	; (8000348 <MX_GPIO_Init+0x78>)
 80002ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002f0:	6153      	str	r3, [r2, #20]
 80002f2:	4b15      	ldr	r3, [pc, #84]	; (8000348 <MX_GPIO_Init+0x78>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002fa:	60bb      	str	r3, [r7, #8]
 80002fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fe:	4b12      	ldr	r3, [pc, #72]	; (8000348 <MX_GPIO_Init+0x78>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	4a11      	ldr	r2, [pc, #68]	; (8000348 <MX_GPIO_Init+0x78>)
 8000304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000308:	6153      	str	r3, [r2, #20]
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <MX_GPIO_Init+0x78>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : user_btn_Pin */
  GPIO_InitStruct.Pin = user_btn_Pin;
 8000316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800031c:	4b0b      	ldr	r3, [pc, #44]	; (800034c <MX_GPIO_Init+0x7c>)
 800031e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	2300      	movs	r3, #0
 8000322:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(user_btn_GPIO_Port, &GPIO_InitStruct);
 8000324:	f107 030c 	add.w	r3, r7, #12
 8000328:	4619      	mov	r1, r3
 800032a:	4809      	ldr	r0, [pc, #36]	; (8000350 <MX_GPIO_Init+0x80>)
 800032c:	f000 fa20 	bl	8000770 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000330:	2200      	movs	r2, #0
 8000332:	2100      	movs	r1, #0
 8000334:	2028      	movs	r0, #40	; 0x28
 8000336:	f000 f9e4 	bl	8000702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800033a:	2028      	movs	r0, #40	; 0x28
 800033c:	f000 f9fd 	bl	800073a <HAL_NVIC_EnableIRQ>

}
 8000340:	bf00      	nop
 8000342:	3720      	adds	r7, #32
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40021000 	.word	0x40021000
 800034c:	10210000 	.word	0x10210000
 8000350:	48000800 	.word	0x48000800

08000354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000358:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800035a:	e7fe      	b.n	800035a <Error_Handler+0x6>

0800035c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000362:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <HAL_MspInit+0x44>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	4a0e      	ldr	r2, [pc, #56]	; (80003a0 <HAL_MspInit+0x44>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6193      	str	r3, [r2, #24]
 800036e:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <HAL_MspInit+0x44>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <HAL_MspInit+0x44>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	4a08      	ldr	r2, [pc, #32]	; (80003a0 <HAL_MspInit+0x44>)
 8000380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000384:	61d3      	str	r3, [r2, #28]
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <HAL_MspInit+0x44>)
 8000388:	69db      	ldr	r3, [r3, #28]
 800038a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038e:	603b      	str	r3, [r7, #0]
 8000390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40021000 	.word	0x40021000

080003a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <NMI_Handler+0x4>

080003aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ae:	e7fe      	b.n	80003ae <HardFault_Handler+0x4>

080003b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <MemManage_Handler+0x4>

080003b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ba:	e7fe      	b.n	80003ba <BusFault_Handler+0x4>

080003bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c0:	e7fe      	b.n	80003c0 <UsageFault_Handler+0x4>

080003c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr

080003de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003f0:	f000 f88c 	bl	800050c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80003fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000400:	f000 fb58 	bl	8000ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}

08000408 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <SystemInit+0x20>)
 800040e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000412:	4a05      	ldr	r2, [pc, #20]	; (8000428 <SystemInit+0x20>)
 8000414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	e000ed00 	.word	0xe000ed00

0800042c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800042c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000464 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000430:	480d      	ldr	r0, [pc, #52]	; (8000468 <LoopForever+0x6>)
  ldr r1, =_edata
 8000432:	490e      	ldr	r1, [pc, #56]	; (800046c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000434:	4a0e      	ldr	r2, [pc, #56]	; (8000470 <LoopForever+0xe>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000438:	e002      	b.n	8000440 <LoopCopyDataInit>

0800043a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800043c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800043e:	3304      	adds	r3, #4

08000440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000444:	d3f9      	bcc.n	800043a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000446:	4a0b      	ldr	r2, [pc, #44]	; (8000474 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000448:	4c0b      	ldr	r4, [pc, #44]	; (8000478 <LoopForever+0x16>)
  movs r3, #0
 800044a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800044c:	e001      	b.n	8000452 <LoopFillZerobss>

0800044e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800044e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000450:	3204      	adds	r2, #4

08000452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000454:	d3fb      	bcc.n	800044e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000456:	f7ff ffd7 	bl	8000408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800045a:	f001 fc3f 	bl	8001cdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800045e:	f7ff fef3 	bl	8000248 <main>

08000462 <LoopForever>:

LoopForever:
    b LoopForever
 8000462:	e7fe      	b.n	8000462 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000464:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800046c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000470:	08001d84 	.word	0x08001d84
  ldr r2, =_sbss
 8000474:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000478:	20000030 	.word	0x20000030

0800047c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800047c:	e7fe      	b.n	800047c <ADC1_2_IRQHandler>
	...

08000480 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <HAL_Init+0x28>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a07      	ldr	r2, [pc, #28]	; (80004a8 <HAL_Init+0x28>)
 800048a:	f043 0310 	orr.w	r3, r3, #16
 800048e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000490:	2003      	movs	r0, #3
 8000492:	f000 f92b 	bl	80006ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000496:	2000      	movs	r0, #0
 8000498:	f000 f808 	bl	80004ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800049c:	f7ff ff5e 	bl	800035c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40022000 	.word	0x40022000

080004ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <HAL_InitTick+0x54>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <HAL_InitTick+0x58>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4619      	mov	r1, r3
 80004be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80004c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 f943 	bl	8000756 <HAL_SYSTICK_Config>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004d6:	2301      	movs	r3, #1
 80004d8:	e00e      	b.n	80004f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2b0f      	cmp	r3, #15
 80004de:	d80a      	bhi.n	80004f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004e0:	2200      	movs	r2, #0
 80004e2:	6879      	ldr	r1, [r7, #4]
 80004e4:	f04f 30ff 	mov.w	r0, #4294967295
 80004e8:	f000 f90b 	bl	8000702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <HAL_InitTick+0x5c>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80004f2:	2300      	movs	r3, #0
 80004f4:	e000      	b.n	80004f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004f6:	2301      	movs	r3, #1
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000000 	.word	0x20000000
 8000504:	20000008 	.word	0x20000008
 8000508:	20000004 	.word	0x20000004

0800050c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <HAL_IncTick+0x20>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	461a      	mov	r2, r3
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <HAL_IncTick+0x24>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4413      	add	r3, r2
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <HAL_IncTick+0x24>)
 800051e:	6013      	str	r3, [r2, #0]
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	20000008 	.word	0x20000008
 8000530:	2000002c 	.word	0x2000002c

08000534 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  return uwTick;  
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <HAL_GetTick+0x14>)
 800053a:	681b      	ldr	r3, [r3, #0]
}
 800053c:	4618      	mov	r0, r3
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	2000002c 	.word	0x2000002c

0800054c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f003 0307 	and.w	r3, r3, #7
 800055a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__NVIC_SetPriorityGrouping+0x44>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000562:	68ba      	ldr	r2, [r7, #8]
 8000564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000568:	4013      	ands	r3, r2
 800056a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800057e:	4a04      	ldr	r2, [pc, #16]	; (8000590 <__NVIC_SetPriorityGrouping+0x44>)
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	60d3      	str	r3, [r2, #12]
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <__NVIC_GetPriorityGrouping+0x18>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	0a1b      	lsrs	r3, r3, #8
 800059e:	f003 0307 	and.w	r3, r3, #7
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	e000ed00 	.word	0xe000ed00

080005b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	db0b      	blt.n	80005da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f003 021f 	and.w	r2, r3, #31
 80005c8:	4907      	ldr	r1, [pc, #28]	; (80005e8 <__NVIC_EnableIRQ+0x38>)
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	095b      	lsrs	r3, r3, #5
 80005d0:	2001      	movs	r0, #1
 80005d2:	fa00 f202 	lsl.w	r2, r0, r2
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000e100 	.word	0xe000e100

080005ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db0a      	blt.n	8000616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	490c      	ldr	r1, [pc, #48]	; (8000638 <__NVIC_SetPriority+0x4c>)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	0112      	lsls	r2, r2, #4
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	440b      	add	r3, r1
 8000610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000614:	e00a      	b.n	800062c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4908      	ldr	r1, [pc, #32]	; (800063c <__NVIC_SetPriority+0x50>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	3b04      	subs	r3, #4
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	440b      	add	r3, r1
 800062a:	761a      	strb	r2, [r3, #24]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000e100 	.word	0xe000e100
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000640:	b480      	push	{r7}
 8000642:	b089      	sub	sp, #36	; 0x24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	f1c3 0307 	rsb	r3, r3, #7
 800065a:	2b04      	cmp	r3, #4
 800065c:	bf28      	it	cs
 800065e:	2304      	movcs	r3, #4
 8000660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	3304      	adds	r3, #4
 8000666:	2b06      	cmp	r3, #6
 8000668:	d902      	bls.n	8000670 <NVIC_EncodePriority+0x30>
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3b03      	subs	r3, #3
 800066e:	e000      	b.n	8000672 <NVIC_EncodePriority+0x32>
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	f04f 32ff 	mov.w	r2, #4294967295
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	43da      	mvns	r2, r3
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	401a      	ands	r2, r3
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000688:	f04f 31ff 	mov.w	r1, #4294967295
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	fa01 f303 	lsl.w	r3, r1, r3
 8000692:	43d9      	mvns	r1, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000698:	4313      	orrs	r3, r2
         );
}
 800069a:	4618      	mov	r0, r3
 800069c:	3724      	adds	r7, #36	; 0x24
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006b8:	d301      	bcc.n	80006be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ba:	2301      	movs	r3, #1
 80006bc:	e00f      	b.n	80006de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <SysTick_Config+0x40>)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006c6:	210f      	movs	r1, #15
 80006c8:	f04f 30ff 	mov.w	r0, #4294967295
 80006cc:	f7ff ff8e 	bl	80005ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <SysTick_Config+0x40>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <SysTick_Config+0x40>)
 80006d8:	2207      	movs	r2, #7
 80006da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	e000e010 	.word	0xe000e010

080006ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f7ff ff29 	bl	800054c <__NVIC_SetPriorityGrouping>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b086      	sub	sp, #24
 8000706:	af00      	add	r7, sp, #0
 8000708:	4603      	mov	r3, r0
 800070a:	60b9      	str	r1, [r7, #8]
 800070c:	607a      	str	r2, [r7, #4]
 800070e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000714:	f7ff ff3e 	bl	8000594 <__NVIC_GetPriorityGrouping>
 8000718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	68b9      	ldr	r1, [r7, #8]
 800071e:	6978      	ldr	r0, [r7, #20]
 8000720:	f7ff ff8e 	bl	8000640 <NVIC_EncodePriority>
 8000724:	4602      	mov	r2, r0
 8000726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800072a:	4611      	mov	r1, r2
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff5d 	bl	80005ec <__NVIC_SetPriority>
}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	4603      	mov	r3, r0
 8000742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff31 	bl	80005b0 <__NVIC_EnableIRQ>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff ffa2 	bl	80006a8 <SysTick_Config>
 8000764:	4603      	mov	r3, r0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000770:	b480      	push	{r7}
 8000772:	b087      	sub	sp, #28
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800077e:	e160      	b.n	8000a42 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	2101      	movs	r1, #1
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	fa01 f303 	lsl.w	r3, r1, r3
 800078c:	4013      	ands	r3, r2
 800078e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b00      	cmp	r3, #0
 8000794:	f000 8152 	beq.w	8000a3c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d00b      	beq.n	80007b8 <HAL_GPIO_Init+0x48>
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	d007      	beq.n	80007b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ac:	2b11      	cmp	r3, #17
 80007ae:	d003      	beq.n	80007b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	2b12      	cmp	r3, #18
 80007b6:	d130      	bne.n	800081a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	2203      	movs	r2, #3
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	43db      	mvns	r3, r3
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	4013      	ands	r3, r2
 80007ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	68da      	ldr	r2, [r3, #12]
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	fa02 f303 	lsl.w	r3, r2, r3
 80007dc:	693a      	ldr	r2, [r7, #16]
 80007de:	4313      	orrs	r3, r2
 80007e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	693a      	ldr	r2, [r7, #16]
 80007e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007ee:	2201      	movs	r2, #1
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	4013      	ands	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	091b      	lsrs	r3, r3, #4
 8000804:	f003 0201 	and.w	r2, r3, #1
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	4313      	orrs	r3, r2
 8000812:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	2203      	movs	r2, #3
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43db      	mvns	r3, r3
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	4013      	ands	r3, r2
 8000830:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	689a      	ldr	r2, [r3, #8]
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	4313      	orrs	r3, r2
 8000842:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d003      	beq.n	800085a <HAL_GPIO_Init+0xea>
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b12      	cmp	r3, #18
 8000858:	d123      	bne.n	80008a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	08da      	lsrs	r2, r3, #3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3208      	adds	r2, #8
 8000862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000866:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	220f      	movs	r2, #15
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	693a      	ldr	r2, [r7, #16]
 800087a:	4013      	ands	r3, r2
 800087c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	691a      	ldr	r2, [r3, #16]
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	f003 0307 	and.w	r3, r3, #7
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	4313      	orrs	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	08da      	lsrs	r2, r3, #3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3208      	adds	r2, #8
 800089c:	6939      	ldr	r1, [r7, #16]
 800089e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	2203      	movs	r2, #3
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	4013      	ands	r3, r2
 80008b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f003 0203 	and.w	r2, r3, #3
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f000 80ac 	beq.w	8000a3c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e4:	4b5e      	ldr	r3, [pc, #376]	; (8000a60 <HAL_GPIO_Init+0x2f0>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a5d      	ldr	r2, [pc, #372]	; (8000a60 <HAL_GPIO_Init+0x2f0>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b5b      	ldr	r3, [pc, #364]	; (8000a60 <HAL_GPIO_Init+0x2f0>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80008fc:	4a59      	ldr	r2, [pc, #356]	; (8000a64 <HAL_GPIO_Init+0x2f4>)
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	089b      	lsrs	r3, r3, #2
 8000902:	3302      	adds	r3, #2
 8000904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000908:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	f003 0303 	and.w	r3, r3, #3
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	220f      	movs	r2, #15
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	43db      	mvns	r3, r3
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	4013      	ands	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000926:	d025      	beq.n	8000974 <HAL_GPIO_Init+0x204>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a4f      	ldr	r2, [pc, #316]	; (8000a68 <HAL_GPIO_Init+0x2f8>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d01f      	beq.n	8000970 <HAL_GPIO_Init+0x200>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a4e      	ldr	r2, [pc, #312]	; (8000a6c <HAL_GPIO_Init+0x2fc>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d019      	beq.n	800096c <HAL_GPIO_Init+0x1fc>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a4d      	ldr	r2, [pc, #308]	; (8000a70 <HAL_GPIO_Init+0x300>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d013      	beq.n	8000968 <HAL_GPIO_Init+0x1f8>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a4c      	ldr	r2, [pc, #304]	; (8000a74 <HAL_GPIO_Init+0x304>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d00d      	beq.n	8000964 <HAL_GPIO_Init+0x1f4>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a4b      	ldr	r2, [pc, #300]	; (8000a78 <HAL_GPIO_Init+0x308>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d007      	beq.n	8000960 <HAL_GPIO_Init+0x1f0>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a4a      	ldr	r2, [pc, #296]	; (8000a7c <HAL_GPIO_Init+0x30c>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d101      	bne.n	800095c <HAL_GPIO_Init+0x1ec>
 8000958:	2306      	movs	r3, #6
 800095a:	e00c      	b.n	8000976 <HAL_GPIO_Init+0x206>
 800095c:	2307      	movs	r3, #7
 800095e:	e00a      	b.n	8000976 <HAL_GPIO_Init+0x206>
 8000960:	2305      	movs	r3, #5
 8000962:	e008      	b.n	8000976 <HAL_GPIO_Init+0x206>
 8000964:	2304      	movs	r3, #4
 8000966:	e006      	b.n	8000976 <HAL_GPIO_Init+0x206>
 8000968:	2303      	movs	r3, #3
 800096a:	e004      	b.n	8000976 <HAL_GPIO_Init+0x206>
 800096c:	2302      	movs	r3, #2
 800096e:	e002      	b.n	8000976 <HAL_GPIO_Init+0x206>
 8000970:	2301      	movs	r3, #1
 8000972:	e000      	b.n	8000976 <HAL_GPIO_Init+0x206>
 8000974:	2300      	movs	r3, #0
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	f002 0203 	and.w	r2, r2, #3
 800097c:	0092      	lsls	r2, r2, #2
 800097e:	4093      	lsls	r3, r2
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4313      	orrs	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000986:	4937      	ldr	r1, [pc, #220]	; (8000a64 <HAL_GPIO_Init+0x2f4>)
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	3302      	adds	r3, #2
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000994:	4b3a      	ldr	r3, [pc, #232]	; (8000a80 <HAL_GPIO_Init+0x310>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	43db      	mvns	r3, r3
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4013      	ands	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d003      	beq.n	80009b8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80009b8:	4a31      	ldr	r2, [pc, #196]	; (8000a80 <HAL_GPIO_Init+0x310>)
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009be:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <HAL_GPIO_Init+0x310>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	43db      	mvns	r3, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80009e2:	4a27      	ldr	r2, [pc, #156]	; (8000a80 <HAL_GPIO_Init+0x310>)
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <HAL_GPIO_Init+0x310>)
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a0c:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <HAL_GPIO_Init+0x310>)
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <HAL_GPIO_Init+0x310>)
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <HAL_GPIO_Init+0x310>)
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	fa22 f303 	lsr.w	r3, r2, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f47f ae97 	bne.w	8000780 <HAL_GPIO_Init+0x10>
  }
}
 8000a52:	bf00      	nop
 8000a54:	371c      	adds	r7, #28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40010000 	.word	0x40010000
 8000a68:	48000400 	.word	0x48000400
 8000a6c:	48000800 	.word	0x48000800
 8000a70:	48000c00 	.word	0x48000c00
 8000a74:	48001000 	.word	0x48001000
 8000a78:	48001400 	.word	0x48001400
 8000a7c:	48001800 	.word	0x48001800
 8000a80:	40010400 	.word	0x40010400

08000a84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	691a      	ldr	r2, [r3, #16]
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	4013      	ands	r3, r2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d002      	beq.n	8000aa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	e001      	b.n	8000aa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ac0:	695a      	ldr	r2, [r3, #20]
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d006      	beq.n	8000ad8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000acc:	88fb      	ldrh	r3, [r7, #6]
 8000ace:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fb7e 	bl	80001d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40010400 	.word	0x40010400

08000ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	f000 bf01 	b.w	8001900 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f000 8160 	beq.w	8000dce <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b0e:	4bae      	ldr	r3, [pc, #696]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 030c 	and.w	r3, r3, #12
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	d00c      	beq.n	8000b34 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b1a:	4bab      	ldr	r3, [pc, #684]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 030c 	and.w	r3, r3, #12
 8000b22:	2b08      	cmp	r3, #8
 8000b24:	d159      	bne.n	8000bda <HAL_RCC_OscConfig+0xf6>
 8000b26:	4ba8      	ldr	r3, [pc, #672]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b32:	d152      	bne.n	8000bda <HAL_RCC_OscConfig+0xf6>
 8000b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b38:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b3c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000b40:	fa93 f3a3 	rbit	r3, r3
 8000b44:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b48:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b4c:	fab3 f383 	clz	r3, r3
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d102      	bne.n	8000b66 <HAL_RCC_OscConfig+0x82>
 8000b60:	4b99      	ldr	r3, [pc, #612]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	e015      	b.n	8000b92 <HAL_RCC_OscConfig+0xae>
 8000b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b6a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b6e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000b72:	fa93 f3a3 	rbit	r3, r3
 8000b76:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b7e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000b82:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000b86:	fa93 f3a3 	rbit	r3, r3
 8000b8a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000b8e:	4b8e      	ldr	r3, [pc, #568]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b96:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000b9a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000b9e:	fa92 f2a2 	rbit	r2, r2
 8000ba2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000ba6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000baa:	fab2 f282 	clz	r2, r2
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	f042 0220 	orr.w	r2, r2, #32
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	f002 021f 	and.w	r2, r2, #31
 8000bba:	2101      	movs	r1, #1
 8000bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f000 8102 	beq.w	8000dcc <HAL_RCC_OscConfig+0x2e8>
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f040 80fc 	bne.w	8000dcc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f000 be93 	b.w	8001900 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000be4:	d106      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x110>
 8000be6:	4b78      	ldr	r3, [pc, #480]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a77      	ldr	r2, [pc, #476]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e030      	b.n	8000c56 <HAL_RCC_OscConfig+0x172>
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d10c      	bne.n	8000c18 <HAL_RCC_OscConfig+0x134>
 8000bfe:	4b72      	ldr	r3, [pc, #456]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a71      	ldr	r2, [pc, #452]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	4b6f      	ldr	r3, [pc, #444]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a6e      	ldr	r2, [pc, #440]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	e01e      	b.n	8000c56 <HAL_RCC_OscConfig+0x172>
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c22:	d10c      	bne.n	8000c3e <HAL_RCC_OscConfig+0x15a>
 8000c24:	4b68      	ldr	r3, [pc, #416]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a67      	ldr	r2, [pc, #412]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000c2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	4b65      	ldr	r3, [pc, #404]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a64      	ldr	r2, [pc, #400]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	e00b      	b.n	8000c56 <HAL_RCC_OscConfig+0x172>
 8000c3e:	4b62      	ldr	r3, [pc, #392]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a61      	ldr	r2, [pc, #388]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	4b5f      	ldr	r3, [pc, #380]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a5e      	ldr	r2, [pc, #376]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c54:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d059      	beq.n	8000d14 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c60:	f7ff fc68 	bl	8000534 <HAL_GetTick>
 8000c64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c68:	e00a      	b.n	8000c80 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c6a:	f7ff fc63 	bl	8000534 <HAL_GetTick>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b64      	cmp	r3, #100	; 0x64
 8000c78:	d902      	bls.n	8000c80 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	f000 be40 	b.w	8001900 <HAL_RCC_OscConfig+0xe1c>
 8000c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c84:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c88:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000c8c:	fa93 f3a3 	rbit	r3, r3
 8000c90:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000c94:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c98:	fab3 f383 	clz	r3, r3
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d102      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x1ce>
 8000cac:	4b46      	ldr	r3, [pc, #280]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	e015      	b.n	8000cde <HAL_RCC_OscConfig+0x1fa>
 8000cb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000cbe:	fa93 f3a3 	rbit	r3, r3
 8000cc2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000cc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cca:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000cce:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000cd2:	fa93 f3a3 	rbit	r3, r3
 8000cd6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000cda:	4b3b      	ldr	r3, [pc, #236]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ce2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000ce6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000cea:	fa92 f2a2 	rbit	r2, r2
 8000cee:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000cf2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	f042 0220 	orr.w	r2, r2, #32
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	f002 021f 	and.w	r2, r2, #31
 8000d06:	2101      	movs	r1, #1
 8000d08:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d0ab      	beq.n	8000c6a <HAL_RCC_OscConfig+0x186>
 8000d12:	e05c      	b.n	8000dce <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d14:	f7ff fc0e 	bl	8000534 <HAL_GetTick>
 8000d18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1c:	e00a      	b.n	8000d34 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d1e:	f7ff fc09 	bl	8000534 <HAL_GetTick>
 8000d22:	4602      	mov	r2, r0
 8000d24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b64      	cmp	r3, #100	; 0x64
 8000d2c:	d902      	bls.n	8000d34 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	f000 bde6 	b.w	8001900 <HAL_RCC_OscConfig+0xe1c>
 8000d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d38:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000d40:	fa93 f3a3 	rbit	r3, r3
 8000d44:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000d48:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4c:	fab3 f383 	clz	r3, r3
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d102      	bne.n	8000d66 <HAL_RCC_OscConfig+0x282>
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	e015      	b.n	8000d92 <HAL_RCC_OscConfig+0x2ae>
 8000d66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d6a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000d72:	fa93 f3a3 	rbit	r3, r3
 8000d76:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000d7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d7e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000d82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000d86:	fa93 f3a3 	rbit	r3, r3
 8000d8a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_RCC_OscConfig+0x2e4>)
 8000d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d96:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000d9a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000d9e:	fa92 f2a2 	rbit	r2, r2
 8000da2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000da6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000daa:	fab2 f282 	clz	r2, r2
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	f042 0220 	orr.w	r2, r2, #32
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	f002 021f 	and.w	r2, r2, #31
 8000dba:	2101      	movs	r1, #1
 8000dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1ab      	bne.n	8000d1e <HAL_RCC_OscConfig+0x23a>
 8000dc6:	e002      	b.n	8000dce <HAL_RCC_OscConfig+0x2ea>
 8000dc8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 8170 	beq.w	80010be <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000dde:	4bd0      	ldr	r3, [pc, #832]	; (8001120 <HAL_RCC_OscConfig+0x63c>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 030c 	and.w	r3, r3, #12
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00c      	beq.n	8000e04 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000dea:	4bcd      	ldr	r3, [pc, #820]	; (8001120 <HAL_RCC_OscConfig+0x63c>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 030c 	and.w	r3, r3, #12
 8000df2:	2b08      	cmp	r3, #8
 8000df4:	d16d      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x3ee>
 8000df6:	4bca      	ldr	r3, [pc, #808]	; (8001120 <HAL_RCC_OscConfig+0x63c>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e02:	d166      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x3ee>
 8000e04:	2302      	movs	r3, #2
 8000e06:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e0a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000e0e:	fa93 f3a3 	rbit	r3, r3
 8000e12:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000e16:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1a:	fab3 f383 	clz	r3, r3
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	095b      	lsrs	r3, r3, #5
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d102      	bne.n	8000e34 <HAL_RCC_OscConfig+0x350>
 8000e2e:	4bbc      	ldr	r3, [pc, #752]	; (8001120 <HAL_RCC_OscConfig+0x63c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	e013      	b.n	8000e5c <HAL_RCC_OscConfig+0x378>
 8000e34:	2302      	movs	r3, #2
 8000e36:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000e3e:	fa93 f3a3 	rbit	r3, r3
 8000e42:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000e4c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000e50:	fa93 f3a3 	rbit	r3, r3
 8000e54:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000e58:	4bb1      	ldr	r3, [pc, #708]	; (8001120 <HAL_RCC_OscConfig+0x63c>)
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000e62:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000e66:	fa92 f2a2 	rbit	r2, r2
 8000e6a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000e6e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000e72:	fab2 f282 	clz	r2, r2
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	f042 0220 	orr.w	r2, r2, #32
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	f002 021f 	and.w	r2, r2, #31
 8000e82:	2101      	movs	r1, #1
 8000e84:	fa01 f202 	lsl.w	r2, r1, r2
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d007      	beq.n	8000e9e <HAL_RCC_OscConfig+0x3ba>
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d002      	beq.n	8000e9e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f000 bd31 	b.w	8001900 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9e:	4ba0      	ldr	r3, [pc, #640]	; (8001120 <HAL_RCC_OscConfig+0x63c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	21f8      	movs	r1, #248	; 0xf8
 8000eae:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000eb6:	fa91 f1a1 	rbit	r1, r1
 8000eba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000ebe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000ec2:	fab1 f181 	clz	r1, r1
 8000ec6:	b2c9      	uxtb	r1, r1
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	4995      	ldr	r1, [pc, #596]	; (8001120 <HAL_RCC_OscConfig+0x63c>)
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed0:	e0f5      	b.n	80010be <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 8085 	beq.w	8000fe8 <HAL_RCC_OscConfig+0x504>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000ee8:	fa93 f3a3 	rbit	r3, r3
 8000eec:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000ef0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000efe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	461a      	mov	r2, r3
 8000f06:	2301      	movs	r3, #1
 8000f08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fb13 	bl	8000534 <HAL_GetTick>
 8000f0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f12:	e00a      	b.n	8000f2a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f14:	f7ff fb0e 	bl	8000534 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d902      	bls.n	8000f2a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	f000 bceb 	b.w	8001900 <HAL_RCC_OscConfig+0xe1c>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000f34:	fa93 f3a3 	rbit	r3, r3
 8000f38:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8000f3c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f40:	fab3 f383 	clz	r3, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d102      	bne.n	8000f5a <HAL_RCC_OscConfig+0x476>
 8000f54:	4b72      	ldr	r3, [pc, #456]	; (8001120 <HAL_RCC_OscConfig+0x63c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	e013      	b.n	8000f82 <HAL_RCC_OscConfig+0x49e>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f60:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000f64:	fa93 f3a3 	rbit	r3, r3
 8000f68:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000f72:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000f76:	fa93 f3a3 	rbit	r3, r3
 8000f7a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000f7e:	4b68      	ldr	r3, [pc, #416]	; (8001120 <HAL_RCC_OscConfig+0x63c>)
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	2202      	movs	r2, #2
 8000f84:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000f88:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000f8c:	fa92 f2a2 	rbit	r2, r2
 8000f90:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8000f94:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000f98:	fab2 f282 	clz	r2, r2
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	f042 0220 	orr.w	r2, r2, #32
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	f002 021f 	and.w	r2, r2, #31
 8000fa8:	2101      	movs	r1, #1
 8000faa:	fa01 f202 	lsl.w	r2, r1, r2
 8000fae:	4013      	ands	r3, r2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0af      	beq.n	8000f14 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb4:	4b5a      	ldr	r3, [pc, #360]	; (8001120 <HAL_RCC_OscConfig+0x63c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	21f8      	movs	r1, #248	; 0xf8
 8000fc4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8000fcc:	fa91 f1a1 	rbit	r1, r1
 8000fd0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8000fd4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000fd8:	fab1 f181 	clz	r1, r1
 8000fdc:	b2c9      	uxtb	r1, r1
 8000fde:	408b      	lsls	r3, r1
 8000fe0:	494f      	ldr	r1, [pc, #316]	; (8001120 <HAL_RCC_OscConfig+0x63c>)
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]
 8000fe6:	e06a      	b.n	80010be <HAL_RCC_OscConfig+0x5da>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000ff2:	fa93 f3a3 	rbit	r3, r3
 8000ff6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8000ffa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ffe:	fab3 f383 	clz	r3, r3
 8001002:	b2db      	uxtb	r3, r3
 8001004:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001008:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	461a      	mov	r2, r3
 8001010:	2300      	movs	r3, #0
 8001012:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001014:	f7ff fa8e 	bl	8000534 <HAL_GetTick>
 8001018:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800101c:	e00a      	b.n	8001034 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800101e:	f7ff fa89 	bl	8000534 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d902      	bls.n	8001034 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	f000 bc66 	b.w	8001900 <HAL_RCC_OscConfig+0xe1c>
 8001034:	2302      	movs	r3, #2
 8001036:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800103e:	fa93 f3a3 	rbit	r3, r3
 8001042:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001046:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800104a:	fab3 f383 	clz	r3, r3
 800104e:	b2db      	uxtb	r3, r3
 8001050:	095b      	lsrs	r3, r3, #5
 8001052:	b2db      	uxtb	r3, r3
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b01      	cmp	r3, #1
 800105c:	d102      	bne.n	8001064 <HAL_RCC_OscConfig+0x580>
 800105e:	4b30      	ldr	r3, [pc, #192]	; (8001120 <HAL_RCC_OscConfig+0x63c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	e013      	b.n	800108c <HAL_RCC_OscConfig+0x5a8>
 8001064:	2302      	movs	r3, #2
 8001066:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001076:	2302      	movs	r3, #2
 8001078:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800107c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001080:	fa93 f3a3 	rbit	r3, r3
 8001084:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001088:	4b25      	ldr	r3, [pc, #148]	; (8001120 <HAL_RCC_OscConfig+0x63c>)
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	2202      	movs	r2, #2
 800108e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001092:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001096:	fa92 f2a2 	rbit	r2, r2
 800109a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800109e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80010a2:	fab2 f282 	clz	r2, r2
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	f042 0220 	orr.w	r2, r2, #32
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	f002 021f 	and.w	r2, r2, #31
 80010b2:	2101      	movs	r1, #1
 80010b4:	fa01 f202 	lsl.w	r2, r1, r2
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1af      	bne.n	800101e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80da 	beq.w	8001282 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d069      	beq.n	80011ac <HAL_RCC_OscConfig+0x6c8>
 80010d8:	2301      	movs	r3, #1
 80010da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80010e2:	fa93 f3a3 	rbit	r3, r3
 80010e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80010ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ee:	fab3 f383 	clz	r3, r3
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_RCC_OscConfig+0x640>)
 80010f8:	4413      	add	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	461a      	mov	r2, r3
 80010fe:	2301      	movs	r3, #1
 8001100:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001102:	f7ff fa17 	bl	8000534 <HAL_GetTick>
 8001106:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110a:	e00d      	b.n	8001128 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800110c:	f7ff fa12 	bl	8000534 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d905      	bls.n	8001128 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e3ef      	b.n	8001900 <HAL_RCC_OscConfig+0xe1c>
 8001120:	40021000 	.word	0x40021000
 8001124:	10908120 	.word	0x10908120
 8001128:	2302      	movs	r3, #2
 800112a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001132:	fa93 f2a3 	rbit	r2, r3
 8001136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001140:	2202      	movs	r2, #2
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	fa93 f2a3 	rbit	r2, r3
 800114e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001158:	2202      	movs	r2, #2
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	fa93 f2a3 	rbit	r2, r3
 8001166:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800116a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116c:	4ba4      	ldr	r3, [pc, #656]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 800116e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001170:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001174:	2102      	movs	r1, #2
 8001176:	6019      	str	r1, [r3, #0]
 8001178:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	fa93 f1a3 	rbit	r1, r3
 8001182:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001186:	6019      	str	r1, [r3, #0]
  return result;
 8001188:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	fab3 f383 	clz	r3, r3
 8001192:	b2db      	uxtb	r3, r3
 8001194:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0b0      	beq.n	800110c <HAL_RCC_OscConfig+0x628>
 80011aa:	e06a      	b.n	8001282 <HAL_RCC_OscConfig+0x79e>
 80011ac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	fa93 f2a3 	rbit	r2, r3
 80011be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80011c2:	601a      	str	r2, [r3, #0]
  return result;
 80011c4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80011c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ca:	fab3 f383 	clz	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b8c      	ldr	r3, [pc, #560]	; (8001404 <HAL_RCC_OscConfig+0x920>)
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	461a      	mov	r2, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011de:	f7ff f9a9 	bl	8000534 <HAL_GetTick>
 80011e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e6:	e009      	b.n	80011fc <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011e8:	f7ff f9a4 	bl	8000534 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e381      	b.n	8001900 <HAL_RCC_OscConfig+0xe1c>
 80011fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001200:	2202      	movs	r2, #2
 8001202:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001204:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	fa93 f2a3 	rbit	r2, r3
 800120e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001218:	2202      	movs	r2, #2
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	fa93 f2a3 	rbit	r2, r3
 8001226:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001230:	2202      	movs	r2, #2
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	fa93 f2a3 	rbit	r2, r3
 800123e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001242:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001244:	4b6e      	ldr	r3, [pc, #440]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 8001246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001248:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800124c:	2102      	movs	r1, #2
 800124e:	6019      	str	r1, [r3, #0]
 8001250:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	fa93 f1a3 	rbit	r1, r3
 800125a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800125e:	6019      	str	r1, [r3, #0]
  return result;
 8001260:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	fab3 f383 	clz	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f003 031f 	and.w	r3, r3, #31
 8001276:	2101      	movs	r1, #1
 8001278:	fa01 f303 	lsl.w	r3, r1, r3
 800127c:	4013      	ands	r3, r2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1b2      	bne.n	80011e8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 8157 	beq.w	8001540 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001298:	4b59      	ldr	r3, [pc, #356]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d112      	bne.n	80012ca <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a4:	4b56      	ldr	r3, [pc, #344]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	4a55      	ldr	r2, [pc, #340]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ae:	61d3      	str	r3, [r2, #28]
 80012b0:	4b53      	ldr	r3, [pc, #332]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ca:	4b4f      	ldr	r3, [pc, #316]	; (8001408 <HAL_RCC_OscConfig+0x924>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d11a      	bne.n	800130c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d6:	4b4c      	ldr	r3, [pc, #304]	; (8001408 <HAL_RCC_OscConfig+0x924>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a4b      	ldr	r2, [pc, #300]	; (8001408 <HAL_RCC_OscConfig+0x924>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e2:	f7ff f927 	bl	8000534 <HAL_GetTick>
 80012e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ea:	e009      	b.n	8001300 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ec:	f7ff f922 	bl	8000534 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b64      	cmp	r3, #100	; 0x64
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e2ff      	b.n	8001900 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001300:	4b41      	ldr	r3, [pc, #260]	; (8001408 <HAL_RCC_OscConfig+0x924>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0ef      	beq.n	80012ec <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d106      	bne.n	8001324 <HAL_RCC_OscConfig+0x840>
 8001316:	4b3a      	ldr	r3, [pc, #232]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	4a39      	ldr	r2, [pc, #228]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6213      	str	r3, [r2, #32]
 8001322:	e02f      	b.n	8001384 <HAL_RCC_OscConfig+0x8a0>
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0x864>
 800132e:	4b34      	ldr	r3, [pc, #208]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4a33      	ldr	r2, [pc, #204]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	6213      	str	r3, [r2, #32]
 800133a:	4b31      	ldr	r3, [pc, #196]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4a30      	ldr	r2, [pc, #192]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 8001340:	f023 0304 	bic.w	r3, r3, #4
 8001344:	6213      	str	r3, [r2, #32]
 8001346:	e01d      	b.n	8001384 <HAL_RCC_OscConfig+0x8a0>
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b05      	cmp	r3, #5
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0x888>
 8001352:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	4a2a      	ldr	r2, [pc, #168]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6213      	str	r3, [r2, #32]
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4a27      	ldr	r2, [pc, #156]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6213      	str	r3, [r2, #32]
 800136a:	e00b      	b.n	8001384 <HAL_RCC_OscConfig+0x8a0>
 800136c:	4b24      	ldr	r3, [pc, #144]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	4a23      	ldr	r2, [pc, #140]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 8001372:	f023 0301 	bic.w	r3, r3, #1
 8001376:	6213      	str	r3, [r2, #32]
 8001378:	4b21      	ldr	r3, [pc, #132]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4a20      	ldr	r2, [pc, #128]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 800137e:	f023 0304 	bic.w	r3, r3, #4
 8001382:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d06a      	beq.n	8001464 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138e:	f7ff f8d1 	bl	8000534 <HAL_GetTick>
 8001392:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001396:	e00b      	b.n	80013b0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f7ff f8cc 	bl	8000534 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e2a7      	b.n	8001900 <HAL_RCC_OscConfig+0xe1c>
 80013b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013b4:	2202      	movs	r2, #2
 80013b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	fa93 f2a3 	rbit	r2, r3
 80013c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013cc:	2202      	movs	r2, #2
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	fa93 f2a3 	rbit	r2, r3
 80013da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80013de:	601a      	str	r2, [r3, #0]
  return result;
 80013e0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80013e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e6:	fab3 f383 	clz	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	095b      	lsrs	r3, r3, #5
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d108      	bne.n	800140c <HAL_RCC_OscConfig+0x928>
 80013fa:	4b01      	ldr	r3, [pc, #4]	; (8001400 <HAL_RCC_OscConfig+0x91c>)
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	e013      	b.n	8001428 <HAL_RCC_OscConfig+0x944>
 8001400:	40021000 	.word	0x40021000
 8001404:	10908120 	.word	0x10908120
 8001408:	40007000 	.word	0x40007000
 800140c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001410:	2202      	movs	r2, #2
 8001412:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001414:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	fa93 f2a3 	rbit	r2, r3
 800141e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	4bc0      	ldr	r3, [pc, #768]	; (8001728 <HAL_RCC_OscConfig+0xc44>)
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800142c:	2102      	movs	r1, #2
 800142e:	6011      	str	r1, [r2, #0]
 8001430:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	fa92 f1a2 	rbit	r1, r2
 800143a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800143e:	6011      	str	r1, [r2, #0]
  return result;
 8001440:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	fab2 f282 	clz	r2, r2
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	f002 021f 	and.w	r2, r2, #31
 8001456:	2101      	movs	r1, #1
 8001458:	fa01 f202 	lsl.w	r2, r1, r2
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d09a      	beq.n	8001398 <HAL_RCC_OscConfig+0x8b4>
 8001462:	e063      	b.n	800152c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001464:	f7ff f866 	bl	8000534 <HAL_GetTick>
 8001468:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146c:	e00b      	b.n	8001486 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146e:	f7ff f861 	bl	8000534 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f241 3288 	movw	r2, #5000	; 0x1388
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e23c      	b.n	8001900 <HAL_RCC_OscConfig+0xe1c>
 8001486:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800148a:	2202      	movs	r2, #2
 800148c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	fa93 f2a3 	rbit	r2, r3
 8001498:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014a2:	2202      	movs	r2, #2
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	fa93 f2a3 	rbit	r2, r3
 80014b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014b4:	601a      	str	r2, [r3, #0]
  return result;
 80014b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014bc:	fab3 f383 	clz	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d102      	bne.n	80014d6 <HAL_RCC_OscConfig+0x9f2>
 80014d0:	4b95      	ldr	r3, [pc, #596]	; (8001728 <HAL_RCC_OscConfig+0xc44>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	e00d      	b.n	80014f2 <HAL_RCC_OscConfig+0xa0e>
 80014d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014da:	2202      	movs	r2, #2
 80014dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	fa93 f2a3 	rbit	r2, r3
 80014e8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	4b8e      	ldr	r3, [pc, #568]	; (8001728 <HAL_RCC_OscConfig+0xc44>)
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80014f6:	2102      	movs	r1, #2
 80014f8:	6011      	str	r1, [r2, #0]
 80014fa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	fa92 f1a2 	rbit	r1, r2
 8001504:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001508:	6011      	str	r1, [r2, #0]
  return result;
 800150a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	fab2 f282 	clz	r2, r2
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	f002 021f 	and.w	r2, r2, #31
 8001520:	2101      	movs	r1, #1
 8001522:	fa01 f202 	lsl.w	r2, r1, r2
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1a0      	bne.n	800146e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800152c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001530:	2b01      	cmp	r3, #1
 8001532:	d105      	bne.n	8001540 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001534:	4b7c      	ldr	r3, [pc, #496]	; (8001728 <HAL_RCC_OscConfig+0xc44>)
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	4a7b      	ldr	r2, [pc, #492]	; (8001728 <HAL_RCC_OscConfig+0xc44>)
 800153a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800153e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 81d9 	beq.w	80018fe <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800154c:	4b76      	ldr	r3, [pc, #472]	; (8001728 <HAL_RCC_OscConfig+0xc44>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b08      	cmp	r3, #8
 8001556:	f000 81a6 	beq.w	80018a6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	2b02      	cmp	r3, #2
 8001562:	f040 811e 	bne.w	80017a2 <HAL_RCC_OscConfig+0xcbe>
 8001566:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800156a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800156e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	fa93 f2a3 	rbit	r2, r3
 800157a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800157e:	601a      	str	r2, [r3, #0]
  return result;
 8001580:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001584:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001586:	fab3 f383 	clz	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001590:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	461a      	mov	r2, r3
 8001598:	2300      	movs	r3, #0
 800159a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7fe ffca 	bl	8000534 <HAL_GetTick>
 80015a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a4:	e009      	b.n	80015ba <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a6:	f7fe ffc5 	bl	8000534 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1a2      	b.n	8001900 <HAL_RCC_OscConfig+0xe1c>
 80015ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	fa93 f2a3 	rbit	r2, r3
 80015ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015d2:	601a      	str	r2, [r3, #0]
  return result;
 80015d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015da:	fab3 f383 	clz	r3, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	095b      	lsrs	r3, r3, #5
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d102      	bne.n	80015f4 <HAL_RCC_OscConfig+0xb10>
 80015ee:	4b4e      	ldr	r3, [pc, #312]	; (8001728 <HAL_RCC_OscConfig+0xc44>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	e01b      	b.n	800162c <HAL_RCC_OscConfig+0xb48>
 80015f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	fa93 f2a3 	rbit	r2, r3
 8001608:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001612:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	fa93 f2a3 	rbit	r2, r3
 8001622:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	4b3f      	ldr	r3, [pc, #252]	; (8001728 <HAL_RCC_OscConfig+0xc44>)
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001630:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001634:	6011      	str	r1, [r2, #0]
 8001636:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	fa92 f1a2 	rbit	r1, r2
 8001640:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001644:	6011      	str	r1, [r2, #0]
  return result;
 8001646:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	fab2 f282 	clz	r2, r2
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	f042 0220 	orr.w	r2, r2, #32
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	f002 021f 	and.w	r2, r2, #31
 800165c:	2101      	movs	r1, #1
 800165e:	fa01 f202 	lsl.w	r2, r1, r2
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d19e      	bne.n	80015a6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001668:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <HAL_RCC_OscConfig+0xc44>)
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	f023 020f 	bic.w	r2, r3, #15
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	492c      	ldr	r1, [pc, #176]	; (8001728 <HAL_RCC_OscConfig+0xc44>)
 8001678:	4313      	orrs	r3, r2
 800167a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800167c:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <HAL_RCC_OscConfig+0xc44>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6a19      	ldr	r1, [r3, #32]
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	430b      	orrs	r3, r1
 8001692:	4925      	ldr	r1, [pc, #148]	; (8001728 <HAL_RCC_OscConfig+0xc44>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
 8001698:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800169c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	fa93 f2a3 	rbit	r2, r3
 80016ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016b0:	601a      	str	r2, [r3, #0]
  return result;
 80016b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016b6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b8:	fab3 f383 	clz	r3, r3
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	461a      	mov	r2, r3
 80016ca:	2301      	movs	r3, #1
 80016cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7fe ff31 	bl	8000534 <HAL_GetTick>
 80016d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016d6:	e009      	b.n	80016ec <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d8:	f7fe ff2c 	bl	8000534 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e109      	b.n	8001900 <HAL_RCC_OscConfig+0xe1c>
 80016ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	fa93 f2a3 	rbit	r2, r3
 8001700:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001704:	601a      	str	r2, [r3, #0]
  return result;
 8001706:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800170a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800170c:	fab3 f383 	clz	r3, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	095b      	lsrs	r3, r3, #5
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_RCC_OscConfig+0xc48>
 8001720:	4b01      	ldr	r3, [pc, #4]	; (8001728 <HAL_RCC_OscConfig+0xc44>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	e01e      	b.n	8001764 <HAL_RCC_OscConfig+0xc80>
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000
 800172c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001730:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001736:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	fa93 f2a3 	rbit	r2, r3
 8001740:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800174a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	fa93 f2a3 	rbit	r2, r3
 800175a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	4b6a      	ldr	r3, [pc, #424]	; (800190c <HAL_RCC_OscConfig+0xe28>)
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001768:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800176c:	6011      	str	r1, [r2, #0]
 800176e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	fa92 f1a2 	rbit	r1, r2
 8001778:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800177c:	6011      	str	r1, [r2, #0]
  return result;
 800177e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	fab2 f282 	clz	r2, r2
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	f042 0220 	orr.w	r2, r2, #32
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	f002 021f 	and.w	r2, r2, #31
 8001794:	2101      	movs	r1, #1
 8001796:	fa01 f202 	lsl.w	r2, r1, r2
 800179a:	4013      	ands	r3, r2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d09b      	beq.n	80016d8 <HAL_RCC_OscConfig+0xbf4>
 80017a0:	e0ad      	b.n	80018fe <HAL_RCC_OscConfig+0xe1a>
 80017a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	fa93 f2a3 	rbit	r2, r3
 80017b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017ba:	601a      	str	r2, [r3, #0]
  return result;
 80017bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017c0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c2:	fab3 f383 	clz	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	461a      	mov	r2, r3
 80017d4:	2300      	movs	r3, #0
 80017d6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7fe feac 	bl	8000534 <HAL_GetTick>
 80017dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e0:	e009      	b.n	80017f6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e2:	f7fe fea7 	bl	8000534 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e084      	b.n	8001900 <HAL_RCC_OscConfig+0xe1c>
 80017f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	fa93 f2a3 	rbit	r2, r3
 800180a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800180e:	601a      	str	r2, [r3, #0]
  return result;
 8001810:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001814:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	095b      	lsrs	r3, r3, #5
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b01      	cmp	r3, #1
 8001828:	d102      	bne.n	8001830 <HAL_RCC_OscConfig+0xd4c>
 800182a:	4b38      	ldr	r3, [pc, #224]	; (800190c <HAL_RCC_OscConfig+0xe28>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	e01b      	b.n	8001868 <HAL_RCC_OscConfig+0xd84>
 8001830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001834:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	fa93 f2a3 	rbit	r2, r3
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	f107 031c 	add.w	r3, r7, #28
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	fa93 f2a3 	rbit	r2, r3
 800185e:	f107 0318 	add.w	r3, r7, #24
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	4b29      	ldr	r3, [pc, #164]	; (800190c <HAL_RCC_OscConfig+0xe28>)
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	f107 0214 	add.w	r2, r7, #20
 800186c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001870:	6011      	str	r1, [r2, #0]
 8001872:	f107 0214 	add.w	r2, r7, #20
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	fa92 f1a2 	rbit	r1, r2
 800187c:	f107 0210 	add.w	r2, r7, #16
 8001880:	6011      	str	r1, [r2, #0]
  return result;
 8001882:	f107 0210 	add.w	r2, r7, #16
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	fab2 f282 	clz	r2, r2
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	f042 0220 	orr.w	r2, r2, #32
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	f002 021f 	and.w	r2, r2, #31
 8001898:	2101      	movs	r1, #1
 800189a:	fa01 f202 	lsl.w	r2, r1, r2
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d19e      	bne.n	80017e2 <HAL_RCC_OscConfig+0xcfe>
 80018a4:	e02b      	b.n	80018fe <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e025      	b.n	8001900 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_RCC_OscConfig+0xe28>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_RCC_OscConfig+0xe28>)
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80018c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80018c8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d111      	bne.n	80018fa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80018d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80018da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d108      	bne.n	80018fa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80018e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ec:	f003 020f 	and.w	r2, r3, #15
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b09e      	sub	sp, #120	; 0x78
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e162      	b.n	8001bee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001928:	4b90      	ldr	r3, [pc, #576]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d910      	bls.n	8001958 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b8d      	ldr	r3, [pc, #564]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 0207 	bic.w	r2, r3, #7
 800193e:	498b      	ldr	r1, [pc, #556]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b89      	ldr	r3, [pc, #548]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e14a      	b.n	8001bee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001964:	4b82      	ldr	r3, [pc, #520]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	497f      	ldr	r1, [pc, #508]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001972:	4313      	orrs	r3, r2
 8001974:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80dc 	beq.w	8001b3c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d13c      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xf6>
 800198c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001990:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800199a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d102      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xa6>
 80019b0:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	e00f      	b.n	80019d6 <HAL_RCC_ClockConfig+0xc6>
 80019b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	667b      	str	r3, [r7, #100]	; 0x64
 80019c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c8:	663b      	str	r3, [r7, #96]	; 0x60
 80019ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019d2:	4b67      	ldr	r3, [pc, #412]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019da:	65ba      	str	r2, [r7, #88]	; 0x58
 80019dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019de:	fa92 f2a2 	rbit	r2, r2
 80019e2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80019e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019e6:	fab2 f282 	clz	r2, r2
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	f042 0220 	orr.w	r2, r2, #32
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	f002 021f 	and.w	r2, r2, #31
 80019f6:	2101      	movs	r1, #1
 80019f8:	fa01 f202 	lsl.w	r2, r1, r2
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d17b      	bne.n	8001afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0f3      	b.n	8001bee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d13c      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x178>
 8001a0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	095b      	lsrs	r3, r3, #5
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d102      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x128>
 8001a32:	4b4f      	ldr	r3, [pc, #316]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	e00f      	b.n	8001a58 <HAL_RCC_ClockConfig+0x148>
 8001a38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	647b      	str	r3, [r7, #68]	; 0x44
 8001a46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8001a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a54:	4b46      	ldr	r3, [pc, #280]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001a5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a60:	fa92 f2a2 	rbit	r2, r2
 8001a64:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a68:	fab2 f282 	clz	r2, r2
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f042 0220 	orr.w	r2, r2, #32
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	f002 021f 	and.w	r2, r2, #31
 8001a78:	2101      	movs	r1, #1
 8001a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d13a      	bne.n	8001afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0b2      	b.n	8001bee <HAL_RCC_ClockConfig+0x2de>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	095b      	lsrs	r3, r3, #5
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d102      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x1a0>
 8001aaa:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	e00d      	b.n	8001acc <HAL_RCC_ClockConfig+0x1bc>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
 8001abc:	2302      	movs	r3, #2
 8001abe:	623b      	str	r3, [r7, #32]
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	4b29      	ldr	r3, [pc, #164]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	2202      	movs	r2, #2
 8001ace:	61ba      	str	r2, [r7, #24]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	fa92 f2a2 	rbit	r2, r2
 8001ad6:	617a      	str	r2, [r7, #20]
  return result;
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	fab2 f282 	clz	r2, r2
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	f042 0220 	orr.w	r2, r2, #32
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	f002 021f 	and.w	r2, r2, #31
 8001aea:	2101      	movs	r1, #1
 8001aec:	fa01 f202 	lsl.w	r2, r1, r2
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e079      	b.n	8001bee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001afa:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f023 0203 	bic.w	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	491a      	ldr	r1, [pc, #104]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b0c:	f7fe fd12 	bl	8000534 <HAL_GetTick>
 8001b10:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	e00a      	b.n	8001b2a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b14:	f7fe fd0e 	bl	8000534 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e061      	b.n	8001bee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 020c 	and.w	r2, r3, #12
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d1eb      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d214      	bcs.n	8001b74 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 0207 	bic.w	r2, r3, #7
 8001b52:	4906      	ldr	r1, [pc, #24]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e040      	b.n	8001bee <HAL_RCC_ClockConfig+0x2de>
 8001b6c:	40022000 	.word	0x40022000
 8001b70:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	491a      	ldr	r1, [pc, #104]	; (8001bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4912      	ldr	r1, [pc, #72]	; (8001bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001bb2:	f000 f829 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001bb6:	4601      	mov	r1, r0
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc0:	22f0      	movs	r2, #240	; 0xf0
 8001bc2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	fa92 f2a2 	rbit	r2, r2
 8001bca:	60fa      	str	r2, [r7, #12]
  return result;
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	fab2 f282 	clz	r2, r2
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	40d3      	lsrs	r3, r2
 8001bd6:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <HAL_RCC_ClockConfig+0x2ec>)
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
 8001bda:	fa21 f303 	lsr.w	r3, r1, r3
 8001bde:	4a08      	ldr	r2, [pc, #32]	; (8001c00 <HAL_RCC_ClockConfig+0x2f0>)
 8001be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_RCC_ClockConfig+0x2f4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fc60 	bl	80004ac <HAL_InitTick>
  
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3778      	adds	r7, #120	; 0x78
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	08001d4c 	.word	0x08001d4c
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000004 	.word	0x20000004

08001c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b08b      	sub	sp, #44	; 0x2c
 8001c0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001c22:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d002      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x30>
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d003      	beq.n	8001c3e <HAL_RCC_GetSysClockFreq+0x36>
 8001c36:	e03f      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c3a:	623b      	str	r3, [r7, #32]
      break;
 8001c3c:	e03f      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c44:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001c48:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	fa92 f2a2 	rbit	r2, r2
 8001c50:	607a      	str	r2, [r7, #4]
  return result;
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	fab2 f282 	clz	r2, r2
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	40d3      	lsrs	r3, r2
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c5e:	5cd3      	ldrb	r3, [r2, r3]
 8001c60:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	220f      	movs	r2, #15
 8001c6c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	fa92 f2a2 	rbit	r2, r2
 8001c74:	60fa      	str	r2, [r7, #12]
  return result;
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	fab2 f282 	clz	r2, r2
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	40d3      	lsrs	r3, r2
 8001c80:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c82:	5cd3      	ldrb	r3, [r2, r3]
 8001c84:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c90:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca0:	e007      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	623b      	str	r3, [r7, #32]
      break;
 8001cb6:	e002      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001cba:	623b      	str	r3, [r7, #32]
      break;
 8001cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	372c      	adds	r7, #44	; 0x2c
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	007a1200 	.word	0x007a1200
 8001cd4:	08001d5c 	.word	0x08001d5c
 8001cd8:	08001d6c 	.word	0x08001d6c

08001cdc <__libc_init_array>:
 8001cdc:	b570      	push	{r4, r5, r6, lr}
 8001cde:	4e0d      	ldr	r6, [pc, #52]	; (8001d14 <__libc_init_array+0x38>)
 8001ce0:	4c0d      	ldr	r4, [pc, #52]	; (8001d18 <__libc_init_array+0x3c>)
 8001ce2:	1ba4      	subs	r4, r4, r6
 8001ce4:	10a4      	asrs	r4, r4, #2
 8001ce6:	2500      	movs	r5, #0
 8001ce8:	42a5      	cmp	r5, r4
 8001cea:	d109      	bne.n	8001d00 <__libc_init_array+0x24>
 8001cec:	4e0b      	ldr	r6, [pc, #44]	; (8001d1c <__libc_init_array+0x40>)
 8001cee:	4c0c      	ldr	r4, [pc, #48]	; (8001d20 <__libc_init_array+0x44>)
 8001cf0:	f000 f820 	bl	8001d34 <_init>
 8001cf4:	1ba4      	subs	r4, r4, r6
 8001cf6:	10a4      	asrs	r4, r4, #2
 8001cf8:	2500      	movs	r5, #0
 8001cfa:	42a5      	cmp	r5, r4
 8001cfc:	d105      	bne.n	8001d0a <__libc_init_array+0x2e>
 8001cfe:	bd70      	pop	{r4, r5, r6, pc}
 8001d00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d04:	4798      	blx	r3
 8001d06:	3501      	adds	r5, #1
 8001d08:	e7ee      	b.n	8001ce8 <__libc_init_array+0xc>
 8001d0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d0e:	4798      	blx	r3
 8001d10:	3501      	adds	r5, #1
 8001d12:	e7f2      	b.n	8001cfa <__libc_init_array+0x1e>
 8001d14:	08001d7c 	.word	0x08001d7c
 8001d18:	08001d7c 	.word	0x08001d7c
 8001d1c:	08001d7c 	.word	0x08001d7c
 8001d20:	08001d80 	.word	0x08001d80

08001d24 <memset>:
 8001d24:	4402      	add	r2, r0
 8001d26:	4603      	mov	r3, r0
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d100      	bne.n	8001d2e <memset+0xa>
 8001d2c:	4770      	bx	lr
 8001d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8001d32:	e7f9      	b.n	8001d28 <memset+0x4>

08001d34 <_init>:
 8001d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d36:	bf00      	nop
 8001d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d3a:	bc08      	pop	{r3}
 8001d3c:	469e      	mov	lr, r3
 8001d3e:	4770      	bx	lr

08001d40 <_fini>:
 8001d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d42:	bf00      	nop
 8001d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d46:	bc08      	pop	{r3}
 8001d48:	469e      	mov	lr, r3
 8001d4a:	4770      	bx	lr
