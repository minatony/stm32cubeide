
btvn1_b13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d8c  08002d8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d8c  08002d8c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d8c  08002d8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d8c  08002d8c  00012d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d90  08002d90  00012d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  08002da0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08002da0  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b88  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001614  00000000  00000000  00027bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c8  00000000  00000000  000291d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000600  00000000  00000000  000298a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f1c2  00000000  00000000  00029ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000723d  00000000  00000000  00049062  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bcfa1  00000000  00000000  0005029f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d240  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019c8  00000000  00000000  0010d2bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002d44 	.word	0x08002d44

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002d44 	.word	0x08002d44

080001d4 <HAL_RTC_AlarmAEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(hrtc, &currentTime, RTC_FORMAT_BIN);
 80001dc:	2200      	movs	r2, #0
 80001de:	4910      	ldr	r1, [pc, #64]	; (8000220 <HAL_RTC_AlarmAEventCallback+0x4c>)
 80001e0:	6878      	ldr	r0, [r7, #4]
 80001e2:	f002 fa17 	bl	8002614 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &currentDate, RTC_FORMAT_BIN);
 80001e6:	2200      	movs	r2, #0
 80001e8:	490e      	ldr	r1, [pc, #56]	; (8000224 <HAL_RTC_AlarmAEventCallback+0x50>)
 80001ea:	6878      	ldr	r0, [r7, #4]
 80001ec:	f002 fb17 	bl	800281e <HAL_RTC_GetDate>
	userAlarm.AlarmTime.Hours = currentTime.Hours;
 80001f0:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <HAL_RTC_AlarmAEventCallback+0x4c>)
 80001f2:	781a      	ldrb	r2, [r3, #0]
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <HAL_RTC_AlarmAEventCallback+0x54>)
 80001f6:	701a      	strb	r2, [r3, #0]
	userAlarm.AlarmTime.Minutes = currentTime.Minutes;
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <HAL_RTC_AlarmAEventCallback+0x4c>)
 80001fa:	785a      	ldrb	r2, [r3, #1]
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <HAL_RTC_AlarmAEventCallback+0x54>)
 80001fe:	705a      	strb	r2, [r3, #1]
	userAlarm.AlarmTime.Seconds = currentTime.Seconds + 10;
 8000200:	4b07      	ldr	r3, [pc, #28]	; (8000220 <HAL_RTC_AlarmAEventCallback+0x4c>)
 8000202:	789b      	ldrb	r3, [r3, #2]
 8000204:	330a      	adds	r3, #10
 8000206:	b2da      	uxtb	r2, r3
 8000208:	4b07      	ldr	r3, [pc, #28]	; (8000228 <HAL_RTC_AlarmAEventCallback+0x54>)
 800020a:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetAlarm_IT(hrtc, &userAlarm, RTC_FORMAT_BIN);
 800020c:	2200      	movs	r2, #0
 800020e:	4906      	ldr	r1, [pc, #24]	; (8000228 <HAL_RTC_AlarmAEventCallback+0x54>)
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f002 fb53 	bl	80028bc <HAL_RTC_SetAlarm_IT>
}
 8000216:	bf00      	nop
 8000218:	3708      	adds	r7, #8
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	20000028 	.word	0x20000028
 8000224:	2000003c 	.word	0x2000003c
 8000228:	20000040 	.word	0x20000040

0800022c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000232:	f000 fa23 	bl	800067c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000236:	f000 f831 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023a:	f000 f91d 	bl	8000478 <MX_GPIO_Init>
  MX_RTC_Init();
 800023e:	f000 f88d 	bl	800035c <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(uint8_t i = 0;i<3;i++){
 8000242:	2300      	movs	r3, #0
 8000244:	71fb      	strb	r3, [r7, #7]
 8000246:	e00c      	b.n	8000262 <main+0x36>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000248:	2201      	movs	r2, #1
 800024a:	2120      	movs	r1, #32
 800024c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000250:	f000 fd38 	bl	8000cc4 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000258:	f000 fa76 	bl	8000748 <HAL_Delay>
	  for(uint8_t i = 0;i<3;i++){
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	3301      	adds	r3, #1
 8000260:	71fb      	strb	r3, [r7, #7]
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	2b02      	cmp	r3, #2
 8000266:	d9ef      	bls.n	8000248 <main+0x1c>
	  }
	  __HAL_RCC_PWR_CLK_ENABLE();
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <main+0x68>)
 800026a:	69db      	ldr	r3, [r3, #28]
 800026c:	4a09      	ldr	r2, [pc, #36]	; (8000294 <main+0x68>)
 800026e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000272:	61d3      	str	r3, [r2, #28]
 8000274:	4b07      	ldr	r3, [pc, #28]	; (8000294 <main+0x68>)
 8000276:	69db      	ldr	r3, [r3, #28]
 8000278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800027c:	603b      	str	r3, [r7, #0]
 800027e:	683b      	ldr	r3, [r7, #0]
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <main+0x6c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a04      	ldr	r2, [pc, #16]	; (8000298 <main+0x6c>)
 8000286:	f043 0304 	orr.w	r3, r3, #4
 800028a:	6013      	str	r3, [r2, #0]
	  HAL_PWR_EnterSTANDBYMode();
 800028c:	f000 fd42 	bl	8000d14 <HAL_PWR_EnterSTANDBYMode>
	  for(uint8_t i = 0;i<3;i++){
 8000290:	e7d7      	b.n	8000242 <main+0x16>
 8000292:	bf00      	nop
 8000294:	40021000 	.word	0x40021000
 8000298:	40007000 	.word	0x40007000

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b0a6      	sub	sp, #152	; 0x98
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002a6:	2228      	movs	r2, #40	; 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 fd42 	bl	8002d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2258      	movs	r2, #88	; 0x58
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 fd34 	bl	8002d34 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002cc:	f000 fd12 	bl	8000cf4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002d0:	4b21      	ldr	r3, [pc, #132]	; (8000358 <SystemClock_Config+0xbc>)
 80002d2:	6a1b      	ldr	r3, [r3, #32]
 80002d4:	4a20      	ldr	r2, [pc, #128]	; (8000358 <SystemClock_Config+0xbc>)
 80002d6:	f023 0318 	bic.w	r3, r3, #24
 80002da:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80002dc:	2306      	movs	r3, #6
 80002de:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002e0:	2301      	movs	r3, #1
 80002e2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e4:	2301      	movs	r3, #1
 80002e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e8:	2310      	movs	r3, #16
 80002ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ee:	2300      	movs	r3, #0
 80002f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fd23 	bl	8000d44 <HAL_RCC_OscConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000304:	f000 f8f6 	bl	80004f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030c:	2300      	movs	r3, #0
 800030e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f001 fc24 	bl	8001b70 <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800032e:	f000 f8e1 	bl	80004f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000336:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800033c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4618      	mov	r0, r3
 8000342:	f001 fdfb 	bl	8001f3c <HAL_RCCEx_PeriphCLKConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800034c:	f000 f8d2 	bl	80004f4 <Error_Handler>
  }
}
 8000350:	bf00      	nop
 8000352:	3798      	adds	r7, #152	; 0x98
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40021000 	.word	0x40021000

0800035c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b090      	sub	sp, #64	; 0x40
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000362:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000372:	2300      	movs	r3, #0
 8000374:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000376:	463b      	mov	r3, r7
 8000378:	2228      	movs	r2, #40	; 0x28
 800037a:	2100      	movs	r1, #0
 800037c:	4618      	mov	r0, r3
 800037e:	f002 fcd9 	bl	8002d34 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000382:	4b3b      	ldr	r3, [pc, #236]	; (8000470 <MX_RTC_Init+0x114>)
 8000384:	4a3b      	ldr	r2, [pc, #236]	; (8000474 <MX_RTC_Init+0x118>)
 8000386:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000388:	4b39      	ldr	r3, [pc, #228]	; (8000470 <MX_RTC_Init+0x114>)
 800038a:	2200      	movs	r2, #0
 800038c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800038e:	4b38      	ldr	r3, [pc, #224]	; (8000470 <MX_RTC_Init+0x114>)
 8000390:	227f      	movs	r2, #127	; 0x7f
 8000392:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000394:	4b36      	ldr	r3, [pc, #216]	; (8000470 <MX_RTC_Init+0x114>)
 8000396:	22ff      	movs	r2, #255	; 0xff
 8000398:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800039a:	4b35      	ldr	r3, [pc, #212]	; (8000470 <MX_RTC_Init+0x114>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80003a0:	4b33      	ldr	r3, [pc, #204]	; (8000470 <MX_RTC_Init+0x114>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003a6:	4b32      	ldr	r3, [pc, #200]	; (8000470 <MX_RTC_Init+0x114>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003ac:	4830      	ldr	r0, [pc, #192]	; (8000470 <MX_RTC_Init+0x114>)
 80003ae:	f001 ffe3 	bl	8002378 <HAL_RTC_Init>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80003b8:	f000 f89c 	bl	80004f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 8;
 80003bc:	2308      	movs	r3, #8
 80003be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003ce:	2300      	movs	r3, #0
 80003d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003d2:	2300      	movs	r3, #0
 80003d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80003d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003da:	2200      	movs	r2, #0
 80003dc:	4619      	mov	r1, r3
 80003de:	4824      	ldr	r0, [pc, #144]	; (8000470 <MX_RTC_Init+0x114>)
 80003e0:	f002 f85b 	bl	800249a <HAL_RTC_SetTime>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80003ea:	f000 f883 	bl	80004f4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003ee:	2301      	movs	r3, #1
 80003f0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80003f4:	2301      	movs	r3, #1
 80003f6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 80003fa:	2301      	movs	r3, #1
 80003fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 21;
 8000400:	2315      	movs	r3, #21
 8000402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800040a:	2200      	movs	r2, #0
 800040c:	4619      	mov	r1, r3
 800040e:	4818      	ldr	r0, [pc, #96]	; (8000470 <MX_RTC_Init+0x114>)
 8000410:	f002 f95e 	bl	80026d0 <HAL_RTC_SetDate>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800041a:	f000 f86b 	bl	80004f4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 8;
 800041e:	2308      	movs	r3, #8
 8000420:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 10;
 8000426:	230a      	movs	r3, #10
 8000428:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800042a:	2300      	movs	r3, #0
 800042c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800042e:	2300      	movs	r3, #0
 8000430:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000432:	2300      	movs	r3, #0
 8000434:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000436:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800043a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000440:	2300      	movs	r3, #0
 8000442:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000444:	2301      	movs	r3, #1
 8000446:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800044a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800044e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000450:	463b      	mov	r3, r7
 8000452:	2200      	movs	r2, #0
 8000454:	4619      	mov	r1, r3
 8000456:	4806      	ldr	r0, [pc, #24]	; (8000470 <MX_RTC_Init+0x114>)
 8000458:	f002 fa30 	bl	80028bc <HAL_RTC_SetAlarm_IT>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000462:	f000 f847 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000466:	bf00      	nop
 8000468:	3740      	adds	r7, #64	; 0x40
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000068 	.word	0x20000068
 8000474:	40002800 	.word	0x40002800

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	f107 030c 	add.w	r3, r7, #12
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048e:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <MX_GPIO_Init+0x78>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a17      	ldr	r2, [pc, #92]	; (80004f0 <MX_GPIO_Init+0x78>)
 8000494:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000498:	6153      	str	r3, [r2, #20]
 800049a:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <MX_GPIO_Init+0x78>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <MX_GPIO_Init+0x78>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a11      	ldr	r2, [pc, #68]	; (80004f0 <MX_GPIO_Init+0x78>)
 80004ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_GPIO_Init+0x78>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	2120      	movs	r1, #32
 80004c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c6:	f000 fbfd 	bl	8000cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004ca:	2320      	movs	r3, #32
 80004cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	2301      	movs	r3, #1
 80004d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004da:	f107 030c 	add.w	r3, r7, #12
 80004de:	4619      	mov	r1, r3
 80004e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e4:	f000 fa64 	bl	80009b0 <HAL_GPIO_Init>

}
 80004e8:	bf00      	nop
 80004ea:	3720      	adds	r7, #32
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40021000 	.word	0x40021000

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fa:	e7fe      	b.n	80004fa <Error_Handler+0x6>

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <HAL_MspInit+0x44>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_MspInit+0x44>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6193      	str	r3, [r2, #24]
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <HAL_MspInit+0x44>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <HAL_MspInit+0x44>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a08      	ldr	r2, [pc, #32]	; (8000540 <HAL_MspInit+0x44>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000524:	61d3      	str	r3, [r2, #28]
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <HAL_MspInit+0x44>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000

08000544 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a10      	ldr	r2, [pc, #64]	; (8000594 <HAL_RTC_MspInit+0x50>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d119      	bne.n	800058a <HAL_RTC_MspInit+0x46>
 8000556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800055a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	fa93 f3a3 	rbit	r3, r3
 8000562:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000564:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000566:	fab3 f383 	clz	r3, r3
 800056a:	b2db      	uxtb	r3, r3
 800056c:	461a      	mov	r2, r3
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <HAL_RTC_MspInit+0x54>)
 8000570:	4413      	add	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	461a      	mov	r2, r3
 8000576:	2301      	movs	r3, #1
 8000578:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	2029      	movs	r0, #41	; 0x29
 8000580:	f000 f9df 	bl	8000942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000584:	2029      	movs	r0, #41	; 0x29
 8000586:	f000 f9f8 	bl	800097a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40002800 	.word	0x40002800
 8000598:	10908100 	.word	0x10908100

0800059c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <NMI_Handler+0x4>

080005a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <HardFault_Handler+0x4>

080005a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <MemManage_Handler+0x4>

080005ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <BusFault_Handler+0x4>

080005b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <UsageFault_Handler+0x4>

080005ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e8:	f000 f88e 	bl	8000708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <RTC_Alarm_IRQHandler+0x10>)
 80005f6:	f002 fa99 	bl	8002b2c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000068 	.word	0x20000068

08000604 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <SystemInit+0x20>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <SystemInit+0x20>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000660 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <LoopForever+0x6>)
  ldr r1, =_edata
 800062e:	490e      	ldr	r1, [pc, #56]	; (8000668 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000630:	4a0e      	ldr	r2, [pc, #56]	; (800066c <LoopForever+0xe>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000634:	e002      	b.n	800063c <LoopCopyDataInit>

08000636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063a:	3304      	adds	r3, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800063c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000640:	d3f9      	bcc.n	8000636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000642:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000644:	4c0b      	ldr	r4, [pc, #44]	; (8000674 <LoopForever+0x16>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000648:	e001      	b.n	800064e <LoopFillZerobss>

0800064a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800064c:	3204      	adds	r2, #4

0800064e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000650:	d3fb      	bcc.n	800064a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000652:	f7ff ffd7 	bl	8000604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000656:	f002 fb49 	bl	8002cec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800065a:	f7ff fde7 	bl	800022c <main>

0800065e <LoopForever>:

LoopForever:
    b LoopForever
 800065e:	e7fe      	b.n	800065e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000660:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000668:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800066c:	08002d94 	.word	0x08002d94
  ldr r2, =_sbss
 8000670:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000674:	2000008c 	.word	0x2000008c

08000678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000678:	e7fe      	b.n	8000678 <ADC1_2_IRQHandler>
	...

0800067c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <HAL_Init+0x28>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <HAL_Init+0x28>)
 8000686:	f043 0310 	orr.w	r3, r3, #16
 800068a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800068c:	2003      	movs	r0, #3
 800068e:	f000 f94d 	bl	800092c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000692:	2000      	movs	r0, #0
 8000694:	f000 f808 	bl	80006a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000698:	f7ff ff30 	bl	80004fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40022000 	.word	0x40022000

080006a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_InitTick+0x54>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_InitTick+0x58>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f965 	bl	8000996 <HAL_SYSTICK_Config>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
 80006d4:	e00e      	b.n	80006f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b0f      	cmp	r3, #15
 80006da:	d80a      	bhi.n	80006f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006dc:	2200      	movs	r2, #0
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295
 80006e4:	f000 f92d 	bl	8000942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e8:	4a06      	ldr	r2, [pc, #24]	; (8000704 <HAL_InitTick+0x5c>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006ee:	2300      	movs	r3, #0
 80006f0:	e000      	b.n	80006f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000008 	.word	0x20000008
 8000704:	20000004 	.word	0x20000004

08000708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_IncTick+0x20>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	461a      	mov	r2, r3
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <HAL_IncTick+0x24>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4413      	add	r3, r2
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <HAL_IncTick+0x24>)
 800071a:	6013      	str	r3, [r2, #0]
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000008 	.word	0x20000008
 800072c:	20000088 	.word	0x20000088

08000730 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return uwTick;  
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <HAL_GetTick+0x14>)
 8000736:	681b      	ldr	r3, [r3, #0]
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000088 	.word	0x20000088

08000748 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000750:	f7ff ffee 	bl	8000730 <HAL_GetTick>
 8000754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000760:	d005      	beq.n	800076e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_Delay+0x40>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4413      	add	r3, r2
 800076c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800076e:	bf00      	nop
 8000770:	f7ff ffde 	bl	8000730 <HAL_GetTick>
 8000774:	4602      	mov	r2, r0
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	429a      	cmp	r2, r3
 800077e:	d8f7      	bhi.n	8000770 <HAL_Delay+0x28>
  {
  }
}
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000008 	.word	0x20000008

0800078c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a8:	4013      	ands	r3, r2
 80007aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	60d3      	str	r3, [r2, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <__NVIC_GetPriorityGrouping+0x18>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	f003 0307 	and.w	r3, r3, #7
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	db0b      	blt.n	800081a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	f003 021f 	and.w	r2, r3, #31
 8000808:	4907      	ldr	r1, [pc, #28]	; (8000828 <__NVIC_EnableIRQ+0x38>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	095b      	lsrs	r3, r3, #5
 8000810:	2001      	movs	r0, #1
 8000812:	fa00 f202 	lsl.w	r2, r0, r2
 8000816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000e100 	.word	0xe000e100

0800082c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083c:	2b00      	cmp	r3, #0
 800083e:	db0a      	blt.n	8000856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	b2da      	uxtb	r2, r3
 8000844:	490c      	ldr	r1, [pc, #48]	; (8000878 <__NVIC_SetPriority+0x4c>)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	0112      	lsls	r2, r2, #4
 800084c:	b2d2      	uxtb	r2, r2
 800084e:	440b      	add	r3, r1
 8000850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000854:	e00a      	b.n	800086c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4908      	ldr	r1, [pc, #32]	; (800087c <__NVIC_SetPriority+0x50>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	3b04      	subs	r3, #4
 8000864:	0112      	lsls	r2, r2, #4
 8000866:	b2d2      	uxtb	r2, r2
 8000868:	440b      	add	r3, r1
 800086a:	761a      	strb	r2, [r3, #24]
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	e000e100 	.word	0xe000e100
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000880:	b480      	push	{r7}
 8000882:	b089      	sub	sp, #36	; 0x24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	f1c3 0307 	rsb	r3, r3, #7
 800089a:	2b04      	cmp	r3, #4
 800089c:	bf28      	it	cs
 800089e:	2304      	movcs	r3, #4
 80008a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	3304      	adds	r3, #4
 80008a6:	2b06      	cmp	r3, #6
 80008a8:	d902      	bls.n	80008b0 <NVIC_EncodePriority+0x30>
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	3b03      	subs	r3, #3
 80008ae:	e000      	b.n	80008b2 <NVIC_EncodePriority+0x32>
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b4:	f04f 32ff 	mov.w	r2, #4294967295
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43da      	mvns	r2, r3
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	401a      	ands	r2, r3
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c8:	f04f 31ff 	mov.w	r1, #4294967295
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	fa01 f303 	lsl.w	r3, r1, r3
 80008d2:	43d9      	mvns	r1, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d8:	4313      	orrs	r3, r2
         );
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3724      	adds	r7, #36	; 0x24
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008f8:	d301      	bcc.n	80008fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00f      	b.n	800091e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <SysTick_Config+0x40>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3b01      	subs	r3, #1
 8000904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000906:	210f      	movs	r1, #15
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f7ff ff8e 	bl	800082c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <SysTick_Config+0x40>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <SysTick_Config+0x40>)
 8000918:	2207      	movs	r2, #7
 800091a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	e000e010 	.word	0xe000e010

0800092c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ff29 	bl	800078c <__NVIC_SetPriorityGrouping>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000954:	f7ff ff3e 	bl	80007d4 <__NVIC_GetPriorityGrouping>
 8000958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	6978      	ldr	r0, [r7, #20]
 8000960:	f7ff ff8e 	bl	8000880 <NVIC_EncodePriority>
 8000964:	4602      	mov	r2, r0
 8000966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff5d 	bl	800082c <__NVIC_SetPriority>
}
 8000972:	bf00      	nop
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff31 	bl	80007f0 <__NVIC_EnableIRQ>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff ffa2 	bl	80008e8 <SysTick_Config>
 80009a4:	4603      	mov	r3, r0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009be:	e160      	b.n	8000c82 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	2101      	movs	r1, #1
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	fa01 f303 	lsl.w	r3, r1, r3
 80009cc:	4013      	ands	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 8152 	beq.w	8000c7c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d00b      	beq.n	80009f8 <HAL_GPIO_Init+0x48>
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d007      	beq.n	80009f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ec:	2b11      	cmp	r3, #17
 80009ee:	d003      	beq.n	80009f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	2b12      	cmp	r3, #18
 80009f6:	d130      	bne.n	8000a5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	2203      	movs	r2, #3
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	68da      	ldr	r2, [r3, #12]
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a2e:	2201      	movs	r2, #1
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43db      	mvns	r3, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	091b      	lsrs	r3, r3, #4
 8000a44:	f003 0201 	and.w	r2, r3, #1
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	2203      	movs	r2, #3
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	689a      	ldr	r2, [r3, #8]
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_Init+0xea>
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	2b12      	cmp	r3, #18
 8000a98:	d123      	bne.n	8000ae2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	08da      	lsrs	r2, r3, #3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3208      	adds	r2, #8
 8000aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	220f      	movs	r2, #15
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	691a      	ldr	r2, [r3, #16]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	f003 0307 	and.w	r3, r3, #7
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	08da      	lsrs	r2, r3, #3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3208      	adds	r2, #8
 8000adc:	6939      	ldr	r1, [r7, #16]
 8000ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	2203      	movs	r2, #3
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f003 0203 	and.w	r2, r3, #3
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 80ac 	beq.w	8000c7c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b24:	4b5e      	ldr	r3, [pc, #376]	; (8000ca0 <HAL_GPIO_Init+0x2f0>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a5d      	ldr	r2, [pc, #372]	; (8000ca0 <HAL_GPIO_Init+0x2f0>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b5b      	ldr	r3, [pc, #364]	; (8000ca0 <HAL_GPIO_Init+0x2f0>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b3c:	4a59      	ldr	r2, [pc, #356]	; (8000ca4 <HAL_GPIO_Init+0x2f4>)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	089b      	lsrs	r3, r3, #2
 8000b42:	3302      	adds	r3, #2
 8000b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	f003 0303 	and.w	r3, r3, #3
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	220f      	movs	r2, #15
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b66:	d025      	beq.n	8000bb4 <HAL_GPIO_Init+0x204>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a4f      	ldr	r2, [pc, #316]	; (8000ca8 <HAL_GPIO_Init+0x2f8>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d01f      	beq.n	8000bb0 <HAL_GPIO_Init+0x200>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a4e      	ldr	r2, [pc, #312]	; (8000cac <HAL_GPIO_Init+0x2fc>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d019      	beq.n	8000bac <HAL_GPIO_Init+0x1fc>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a4d      	ldr	r2, [pc, #308]	; (8000cb0 <HAL_GPIO_Init+0x300>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d013      	beq.n	8000ba8 <HAL_GPIO_Init+0x1f8>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a4c      	ldr	r2, [pc, #304]	; (8000cb4 <HAL_GPIO_Init+0x304>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d00d      	beq.n	8000ba4 <HAL_GPIO_Init+0x1f4>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a4b      	ldr	r2, [pc, #300]	; (8000cb8 <HAL_GPIO_Init+0x308>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d007      	beq.n	8000ba0 <HAL_GPIO_Init+0x1f0>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a4a      	ldr	r2, [pc, #296]	; (8000cbc <HAL_GPIO_Init+0x30c>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d101      	bne.n	8000b9c <HAL_GPIO_Init+0x1ec>
 8000b98:	2306      	movs	r3, #6
 8000b9a:	e00c      	b.n	8000bb6 <HAL_GPIO_Init+0x206>
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	e00a      	b.n	8000bb6 <HAL_GPIO_Init+0x206>
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	e008      	b.n	8000bb6 <HAL_GPIO_Init+0x206>
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e006      	b.n	8000bb6 <HAL_GPIO_Init+0x206>
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e004      	b.n	8000bb6 <HAL_GPIO_Init+0x206>
 8000bac:	2302      	movs	r3, #2
 8000bae:	e002      	b.n	8000bb6 <HAL_GPIO_Init+0x206>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e000      	b.n	8000bb6 <HAL_GPIO_Init+0x206>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	f002 0203 	and.w	r2, r2, #3
 8000bbc:	0092      	lsls	r2, r2, #2
 8000bbe:	4093      	lsls	r3, r2
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bc6:	4937      	ldr	r1, [pc, #220]	; (8000ca4 <HAL_GPIO_Init+0x2f4>)
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	089b      	lsrs	r3, r3, #2
 8000bcc:	3302      	adds	r3, #2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bd4:	4b3a      	ldr	r3, [pc, #232]	; (8000cc0 <HAL_GPIO_Init+0x310>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bf8:	4a31      	ldr	r2, [pc, #196]	; (8000cc0 <HAL_GPIO_Init+0x310>)
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bfe:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <HAL_GPIO_Init+0x310>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c22:	4a27      	ldr	r2, [pc, #156]	; (8000cc0 <HAL_GPIO_Init+0x310>)
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c28:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <HAL_GPIO_Init+0x310>)
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	43db      	mvns	r3, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d003      	beq.n	8000c4c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c4c:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <HAL_GPIO_Init+0x310>)
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HAL_GPIO_Init+0x310>)
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <HAL_GPIO_Init+0x310>)
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	fa22 f303 	lsr.w	r3, r2, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f47f ae97 	bne.w	80009c0 <HAL_GPIO_Init+0x10>
  }
}
 8000c92:	bf00      	nop
 8000c94:	371c      	adds	r7, #28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010000 	.word	0x40010000
 8000ca8:	48000400 	.word	0x48000400
 8000cac:	48000800 	.word	0x48000800
 8000cb0:	48000c00 	.word	0x48000c00
 8000cb4:	48001000 	.word	0x48001000
 8000cb8:	48001400 	.word	0x48001400
 8000cbc:	48001800 	.word	0x48001800
 8000cc0:	40010400 	.word	0x40010400

08000cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	807b      	strh	r3, [r7, #2]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cd4:	787b      	ldrb	r3, [r7, #1]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cda:	887a      	ldrh	r2, [r7, #2]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ce0:	e002      	b.n	8000ce8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ce2:	887a      	ldrh	r2, [r7, #2]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40007000 	.word	0x40007000

08000d14 <HAL_PWR_EnterSTANDBYMode>:
  *            Alarm out, or RTC clock calibration out, 
  *          - WKUP pins if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8000d30:	bf30      	wfi
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	40007000 	.word	0x40007000
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	f000 bf01 	b.w	8001b60 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f000 8160 	beq.w	800102e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d6e:	4bae      	ldr	r3, [pc, #696]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 030c 	and.w	r3, r3, #12
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	d00c      	beq.n	8000d94 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d7a:	4bab      	ldr	r3, [pc, #684]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 030c 	and.w	r3, r3, #12
 8000d82:	2b08      	cmp	r3, #8
 8000d84:	d159      	bne.n	8000e3a <HAL_RCC_OscConfig+0xf6>
 8000d86:	4ba8      	ldr	r3, [pc, #672]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d92:	d152      	bne.n	8000e3a <HAL_RCC_OscConfig+0xf6>
 8000d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d98:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000da0:	fa93 f3a3 	rbit	r3, r3
 8000da4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8000da8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dac:	fab3 f383 	clz	r3, r3
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d102      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x82>
 8000dc0:	4b99      	ldr	r3, [pc, #612]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	e015      	b.n	8000df2 <HAL_RCC_OscConfig+0xae>
 8000dc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000dd2:	fa93 f3a3 	rbit	r3, r3
 8000dd6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000dda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dde:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000de2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000de6:	fa93 f3a3 	rbit	r3, r3
 8000dea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000dee:	4b8e      	ldr	r3, [pc, #568]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000df6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000dfa:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000dfe:	fa92 f2a2 	rbit	r2, r2
 8000e02:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000e06:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e0a:	fab2 f282 	clz	r2, r2
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	f042 0220 	orr.w	r2, r2, #32
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	f002 021f 	and.w	r2, r2, #31
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e20:	4013      	ands	r3, r2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f000 8102 	beq.w	800102c <HAL_RCC_OscConfig+0x2e8>
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 80fc 	bne.w	800102c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	f000 be93 	b.w	8001b60 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e44:	d106      	bne.n	8000e54 <HAL_RCC_OscConfig+0x110>
 8000e46:	4b78      	ldr	r3, [pc, #480]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a77      	ldr	r2, [pc, #476]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e030      	b.n	8000eb6 <HAL_RCC_OscConfig+0x172>
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10c      	bne.n	8000e78 <HAL_RCC_OscConfig+0x134>
 8000e5e:	4b72      	ldr	r3, [pc, #456]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a71      	ldr	r2, [pc, #452]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	4b6f      	ldr	r3, [pc, #444]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a6e      	ldr	r2, [pc, #440]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e01e      	b.n	8000eb6 <HAL_RCC_OscConfig+0x172>
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e82:	d10c      	bne.n	8000e9e <HAL_RCC_OscConfig+0x15a>
 8000e84:	4b68      	ldr	r3, [pc, #416]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a67      	ldr	r2, [pc, #412]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000e8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	4b65      	ldr	r3, [pc, #404]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a64      	ldr	r2, [pc, #400]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	e00b      	b.n	8000eb6 <HAL_RCC_OscConfig+0x172>
 8000e9e:	4b62      	ldr	r3, [pc, #392]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a61      	ldr	r2, [pc, #388]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	4b5f      	ldr	r3, [pc, #380]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a5e      	ldr	r2, [pc, #376]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000eb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d059      	beq.n	8000f74 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fc36 	bl	8000730 <HAL_GetTick>
 8000ec4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec8:	e00a      	b.n	8000ee0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eca:	f7ff fc31 	bl	8000730 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b64      	cmp	r3, #100	; 0x64
 8000ed8:	d902      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	f000 be40 	b.w	8001b60 <HAL_RCC_OscConfig+0xe1c>
 8000ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000eec:	fa93 f3a3 	rbit	r3, r3
 8000ef0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000ef4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef8:	fab3 f383 	clz	r3, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	095b      	lsrs	r3, r3, #5
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d102      	bne.n	8000f12 <HAL_RCC_OscConfig+0x1ce>
 8000f0c:	4b46      	ldr	r3, [pc, #280]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	e015      	b.n	8000f3e <HAL_RCC_OscConfig+0x1fa>
 8000f12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f1e:	fa93 f3a3 	rbit	r3, r3
 8000f22:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f2e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f3a:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f42:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000f46:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000f4a:	fa92 f2a2 	rbit	r2, r2
 8000f4e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000f52:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f56:	fab2 f282 	clz	r2, r2
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	f042 0220 	orr.w	r2, r2, #32
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	f002 021f 	and.w	r2, r2, #31
 8000f66:	2101      	movs	r1, #1
 8000f68:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0ab      	beq.n	8000eca <HAL_RCC_OscConfig+0x186>
 8000f72:	e05c      	b.n	800102e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fbdc 	bl	8000730 <HAL_GetTick>
 8000f78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7c:	e00a      	b.n	8000f94 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7e:	f7ff fbd7 	bl	8000730 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b64      	cmp	r3, #100	; 0x64
 8000f8c:	d902      	bls.n	8000f94 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	f000 bde6 	b.w	8001b60 <HAL_RCC_OscConfig+0xe1c>
 8000f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f98:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000fa0:	fa93 f3a3 	rbit	r3, r3
 8000fa4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000fa8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fac:	fab3 f383 	clz	r3, r3
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d102      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x282>
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	e015      	b.n	8000ff2 <HAL_RCC_OscConfig+0x2ae>
 8000fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000fd2:	fa93 f3a3 	rbit	r3, r3
 8000fd6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fde:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fe2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000fe6:	fa93 f3a3 	rbit	r3, r3
 8000fea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_RCC_OscConfig+0x2e4>)
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ff6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000ffa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000ffe:	fa92 f2a2 	rbit	r2, r2
 8001002:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001006:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800100a:	fab2 f282 	clz	r2, r2
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	f042 0220 	orr.w	r2, r2, #32
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	f002 021f 	and.w	r2, r2, #31
 800101a:	2101      	movs	r1, #1
 800101c:	fa01 f202 	lsl.w	r2, r1, r2
 8001020:	4013      	ands	r3, r2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1ab      	bne.n	8000f7e <HAL_RCC_OscConfig+0x23a>
 8001026:	e002      	b.n	800102e <HAL_RCC_OscConfig+0x2ea>
 8001028:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 8170 	beq.w	800131e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800103e:	4bd0      	ldr	r3, [pc, #832]	; (8001380 <HAL_RCC_OscConfig+0x63c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00c      	beq.n	8001064 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800104a:	4bcd      	ldr	r3, [pc, #820]	; (8001380 <HAL_RCC_OscConfig+0x63c>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	2b08      	cmp	r3, #8
 8001054:	d16d      	bne.n	8001132 <HAL_RCC_OscConfig+0x3ee>
 8001056:	4bca      	ldr	r3, [pc, #808]	; (8001380 <HAL_RCC_OscConfig+0x63c>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800105e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001062:	d166      	bne.n	8001132 <HAL_RCC_OscConfig+0x3ee>
 8001064:	2302      	movs	r3, #2
 8001066:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001076:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107a:	fab3 f383 	clz	r3, r3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	095b      	lsrs	r3, r3, #5
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d102      	bne.n	8001094 <HAL_RCC_OscConfig+0x350>
 800108e:	4bbc      	ldr	r3, [pc, #752]	; (8001380 <HAL_RCC_OscConfig+0x63c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	e013      	b.n	80010bc <HAL_RCC_OscConfig+0x378>
 8001094:	2302      	movs	r3, #2
 8001096:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800109e:	fa93 f3a3 	rbit	r3, r3
 80010a2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80010a6:	2302      	movs	r3, #2
 80010a8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010ac:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80010b0:	fa93 f3a3 	rbit	r3, r3
 80010b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010b8:	4bb1      	ldr	r3, [pc, #708]	; (8001380 <HAL_RCC_OscConfig+0x63c>)
 80010ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010bc:	2202      	movs	r2, #2
 80010be:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80010c2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80010c6:	fa92 f2a2 	rbit	r2, r2
 80010ca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80010ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010d2:	fab2 f282 	clz	r2, r2
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	f042 0220 	orr.w	r2, r2, #32
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	f002 021f 	and.w	r2, r2, #31
 80010e2:	2101      	movs	r1, #1
 80010e4:	fa01 f202 	lsl.w	r2, r1, r2
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d007      	beq.n	80010fe <HAL_RCC_OscConfig+0x3ba>
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d002      	beq.n	80010fe <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f000 bd31 	b.w	8001b60 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fe:	4ba0      	ldr	r3, [pc, #640]	; (8001380 <HAL_RCC_OscConfig+0x63c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	21f8      	movs	r1, #248	; 0xf8
 800110e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001112:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001116:	fa91 f1a1 	rbit	r1, r1
 800111a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800111e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001122:	fab1 f181 	clz	r1, r1
 8001126:	b2c9      	uxtb	r1, r1
 8001128:	408b      	lsls	r3, r1
 800112a:	4995      	ldr	r1, [pc, #596]	; (8001380 <HAL_RCC_OscConfig+0x63c>)
 800112c:	4313      	orrs	r3, r2
 800112e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001130:	e0f5      	b.n	800131e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 8085 	beq.w	8001248 <HAL_RCC_OscConfig+0x504>
 800113e:	2301      	movs	r3, #1
 8001140:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001144:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001148:	fa93 f3a3 	rbit	r3, r3
 800114c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001150:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001154:	fab3 f383 	clz	r3, r3
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800115e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	461a      	mov	r2, r3
 8001166:	2301      	movs	r3, #1
 8001168:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116a:	f7ff fae1 	bl	8000730 <HAL_GetTick>
 800116e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001172:	e00a      	b.n	800118a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001174:	f7ff fadc 	bl	8000730 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d902      	bls.n	800118a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	f000 bceb 	b.w	8001b60 <HAL_RCC_OscConfig+0xe1c>
 800118a:	2302      	movs	r3, #2
 800118c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001190:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001194:	fa93 f3a3 	rbit	r3, r3
 8001198:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800119c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a0:	fab3 f383 	clz	r3, r3
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d102      	bne.n	80011ba <HAL_RCC_OscConfig+0x476>
 80011b4:	4b72      	ldr	r3, [pc, #456]	; (8001380 <HAL_RCC_OscConfig+0x63c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	e013      	b.n	80011e2 <HAL_RCC_OscConfig+0x49e>
 80011ba:	2302      	movs	r3, #2
 80011bc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80011c4:	fa93 f3a3 	rbit	r3, r3
 80011c8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80011cc:	2302      	movs	r3, #2
 80011ce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011d2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80011d6:	fa93 f3a3 	rbit	r3, r3
 80011da:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011de:	4b68      	ldr	r3, [pc, #416]	; (8001380 <HAL_RCC_OscConfig+0x63c>)
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e2:	2202      	movs	r2, #2
 80011e4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80011e8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80011ec:	fa92 f2a2 	rbit	r2, r2
 80011f0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80011f4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011f8:	fab2 f282 	clz	r2, r2
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	f042 0220 	orr.w	r2, r2, #32
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	f002 021f 	and.w	r2, r2, #31
 8001208:	2101      	movs	r1, #1
 800120a:	fa01 f202 	lsl.w	r2, r1, r2
 800120e:	4013      	ands	r3, r2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0af      	beq.n	8001174 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001214:	4b5a      	ldr	r3, [pc, #360]	; (8001380 <HAL_RCC_OscConfig+0x63c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	21f8      	movs	r1, #248	; 0xf8
 8001224:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001228:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800122c:	fa91 f1a1 	rbit	r1, r1
 8001230:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001234:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001238:	fab1 f181 	clz	r1, r1
 800123c:	b2c9      	uxtb	r1, r1
 800123e:	408b      	lsls	r3, r1
 8001240:	494f      	ldr	r1, [pc, #316]	; (8001380 <HAL_RCC_OscConfig+0x63c>)
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]
 8001246:	e06a      	b.n	800131e <HAL_RCC_OscConfig+0x5da>
 8001248:	2301      	movs	r3, #1
 800124a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001252:	fa93 f3a3 	rbit	r3, r3
 8001256:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800125a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125e:	fab3 f383 	clz	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001268:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	461a      	mov	r2, r3
 8001270:	2300      	movs	r3, #0
 8001272:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fa5c 	bl	8000730 <HAL_GetTick>
 8001278:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127c:	e00a      	b.n	8001294 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127e:	f7ff fa57 	bl	8000730 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d902      	bls.n	8001294 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	f000 bc66 	b.w	8001b60 <HAL_RCC_OscConfig+0xe1c>
 8001294:	2302      	movs	r3, #2
 8001296:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80012a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012aa:	fab3 f383 	clz	r3, r3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	095b      	lsrs	r3, r3, #5
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d102      	bne.n	80012c4 <HAL_RCC_OscConfig+0x580>
 80012be:	4b30      	ldr	r3, [pc, #192]	; (8001380 <HAL_RCC_OscConfig+0x63c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	e013      	b.n	80012ec <HAL_RCC_OscConfig+0x5a8>
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012ce:	fa93 f3a3 	rbit	r3, r3
 80012d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80012d6:	2302      	movs	r3, #2
 80012d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012e8:	4b25      	ldr	r3, [pc, #148]	; (8001380 <HAL_RCC_OscConfig+0x63c>)
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	2202      	movs	r2, #2
 80012ee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80012f2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012f6:	fa92 f2a2 	rbit	r2, r2
 80012fa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80012fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001302:	fab2 f282 	clz	r2, r2
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	f042 0220 	orr.w	r2, r2, #32
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	f002 021f 	and.w	r2, r2, #31
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1af      	bne.n	800127e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80da 	beq.w	80014e2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d069      	beq.n	800140c <HAL_RCC_OscConfig+0x6c8>
 8001338:	2301      	movs	r3, #1
 800133a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800134a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134e:	fab3 f383 	clz	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_RCC_OscConfig+0x640>)
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	461a      	mov	r2, r3
 800135e:	2301      	movs	r3, #1
 8001360:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001362:	f7ff f9e5 	bl	8000730 <HAL_GetTick>
 8001366:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136a:	e00d      	b.n	8001388 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800136c:	f7ff f9e0 	bl	8000730 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d905      	bls.n	8001388 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e3ef      	b.n	8001b60 <HAL_RCC_OscConfig+0xe1c>
 8001380:	40021000 	.word	0x40021000
 8001384:	10908120 	.word	0x10908120
 8001388:	2302      	movs	r3, #2
 800138a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001392:	fa93 f2a3 	rbit	r2, r3
 8001396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80013a0:	2202      	movs	r2, #2
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	fa93 f2a3 	rbit	r2, r3
 80013ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013b8:	2202      	movs	r2, #2
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	fa93 f2a3 	rbit	r2, r3
 80013c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80013ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013cc:	4ba4      	ldr	r3, [pc, #656]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 80013ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013d4:	2102      	movs	r1, #2
 80013d6:	6019      	str	r1, [r3, #0]
 80013d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	fa93 f1a3 	rbit	r1, r3
 80013e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013e6:	6019      	str	r1, [r3, #0]
  return result;
 80013e8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	fab3 f383 	clz	r3, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	f003 031f 	and.w	r3, r3, #31
 80013fe:	2101      	movs	r1, #1
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	4013      	ands	r3, r2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0b0      	beq.n	800136c <HAL_RCC_OscConfig+0x628>
 800140a:	e06a      	b.n	80014e2 <HAL_RCC_OscConfig+0x79e>
 800140c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001414:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	fa93 f2a3 	rbit	r2, r3
 800141e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001422:	601a      	str	r2, [r3, #0]
  return result;
 8001424:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001428:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142a:	fab3 f383 	clz	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	4b8c      	ldr	r3, [pc, #560]	; (8001664 <HAL_RCC_OscConfig+0x920>)
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	461a      	mov	r2, r3
 800143a:	2300      	movs	r3, #0
 800143c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143e:	f7ff f977 	bl	8000730 <HAL_GetTick>
 8001442:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001446:	e009      	b.n	800145c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001448:	f7ff f972 	bl	8000730 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e381      	b.n	8001b60 <HAL_RCC_OscConfig+0xe1c>
 800145c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001460:	2202      	movs	r2, #2
 8001462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001464:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	fa93 f2a3 	rbit	r2, r3
 800146e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001478:	2202      	movs	r2, #2
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	fa93 f2a3 	rbit	r2, r3
 8001486:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001490:	2202      	movs	r2, #2
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	fa93 f2a3 	rbit	r2, r3
 800149e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80014a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a4:	4b6e      	ldr	r3, [pc, #440]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 80014a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014ac:	2102      	movs	r1, #2
 80014ae:	6019      	str	r1, [r3, #0]
 80014b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	fa93 f1a3 	rbit	r1, r3
 80014ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014be:	6019      	str	r1, [r3, #0]
  return result;
 80014c0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	fab3 f383 	clz	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	f003 031f 	and.w	r3, r3, #31
 80014d6:	2101      	movs	r1, #1
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1b2      	bne.n	8001448 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 8157 	beq.w	80017a0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f8:	4b59      	ldr	r3, [pc, #356]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d112      	bne.n	800152a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001504:	4b56      	ldr	r3, [pc, #344]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	4a55      	ldr	r2, [pc, #340]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 800150a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150e:	61d3      	str	r3, [r2, #28]
 8001510:	4b53      	ldr	r3, [pc, #332]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001524:	2301      	movs	r3, #1
 8001526:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152a:	4b4f      	ldr	r3, [pc, #316]	; (8001668 <HAL_RCC_OscConfig+0x924>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d11a      	bne.n	800156c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001536:	4b4c      	ldr	r3, [pc, #304]	; (8001668 <HAL_RCC_OscConfig+0x924>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a4b      	ldr	r2, [pc, #300]	; (8001668 <HAL_RCC_OscConfig+0x924>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001540:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001542:	f7ff f8f5 	bl	8000730 <HAL_GetTick>
 8001546:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154a:	e009      	b.n	8001560 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154c:	f7ff f8f0 	bl	8000730 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b64      	cmp	r3, #100	; 0x64
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e2ff      	b.n	8001b60 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	4b41      	ldr	r3, [pc, #260]	; (8001668 <HAL_RCC_OscConfig+0x924>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0ef      	beq.n	800154c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d106      	bne.n	8001584 <HAL_RCC_OscConfig+0x840>
 8001576:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a39      	ldr	r2, [pc, #228]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6213      	str	r3, [r2, #32]
 8001582:	e02f      	b.n	80015e4 <HAL_RCC_OscConfig+0x8a0>
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x864>
 800158e:	4b34      	ldr	r3, [pc, #208]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	4a33      	ldr	r2, [pc, #204]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	6213      	str	r3, [r2, #32]
 800159a:	4b31      	ldr	r3, [pc, #196]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4a30      	ldr	r2, [pc, #192]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 80015a0:	f023 0304 	bic.w	r3, r3, #4
 80015a4:	6213      	str	r3, [r2, #32]
 80015a6:	e01d      	b.n	80015e4 <HAL_RCC_OscConfig+0x8a0>
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b05      	cmp	r3, #5
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x888>
 80015b2:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a2a      	ldr	r2, [pc, #168]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6213      	str	r3, [r2, #32]
 80015be:	4b28      	ldr	r3, [pc, #160]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a27      	ldr	r2, [pc, #156]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6213      	str	r3, [r2, #32]
 80015ca:	e00b      	b.n	80015e4 <HAL_RCC_OscConfig+0x8a0>
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4a23      	ldr	r2, [pc, #140]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	6213      	str	r3, [r2, #32]
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4a20      	ldr	r2, [pc, #128]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 80015de:	f023 0304 	bic.w	r3, r3, #4
 80015e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d06a      	beq.n	80016c4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ee:	f7ff f89f 	bl	8000730 <HAL_GetTick>
 80015f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f6:	e00b      	b.n	8001610 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff f89a 	bl	8000730 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	; 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e2a7      	b.n	8001b60 <HAL_RCC_OscConfig+0xe1c>
 8001610:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001614:	2202      	movs	r2, #2
 8001616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001618:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	fa93 f2a3 	rbit	r2, r3
 8001622:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800162c:	2202      	movs	r2, #2
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	fa93 f2a3 	rbit	r2, r3
 800163a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800163e:	601a      	str	r2, [r3, #0]
  return result;
 8001640:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001644:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001646:	fab3 f383 	clz	r3, r3
 800164a:	b2db      	uxtb	r3, r3
 800164c:	095b      	lsrs	r3, r3, #5
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d108      	bne.n	800166c <HAL_RCC_OscConfig+0x928>
 800165a:	4b01      	ldr	r3, [pc, #4]	; (8001660 <HAL_RCC_OscConfig+0x91c>)
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	e013      	b.n	8001688 <HAL_RCC_OscConfig+0x944>
 8001660:	40021000 	.word	0x40021000
 8001664:	10908120 	.word	0x10908120
 8001668:	40007000 	.word	0x40007000
 800166c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001670:	2202      	movs	r2, #2
 8001672:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001674:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	fa93 f2a3 	rbit	r2, r3
 800167e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	4bc0      	ldr	r3, [pc, #768]	; (8001988 <HAL_RCC_OscConfig+0xc44>)
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800168c:	2102      	movs	r1, #2
 800168e:	6011      	str	r1, [r2, #0]
 8001690:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	fa92 f1a2 	rbit	r1, r2
 800169a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800169e:	6011      	str	r1, [r2, #0]
  return result;
 80016a0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	fab2 f282 	clz	r2, r2
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	f002 021f 	and.w	r2, r2, #31
 80016b6:	2101      	movs	r1, #1
 80016b8:	fa01 f202 	lsl.w	r2, r1, r2
 80016bc:	4013      	ands	r3, r2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d09a      	beq.n	80015f8 <HAL_RCC_OscConfig+0x8b4>
 80016c2:	e063      	b.n	800178c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c4:	f7ff f834 	bl	8000730 <HAL_GetTick>
 80016c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016cc:	e00b      	b.n	80016e6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff f82f 	bl	8000730 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e23c      	b.n	8001b60 <HAL_RCC_OscConfig+0xe1c>
 80016e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016ea:	2202      	movs	r2, #2
 80016ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	fa93 f2a3 	rbit	r2, r3
 80016f8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001702:	2202      	movs	r2, #2
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	fa93 f2a3 	rbit	r2, r3
 8001710:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001714:	601a      	str	r2, [r3, #0]
  return result;
 8001716:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800171a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171c:	fab3 f383 	clz	r3, r3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	b2db      	uxtb	r3, r3
 8001726:	f043 0302 	orr.w	r3, r3, #2
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d102      	bne.n	8001736 <HAL_RCC_OscConfig+0x9f2>
 8001730:	4b95      	ldr	r3, [pc, #596]	; (8001988 <HAL_RCC_OscConfig+0xc44>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	e00d      	b.n	8001752 <HAL_RCC_OscConfig+0xa0e>
 8001736:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800173a:	2202      	movs	r2, #2
 800173c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	fa93 f2a3 	rbit	r2, r3
 8001748:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	4b8e      	ldr	r3, [pc, #568]	; (8001988 <HAL_RCC_OscConfig+0xc44>)
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001756:	2102      	movs	r1, #2
 8001758:	6011      	str	r1, [r2, #0]
 800175a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	fa92 f1a2 	rbit	r1, r2
 8001764:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001768:	6011      	str	r1, [r2, #0]
  return result;
 800176a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	fab2 f282 	clz	r2, r2
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	f002 021f 	and.w	r2, r2, #31
 8001780:	2101      	movs	r1, #1
 8001782:	fa01 f202 	lsl.w	r2, r1, r2
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1a0      	bne.n	80016ce <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800178c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001794:	4b7c      	ldr	r3, [pc, #496]	; (8001988 <HAL_RCC_OscConfig+0xc44>)
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	4a7b      	ldr	r2, [pc, #492]	; (8001988 <HAL_RCC_OscConfig+0xc44>)
 800179a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 81d9 	beq.w	8001b5e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ac:	4b76      	ldr	r3, [pc, #472]	; (8001988 <HAL_RCC_OscConfig+0xc44>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	f000 81a6 	beq.w	8001b06 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	f040 811e 	bne.w	8001a02 <HAL_RCC_OscConfig+0xcbe>
 80017c6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	fa93 f2a3 	rbit	r2, r3
 80017da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017de:	601a      	str	r2, [r3, #0]
  return result;
 80017e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017e4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	fab3 f383 	clz	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	461a      	mov	r2, r3
 80017f8:	2300      	movs	r3, #0
 80017fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7fe ff98 	bl	8000730 <HAL_GetTick>
 8001800:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001804:	e009      	b.n	800181a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001806:	f7fe ff93 	bl	8000730 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e1a2      	b.n	8001b60 <HAL_RCC_OscConfig+0xe1c>
 800181a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800181e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	fa93 f2a3 	rbit	r2, r3
 800182e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001832:	601a      	str	r2, [r3, #0]
  return result;
 8001834:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001838:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	095b      	lsrs	r3, r3, #5
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b01      	cmp	r3, #1
 800184c:	d102      	bne.n	8001854 <HAL_RCC_OscConfig+0xb10>
 800184e:	4b4e      	ldr	r3, [pc, #312]	; (8001988 <HAL_RCC_OscConfig+0xc44>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	e01b      	b.n	800188c <HAL_RCC_OscConfig+0xb48>
 8001854:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001858:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800185c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	fa93 f2a3 	rbit	r2, r3
 8001868:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001872:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	fa93 f2a3 	rbit	r2, r3
 8001882:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	4b3f      	ldr	r3, [pc, #252]	; (8001988 <HAL_RCC_OscConfig+0xc44>)
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001890:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001894:	6011      	str	r1, [r2, #0]
 8001896:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	fa92 f1a2 	rbit	r1, r2
 80018a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018a4:	6011      	str	r1, [r2, #0]
  return result;
 80018a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	fab2 f282 	clz	r2, r2
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	f042 0220 	orr.w	r2, r2, #32
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	f002 021f 	and.w	r2, r2, #31
 80018bc:	2101      	movs	r1, #1
 80018be:	fa01 f202 	lsl.w	r2, r1, r2
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d19e      	bne.n	8001806 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c8:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <HAL_RCC_OscConfig+0xc44>)
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	f023 020f 	bic.w	r2, r3, #15
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	492c      	ldr	r1, [pc, #176]	; (8001988 <HAL_RCC_OscConfig+0xc44>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	62cb      	str	r3, [r1, #44]	; 0x2c
 80018dc:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <HAL_RCC_OscConfig+0xc44>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6a19      	ldr	r1, [r3, #32]
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	430b      	orrs	r3, r1
 80018f2:	4925      	ldr	r1, [pc, #148]	; (8001988 <HAL_RCC_OscConfig+0xc44>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
 80018f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001902:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	fa93 f2a3 	rbit	r2, r3
 800190c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001910:	601a      	str	r2, [r3, #0]
  return result;
 8001912:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001916:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001918:	fab3 f383 	clz	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001922:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	461a      	mov	r2, r3
 800192a:	2301      	movs	r3, #1
 800192c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192e:	f7fe feff 	bl	8000730 <HAL_GetTick>
 8001932:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001936:	e009      	b.n	800194c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001938:	f7fe fefa 	bl	8000730 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e109      	b.n	8001b60 <HAL_RCC_OscConfig+0xe1c>
 800194c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001950:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	fa93 f2a3 	rbit	r2, r3
 8001960:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001964:	601a      	str	r2, [r3, #0]
  return result;
 8001966:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800196a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_RCC_OscConfig+0xc48>
 8001980:	4b01      	ldr	r3, [pc, #4]	; (8001988 <HAL_RCC_OscConfig+0xc44>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	e01e      	b.n	80019c4 <HAL_RCC_OscConfig+0xc80>
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001990:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fa93 f2a3 	rbit	r2, r3
 80019a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	fa93 f2a3 	rbit	r2, r3
 80019ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	4b6a      	ldr	r3, [pc, #424]	; (8001b6c <HAL_RCC_OscConfig+0xe28>)
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80019c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019cc:	6011      	str	r1, [r2, #0]
 80019ce:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	fa92 f1a2 	rbit	r1, r2
 80019d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019dc:	6011      	str	r1, [r2, #0]
  return result;
 80019de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	fab2 f282 	clz	r2, r2
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	f042 0220 	orr.w	r2, r2, #32
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	f002 021f 	and.w	r2, r2, #31
 80019f4:	2101      	movs	r1, #1
 80019f6:	fa01 f202 	lsl.w	r2, r1, r2
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d09b      	beq.n	8001938 <HAL_RCC_OscConfig+0xbf4>
 8001a00:	e0ad      	b.n	8001b5e <HAL_RCC_OscConfig+0xe1a>
 8001a02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	fa93 f2a3 	rbit	r2, r3
 8001a16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a1a:	601a      	str	r2, [r3, #0]
  return result;
 8001a1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a20:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	461a      	mov	r2, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7fe fe7a 	bl	8000730 <HAL_GetTick>
 8001a3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a40:	e009      	b.n	8001a56 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a42:	f7fe fe75 	bl	8000730 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e084      	b.n	8001b60 <HAL_RCC_OscConfig+0xe1c>
 8001a56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f2a3 	rbit	r2, r3
 8001a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a6e:	601a      	str	r2, [r3, #0]
  return result;
 8001a70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a76:	fab3 f383 	clz	r3, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	095b      	lsrs	r3, r3, #5
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d102      	bne.n	8001a90 <HAL_RCC_OscConfig+0xd4c>
 8001a8a:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <HAL_RCC_OscConfig+0xe28>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	e01b      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd84>
 8001a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	fa93 f2a3 	rbit	r2, r3
 8001aa4:	f107 0320 	add.w	r3, r7, #32
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f107 031c 	add.w	r3, r7, #28
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	fa93 f2a3 	rbit	r2, r3
 8001abe:	f107 0318 	add.w	r3, r7, #24
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <HAL_RCC_OscConfig+0xe28>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	f107 0214 	add.w	r2, r7, #20
 8001acc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ad0:	6011      	str	r1, [r2, #0]
 8001ad2:	f107 0214 	add.w	r2, r7, #20
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	fa92 f1a2 	rbit	r1, r2
 8001adc:	f107 0210 	add.w	r2, r7, #16
 8001ae0:	6011      	str	r1, [r2, #0]
  return result;
 8001ae2:	f107 0210 	add.w	r2, r7, #16
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	fab2 f282 	clz	r2, r2
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	f042 0220 	orr.w	r2, r2, #32
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	f002 021f 	and.w	r2, r2, #31
 8001af8:	2101      	movs	r1, #1
 8001afa:	fa01 f202 	lsl.w	r2, r1, r2
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d19e      	bne.n	8001a42 <HAL_RCC_OscConfig+0xcfe>
 8001b04:	e02b      	b.n	8001b5e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e025      	b.n	8001b60 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_RCC_OscConfig+0xe28>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_RCC_OscConfig+0xe28>)
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b28:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d111      	bne.n	8001b5a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d108      	bne.n	8001b5a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001b48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b4c:	f003 020f 	and.w	r2, r3, #15
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000

08001b70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b09e      	sub	sp, #120	; 0x78
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e162      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b88:	4b90      	ldr	r3, [pc, #576]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d910      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b8d      	ldr	r3, [pc, #564]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 0207 	bic.w	r2, r3, #7
 8001b9e:	498b      	ldr	r1, [pc, #556]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b89      	ldr	r3, [pc, #548]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e14a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b82      	ldr	r3, [pc, #520]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	497f      	ldr	r1, [pc, #508]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80dc 	beq.w	8001d9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d13c      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xf6>
 8001bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d102      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xa6>
 8001c10:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	e00f      	b.n	8001c36 <HAL_RCC_ClockConfig+0xc6>
 8001c16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	667b      	str	r3, [r7, #100]	; 0x64
 8001c24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c28:	663b      	str	r3, [r7, #96]	; 0x60
 8001c2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c32:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c3e:	fa92 f2a2 	rbit	r2, r2
 8001c42:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c46:	fab2 f282 	clz	r2, r2
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	f042 0220 	orr.w	r2, r2, #32
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	f002 021f 	and.w	r2, r2, #31
 8001c56:	2101      	movs	r1, #1
 8001c58:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d17b      	bne.n	8001d5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0f3      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d13c      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x178>
 8001c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	095b      	lsrs	r3, r3, #5
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d102      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x128>
 8001c92:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	e00f      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x148>
 8001c98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001caa:	643b      	str	r3, [r7, #64]	; 0x40
 8001cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cb4:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cbc:	63ba      	str	r2, [r7, #56]	; 0x38
 8001cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cc0:	fa92 f2a2 	rbit	r2, r2
 8001cc4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cc8:	fab2 f282 	clz	r2, r2
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	f042 0220 	orr.w	r2, r2, #32
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	f002 021f 	and.w	r2, r2, #31
 8001cd8:	2101      	movs	r1, #1
 8001cda:	fa01 f202 	lsl.w	r2, r1, r2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d13a      	bne.n	8001d5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0b2      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d102      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x1a0>
 8001d0a:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	e00d      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1bc>
 8001d10:	2302      	movs	r3, #2
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	623b      	str	r3, [r7, #32]
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	61ba      	str	r2, [r7, #24]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	fa92 f2a2 	rbit	r2, r2
 8001d36:	617a      	str	r2, [r7, #20]
  return result;
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	fab2 f282 	clz	r2, r2
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	f042 0220 	orr.w	r2, r2, #32
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f002 021f 	and.w	r2, r2, #31
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e079      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f023 0203 	bic.w	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	491a      	ldr	r1, [pc, #104]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d6c:	f7fe fce0 	bl	8000730 <HAL_GetTick>
 8001d70:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d74:	f7fe fcdc 	bl	8000730 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e061      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 020c 	and.w	r2, r3, #12
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d1eb      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d214      	bcs.n	8001dd4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 0207 	bic.w	r2, r3, #7
 8001db2:	4906      	ldr	r1, [pc, #24]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e040      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_RCC_ClockConfig+0x2e8>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	491a      	ldr	r1, [pc, #104]	; (8001e58 <HAL_RCC_ClockConfig+0x2e8>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_RCC_ClockConfig+0x2e8>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4912      	ldr	r1, [pc, #72]	; (8001e58 <HAL_RCC_ClockConfig+0x2e8>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e12:	f000 f829 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8001e16:	4601      	mov	r1, r0
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <HAL_RCC_ClockConfig+0x2e8>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e20:	22f0      	movs	r2, #240	; 0xf0
 8001e22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	fa92 f2a2 	rbit	r2, r2
 8001e2a:	60fa      	str	r2, [r7, #12]
  return result;
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	fab2 f282 	clz	r2, r2
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	40d3      	lsrs	r3, r2
 8001e36:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <HAL_RCC_ClockConfig+0x2ec>)
 8001e38:	5cd3      	ldrb	r3, [r2, r3]
 8001e3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e3e:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <HAL_RCC_ClockConfig+0x2f0>)
 8001e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <HAL_RCC_ClockConfig+0x2f4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fc2e 	bl	80006a8 <HAL_InitTick>
  
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3778      	adds	r7, #120	; 0x78
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	08002d5c 	.word	0x08002d5c
 8001e60:	20000000 	.word	0x20000000
 8001e64:	20000004 	.word	0x20000004

08001e68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b08b      	sub	sp, #44	; 0x2c
 8001e6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e82:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d002      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x30>
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d003      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0x36>
 8001e96:	e03f      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e98:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e9a:	623b      	str	r3, [r7, #32]
      break;
 8001e9c:	e03f      	b.n	8001f1e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ea4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001ea8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	fa92 f2a2 	rbit	r2, r2
 8001eb0:	607a      	str	r2, [r7, #4]
  return result;
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	fab2 f282 	clz	r2, r2
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	40d3      	lsrs	r3, r2
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	220f      	movs	r2, #15
 8001ecc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	fa92 f2a2 	rbit	r2, r2
 8001ed4:	60fa      	str	r2, [r7, #12]
  return result;
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	fab2 f282 	clz	r2, r2
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	40d3      	lsrs	r3, r2
 8001ee0:	4a15      	ldr	r2, [pc, #84]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ee2:	5cd3      	ldrb	r3, [r2, r3]
 8001ee4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ef0:	4a0f      	ldr	r2, [pc, #60]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
 8001f00:	e007      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f02:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	fb02 f303 	mul.w	r3, r2, r3
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	623b      	str	r3, [r7, #32]
      break;
 8001f16:	e002      	b.n	8001f1e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f1a:	623b      	str	r3, [r7, #32]
      break;
 8001f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	372c      	adds	r7, #44	; 0x2c
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	007a1200 	.word	0x007a1200
 8001f34:	08002d6c 	.word	0x08002d6c
 8001f38:	08002d7c 	.word	0x08002d7c

08001f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b092      	sub	sp, #72	; 0x48
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 80d4 	beq.w	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f60:	4b4e      	ldr	r3, [pc, #312]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10e      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6c:	4b4b      	ldr	r3, [pc, #300]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	4a4a      	ldr	r2, [pc, #296]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f76:	61d3      	str	r3, [r2, #28]
 8001f78:	4b48      	ldr	r3, [pc, #288]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f84:	2301      	movs	r3, #1
 8001f86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8a:	4b45      	ldr	r3, [pc, #276]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d118      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f96:	4b42      	ldr	r3, [pc, #264]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a41      	ldr	r2, [pc, #260]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fbc5 	bl	8000730 <HAL_GetTick>
 8001fa6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	e008      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001faa:	f7fe fbc1 	bl	8000730 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b64      	cmp	r3, #100	; 0x64
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e1d6      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fc8:	4b34      	ldr	r3, [pc, #208]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 8084 	beq.w	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d07c      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fe8:	4b2c      	ldr	r3, [pc, #176]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	461a      	mov	r2, r3
 8002012:	2301      	movs	r3, #1
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800201a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201e:	fa93 f3a3 	rbit	r3, r3
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	461a      	mov	r2, r3
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	461a      	mov	r2, r3
 8002036:	2300      	movs	r3, #0
 8002038:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800203a:	4a18      	ldr	r2, [pc, #96]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800203c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d04b      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7fe fb71 	bl	8000730 <HAL_GetTick>
 800204e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002050:	e00a      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7fe fb6d 	bl	8000730 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e180      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002068:	2302      	movs	r3, #2
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
 8002074:	2302      	movs	r3, #2
 8002076:	623b      	str	r3, [r7, #32]
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	61fb      	str	r3, [r7, #28]
  return result;
 8002080:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	095b      	lsrs	r3, r3, #5
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d108      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002096:	4b01      	ldr	r3, [pc, #4]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	e00d      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800209c:	40021000 	.word	0x40021000
 80020a0:	40007000 	.word	0x40007000
 80020a4:	10908100 	.word	0x10908100
 80020a8:	2302      	movs	r3, #2
 80020aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	4ba0      	ldr	r3, [pc, #640]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	2202      	movs	r2, #2
 80020ba:	613a      	str	r2, [r7, #16]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	fa92 f2a2 	rbit	r2, r2
 80020c2:	60fa      	str	r2, [r7, #12]
  return result;
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	fab2 f282 	clz	r2, r2
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	f002 021f 	and.w	r2, r2, #31
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f202 	lsl.w	r2, r1, r2
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0b7      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80020e2:	4b95      	ldr	r3, [pc, #596]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4992      	ldr	r1, [pc, #584]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d105      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fc:	4b8e      	ldr	r3, [pc, #568]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	4a8d      	ldr	r2, [pc, #564]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002106:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002114:	4b88      	ldr	r3, [pc, #544]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	f023 0203 	bic.w	r2, r3, #3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4985      	ldr	r1, [pc, #532]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002122:	4313      	orrs	r3, r2
 8002124:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d008      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002132:	4b81      	ldr	r3, [pc, #516]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	497e      	ldr	r1, [pc, #504]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002140:	4313      	orrs	r3, r2
 8002142:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002150:	4b79      	ldr	r3, [pc, #484]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	4976      	ldr	r1, [pc, #472]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	2b00      	cmp	r3, #0
 800216c:	d008      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800216e:	4b72      	ldr	r3, [pc, #456]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f023 0210 	bic.w	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	496f      	ldr	r1, [pc, #444]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800217c:	4313      	orrs	r3, r2
 800217e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800218c:	4b6a      	ldr	r3, [pc, #424]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	4967      	ldr	r1, [pc, #412]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d008      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021aa:	4b63      	ldr	r3, [pc, #396]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f023 0220 	bic.w	r2, r3, #32
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4960      	ldr	r1, [pc, #384]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021c8:	4b5b      	ldr	r3, [pc, #364]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	4958      	ldr	r1, [pc, #352]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d008      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021e6:	4b54      	ldr	r3, [pc, #336]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	4951      	ldr	r1, [pc, #324]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002204:	4b4c      	ldr	r3, [pc, #304]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4949      	ldr	r1, [pc, #292]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002222:	4b45      	ldr	r3, [pc, #276]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4942      	ldr	r1, [pc, #264]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002240:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	493a      	ldr	r1, [pc, #232]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800224e:	4313      	orrs	r3, r2
 8002250:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d008      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800225e:	4b36      	ldr	r3, [pc, #216]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	4933      	ldr	r1, [pc, #204]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800226c:	4313      	orrs	r3, r2
 800226e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800227c:	4b2e      	ldr	r3, [pc, #184]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002288:	492b      	ldr	r1, [pc, #172]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800228a:	4313      	orrs	r3, r2
 800228c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d008      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800229a:	4b27      	ldr	r3, [pc, #156]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4924      	ldr	r1, [pc, #144]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80022b8:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c4:	491c      	ldr	r1, [pc, #112]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d008      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e2:	4915      	ldr	r1, [pc, #84]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80022f4:	4b10      	ldr	r3, [pc, #64]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002300:	490d      	ldr	r1, [pc, #52]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002302:	4313      	orrs	r3, r2
 8002304:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231e:	4906      	ldr	r1, [pc, #24]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002320:	4313      	orrs	r3, r2
 8002322:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00c      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002330:	4b01      	ldr	r3, [pc, #4]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	e002      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002344:	490b      	ldr	r1, [pc, #44]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002346:	4313      	orrs	r3, r2
 8002348:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d008      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002362:	4904      	ldr	r1, [pc, #16]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002364:	4313      	orrs	r3, r2
 8002366:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3748      	adds	r7, #72	; 0x48
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000

08002378 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e083      	b.n	8002492 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	7f5b      	ldrb	r3, [r3, #29]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe f8d2 	bl	8000544 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	22ca      	movs	r2, #202	; 0xca
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2253      	movs	r2, #83	; 0x53
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fc26 	bl	8002c08 <RTC_EnterInitMode>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	22ff      	movs	r2, #255	; 0xff
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2204      	movs	r2, #4
 80023ce:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e05e      	b.n	8002492 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80023e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023e6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6899      	ldr	r1, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68d2      	ldr	r2, [r2, #12]
 800240e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6919      	ldr	r1, [r3, #16]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	041a      	lsls	r2, r3, #16
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002432:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10e      	bne.n	8002460 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fbb8 	bl	8002bb8 <HAL_RTC_WaitForSynchro>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	22ff      	movs	r2, #255	; 0xff
 8002454:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2204      	movs	r2, #4
 800245a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e018      	b.n	8002492 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699a      	ldr	r2, [r3, #24]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	22ff      	movs	r2, #255	; 0xff
 8002488:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002490:	2300      	movs	r3, #0
  }
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800249a:	b590      	push	{r4, r7, lr}
 800249c:	b087      	sub	sp, #28
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	7f1b      	ldrb	r3, [r3, #28]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_RTC_SetTime+0x1c>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e0aa      	b.n	800260c <HAL_RTC_SetTime+0x172>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2202      	movs	r2, #2
 80024c0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d126      	bne.n	8002516 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d102      	bne.n	80024dc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2200      	movs	r2, #0
 80024da:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fbbd 	bl	8002c60 <RTC_ByteToBcd2>
 80024e6:	4603      	mov	r3, r0
 80024e8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	785b      	ldrb	r3, [r3, #1]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fbb6 	bl	8002c60 <RTC_ByteToBcd2>
 80024f4:	4603      	mov	r3, r0
 80024f6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80024f8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	789b      	ldrb	r3, [r3, #2]
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fbae 	bl	8002c60 <RTC_ByteToBcd2>
 8002504:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002506:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	78db      	ldrb	r3, [r3, #3]
 800250e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002510:	4313      	orrs	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	e018      	b.n	8002548 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2200      	movs	r2, #0
 8002528:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	785b      	ldrb	r3, [r3, #1]
 8002534:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002536:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800253c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	78db      	ldrb	r3, [r3, #3]
 8002542:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002544:	4313      	orrs	r3, r2
 8002546:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	22ca      	movs	r2, #202	; 0xca
 800254e:	625a      	str	r2, [r3, #36]	; 0x24
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2253      	movs	r2, #83	; 0x53
 8002556:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 fb55 	bl	8002c08 <RTC_EnterInitMode>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00b      	beq.n	800257c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	22ff      	movs	r2, #255	; 0xff
 800256a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2204      	movs	r2, #4
 8002570:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e047      	b.n	800260c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002586:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800258a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800259a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6899      	ldr	r1, [r3, #8]
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025c2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d111      	bne.n	80025f6 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 faf0 	bl	8002bb8 <HAL_RTC_WaitForSynchro>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	22ff      	movs	r2, #255	; 0xff
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2204      	movs	r2, #4
 80025ea:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00a      	b.n	800260c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	22ff      	movs	r2, #255	; 0xff
 80025fc:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800260a:	2300      	movs	r3, #0
  }
}
 800260c:	4618      	mov	r0, r3
 800260e:	371c      	adds	r7, #28
 8002610:	46bd      	mov	sp, r7
 8002612:	bd90      	pop	{r4, r7, pc}

08002614 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002646:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800264a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	0c1b      	lsrs	r3, r3, #16
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002656:	b2da      	uxtb	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	0a1b      	lsrs	r3, r3, #8
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002666:	b2da      	uxtb	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002674:	b2da      	uxtb	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	0c1b      	lsrs	r3, r3, #16
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d11a      	bne.n	80026c6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fb01 	bl	8002c9c <RTC_Bcd2ToByte>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	785b      	ldrb	r3, [r3, #1]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 faf8 	bl	8002c9c <RTC_Bcd2ToByte>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461a      	mov	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	789b      	ldrb	r3, [r3, #2]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 faef 	bl	8002c9c <RTC_Bcd2ToByte>
 80026be:	4603      	mov	r3, r0
 80026c0:	461a      	mov	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	7f1b      	ldrb	r3, [r3, #28]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_RTC_SetDate+0x1c>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e094      	b.n	8002816 <HAL_RTC_SetDate+0x146>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2201      	movs	r2, #1
 80026f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2202      	movs	r2, #2
 80026f6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10e      	bne.n	800271c <HAL_RTC_SetDate+0x4c>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	785b      	ldrb	r3, [r3, #1]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	785b      	ldrb	r3, [r3, #1]
 800270e:	f023 0310 	bic.w	r3, r3, #16
 8002712:	b2db      	uxtb	r3, r3
 8002714:	330a      	adds	r3, #10
 8002716:	b2da      	uxtb	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d11c      	bne.n	800275c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	78db      	ldrb	r3, [r3, #3]
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fa9a 	bl	8002c60 <RTC_ByteToBcd2>
 800272c:	4603      	mov	r3, r0
 800272e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	785b      	ldrb	r3, [r3, #1]
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fa93 	bl	8002c60 <RTC_ByteToBcd2>
 800273a:	4603      	mov	r3, r0
 800273c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800273e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	789b      	ldrb	r3, [r3, #2]
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fa8b 	bl	8002c60 <RTC_ByteToBcd2>
 800274a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800274c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	e00e      	b.n	800277a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	78db      	ldrb	r3, [r3, #3]
 8002760:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	785b      	ldrb	r3, [r3, #1]
 8002766:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002768:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800276e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	22ca      	movs	r2, #202	; 0xca
 8002780:	625a      	str	r2, [r3, #36]	; 0x24
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2253      	movs	r2, #83	; 0x53
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 fa3c 	bl	8002c08 <RTC_EnterInitMode>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00b      	beq.n	80027ae <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	22ff      	movs	r2, #255	; 0xff
 800279c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2204      	movs	r2, #4
 80027a2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e033      	b.n	8002816 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80027b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80027bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027cc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d111      	bne.n	8002800 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f9eb 	bl	8002bb8 <HAL_RTC_WaitForSynchro>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00b      	beq.n	8002800 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	22ff      	movs	r2, #255	; 0xff
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2204      	movs	r2, #4
 80027f4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e00a      	b.n	8002816 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	22ff      	movs	r2, #255	; 0xff
 8002806:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2201      	movs	r2, #1
 800280c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002814:	2300      	movs	r3, #0
  }
}
 8002816:	4618      	mov	r0, r3
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	bd90      	pop	{r4, r7, pc}

0800281e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002838:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800283c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	0c1b      	lsrs	r3, r3, #16
 8002842:	b2da      	uxtb	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	b2da      	uxtb	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002860:	b2da      	uxtb	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	0b5b      	lsrs	r3, r3, #13
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	b2da      	uxtb	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d11a      	bne.n	80028b2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	78db      	ldrb	r3, [r3, #3]
 8002880:	4618      	mov	r0, r3
 8002882:	f000 fa0b 	bl	8002c9c <RTC_Bcd2ToByte>
 8002886:	4603      	mov	r3, r0
 8002888:	461a      	mov	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	785b      	ldrb	r3, [r3, #1]
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fa02 	bl	8002c9c <RTC_Bcd2ToByte>
 8002898:	4603      	mov	r3, r0
 800289a:	461a      	mov	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	789b      	ldrb	r3, [r3, #2]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 f9f9 	bl	8002c9c <RTC_Bcd2ToByte>
 80028aa:	4603      	mov	r3, r0
 80028ac:	461a      	mov	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b089      	sub	sp, #36	; 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	7f1b      	ldrb	r3, [r3, #28]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_RTC_SetAlarm_IT+0x24>
 80028dc:	2302      	movs	r3, #2
 80028de:	e11f      	b.n	8002b20 <HAL_RTC_SetAlarm_IT+0x264>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2202      	movs	r2, #2
 80028ea:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d137      	bne.n	8002962 <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2200      	movs	r2, #0
 8002904:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f9a8 	bl	8002c60 <RTC_ByteToBcd2>
 8002910:	4603      	mov	r3, r0
 8002912:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	785b      	ldrb	r3, [r3, #1]
 8002918:	4618      	mov	r0, r3
 800291a:	f000 f9a1 	bl	8002c60 <RTC_ByteToBcd2>
 800291e:	4603      	mov	r3, r0
 8002920:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002922:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	789b      	ldrb	r3, [r3, #2]
 8002928:	4618      	mov	r0, r3
 800292a:	f000 f999 	bl	8002c60 <RTC_ByteToBcd2>
 800292e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002930:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	78db      	ldrb	r3, [r3, #3]
 8002938:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800293a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002944:	4618      	mov	r0, r3
 8002946:	f000 f98b 	bl	8002c60 <RTC_ByteToBcd2>
 800294a:	4603      	mov	r3, r0
 800294c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800294e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002956:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800295c:	4313      	orrs	r3, r2
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	e023      	b.n	80029aa <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2200      	movs	r2, #0
 8002974:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	785b      	ldrb	r3, [r3, #1]
 8002980:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002982:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002988:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	78db      	ldrb	r3, [r3, #3]
 800298e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002990:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002998:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800299a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80029a0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	22ca      	movs	r2, #202	; 0xca
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2253      	movs	r2, #83	; 0x53
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ce:	d148      	bne.n	8002a62 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029de:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80029f0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80029f2:	f7fd fe9d 	bl	8000730 <HAL_GetTick>
 80029f6:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80029f8:	e013      	b.n	8002a22 <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029fa:	f7fd fe99 	bl	8000730 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a08:	d90b      	bls.n	8002a22 <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	22ff      	movs	r2, #255	; 0xff
 8002a10:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2203      	movs	r2, #3
 8002a16:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e07e      	b.n	8002b20 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0e4      	beq.n	80029fa <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a4e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	e047      	b.n	8002af2 <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a70:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002a82:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002a84:	f7fd fe54 	bl	8000730 <HAL_GetTick>
 8002a88:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8002a8a:	e013      	b.n	8002ab4 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a8c:	f7fd fe50 	bl	8000730 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a9a:	d90b      	bls.n	8002ab4 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	22ff      	movs	r2, #255	; 0xff
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e035      	b.n	8002b20 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0e4      	beq.n	8002a8c <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002af0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afc:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	4a09      	ldr	r2, [pc, #36]	; (8002b28 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b08:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	22ff      	movs	r2, #255	; 0xff
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3724      	adds	r7, #36	; 0x24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd90      	pop	{r4, r7, pc}
 8002b28:	40010400 	.word	0x40010400

08002b2c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d012      	beq.n	8002b68 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7fd fb3f 	bl	80001d4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002b66:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d012      	beq.n	8002b9c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00b      	beq.n	8002b9c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f8a7 	bl	8002cd8 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002b9a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002b9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ba2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	775a      	strb	r2, [r3, #29]
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bd2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002bd4:	f7fd fdac 	bl	8000730 <HAL_GetTick>
 8002bd8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002bda:	e009      	b.n	8002bf0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bdc:	f7fd fda8 	bl	8000730 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bea:	d901      	bls.n	8002bf0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e007      	b.n	8002c00 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0ee      	beq.n	8002bdc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d119      	bne.n	8002c56 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f04f 32ff 	mov.w	r2, #4294967295
 8002c2a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002c2c:	f7fd fd80 	bl	8000730 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c32:	e009      	b.n	8002c48 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c34:	f7fd fd7c 	bl	8000730 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c42:	d901      	bls.n	8002c48 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e007      	b.n	8002c58 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0ee      	beq.n	8002c34 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002c6e:	e005      	b.n	8002c7c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3301      	adds	r3, #1
 8002c74:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	3b0a      	subs	r3, #10
 8002c7a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	2b09      	cmp	r3, #9
 8002c80:	d8f6      	bhi.n	8002c70 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	b2db      	uxtb	r3, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	b2db      	uxtb	r3, r3
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <__libc_init_array>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	4e0d      	ldr	r6, [pc, #52]	; (8002d24 <__libc_init_array+0x38>)
 8002cf0:	4c0d      	ldr	r4, [pc, #52]	; (8002d28 <__libc_init_array+0x3c>)
 8002cf2:	1ba4      	subs	r4, r4, r6
 8002cf4:	10a4      	asrs	r4, r4, #2
 8002cf6:	2500      	movs	r5, #0
 8002cf8:	42a5      	cmp	r5, r4
 8002cfa:	d109      	bne.n	8002d10 <__libc_init_array+0x24>
 8002cfc:	4e0b      	ldr	r6, [pc, #44]	; (8002d2c <__libc_init_array+0x40>)
 8002cfe:	4c0c      	ldr	r4, [pc, #48]	; (8002d30 <__libc_init_array+0x44>)
 8002d00:	f000 f820 	bl	8002d44 <_init>
 8002d04:	1ba4      	subs	r4, r4, r6
 8002d06:	10a4      	asrs	r4, r4, #2
 8002d08:	2500      	movs	r5, #0
 8002d0a:	42a5      	cmp	r5, r4
 8002d0c:	d105      	bne.n	8002d1a <__libc_init_array+0x2e>
 8002d0e:	bd70      	pop	{r4, r5, r6, pc}
 8002d10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d14:	4798      	blx	r3
 8002d16:	3501      	adds	r5, #1
 8002d18:	e7ee      	b.n	8002cf8 <__libc_init_array+0xc>
 8002d1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d1e:	4798      	blx	r3
 8002d20:	3501      	adds	r5, #1
 8002d22:	e7f2      	b.n	8002d0a <__libc_init_array+0x1e>
 8002d24:	08002d8c 	.word	0x08002d8c
 8002d28:	08002d8c 	.word	0x08002d8c
 8002d2c:	08002d8c 	.word	0x08002d8c
 8002d30:	08002d90 	.word	0x08002d90

08002d34 <memset>:
 8002d34:	4402      	add	r2, r0
 8002d36:	4603      	mov	r3, r0
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d100      	bne.n	8002d3e <memset+0xa>
 8002d3c:	4770      	bx	lr
 8002d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d42:	e7f9      	b.n	8002d38 <memset+0x4>

08002d44 <_init>:
 8002d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d46:	bf00      	nop
 8002d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4a:	bc08      	pop	{r3}
 8002d4c:	469e      	mov	lr, r3
 8002d4e:	4770      	bx	lr

08002d50 <_fini>:
 8002d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d52:	bf00      	nop
 8002d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d56:	bc08      	pop	{r3}
 8002d58:	469e      	mov	lr, r3
 8002d5a:	4770      	bx	lr
