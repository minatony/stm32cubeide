
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005b84  08005b84  00015b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c2c  08005c2c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08005c2c  08005c2c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c2c  08005c2c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c2c  08005c2c  00015c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c30  08005c30  00015c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a40  20000020  08005c54  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a60  08005c54  00021a60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018603  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d39  00000000  00000000  00038653  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001350  00000000  00000000  0003b390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001238  00000000  00000000  0003c6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c0a  00000000  00000000  0003d918  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011036  00000000  00000000  00040522  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2a73  00000000  00000000  00051558  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123fcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005148  00000000  00000000  00124048  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000020 	.word	0x20000020
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b6c 	.word	0x08005b6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000024 	.word	0x20000024
 80001dc:	08005b6c 	.word	0x08005b6c

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f000 fa30 	bl	8000648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e8:	f000 f826 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 f8a6 	bl	800033c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001f0:	f000 f874 	bl	80002dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001f4:	f002 ff7c 	bl	80030f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask, NULL, &Task2_attributes);
 80001f8:	4a09      	ldr	r2, [pc, #36]	; (8000220 <main+0x40>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	4809      	ldr	r0, [pc, #36]	; (8000224 <main+0x44>)
 80001fe:	f002 ffdf 	bl	80031c0 <osThreadNew>
 8000202:	4602      	mov	r2, r0
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <main+0x48>)
 8000206:	601a      	str	r2, [r3, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000208:	4a08      	ldr	r2, [pc, #32]	; (800022c <main+0x4c>)
 800020a:	2100      	movs	r1, #0
 800020c:	4808      	ldr	r0, [pc, #32]	; (8000230 <main+0x50>)
 800020e:	f002 ffd7 	bl	80031c0 <osThreadNew>
 8000212:	4602      	mov	r2, r0
 8000214:	4b07      	ldr	r3, [pc, #28]	; (8000234 <main+0x54>)
 8000216:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000218:	f002 ff9e 	bl	8003158 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021c:	e7fe      	b.n	800021c <main+0x3c>
 800021e:	bf00      	nop
 8000220:	08005bac 	.word	0x08005bac
 8000224:	0800036d 	.word	0x0800036d
 8000228:	20001948 	.word	0x20001948
 800022c:	08005bd0 	.word	0x08005bd0
 8000230:	080003ad 	.word	0x080003ad
 8000234:	20001944 	.word	0x20001944

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b0a6      	sub	sp, #152	; 0x98
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f005 fc87 	bl	8005b5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2258      	movs	r2, #88	; 0x58
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f005 fc79 	bl	8005b5a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000268:	2302      	movs	r3, #2
 800026a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	2301      	movs	r3, #1
 800026e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000270:	2310      	movs	r3, #16
 8000272:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000276:	2300      	movs	r3, #0
 8000278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fca5 	bl	8000bd0 <HAL_RCC_OscConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800028c:	f000 f8bc 	bl	8000408 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000290:	230f      	movs	r3, #15
 8000292:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000294:	2300      	movs	r3, #0
 8000296:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fba6 	bl	80019fc <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002b6:	f000 f8a7 	bl	8000408 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002ba:	2302      	movs	r3, #2
 80002bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 fe01 	bl	8001ecc <HAL_RCCEx_PeriphCLKConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002d0:	f000 f89a 	bl	8000408 <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3798      	adds	r7, #152	; 0x98
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002e0:	4b14      	ldr	r3, [pc, #80]	; (8000334 <MX_USART2_UART_Init+0x58>)
 80002e2:	4a15      	ldr	r2, [pc, #84]	; (8000338 <MX_USART2_UART_Init+0x5c>)
 80002e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80002e6:	4b13      	ldr	r3, [pc, #76]	; (8000334 <MX_USART2_UART_Init+0x58>)
 80002e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ee:	4b11      	ldr	r3, [pc, #68]	; (8000334 <MX_USART2_UART_Init+0x58>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002f4:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <MX_USART2_UART_Init+0x58>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <MX_USART2_UART_Init+0x58>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <MX_USART2_UART_Init+0x58>)
 8000302:	220c      	movs	r2, #12
 8000304:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <MX_USART2_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <MX_USART2_UART_Init+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <MX_USART2_UART_Init+0x58>)
 8000314:	2200      	movs	r2, #0
 8000316:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <MX_USART2_UART_Init+0x58>)
 800031a:	2200      	movs	r2, #0
 800031c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <MX_USART2_UART_Init+0x58>)
 8000320:	f002 fac8 	bl	80028b4 <HAL_UART_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800032a:	f000 f86d 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	2000194c 	.word	0x2000194c
 8000338:	40004400 	.word	0x40004400

0800033c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <MX_GPIO_Init+0x2c>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	4a08      	ldr	r2, [pc, #32]	; (8000368 <MX_GPIO_Init+0x2c>)
 8000348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800034c:	6153      	str	r3, [r2, #20]
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <MX_GPIO_Init+0x2c>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]

}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000

0800036c <StartTask>:
  * @retval None
  */

/* USER CODE END Header_StartTask */
void StartTask(void *argument)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  for(int i = 0;i<5;i++){
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	e00b      	b.n	8000392 <StartTask+0x26>
		  HAL_UART_Transmit(&huart2,mang,7,100);
 800037a:	2364      	movs	r3, #100	; 0x64
 800037c:	2207      	movs	r2, #7
 800037e:	4909      	ldr	r1, [pc, #36]	; (80003a4 <StartTask+0x38>)
 8000380:	4809      	ldr	r0, [pc, #36]	; (80003a8 <StartTask+0x3c>)
 8000382:	f002 fae5 	bl	8002950 <HAL_UART_Transmit>
		  HAL_Delay(50);
 8000386:	2032      	movs	r0, #50	; 0x32
 8000388:	f000 f994 	bl	80006b4 <HAL_Delay>
	  for(int i = 0;i<5;i++){
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	3301      	adds	r3, #1
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	2b04      	cmp	r3, #4
 8000396:	ddf0      	ble.n	800037a <StartTask+0xe>
	  }
    osDelay(1000);
 8000398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800039c:	f002 ffba 	bl	8003314 <osDelay>
	  for(int i = 0;i<5;i++){
 80003a0:	e7e8      	b.n	8000374 <StartTask+0x8>
 80003a2:	bf00      	nop
 80003a4:	20000000 	.word	0x20000000
 80003a8:	2000194c 	.word	0x2000194c

080003ac <StartTask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask1 */
  /* Infinite loop */
  for(;;)
  {
	  for(int i = 0;i<5;i++){
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	e00b      	b.n	80003d2 <StartTask1+0x26>
	 HAL_UART_Transmit(&huart2,mang2,7,100);
 80003ba:	2364      	movs	r3, #100	; 0x64
 80003bc:	2207      	movs	r2, #7
 80003be:	4907      	ldr	r1, [pc, #28]	; (80003dc <StartTask1+0x30>)
 80003c0:	4807      	ldr	r0, [pc, #28]	; (80003e0 <StartTask1+0x34>)
 80003c2:	f002 fac5 	bl	8002950 <HAL_UART_Transmit>
	HAL_Delay(50);
 80003c6:	2032      	movs	r0, #50	; 0x32
 80003c8:	f000 f974 	bl	80006b4 <HAL_Delay>
	  for(int i = 0;i<5;i++){
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	3301      	adds	r3, #1
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	2b04      	cmp	r3, #4
 80003d6:	ddf0      	ble.n	80003ba <StartTask1+0xe>
 80003d8:	e7ec      	b.n	80003b4 <StartTask1+0x8>
 80003da:	bf00      	nop
 80003dc:	20000008 	.word	0x20000008
 80003e0:	2000194c 	.word	0x2000194c

080003e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a04      	ldr	r2, [pc, #16]	; (8000404 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d101      	bne.n	80003fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003f6:	f000 f93d 	bl	8000674 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40001000 	.word	0x40001000

08000408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800040e:	e7fe      	b.n	800040e <Error_Handler+0x6>

08000410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <HAL_MspInit+0x4c>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	4a10      	ldr	r2, [pc, #64]	; (800045c <HAL_MspInit+0x4c>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	6193      	str	r3, [r2, #24]
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <HAL_MspInit+0x4c>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <HAL_MspInit+0x4c>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	4a0a      	ldr	r2, [pc, #40]	; (800045c <HAL_MspInit+0x4c>)
 8000434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000438:	61d3      	str	r3, [r2, #28]
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <HAL_MspInit+0x4c>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	210f      	movs	r1, #15
 800044a:	f06f 0001 	mvn.w	r0, #1
 800044e:	f000 fa0b 	bl	8000868 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08a      	sub	sp, #40	; 0x28
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
 8000476:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a17      	ldr	r2, [pc, #92]	; (80004dc <HAL_UART_MspInit+0x7c>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d128      	bne.n	80004d4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000482:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <HAL_UART_MspInit+0x80>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	4a16      	ldr	r2, [pc, #88]	; (80004e0 <HAL_UART_MspInit+0x80>)
 8000488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800048c:	61d3      	str	r3, [r2, #28]
 800048e:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <HAL_UART_MspInit+0x80>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000496:	613b      	str	r3, [r7, #16]
 8000498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800049a:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <HAL_UART_MspInit+0x80>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a10      	ldr	r2, [pc, #64]	; (80004e0 <HAL_UART_MspInit+0x80>)
 80004a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004a4:	6153      	str	r3, [r2, #20]
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <HAL_UART_MspInit+0x80>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004b2:	230c      	movs	r3, #12
 80004b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b6:	2302      	movs	r3, #2
 80004b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004be:	2303      	movs	r3, #3
 80004c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004c2:	2307      	movs	r3, #7
 80004c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	4619      	mov	r1, r3
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d0:	f000 f9f4 	bl	80008bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004d4:	bf00      	nop
 80004d6:	3728      	adds	r7, #40	; 0x28
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40004400 	.word	0x40004400
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08c      	sub	sp, #48	; 0x30
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	6879      	ldr	r1, [r7, #4]
 80004f8:	2036      	movs	r0, #54	; 0x36
 80004fa:	f000 f9b5 	bl	8000868 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80004fe:	2036      	movs	r0, #54	; 0x36
 8000500:	f000 f9ce 	bl	80008a0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000504:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <HAL_InitTick+0x9c>)
 8000506:	69db      	ldr	r3, [r3, #28]
 8000508:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <HAL_InitTick+0x9c>)
 800050a:	f043 0310 	orr.w	r3, r3, #16
 800050e:	61d3      	str	r3, [r2, #28]
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <HAL_InitTick+0x9c>)
 8000512:	69db      	ldr	r3, [r3, #28]
 8000514:	f003 0310 	and.w	r3, r3, #16
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800051c:	f107 0210 	add.w	r2, r7, #16
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	4611      	mov	r1, r2
 8000526:	4618      	mov	r0, r3
 8000528:	f001 fc9e 	bl	8001e68 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800052c:	f001 fc58 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8000530:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000534:	4a13      	ldr	r2, [pc, #76]	; (8000584 <HAL_InitTick+0xa0>)
 8000536:	fba2 2303 	umull	r2, r3, r2, r3
 800053a:	0c9b      	lsrs	r3, r3, #18
 800053c:	3b01      	subs	r3, #1
 800053e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <HAL_InitTick+0xa4>)
 8000542:	4a12      	ldr	r2, [pc, #72]	; (800058c <HAL_InitTick+0xa8>)
 8000544:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <HAL_InitTick+0xa4>)
 8000548:	f240 32e7 	movw	r2, #999	; 0x3e7
 800054c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <HAL_InitTick+0xa4>)
 8000550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000552:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <HAL_InitTick+0xa4>)
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <HAL_InitTick+0xa4>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000560:	4809      	ldr	r0, [pc, #36]	; (8000588 <HAL_InitTick+0xa4>)
 8000562:	f001 fed1 	bl	8002308 <HAL_TIM_Base_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d104      	bne.n	8000576 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800056c:	4806      	ldr	r0, [pc, #24]	; (8000588 <HAL_InitTick+0xa4>)
 800056e:	f001 ff2d 	bl	80023cc <HAL_TIM_Base_Start_IT>
 8000572:	4603      	mov	r3, r0
 8000574:	e000      	b.n	8000578 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	3730      	adds	r7, #48	; 0x30
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	431bde83 	.word	0x431bde83
 8000588:	200019d0 	.word	0x200019d0
 800058c:	40001000 	.word	0x40001000

08000590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <NMI_Handler+0x4>

08000596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059a:	e7fe      	b.n	800059a <HardFault_Handler+0x4>

0800059c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <MemManage_Handler+0x4>

080005a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <BusFault_Handler+0x4>

080005a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <UsageFault_Handler+0x4>

080005ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <TIM6_DAC_IRQHandler+0x10>)
 80005c2:	f001 ff73 	bl	80024ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200019d0 	.word	0x200019d0

080005d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <SystemInit+0x20>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <SystemInit+0x20>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800062c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fa:	490e      	ldr	r1, [pc, #56]	; (8000634 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005fc:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <LoopForever+0xe>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000600:	e002      	b.n	8000608 <LoopCopyDataInit>

08000602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000606:	3304      	adds	r3, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800060c:	d3f9      	bcc.n	8000602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060e:	4a0b      	ldr	r2, [pc, #44]	; (800063c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000610:	4c0b      	ldr	r4, [pc, #44]	; (8000640 <LoopForever+0x16>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000614:	e001      	b.n	800061a <LoopFillZerobss>

08000616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000618:	3204      	adds	r2, #4

0800061a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800061c:	d3fb      	bcc.n	8000616 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800061e:	f7ff ffd7 	bl	80005d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000622:	f005 fa6b 	bl	8005afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000626:	f7ff fddb 	bl	80001e0 <main>

0800062a <LoopForever>:

LoopForever:
    b LoopForever
 800062a:	e7fe      	b.n	800062a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800062c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000634:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000638:	08005c34 	.word	0x08005c34
  ldr r2, =_sbss
 800063c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000640:	20001a60 	.word	0x20001a60

08000644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC1_2_IRQHandler>
	...

08000648 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <HAL_Init+0x28>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_Init+0x28>)
 8000652:	f043 0310 	orr.w	r3, r3, #16
 8000656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000658:	2003      	movs	r0, #3
 800065a:	f000 f8fa 	bl	8000852 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800065e:	2000      	movs	r0, #0
 8000660:	f7ff ff40 	bl	80004e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000664:	f7ff fed4 	bl	8000410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000668:	2300      	movs	r3, #0
}
 800066a:	4618      	mov	r0, r3
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40022000 	.word	0x40022000

08000674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_IncTick+0x20>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_IncTick+0x24>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4413      	add	r3, r2
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <HAL_IncTick+0x24>)
 8000686:	6013      	str	r3, [r2, #0]
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000018 	.word	0x20000018
 8000698:	20001a1c 	.word	0x20001a1c

0800069c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return uwTick;  
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <HAL_GetTick+0x14>)
 80006a2:	681b      	ldr	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20001a1c 	.word	0x20001a1c

080006b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006bc:	f7ff ffee 	bl	800069c <HAL_GetTick>
 80006c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006cc:	d005      	beq.n	80006da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <HAL_Delay+0x40>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	4413      	add	r3, r2
 80006d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006da:	bf00      	nop
 80006dc:	f7ff ffde 	bl	800069c <HAL_GetTick>
 80006e0:	4602      	mov	r2, r0
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d8f7      	bhi.n	80006dc <HAL_Delay+0x28>
  {
  }
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000018 	.word	0x20000018

080006f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000714:	4013      	ands	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072a:	4a04      	ldr	r2, [pc, #16]	; (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	60d3      	str	r3, [r2, #12]
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <__NVIC_GetPriorityGrouping+0x18>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	f003 0307 	and.w	r3, r3, #7
}
 800074e:	4618      	mov	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	db0b      	blt.n	8000786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f003 021f 	and.w	r2, r3, #31
 8000774:	4907      	ldr	r1, [pc, #28]	; (8000794 <__NVIC_EnableIRQ+0x38>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	2001      	movs	r0, #1
 800077e:	fa00 f202 	lsl.w	r2, r0, r2
 8000782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000e100 	.word	0xe000e100

08000798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db0a      	blt.n	80007c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	490c      	ldr	r1, [pc, #48]	; (80007e4 <__NVIC_SetPriority+0x4c>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	0112      	lsls	r2, r2, #4
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	440b      	add	r3, r1
 80007bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c0:	e00a      	b.n	80007d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4908      	ldr	r1, [pc, #32]	; (80007e8 <__NVIC_SetPriority+0x50>)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f003 030f 	and.w	r3, r3, #15
 80007ce:	3b04      	subs	r3, #4
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	440b      	add	r3, r1
 80007d6:	761a      	strb	r2, [r3, #24]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	e000e100 	.word	0xe000e100
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b089      	sub	sp, #36	; 0x24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	f1c3 0307 	rsb	r3, r3, #7
 8000806:	2b04      	cmp	r3, #4
 8000808:	bf28      	it	cs
 800080a:	2304      	movcs	r3, #4
 800080c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	3304      	adds	r3, #4
 8000812:	2b06      	cmp	r3, #6
 8000814:	d902      	bls.n	800081c <NVIC_EncodePriority+0x30>
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3b03      	subs	r3, #3
 800081a:	e000      	b.n	800081e <NVIC_EncodePriority+0x32>
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	f04f 32ff 	mov.w	r2, #4294967295
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43da      	mvns	r2, r3
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	401a      	ands	r2, r3
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000834:	f04f 31ff 	mov.w	r1, #4294967295
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	fa01 f303 	lsl.w	r3, r1, r3
 800083e:	43d9      	mvns	r1, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	4313      	orrs	r3, r2
         );
}
 8000846:	4618      	mov	r0, r3
 8000848:	3724      	adds	r7, #36	; 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff ff4c 	bl	80006f8 <__NVIC_SetPriorityGrouping>
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
 8000874:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800087a:	f7ff ff61 	bl	8000740 <__NVIC_GetPriorityGrouping>
 800087e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	68b9      	ldr	r1, [r7, #8]
 8000884:	6978      	ldr	r0, [r7, #20]
 8000886:	f7ff ffb1 	bl	80007ec <NVIC_EncodePriority>
 800088a:	4602      	mov	r2, r0
 800088c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ff80 	bl	8000798 <__NVIC_SetPriority>
}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff54 	bl	800075c <__NVIC_EnableIRQ>
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008bc:	b480      	push	{r7}
 80008be:	b087      	sub	sp, #28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ca:	e160      	b.n	8000b8e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	2101      	movs	r1, #1
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	fa01 f303 	lsl.w	r3, r1, r3
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f000 8152 	beq.w	8000b88 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d00b      	beq.n	8000904 <HAL_GPIO_Init+0x48>
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d007      	beq.n	8000904 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f8:	2b11      	cmp	r3, #17
 80008fa:	d003      	beq.n	8000904 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	2b12      	cmp	r3, #18
 8000902:	d130      	bne.n	8000966 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	2203      	movs	r2, #3
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4013      	ands	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	68da      	ldr	r2, [r3, #12]
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4313      	orrs	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800093a:	2201      	movs	r2, #1
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4013      	ands	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	091b      	lsrs	r3, r3, #4
 8000950:	f003 0201 	and.w	r2, r3, #1
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4313      	orrs	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	2203      	movs	r2, #3
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4013      	ands	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	689a      	ldr	r2, [r3, #8]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4313      	orrs	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	2b02      	cmp	r3, #2
 800099c:	d003      	beq.n	80009a6 <HAL_GPIO_Init+0xea>
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	2b12      	cmp	r3, #18
 80009a4:	d123      	bne.n	80009ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	08da      	lsrs	r2, r3, #3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3208      	adds	r2, #8
 80009ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	220f      	movs	r2, #15
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	691a      	ldr	r2, [r3, #16]
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	f003 0307 	and.w	r3, r3, #7
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4313      	orrs	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	08da      	lsrs	r2, r3, #3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3208      	adds	r2, #8
 80009e8:	6939      	ldr	r1, [r7, #16]
 80009ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	2203      	movs	r2, #3
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f003 0203 	and.w	r2, r3, #3
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f000 80ac 	beq.w	8000b88 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a30:	4b5e      	ldr	r3, [pc, #376]	; (8000bac <HAL_GPIO_Init+0x2f0>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a5d      	ldr	r2, [pc, #372]	; (8000bac <HAL_GPIO_Init+0x2f0>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b5b      	ldr	r3, [pc, #364]	; (8000bac <HAL_GPIO_Init+0x2f0>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a48:	4a59      	ldr	r2, [pc, #356]	; (8000bb0 <HAL_GPIO_Init+0x2f4>)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	089b      	lsrs	r3, r3, #2
 8000a4e:	3302      	adds	r3, #2
 8000a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	220f      	movs	r2, #15
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a72:	d025      	beq.n	8000ac0 <HAL_GPIO_Init+0x204>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a4f      	ldr	r2, [pc, #316]	; (8000bb4 <HAL_GPIO_Init+0x2f8>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d01f      	beq.n	8000abc <HAL_GPIO_Init+0x200>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a4e      	ldr	r2, [pc, #312]	; (8000bb8 <HAL_GPIO_Init+0x2fc>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d019      	beq.n	8000ab8 <HAL_GPIO_Init+0x1fc>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a4d      	ldr	r2, [pc, #308]	; (8000bbc <HAL_GPIO_Init+0x300>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d013      	beq.n	8000ab4 <HAL_GPIO_Init+0x1f8>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a4c      	ldr	r2, [pc, #304]	; (8000bc0 <HAL_GPIO_Init+0x304>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d00d      	beq.n	8000ab0 <HAL_GPIO_Init+0x1f4>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a4b      	ldr	r2, [pc, #300]	; (8000bc4 <HAL_GPIO_Init+0x308>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d007      	beq.n	8000aac <HAL_GPIO_Init+0x1f0>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a4a      	ldr	r2, [pc, #296]	; (8000bc8 <HAL_GPIO_Init+0x30c>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d101      	bne.n	8000aa8 <HAL_GPIO_Init+0x1ec>
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	e00c      	b.n	8000ac2 <HAL_GPIO_Init+0x206>
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	e00a      	b.n	8000ac2 <HAL_GPIO_Init+0x206>
 8000aac:	2305      	movs	r3, #5
 8000aae:	e008      	b.n	8000ac2 <HAL_GPIO_Init+0x206>
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	e006      	b.n	8000ac2 <HAL_GPIO_Init+0x206>
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	e004      	b.n	8000ac2 <HAL_GPIO_Init+0x206>
 8000ab8:	2302      	movs	r3, #2
 8000aba:	e002      	b.n	8000ac2 <HAL_GPIO_Init+0x206>
 8000abc:	2301      	movs	r3, #1
 8000abe:	e000      	b.n	8000ac2 <HAL_GPIO_Init+0x206>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	f002 0203 	and.w	r2, r2, #3
 8000ac8:	0092      	lsls	r2, r2, #2
 8000aca:	4093      	lsls	r3, r2
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ad2:	4937      	ldr	r1, [pc, #220]	; (8000bb0 <HAL_GPIO_Init+0x2f4>)
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	089b      	lsrs	r3, r3, #2
 8000ad8:	3302      	adds	r3, #2
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ae0:	4b3a      	ldr	r3, [pc, #232]	; (8000bcc <HAL_GPIO_Init+0x310>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4013      	ands	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d003      	beq.n	8000b04 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b04:	4a31      	ldr	r2, [pc, #196]	; (8000bcc <HAL_GPIO_Init+0x310>)
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b0a:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <HAL_GPIO_Init+0x310>)
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	43db      	mvns	r3, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b2e:	4a27      	ldr	r2, [pc, #156]	; (8000bcc <HAL_GPIO_Init+0x310>)
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <HAL_GPIO_Init+0x310>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b58:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <HAL_GPIO_Init+0x310>)
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <HAL_GPIO_Init+0x310>)
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <HAL_GPIO_Init+0x310>)
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	fa22 f303 	lsr.w	r3, r2, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f47f ae97 	bne.w	80008cc <HAL_GPIO_Init+0x10>
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	371c      	adds	r7, #28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40010000 	.word	0x40010000
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	48000800 	.word	0x48000800
 8000bbc:	48000c00 	.word	0x48000c00
 8000bc0:	48001000 	.word	0x48001000
 8000bc4:	48001400 	.word	0x48001400
 8000bc8:	48001800 	.word	0x48001800
 8000bcc:	40010400 	.word	0x40010400

08000bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	f000 bf01 	b.w	80019ec <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f000 8160 	beq.w	8000eba <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bfa:	4bae      	ldr	r3, [pc, #696]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d00c      	beq.n	8000c20 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c06:	4bab      	ldr	r3, [pc, #684]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 030c 	and.w	r3, r3, #12
 8000c0e:	2b08      	cmp	r3, #8
 8000c10:	d159      	bne.n	8000cc6 <HAL_RCC_OscConfig+0xf6>
 8000c12:	4ba8      	ldr	r3, [pc, #672]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c1e:	d152      	bne.n	8000cc6 <HAL_RCC_OscConfig+0xf6>
 8000c20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c24:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c28:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000c2c:	fa93 f3a3 	rbit	r3, r3
 8000c30:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c34:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c38:	fab3 f383 	clz	r3, r3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d102      	bne.n	8000c52 <HAL_RCC_OscConfig+0x82>
 8000c4c:	4b99      	ldr	r3, [pc, #612]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	e015      	b.n	8000c7e <HAL_RCC_OscConfig+0xae>
 8000c52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c56:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000c5e:	fa93 f3a3 	rbit	r3, r3
 8000c62:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000c66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c6a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c6e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000c72:	fa93 f3a3 	rbit	r3, r3
 8000c76:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c7a:	4b8e      	ldr	r3, [pc, #568]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c82:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000c86:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000c8a:	fa92 f2a2 	rbit	r2, r2
 8000c8e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000c92:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c96:	fab2 f282 	clz	r2, r2
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	f042 0220 	orr.w	r2, r2, #32
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	f002 021f 	and.w	r2, r2, #31
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cac:	4013      	ands	r3, r2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 8102 	beq.w	8000eb8 <HAL_RCC_OscConfig+0x2e8>
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f040 80fc 	bne.w	8000eb8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	f000 be93 	b.w	80019ec <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd0:	d106      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x110>
 8000cd2:	4b78      	ldr	r3, [pc, #480]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a77      	ldr	r2, [pc, #476]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	e030      	b.n	8000d42 <HAL_RCC_OscConfig+0x172>
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10c      	bne.n	8000d04 <HAL_RCC_OscConfig+0x134>
 8000cea:	4b72      	ldr	r3, [pc, #456]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a71      	ldr	r2, [pc, #452]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	4b6f      	ldr	r3, [pc, #444]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a6e      	ldr	r2, [pc, #440]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e01e      	b.n	8000d42 <HAL_RCC_OscConfig+0x172>
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d0e:	d10c      	bne.n	8000d2a <HAL_RCC_OscConfig+0x15a>
 8000d10:	4b68      	ldr	r3, [pc, #416]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a67      	ldr	r2, [pc, #412]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000d16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	4b65      	ldr	r3, [pc, #404]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a64      	ldr	r2, [pc, #400]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	e00b      	b.n	8000d42 <HAL_RCC_OscConfig+0x172>
 8000d2a:	4b62      	ldr	r3, [pc, #392]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a61      	ldr	r2, [pc, #388]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	4b5f      	ldr	r3, [pc, #380]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a5e      	ldr	r2, [pc, #376]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d40:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d059      	beq.n	8000e00 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4c:	f7ff fca6 	bl	800069c <HAL_GetTick>
 8000d50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d54:	e00a      	b.n	8000d6c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d56:	f7ff fca1 	bl	800069c <HAL_GetTick>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b64      	cmp	r3, #100	; 0x64
 8000d64:	d902      	bls.n	8000d6c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	f000 be40 	b.w	80019ec <HAL_RCC_OscConfig+0xe1c>
 8000d6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d70:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d74:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000d78:	fa93 f3a3 	rbit	r3, r3
 8000d7c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000d80:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d84:	fab3 f383 	clz	r3, r3
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d102      	bne.n	8000d9e <HAL_RCC_OscConfig+0x1ce>
 8000d98:	4b46      	ldr	r3, [pc, #280]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	e015      	b.n	8000dca <HAL_RCC_OscConfig+0x1fa>
 8000d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000daa:	fa93 f3a3 	rbit	r3, r3
 8000dae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000db2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000dba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000dbe:	fa93 f3a3 	rbit	r3, r3
 8000dc2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000dc6:	4b3b      	ldr	r3, [pc, #236]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dce:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000dd2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000dd6:	fa92 f2a2 	rbit	r2, r2
 8000dda:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000dde:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	f042 0220 	orr.w	r2, r2, #32
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	f002 021f 	and.w	r2, r2, #31
 8000df2:	2101      	movs	r1, #1
 8000df4:	fa01 f202 	lsl.w	r2, r1, r2
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0ab      	beq.n	8000d56 <HAL_RCC_OscConfig+0x186>
 8000dfe:	e05c      	b.n	8000eba <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e00:	f7ff fc4c 	bl	800069c <HAL_GetTick>
 8000e04:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e08:	e00a      	b.n	8000e20 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e0a:	f7ff fc47 	bl	800069c <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b64      	cmp	r3, #100	; 0x64
 8000e18:	d902      	bls.n	8000e20 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	f000 bde6 	b.w	80019ec <HAL_RCC_OscConfig+0xe1c>
 8000e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e24:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000e2c:	fa93 f3a3 	rbit	r3, r3
 8000e30:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000e34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e38:	fab3 f383 	clz	r3, r3
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d102      	bne.n	8000e52 <HAL_RCC_OscConfig+0x282>
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	e015      	b.n	8000e7e <HAL_RCC_OscConfig+0x2ae>
 8000e52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e56:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000e5e:	fa93 f3a3 	rbit	r3, r3
 8000e62:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000e66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e6a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e6e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000e72:	fa93 f3a3 	rbit	r3, r3
 8000e76:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_RCC_OscConfig+0x2e4>)
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e82:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000e86:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000e8a:	fa92 f2a2 	rbit	r2, r2
 8000e8e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000e92:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e96:	fab2 f282 	clz	r2, r2
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	f042 0220 	orr.w	r2, r2, #32
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	f002 021f 	and.w	r2, r2, #31
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eac:	4013      	ands	r3, r2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1ab      	bne.n	8000e0a <HAL_RCC_OscConfig+0x23a>
 8000eb2:	e002      	b.n	8000eba <HAL_RCC_OscConfig+0x2ea>
 8000eb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 8170 	beq.w	80011aa <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000eca:	4bd0      	ldr	r3, [pc, #832]	; (800120c <HAL_RCC_OscConfig+0x63c>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 030c 	and.w	r3, r3, #12
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00c      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ed6:	4bcd      	ldr	r3, [pc, #820]	; (800120c <HAL_RCC_OscConfig+0x63c>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d16d      	bne.n	8000fbe <HAL_RCC_OscConfig+0x3ee>
 8000ee2:	4bca      	ldr	r3, [pc, #808]	; (800120c <HAL_RCC_OscConfig+0x63c>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000eee:	d166      	bne.n	8000fbe <HAL_RCC_OscConfig+0x3ee>
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000efa:	fa93 f3a3 	rbit	r3, r3
 8000efe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000f02:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f06:	fab3 f383 	clz	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	095b      	lsrs	r3, r3, #5
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d102      	bne.n	8000f20 <HAL_RCC_OscConfig+0x350>
 8000f1a:	4bbc      	ldr	r3, [pc, #752]	; (800120c <HAL_RCC_OscConfig+0x63c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	e013      	b.n	8000f48 <HAL_RCC_OscConfig+0x378>
 8000f20:	2302      	movs	r3, #2
 8000f22:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f26:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000f2a:	fa93 f3a3 	rbit	r3, r3
 8000f2e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000f32:	2302      	movs	r3, #2
 8000f34:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f38:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000f3c:	fa93 f3a3 	rbit	r3, r3
 8000f40:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f44:	4bb1      	ldr	r3, [pc, #708]	; (800120c <HAL_RCC_OscConfig+0x63c>)
 8000f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f48:	2202      	movs	r2, #2
 8000f4a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000f4e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000f52:	fa92 f2a2 	rbit	r2, r2
 8000f56:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000f5a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f5e:	fab2 f282 	clz	r2, r2
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	f042 0220 	orr.w	r2, r2, #32
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	f002 021f 	and.w	r2, r2, #31
 8000f6e:	2101      	movs	r1, #1
 8000f70:	fa01 f202 	lsl.w	r2, r1, r2
 8000f74:	4013      	ands	r3, r2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d007      	beq.n	8000f8a <HAL_RCC_OscConfig+0x3ba>
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d002      	beq.n	8000f8a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	f000 bd31 	b.w	80019ec <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f8a:	4ba0      	ldr	r3, [pc, #640]	; (800120c <HAL_RCC_OscConfig+0x63c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	21f8      	movs	r1, #248	; 0xf8
 8000f9a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000fa2:	fa91 f1a1 	rbit	r1, r1
 8000fa6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000faa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000fae:	fab1 f181 	clz	r1, r1
 8000fb2:	b2c9      	uxtb	r1, r1
 8000fb4:	408b      	lsls	r3, r1
 8000fb6:	4995      	ldr	r1, [pc, #596]	; (800120c <HAL_RCC_OscConfig+0x63c>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fbc:	e0f5      	b.n	80011aa <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 8085 	beq.w	80010d4 <HAL_RCC_OscConfig+0x504>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000fd4:	fa93 f3a3 	rbit	r3, r3
 8000fd8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000fdc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe0:	fab3 f383 	clz	r3, r3
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fb51 	bl	800069c <HAL_GetTick>
 8000ffa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffe:	e00a      	b.n	8001016 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001000:	f7ff fb4c 	bl	800069c <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d902      	bls.n	8001016 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	f000 bceb 	b.w	80019ec <HAL_RCC_OscConfig+0xe1c>
 8001016:	2302      	movs	r3, #2
 8001018:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001020:	fa93 f3a3 	rbit	r3, r3
 8001024:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001028:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	fab3 f383 	clz	r3, r3
 8001030:	b2db      	uxtb	r3, r3
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	b2db      	uxtb	r3, r3
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b01      	cmp	r3, #1
 800103e:	d102      	bne.n	8001046 <HAL_RCC_OscConfig+0x476>
 8001040:	4b72      	ldr	r3, [pc, #456]	; (800120c <HAL_RCC_OscConfig+0x63c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	e013      	b.n	800106e <HAL_RCC_OscConfig+0x49e>
 8001046:	2302      	movs	r3, #2
 8001048:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001058:	2302      	movs	r3, #2
 800105a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800105e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001062:	fa93 f3a3 	rbit	r3, r3
 8001066:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800106a:	4b68      	ldr	r3, [pc, #416]	; (800120c <HAL_RCC_OscConfig+0x63c>)
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	2202      	movs	r2, #2
 8001070:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001074:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001078:	fa92 f2a2 	rbit	r2, r2
 800107c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001080:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001084:	fab2 f282 	clz	r2, r2
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	f042 0220 	orr.w	r2, r2, #32
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	f002 021f 	and.w	r2, r2, #31
 8001094:	2101      	movs	r1, #1
 8001096:	fa01 f202 	lsl.w	r2, r1, r2
 800109a:	4013      	ands	r3, r2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0af      	beq.n	8001000 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a0:	4b5a      	ldr	r3, [pc, #360]	; (800120c <HAL_RCC_OscConfig+0x63c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	21f8      	movs	r1, #248	; 0xf8
 80010b0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80010b8:	fa91 f1a1 	rbit	r1, r1
 80010bc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80010c0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80010c4:	fab1 f181 	clz	r1, r1
 80010c8:	b2c9      	uxtb	r1, r1
 80010ca:	408b      	lsls	r3, r1
 80010cc:	494f      	ldr	r1, [pc, #316]	; (800120c <HAL_RCC_OscConfig+0x63c>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]
 80010d2:	e06a      	b.n	80011aa <HAL_RCC_OscConfig+0x5da>
 80010d4:	2301      	movs	r3, #1
 80010d6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010da:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80010e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ea:	fab3 f383 	clz	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	461a      	mov	r2, r3
 80010fc:	2300      	movs	r3, #0
 80010fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff facc 	bl	800069c <HAL_GetTick>
 8001104:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001108:	e00a      	b.n	8001120 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110a:	f7ff fac7 	bl	800069c <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d902      	bls.n	8001120 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	f000 bc66 	b.w	80019ec <HAL_RCC_OscConfig+0xe1c>
 8001120:	2302      	movs	r3, #2
 8001122:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001132:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	095b      	lsrs	r3, r3, #5
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d102      	bne.n	8001150 <HAL_RCC_OscConfig+0x580>
 800114a:	4b30      	ldr	r3, [pc, #192]	; (800120c <HAL_RCC_OscConfig+0x63c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	e013      	b.n	8001178 <HAL_RCC_OscConfig+0x5a8>
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800115a:	fa93 f3a3 	rbit	r3, r3
 800115e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001162:	2302      	movs	r3, #2
 8001164:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001168:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800116c:	fa93 f3a3 	rbit	r3, r3
 8001170:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001174:	4b25      	ldr	r3, [pc, #148]	; (800120c <HAL_RCC_OscConfig+0x63c>)
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	2202      	movs	r2, #2
 800117a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800117e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001182:	fa92 f2a2 	rbit	r2, r2
 8001186:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800118a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800118e:	fab2 f282 	clz	r2, r2
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	f042 0220 	orr.w	r2, r2, #32
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	f002 021f 	and.w	r2, r2, #31
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1af      	bne.n	800110a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 80da 	beq.w	800136e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d069      	beq.n	8001298 <HAL_RCC_OscConfig+0x6c8>
 80011c4:	2301      	movs	r3, #1
 80011c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011ce:	fa93 f3a3 	rbit	r3, r3
 80011d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80011d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011da:	fab3 f383 	clz	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_RCC_OscConfig+0x640>)
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	461a      	mov	r2, r3
 80011ea:	2301      	movs	r3, #1
 80011ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fa55 	bl	800069c <HAL_GetTick>
 80011f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f6:	e00d      	b.n	8001214 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f8:	f7ff fa50 	bl	800069c <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d905      	bls.n	8001214 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e3ef      	b.n	80019ec <HAL_RCC_OscConfig+0xe1c>
 800120c:	40021000 	.word	0x40021000
 8001210:	10908120 	.word	0x10908120
 8001214:	2302      	movs	r3, #2
 8001216:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800121e:	fa93 f2a3 	rbit	r2, r3
 8001222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800122c:	2202      	movs	r2, #2
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	fa93 f2a3 	rbit	r2, r3
 800123a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001244:	2202      	movs	r2, #2
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	fa93 f2a3 	rbit	r2, r3
 8001252:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001256:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001258:	4ba4      	ldr	r3, [pc, #656]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 800125a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800125c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001260:	2102      	movs	r1, #2
 8001262:	6019      	str	r1, [r3, #0]
 8001264:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	fa93 f1a3 	rbit	r1, r3
 800126e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001272:	6019      	str	r1, [r3, #0]
  return result;
 8001274:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	fab3 f383 	clz	r3, r3
 800127e:	b2db      	uxtb	r3, r3
 8001280:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001284:	b2db      	uxtb	r3, r3
 8001286:	f003 031f 	and.w	r3, r3, #31
 800128a:	2101      	movs	r1, #1
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	4013      	ands	r3, r2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0b0      	beq.n	80011f8 <HAL_RCC_OscConfig+0x628>
 8001296:	e06a      	b.n	800136e <HAL_RCC_OscConfig+0x79e>
 8001298:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800129c:	2201      	movs	r2, #1
 800129e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	fa93 f2a3 	rbit	r2, r3
 80012aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80012ae:	601a      	str	r2, [r3, #0]
  return result;
 80012b0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80012b4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b6:	fab3 f383 	clz	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	4b8c      	ldr	r3, [pc, #560]	; (80014f0 <HAL_RCC_OscConfig+0x920>)
 80012c0:	4413      	add	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	461a      	mov	r2, r3
 80012c6:	2300      	movs	r3, #0
 80012c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff f9e7 	bl	800069c <HAL_GetTick>
 80012ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d2:	e009      	b.n	80012e8 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff f9e2 	bl	800069c <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e381      	b.n	80019ec <HAL_RCC_OscConfig+0xe1c>
 80012e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012ec:	2202      	movs	r2, #2
 80012ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	fa93 f2a3 	rbit	r2, r3
 80012fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001304:	2202      	movs	r2, #2
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	fa93 f2a3 	rbit	r2, r3
 8001312:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800131c:	2202      	movs	r2, #2
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	fa93 f2a3 	rbit	r2, r3
 800132a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800132e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001330:	4b6e      	ldr	r3, [pc, #440]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 8001332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001334:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001338:	2102      	movs	r1, #2
 800133a:	6019      	str	r1, [r3, #0]
 800133c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	fa93 f1a3 	rbit	r1, r3
 8001346:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800134a:	6019      	str	r1, [r3, #0]
  return result;
 800134c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800135c:	b2db      	uxtb	r3, r3
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	2101      	movs	r1, #1
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	4013      	ands	r3, r2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1b2      	bne.n	80012d4 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8157 	beq.w	800162c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001384:	4b59      	ldr	r3, [pc, #356]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d112      	bne.n	80013b6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001390:	4b56      	ldr	r3, [pc, #344]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	4a55      	ldr	r2, [pc, #340]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 8001396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139a:	61d3      	str	r3, [r2, #28]
 800139c:	4b53      	ldr	r3, [pc, #332]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013b0:	2301      	movs	r3, #1
 80013b2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b6:	4b4f      	ldr	r3, [pc, #316]	; (80014f4 <HAL_RCC_OscConfig+0x924>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d11a      	bne.n	80013f8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c2:	4b4c      	ldr	r3, [pc, #304]	; (80014f4 <HAL_RCC_OscConfig+0x924>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a4b      	ldr	r2, [pc, #300]	; (80014f4 <HAL_RCC_OscConfig+0x924>)
 80013c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ce:	f7ff f965 	bl	800069c <HAL_GetTick>
 80013d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d6:	e009      	b.n	80013ec <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d8:	f7ff f960 	bl	800069c <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b64      	cmp	r3, #100	; 0x64
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e2ff      	b.n	80019ec <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ec:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <HAL_RCC_OscConfig+0x924>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0ef      	beq.n	80013d8 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d106      	bne.n	8001410 <HAL_RCC_OscConfig+0x840>
 8001402:	4b3a      	ldr	r3, [pc, #232]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4a39      	ldr	r2, [pc, #228]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6213      	str	r3, [r2, #32]
 800140e:	e02f      	b.n	8001470 <HAL_RCC_OscConfig+0x8a0>
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0x864>
 800141a:	4b34      	ldr	r3, [pc, #208]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	4a33      	ldr	r2, [pc, #204]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 8001420:	f023 0301 	bic.w	r3, r3, #1
 8001424:	6213      	str	r3, [r2, #32]
 8001426:	4b31      	ldr	r3, [pc, #196]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	4a30      	ldr	r2, [pc, #192]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 800142c:	f023 0304 	bic.w	r3, r3, #4
 8001430:	6213      	str	r3, [r2, #32]
 8001432:	e01d      	b.n	8001470 <HAL_RCC_OscConfig+0x8a0>
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b05      	cmp	r3, #5
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x888>
 800143e:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	4a2a      	ldr	r2, [pc, #168]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6213      	str	r3, [r2, #32]
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	4a27      	ldr	r2, [pc, #156]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6213      	str	r3, [r2, #32]
 8001456:	e00b      	b.n	8001470 <HAL_RCC_OscConfig+0x8a0>
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4a23      	ldr	r2, [pc, #140]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	6213      	str	r3, [r2, #32]
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a20      	ldr	r2, [pc, #128]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 800146a:	f023 0304 	bic.w	r3, r3, #4
 800146e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d06a      	beq.n	8001550 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff f90f 	bl	800069c <HAL_GetTick>
 800147e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001482:	e00b      	b.n	800149c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff f90a 	bl	800069c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	f241 3288 	movw	r2, #5000	; 0x1388
 8001494:	4293      	cmp	r3, r2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e2a7      	b.n	80019ec <HAL_RCC_OscConfig+0xe1c>
 800149c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014a0:	2202      	movs	r2, #2
 80014a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	fa93 f2a3 	rbit	r2, r3
 80014ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014b8:	2202      	movs	r2, #2
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	fa93 f2a3 	rbit	r2, r3
 80014c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014ca:	601a      	str	r2, [r3, #0]
  return result;
 80014cc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d2:	fab3 f383 	clz	r3, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	095b      	lsrs	r3, r3, #5
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d108      	bne.n	80014f8 <HAL_RCC_OscConfig+0x928>
 80014e6:	4b01      	ldr	r3, [pc, #4]	; (80014ec <HAL_RCC_OscConfig+0x91c>)
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	e013      	b.n	8001514 <HAL_RCC_OscConfig+0x944>
 80014ec:	40021000 	.word	0x40021000
 80014f0:	10908120 	.word	0x10908120
 80014f4:	40007000 	.word	0x40007000
 80014f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014fc:	2202      	movs	r2, #2
 80014fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	fa93 f2a3 	rbit	r2, r3
 800150a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	4bc0      	ldr	r3, [pc, #768]	; (8001814 <HAL_RCC_OscConfig+0xc44>)
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001518:	2102      	movs	r1, #2
 800151a:	6011      	str	r1, [r2, #0]
 800151c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	fa92 f1a2 	rbit	r1, r2
 8001526:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800152a:	6011      	str	r1, [r2, #0]
  return result;
 800152c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	fab2 f282 	clz	r2, r2
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	f002 021f 	and.w	r2, r2, #31
 8001542:	2101      	movs	r1, #1
 8001544:	fa01 f202 	lsl.w	r2, r1, r2
 8001548:	4013      	ands	r3, r2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d09a      	beq.n	8001484 <HAL_RCC_OscConfig+0x8b4>
 800154e:	e063      	b.n	8001618 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001550:	f7ff f8a4 	bl	800069c <HAL_GetTick>
 8001554:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001558:	e00b      	b.n	8001572 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800155a:	f7ff f89f 	bl	800069c <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f241 3288 	movw	r2, #5000	; 0x1388
 800156a:	4293      	cmp	r3, r2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e23c      	b.n	80019ec <HAL_RCC_OscConfig+0xe1c>
 8001572:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001576:	2202      	movs	r2, #2
 8001578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	fa93 f2a3 	rbit	r2, r3
 8001584:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800158e:	2202      	movs	r2, #2
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	fa93 f2a3 	rbit	r2, r3
 800159c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015a0:	601a      	str	r2, [r3, #0]
  return result;
 80015a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a8:	fab3 f383 	clz	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	095b      	lsrs	r3, r3, #5
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f043 0302 	orr.w	r3, r3, #2
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d102      	bne.n	80015c2 <HAL_RCC_OscConfig+0x9f2>
 80015bc:	4b95      	ldr	r3, [pc, #596]	; (8001814 <HAL_RCC_OscConfig+0xc44>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	e00d      	b.n	80015de <HAL_RCC_OscConfig+0xa0e>
 80015c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015c6:	2202      	movs	r2, #2
 80015c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	fa93 f2a3 	rbit	r2, r3
 80015d4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	4b8e      	ldr	r3, [pc, #568]	; (8001814 <HAL_RCC_OscConfig+0xc44>)
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80015e2:	2102      	movs	r1, #2
 80015e4:	6011      	str	r1, [r2, #0]
 80015e6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	fa92 f1a2 	rbit	r1, r2
 80015f0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015f4:	6011      	str	r1, [r2, #0]
  return result;
 80015f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	fab2 f282 	clz	r2, r2
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	f002 021f 	and.w	r2, r2, #31
 800160c:	2101      	movs	r1, #1
 800160e:	fa01 f202 	lsl.w	r2, r1, r2
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1a0      	bne.n	800155a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001618:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800161c:	2b01      	cmp	r3, #1
 800161e:	d105      	bne.n	800162c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001620:	4b7c      	ldr	r3, [pc, #496]	; (8001814 <HAL_RCC_OscConfig+0xc44>)
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	4a7b      	ldr	r2, [pc, #492]	; (8001814 <HAL_RCC_OscConfig+0xc44>)
 8001626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800162a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 81d9 	beq.w	80019ea <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001638:	4b76      	ldr	r3, [pc, #472]	; (8001814 <HAL_RCC_OscConfig+0xc44>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b08      	cmp	r3, #8
 8001642:	f000 81a6 	beq.w	8001992 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2b02      	cmp	r3, #2
 800164e:	f040 811e 	bne.w	800188e <HAL_RCC_OscConfig+0xcbe>
 8001652:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001656:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800165a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	fa93 f2a3 	rbit	r2, r3
 8001666:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800166a:	601a      	str	r2, [r3, #0]
  return result;
 800166c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001670:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	fab3 f383 	clz	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800167c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	461a      	mov	r2, r3
 8001684:	2300      	movs	r3, #0
 8001686:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff f808 	bl	800069c <HAL_GetTick>
 800168c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001690:	e009      	b.n	80016a6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001692:	f7ff f803 	bl	800069c <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e1a2      	b.n	80019ec <HAL_RCC_OscConfig+0xe1c>
 80016a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	fa93 f2a3 	rbit	r2, r3
 80016ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016be:	601a      	str	r2, [r3, #0]
  return result;
 80016c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c6:	fab3 f383 	clz	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	095b      	lsrs	r3, r3, #5
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d102      	bne.n	80016e0 <HAL_RCC_OscConfig+0xb10>
 80016da:	4b4e      	ldr	r3, [pc, #312]	; (8001814 <HAL_RCC_OscConfig+0xc44>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	e01b      	b.n	8001718 <HAL_RCC_OscConfig+0xb48>
 80016e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	fa93 f2a3 	rbit	r2, r3
 80016f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	fa93 f2a3 	rbit	r2, r3
 800170e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	4b3f      	ldr	r3, [pc, #252]	; (8001814 <HAL_RCC_OscConfig+0xc44>)
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800171c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001720:	6011      	str	r1, [r2, #0]
 8001722:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	fa92 f1a2 	rbit	r1, r2
 800172c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001730:	6011      	str	r1, [r2, #0]
  return result;
 8001732:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	fab2 f282 	clz	r2, r2
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	f042 0220 	orr.w	r2, r2, #32
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	f002 021f 	and.w	r2, r2, #31
 8001748:	2101      	movs	r1, #1
 800174a:	fa01 f202 	lsl.w	r2, r1, r2
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d19e      	bne.n	8001692 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001754:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <HAL_RCC_OscConfig+0xc44>)
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	f023 020f 	bic.w	r2, r3, #15
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	492c      	ldr	r1, [pc, #176]	; (8001814 <HAL_RCC_OscConfig+0xc44>)
 8001764:	4313      	orrs	r3, r2
 8001766:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001768:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <HAL_RCC_OscConfig+0xc44>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6a19      	ldr	r1, [r3, #32]
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	430b      	orrs	r3, r1
 800177e:	4925      	ldr	r1, [pc, #148]	; (8001814 <HAL_RCC_OscConfig+0xc44>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
 8001784:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001788:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800178c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	fa93 f2a3 	rbit	r2, r3
 8001798:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800179c:	601a      	str	r2, [r3, #0]
  return result;
 800179e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017a2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a4:	fab3 f383 	clz	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	461a      	mov	r2, r3
 80017b6:	2301      	movs	r3, #1
 80017b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7fe ff6f 	bl	800069c <HAL_GetTick>
 80017be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c2:	e009      	b.n	80017d8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c4:	f7fe ff6a 	bl	800069c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e109      	b.n	80019ec <HAL_RCC_OscConfig+0xe1c>
 80017d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	fa93 f2a3 	rbit	r2, r3
 80017ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017f0:	601a      	str	r2, [r3, #0]
  return result;
 80017f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f8:	fab3 f383 	clz	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b01      	cmp	r3, #1
 800180a:	d105      	bne.n	8001818 <HAL_RCC_OscConfig+0xc48>
 800180c:	4b01      	ldr	r3, [pc, #4]	; (8001814 <HAL_RCC_OscConfig+0xc44>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	e01e      	b.n	8001850 <HAL_RCC_OscConfig+0xc80>
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800181c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	fa93 f2a3 	rbit	r2, r3
 800182c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001836:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	fa93 f2a3 	rbit	r2, r3
 8001846:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <HAL_RCC_OscConfig+0xe28>)
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001854:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001858:	6011      	str	r1, [r2, #0]
 800185a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	fa92 f1a2 	rbit	r1, r2
 8001864:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001868:	6011      	str	r1, [r2, #0]
  return result;
 800186a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	fab2 f282 	clz	r2, r2
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	f042 0220 	orr.w	r2, r2, #32
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	f002 021f 	and.w	r2, r2, #31
 8001880:	2101      	movs	r1, #1
 8001882:	fa01 f202 	lsl.w	r2, r1, r2
 8001886:	4013      	ands	r3, r2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d09b      	beq.n	80017c4 <HAL_RCC_OscConfig+0xbf4>
 800188c:	e0ad      	b.n	80019ea <HAL_RCC_OscConfig+0xe1a>
 800188e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001892:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	fa93 f2a3 	rbit	r2, r3
 80018a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a6:	601a      	str	r2, [r3, #0]
  return result;
 80018a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ae:	fab3 f383 	clz	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	461a      	mov	r2, r3
 80018c0:	2300      	movs	r3, #0
 80018c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7fe feea 	bl	800069c <HAL_GetTick>
 80018c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018cc:	e009      	b.n	80018e2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ce:	f7fe fee5 	bl	800069c <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e084      	b.n	80019ec <HAL_RCC_OscConfig+0xe1c>
 80018e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fa:	601a      	str	r2, [r3, #0]
  return result;
 80018fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001900:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001902:	fab3 f383 	clz	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	095b      	lsrs	r3, r3, #5
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d102      	bne.n	800191c <HAL_RCC_OscConfig+0xd4c>
 8001916:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <HAL_RCC_OscConfig+0xe28>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	e01b      	b.n	8001954 <HAL_RCC_OscConfig+0xd84>
 800191c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001920:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	fa93 f2a3 	rbit	r2, r3
 8001930:	f107 0320 	add.w	r3, r7, #32
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	fa93 f2a3 	rbit	r2, r3
 800194a:	f107 0318 	add.w	r3, r7, #24
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <HAL_RCC_OscConfig+0xe28>)
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	f107 0214 	add.w	r2, r7, #20
 8001958:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800195c:	6011      	str	r1, [r2, #0]
 800195e:	f107 0214 	add.w	r2, r7, #20
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	fa92 f1a2 	rbit	r1, r2
 8001968:	f107 0210 	add.w	r2, r7, #16
 800196c:	6011      	str	r1, [r2, #0]
  return result;
 800196e:	f107 0210 	add.w	r2, r7, #16
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	fab2 f282 	clz	r2, r2
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	f042 0220 	orr.w	r2, r2, #32
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	f002 021f 	and.w	r2, r2, #31
 8001984:	2101      	movs	r1, #1
 8001986:	fa01 f202 	lsl.w	r2, r1, r2
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d19e      	bne.n	80018ce <HAL_RCC_OscConfig+0xcfe>
 8001990:	e02b      	b.n	80019ea <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e025      	b.n	80019ec <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_RCC_OscConfig+0xe28>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_RCC_OscConfig+0xe28>)
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80019b4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d111      	bne.n	80019e6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80019c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80019c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d108      	bne.n	80019e6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80019d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d8:	f003 020f 	and.w	r2, r3, #15
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000

080019fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b09e      	sub	sp, #120	; 0x78
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e162      	b.n	8001cda <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a14:	4b90      	ldr	r3, [pc, #576]	; (8001c58 <HAL_RCC_ClockConfig+0x25c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d910      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b8d      	ldr	r3, [pc, #564]	; (8001c58 <HAL_RCC_ClockConfig+0x25c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 0207 	bic.w	r2, r3, #7
 8001a2a:	498b      	ldr	r1, [pc, #556]	; (8001c58 <HAL_RCC_ClockConfig+0x25c>)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b89      	ldr	r3, [pc, #548]	; (8001c58 <HAL_RCC_ClockConfig+0x25c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e14a      	b.n	8001cda <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a50:	4b82      	ldr	r3, [pc, #520]	; (8001c5c <HAL_RCC_ClockConfig+0x260>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	497f      	ldr	r1, [pc, #508]	; (8001c5c <HAL_RCC_ClockConfig+0x260>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 80dc 	beq.w	8001c28 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d13c      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xf6>
 8001a78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a7c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d102      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xa6>
 8001a9c:	4b6f      	ldr	r3, [pc, #444]	; (8001c5c <HAL_RCC_ClockConfig+0x260>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	e00f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0xc6>
 8001aa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	667b      	str	r3, [r7, #100]	; 0x64
 8001ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab4:	663b      	str	r3, [r7, #96]	; 0x60
 8001ab6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001abe:	4b67      	ldr	r3, [pc, #412]	; (8001c5c <HAL_RCC_ClockConfig+0x260>)
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ac6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ac8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001aca:	fa92 f2a2 	rbit	r2, r2
 8001ace:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ad0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ad2:	fab2 f282 	clz	r2, r2
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	f042 0220 	orr.w	r2, r2, #32
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	f002 021f 	and.w	r2, r2, #31
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d17b      	bne.n	8001be6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e0f3      	b.n	8001cda <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d13c      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x178>
 8001afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001afe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b02:	fa93 f3a3 	rbit	r3, r3
 8001b06:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	095b      	lsrs	r3, r3, #5
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d102      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x128>
 8001b1e:	4b4f      	ldr	r3, [pc, #316]	; (8001c5c <HAL_RCC_ClockConfig+0x260>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	e00f      	b.n	8001b44 <HAL_RCC_ClockConfig+0x148>
 8001b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b2c:	fa93 f3a3 	rbit	r3, r3
 8001b30:	647b      	str	r3, [r7, #68]	; 0x44
 8001b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b36:	643b      	str	r3, [r7, #64]	; 0x40
 8001b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b40:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <HAL_RCC_ClockConfig+0x260>)
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b48:	63ba      	str	r2, [r7, #56]	; 0x38
 8001b4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b4c:	fa92 f2a2 	rbit	r2, r2
 8001b50:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b54:	fab2 f282 	clz	r2, r2
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	f042 0220 	orr.w	r2, r2, #32
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	f002 021f 	and.w	r2, r2, #31
 8001b64:	2101      	movs	r1, #1
 8001b66:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d13a      	bne.n	8001be6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0b2      	b.n	8001cda <HAL_RCC_ClockConfig+0x2de>
 8001b74:	2302      	movs	r3, #2
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b82:	fab3 f383 	clz	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	095b      	lsrs	r3, r3, #5
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d102      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x1a0>
 8001b96:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <HAL_RCC_ClockConfig+0x260>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	e00d      	b.n	8001bb8 <HAL_RCC_ClockConfig+0x1bc>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba8:	2302      	movs	r3, #2
 8001baa:	623b      	str	r3, [r7, #32]
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <HAL_RCC_ClockConfig+0x260>)
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	2202      	movs	r2, #2
 8001bba:	61ba      	str	r2, [r7, #24]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	fa92 f2a2 	rbit	r2, r2
 8001bc2:	617a      	str	r2, [r7, #20]
  return result;
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	fab2 f282 	clz	r2, r2
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	f042 0220 	orr.w	r2, r2, #32
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	f002 021f 	and.w	r2, r2, #31
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e079      	b.n	8001cda <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_RCC_ClockConfig+0x260>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f023 0203 	bic.w	r2, r3, #3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	491a      	ldr	r1, [pc, #104]	; (8001c5c <HAL_RCC_ClockConfig+0x260>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf8:	f7fe fd50 	bl	800069c <HAL_GetTick>
 8001bfc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c00:	f7fe fd4c 	bl	800069c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e061      	b.n	8001cda <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_RCC_ClockConfig+0x260>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 020c 	and.w	r2, r3, #12
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d1eb      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_ClockConfig+0x25c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d214      	bcs.n	8001c60 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_RCC_ClockConfig+0x25c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 0207 	bic.w	r2, r3, #7
 8001c3e:	4906      	ldr	r1, [pc, #24]	; (8001c58 <HAL_RCC_ClockConfig+0x25c>)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <HAL_RCC_ClockConfig+0x25c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e040      	b.n	8001cda <HAL_RCC_ClockConfig+0x2de>
 8001c58:	40022000 	.word	0x40022000
 8001c5c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_RCC_ClockConfig+0x2e8>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	491a      	ldr	r1, [pc, #104]	; (8001ce4 <HAL_RCC_ClockConfig+0x2e8>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d009      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_RCC_ClockConfig+0x2e8>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4912      	ldr	r1, [pc, #72]	; (8001ce4 <HAL_RCC_ClockConfig+0x2e8>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c9e:	f000 f829 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8001ca2:	4601      	mov	r1, r0
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_RCC_ClockConfig+0x2e8>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cac:	22f0      	movs	r2, #240	; 0xf0
 8001cae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	fa92 f2a2 	rbit	r2, r2
 8001cb6:	60fa      	str	r2, [r7, #12]
  return result;
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	fab2 f282 	clz	r2, r2
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	40d3      	lsrs	r3, r2
 8001cc2:	4a09      	ldr	r2, [pc, #36]	; (8001ce8 <HAL_RCC_ClockConfig+0x2ec>)
 8001cc4:	5cd3      	ldrb	r3, [r2, r3]
 8001cc6:	fa21 f303 	lsr.w	r3, r1, r3
 8001cca:	4a08      	ldr	r2, [pc, #32]	; (8001cec <HAL_RCC_ClockConfig+0x2f0>)
 8001ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <HAL_RCC_ClockConfig+0x2f4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fc06 	bl	80004e4 <HAL_InitTick>
  
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3778      	adds	r7, #120	; 0x78
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	08005bf4 	.word	0x08005bf4
 8001cec:	20000010 	.word	0x20000010
 8001cf0:	20000014 	.word	0x20000014

08001cf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b08b      	sub	sp, #44	; 0x2c
 8001cf8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d002      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x30>
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d003      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0x36>
 8001d22:	e03f      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d26:	623b      	str	r3, [r7, #32]
      break;
 8001d28:	e03f      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d30:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001d34:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	fa92 f2a2 	rbit	r2, r2
 8001d3c:	607a      	str	r2, [r7, #4]
  return result;
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	fab2 f282 	clz	r2, r2
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	40d3      	lsrs	r3, r2
 8001d48:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001d4a:	5cd3      	ldrb	r3, [r2, r3]
 8001d4c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	220f      	movs	r2, #15
 8001d58:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	fa92 f2a2 	rbit	r2, r2
 8001d60:	60fa      	str	r2, [r7, #12]
  return result;
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	fab2 f282 	clz	r2, r2
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	40d3      	lsrs	r3, r2
 8001d6c:	4a15      	ldr	r2, [pc, #84]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d6e:	5cd3      	ldrb	r3, [r2, r3]
 8001d70:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d008      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d7c:	4a0f      	ldr	r2, [pc, #60]	; (8001dbc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8c:	e007      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	; (8001dbc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	fb02 f303 	mul.w	r3, r2, r3
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	623b      	str	r3, [r7, #32]
      break;
 8001da2:	e002      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001da6:	623b      	str	r3, [r7, #32]
      break;
 8001da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001daa:	6a3b      	ldr	r3, [r7, #32]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	372c      	adds	r7, #44	; 0x2c
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	007a1200 	.word	0x007a1200
 8001dc0:	08005c0c 	.word	0x08005c0c
 8001dc4:	08005c1c 	.word	0x08005c1c

08001dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000010 	.word	0x20000010

08001de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001de6:	f7ff ffef 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8001dea:	4601      	mov	r1, r0
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001df4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001df8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	fa92 f2a2 	rbit	r2, r2
 8001e00:	603a      	str	r2, [r7, #0]
  return result;
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	fab2 f282 	clz	r2, r2
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	40d3      	lsrs	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	08005c04 	.word	0x08005c04

08001e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001e2a:	f7ff ffcd 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8001e2e:	4601      	mov	r1, r0
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001e38:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001e3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	fa92 f2a2 	rbit	r2, r2
 8001e44:	603a      	str	r2, [r7, #0]
  return result;
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	fab2 f282 	clz	r2, r2
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	40d3      	lsrs	r3, r2
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001e52:	5cd3      	ldrb	r3, [r2, r3]
 8001e54:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	08005c04 	.word	0x08005c04

08001e68 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	220f      	movs	r2, #15
 8001e76:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0203 	and.w	r2, r3, #3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	08db      	lsrs	r3, r3, #3
 8001ea2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <HAL_RCC_GetClockConfig+0x60>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0207 	and.w	r2, r3, #7
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	601a      	str	r2, [r3, #0]
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40022000 	.word	0x40022000

08001ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b092      	sub	sp, #72	; 0x48
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80d4 	beq.w	8002098 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef0:	4b4e      	ldr	r3, [pc, #312]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10e      	bne.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efc:	4b4b      	ldr	r3, [pc, #300]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	4a4a      	ldr	r2, [pc, #296]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f06:	61d3      	str	r3, [r2, #28]
 8001f08:	4b48      	ldr	r3, [pc, #288]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f14:	2301      	movs	r3, #1
 8001f16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1a:	4b45      	ldr	r3, [pc, #276]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d118      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f26:	4b42      	ldr	r3, [pc, #264]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a41      	ldr	r2, [pc, #260]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f32:	f7fe fbb3 	bl	800069c <HAL_GetTick>
 8001f36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	e008      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3a:	f7fe fbaf 	bl	800069c <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b64      	cmp	r3, #100	; 0x64
 8001f46:	d901      	bls.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e1d6      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4c:	4b38      	ldr	r3, [pc, #224]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f58:	4b34      	ldr	r3, [pc, #208]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 8084 	beq.w	8002072 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d07c      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f78:	4b2c      	ldr	r3, [pc, #176]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b26      	ldr	r3, [pc, #152]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001faa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fca:	4a18      	ldr	r2, [pc, #96]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d04b      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7fe fb5f 	bl	800069c <HAL_GetTick>
 8001fde:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7fe fb5b 	bl	800069c <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e180      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
 8002004:	2302      	movs	r3, #2
 8002006:	623b      	str	r3, [r7, #32]
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	61fb      	str	r3, [r7, #28]
  return result;
 8002010:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d108      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002026:	4b01      	ldr	r3, [pc, #4]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	e00d      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800202c:	40021000 	.word	0x40021000
 8002030:	40007000 	.word	0x40007000
 8002034:	10908100 	.word	0x10908100
 8002038:	2302      	movs	r3, #2
 800203a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	4ba0      	ldr	r3, [pc, #640]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	2202      	movs	r2, #2
 800204a:	613a      	str	r2, [r7, #16]
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	fa92 f2a2 	rbit	r2, r2
 8002052:	60fa      	str	r2, [r7, #12]
  return result;
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	fab2 f282 	clz	r2, r2
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	f002 021f 	and.w	r2, r2, #31
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0b7      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002072:	4b95      	ldr	r3, [pc, #596]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4992      	ldr	r1, [pc, #584]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002080:	4313      	orrs	r3, r2
 8002082:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002084:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002088:	2b01      	cmp	r3, #1
 800208a:	d105      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208c:	4b8e      	ldr	r3, [pc, #568]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	4a8d      	ldr	r2, [pc, #564]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002096:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020a4:	4b88      	ldr	r3, [pc, #544]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	f023 0203 	bic.w	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4985      	ldr	r1, [pc, #532]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020c2:	4b81      	ldr	r3, [pc, #516]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	497e      	ldr	r1, [pc, #504]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020e0:	4b79      	ldr	r3, [pc, #484]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	4976      	ldr	r1, [pc, #472]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d008      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020fe:	4b72      	ldr	r3, [pc, #456]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f023 0210 	bic.w	r2, r3, #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	496f      	ldr	r1, [pc, #444]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800210c:	4313      	orrs	r3, r2
 800210e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002128:	4967      	ldr	r1, [pc, #412]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d008      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800213a:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f023 0220 	bic.w	r2, r3, #32
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4960      	ldr	r1, [pc, #384]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002148:	4313      	orrs	r3, r2
 800214a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002158:	4b5b      	ldr	r3, [pc, #364]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	4958      	ldr	r1, [pc, #352]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002166:	4313      	orrs	r3, r2
 8002168:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d008      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002176:	4b54      	ldr	r3, [pc, #336]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	4951      	ldr	r1, [pc, #324]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002184:	4313      	orrs	r3, r2
 8002186:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002194:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4949      	ldr	r1, [pc, #292]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d008      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021b2:	4b45      	ldr	r3, [pc, #276]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4942      	ldr	r1, [pc, #264]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021d0:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	493a      	ldr	r1, [pc, #232]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80021ee:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fa:	4933      	ldr	r1, [pc, #204]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800220c:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002218:	492b      	ldr	r1, [pc, #172]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800221a:	4313      	orrs	r3, r2
 800221c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d008      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800222a:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4924      	ldr	r1, [pc, #144]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002238:	4313      	orrs	r3, r2
 800223a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002248:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002254:	491c      	ldr	r1, [pc, #112]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002256:	4313      	orrs	r3, r2
 8002258:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d008      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	4915      	ldr	r1, [pc, #84]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002274:	4313      	orrs	r3, r2
 8002276:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002290:	490d      	ldr	r1, [pc, #52]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002292:	4313      	orrs	r3, r2
 8002294:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d008      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ae:	4906      	ldr	r1, [pc, #24]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00c      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80022c0:	4b01      	ldr	r3, [pc, #4]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	e002      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x400>
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d4:	490b      	ldr	r1, [pc, #44]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f2:	4904      	ldr	r1, [pc, #16]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3748      	adds	r7, #72	; 0x48
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000

08002308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e049      	b.n	80023ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f841 	bl	80023b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	4619      	mov	r1, r3
 8002346:	4610      	mov	r0, r2
 8002348:	f000 f9f8 	bl	800273c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d001      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e04f      	b.n	8002484 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a23      	ldr	r2, [pc, #140]	; (8002490 <HAL_TIM_Base_Start_IT+0xc4>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d01d      	beq.n	8002442 <HAL_TIM_Base_Start_IT+0x76>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240e:	d018      	beq.n	8002442 <HAL_TIM_Base_Start_IT+0x76>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a1f      	ldr	r2, [pc, #124]	; (8002494 <HAL_TIM_Base_Start_IT+0xc8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <HAL_TIM_Base_Start_IT+0x76>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a1e      	ldr	r2, [pc, #120]	; (8002498 <HAL_TIM_Base_Start_IT+0xcc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d00e      	beq.n	8002442 <HAL_TIM_Base_Start_IT+0x76>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1c      	ldr	r2, [pc, #112]	; (800249c <HAL_TIM_Base_Start_IT+0xd0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d009      	beq.n	8002442 <HAL_TIM_Base_Start_IT+0x76>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d004      	beq.n	8002442 <HAL_TIM_Base_Start_IT+0x76>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d115      	bne.n	800246e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800244a:	4013      	ands	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b06      	cmp	r3, #6
 8002452:	d015      	beq.n	8002480 <HAL_TIM_Base_Start_IT+0xb4>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245a:	d011      	beq.n	8002480 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246c:	e008      	b.n	8002480 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0201 	orr.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e000      	b.n	8002482 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002480:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	40012c00 	.word	0x40012c00
 8002494:	40000400 	.word	0x40000400
 8002498:	40000800 	.word	0x40000800
 800249c:	40013400 	.word	0x40013400
 80024a0:	40014000 	.word	0x40014000
 80024a4:	40015000 	.word	0x40015000
 80024a8:	00010007 	.word	0x00010007

080024ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d122      	bne.n	8002508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d11b      	bne.n	8002508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0202 	mvn.w	r2, #2
 80024d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f905 	bl	80026fe <HAL_TIM_IC_CaptureCallback>
 80024f4:	e005      	b.n	8002502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f8f7 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f908 	bl	8002712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b04      	cmp	r3, #4
 8002514:	d122      	bne.n	800255c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b04      	cmp	r3, #4
 8002522:	d11b      	bne.n	800255c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0204 	mvn.w	r2, #4
 800252c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2202      	movs	r2, #2
 8002532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f8db 	bl	80026fe <HAL_TIM_IC_CaptureCallback>
 8002548:	e005      	b.n	8002556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f8cd 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f8de 	bl	8002712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b08      	cmp	r3, #8
 8002568:	d122      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b08      	cmp	r3, #8
 8002576:	d11b      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0208 	mvn.w	r2, #8
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2204      	movs	r2, #4
 8002586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f8b1 	bl	80026fe <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f8a3 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f8b4 	bl	8002712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b10      	cmp	r3, #16
 80025bc:	d122      	bne.n	8002604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b10      	cmp	r3, #16
 80025ca:	d11b      	bne.n	8002604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0210 	mvn.w	r2, #16
 80025d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2208      	movs	r2, #8
 80025da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f887 	bl	80026fe <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f879 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f88a 	bl	8002712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b01      	cmp	r3, #1
 8002610:	d10e      	bne.n	8002630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d107      	bne.n	8002630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0201 	mvn.w	r2, #1
 8002628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fd feda 	bl	80003e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263a:	2b80      	cmp	r3, #128	; 0x80
 800263c:	d10e      	bne.n	800265c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002648:	2b80      	cmp	r3, #128	; 0x80
 800264a:	d107      	bne.n	800265c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f918 	bl	800288c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800266a:	d10e      	bne.n	800268a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002676:	2b80      	cmp	r3, #128	; 0x80
 8002678:	d107      	bne.n	800268a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f90b 	bl	80028a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002694:	2b40      	cmp	r3, #64	; 0x40
 8002696:	d10e      	bne.n	80026b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b40      	cmp	r3, #64	; 0x40
 80026a4:	d107      	bne.n	80026b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f838 	bl	8002726 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d10e      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d107      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f06f 0220 	mvn.w	r2, #32
 80026da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f8cb 	bl	8002878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a42      	ldr	r2, [pc, #264]	; (8002858 <TIM_Base_SetConfig+0x11c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d013      	beq.n	800277c <TIM_Base_SetConfig+0x40>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275a:	d00f      	beq.n	800277c <TIM_Base_SetConfig+0x40>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a3f      	ldr	r2, [pc, #252]	; (800285c <TIM_Base_SetConfig+0x120>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d00b      	beq.n	800277c <TIM_Base_SetConfig+0x40>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3e      	ldr	r2, [pc, #248]	; (8002860 <TIM_Base_SetConfig+0x124>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d007      	beq.n	800277c <TIM_Base_SetConfig+0x40>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a3d      	ldr	r2, [pc, #244]	; (8002864 <TIM_Base_SetConfig+0x128>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d003      	beq.n	800277c <TIM_Base_SetConfig+0x40>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a3c      	ldr	r2, [pc, #240]	; (8002868 <TIM_Base_SetConfig+0x12c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d108      	bne.n	800278e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a31      	ldr	r2, [pc, #196]	; (8002858 <TIM_Base_SetConfig+0x11c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d01f      	beq.n	80027d6 <TIM_Base_SetConfig+0x9a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279c:	d01b      	beq.n	80027d6 <TIM_Base_SetConfig+0x9a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a2e      	ldr	r2, [pc, #184]	; (800285c <TIM_Base_SetConfig+0x120>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d017      	beq.n	80027d6 <TIM_Base_SetConfig+0x9a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a2d      	ldr	r2, [pc, #180]	; (8002860 <TIM_Base_SetConfig+0x124>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <TIM_Base_SetConfig+0x9a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a2c      	ldr	r2, [pc, #176]	; (8002864 <TIM_Base_SetConfig+0x128>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00f      	beq.n	80027d6 <TIM_Base_SetConfig+0x9a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a2c      	ldr	r2, [pc, #176]	; (800286c <TIM_Base_SetConfig+0x130>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00b      	beq.n	80027d6 <TIM_Base_SetConfig+0x9a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a2b      	ldr	r2, [pc, #172]	; (8002870 <TIM_Base_SetConfig+0x134>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d007      	beq.n	80027d6 <TIM_Base_SetConfig+0x9a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a2a      	ldr	r2, [pc, #168]	; (8002874 <TIM_Base_SetConfig+0x138>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d003      	beq.n	80027d6 <TIM_Base_SetConfig+0x9a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a25      	ldr	r2, [pc, #148]	; (8002868 <TIM_Base_SetConfig+0x12c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d108      	bne.n	80027e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a12      	ldr	r2, [pc, #72]	; (8002858 <TIM_Base_SetConfig+0x11c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d013      	beq.n	800283c <TIM_Base_SetConfig+0x100>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a13      	ldr	r2, [pc, #76]	; (8002864 <TIM_Base_SetConfig+0x128>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d00f      	beq.n	800283c <TIM_Base_SetConfig+0x100>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a13      	ldr	r2, [pc, #76]	; (800286c <TIM_Base_SetConfig+0x130>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00b      	beq.n	800283c <TIM_Base_SetConfig+0x100>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <TIM_Base_SetConfig+0x134>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d007      	beq.n	800283c <TIM_Base_SetConfig+0x100>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a11      	ldr	r2, [pc, #68]	; (8002874 <TIM_Base_SetConfig+0x138>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d003      	beq.n	800283c <TIM_Base_SetConfig+0x100>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a0c      	ldr	r2, [pc, #48]	; (8002868 <TIM_Base_SetConfig+0x12c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d103      	bne.n	8002844 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	615a      	str	r2, [r3, #20]
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40012c00 	.word	0x40012c00
 800285c:	40000400 	.word	0x40000400
 8002860:	40000800 	.word	0x40000800
 8002864:	40013400 	.word	0x40013400
 8002868:	40015000 	.word	0x40015000
 800286c:	40014000 	.word	0x40014000
 8002870:	40014400 	.word	0x40014400
 8002874:	40014800 	.word	0x40014800

08002878 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e040      	b.n	8002948 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fd fdc2 	bl	8000460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2224      	movs	r2, #36	; 0x24
 80028e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0201 	bic.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f8c0 	bl	8002a78 <UART_SetConfig>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e022      	b.n	8002948 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fa88 	bl	8002e20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800291e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800292e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fb0f 	bl	8002f64 <UART_CheckIdleState>
 8002946:	4603      	mov	r3, r0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	4613      	mov	r3, r2
 800295e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002964:	2b20      	cmp	r3, #32
 8002966:	f040 8082 	bne.w	8002a6e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <HAL_UART_Transmit+0x26>
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e07a      	b.n	8002a70 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_UART_Transmit+0x38>
 8002984:	2302      	movs	r3, #2
 8002986:	e073      	b.n	8002a70 <HAL_UART_Transmit+0x120>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2221      	movs	r2, #33	; 0x21
 800299c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800299e:	f7fd fe7d 	bl	800069c <HAL_GetTick>
 80029a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	88fa      	ldrh	r2, [r7, #6]
 80029a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	88fa      	ldrh	r2, [r7, #6]
 80029b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029bc:	d108      	bne.n	80029d0 <HAL_UART_Transmit+0x80>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d104      	bne.n	80029d0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	e003      	b.n	80029d8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80029e0:	e02d      	b.n	8002a3e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2200      	movs	r2, #0
 80029ea:	2180      	movs	r1, #128	; 0x80
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 fb02 	bl	8002ff6 <UART_WaitOnFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e039      	b.n	8002a70 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10b      	bne.n	8002a1a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	881a      	ldrh	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a0e:	b292      	uxth	r2, r2
 8002a10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	3302      	adds	r3, #2
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	e008      	b.n	8002a2c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	b292      	uxth	r2, r2
 8002a24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1cb      	bne.n	80029e2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2200      	movs	r2, #0
 8002a52:	2140      	movs	r1, #64	; 0x40
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 face 	bl	8002ff6 <UART_WaitOnFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e005      	b.n	8002a70 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e000      	b.n	8002a70 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
  }
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3720      	adds	r7, #32
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4baa      	ldr	r3, [pc, #680]	; (8002d4c <UART_SetConfig+0x2d4>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	6979      	ldr	r1, [r7, #20]
 8002aac:	430b      	orrs	r3, r1
 8002aae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a98      	ldr	r2, [pc, #608]	; (8002d50 <UART_SetConfig+0x2d8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d121      	bne.n	8002b38 <UART_SetConfig+0xc0>
 8002af4:	4b97      	ldr	r3, [pc, #604]	; (8002d54 <UART_SetConfig+0x2dc>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d817      	bhi.n	8002b30 <UART_SetConfig+0xb8>
 8002b00:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <UART_SetConfig+0x90>)
 8002b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b06:	bf00      	nop
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002b25 	.word	0x08002b25
 8002b10:	08002b2b 	.word	0x08002b2b
 8002b14:	08002b1f 	.word	0x08002b1f
 8002b18:	2301      	movs	r3, #1
 8002b1a:	77fb      	strb	r3, [r7, #31]
 8002b1c:	e0b2      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	77fb      	strb	r3, [r7, #31]
 8002b22:	e0af      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002b24:	2304      	movs	r3, #4
 8002b26:	77fb      	strb	r3, [r7, #31]
 8002b28:	e0ac      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	77fb      	strb	r3, [r7, #31]
 8002b2e:	e0a9      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002b30:	2310      	movs	r3, #16
 8002b32:	77fb      	strb	r3, [r7, #31]
 8002b34:	bf00      	nop
 8002b36:	e0a5      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a86      	ldr	r2, [pc, #536]	; (8002d58 <UART_SetConfig+0x2e0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d123      	bne.n	8002b8a <UART_SetConfig+0x112>
 8002b42:	4b84      	ldr	r3, [pc, #528]	; (8002d54 <UART_SetConfig+0x2dc>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4e:	d012      	beq.n	8002b76 <UART_SetConfig+0xfe>
 8002b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b54:	d802      	bhi.n	8002b5c <UART_SetConfig+0xe4>
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <UART_SetConfig+0xf2>
 8002b5a:	e012      	b.n	8002b82 <UART_SetConfig+0x10a>
 8002b5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b60:	d00c      	beq.n	8002b7c <UART_SetConfig+0x104>
 8002b62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b66:	d003      	beq.n	8002b70 <UART_SetConfig+0xf8>
 8002b68:	e00b      	b.n	8002b82 <UART_SetConfig+0x10a>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	77fb      	strb	r3, [r7, #31]
 8002b6e:	e089      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002b70:	2302      	movs	r3, #2
 8002b72:	77fb      	strb	r3, [r7, #31]
 8002b74:	e086      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002b76:	2304      	movs	r3, #4
 8002b78:	77fb      	strb	r3, [r7, #31]
 8002b7a:	e083      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	77fb      	strb	r3, [r7, #31]
 8002b80:	e080      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002b82:	2310      	movs	r3, #16
 8002b84:	77fb      	strb	r3, [r7, #31]
 8002b86:	bf00      	nop
 8002b88:	e07c      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a73      	ldr	r2, [pc, #460]	; (8002d5c <UART_SetConfig+0x2e4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d123      	bne.n	8002bdc <UART_SetConfig+0x164>
 8002b94:	4b6f      	ldr	r3, [pc, #444]	; (8002d54 <UART_SetConfig+0x2dc>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002b9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ba0:	d012      	beq.n	8002bc8 <UART_SetConfig+0x150>
 8002ba2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ba6:	d802      	bhi.n	8002bae <UART_SetConfig+0x136>
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <UART_SetConfig+0x144>
 8002bac:	e012      	b.n	8002bd4 <UART_SetConfig+0x15c>
 8002bae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bb2:	d00c      	beq.n	8002bce <UART_SetConfig+0x156>
 8002bb4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bb8:	d003      	beq.n	8002bc2 <UART_SetConfig+0x14a>
 8002bba:	e00b      	b.n	8002bd4 <UART_SetConfig+0x15c>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	77fb      	strb	r3, [r7, #31]
 8002bc0:	e060      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	77fb      	strb	r3, [r7, #31]
 8002bc6:	e05d      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002bc8:	2304      	movs	r3, #4
 8002bca:	77fb      	strb	r3, [r7, #31]
 8002bcc:	e05a      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002bce:	2308      	movs	r3, #8
 8002bd0:	77fb      	strb	r3, [r7, #31]
 8002bd2:	e057      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002bd4:	2310      	movs	r3, #16
 8002bd6:	77fb      	strb	r3, [r7, #31]
 8002bd8:	bf00      	nop
 8002bda:	e053      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a5f      	ldr	r2, [pc, #380]	; (8002d60 <UART_SetConfig+0x2e8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d123      	bne.n	8002c2e <UART_SetConfig+0x1b6>
 8002be6:	4b5b      	ldr	r3, [pc, #364]	; (8002d54 <UART_SetConfig+0x2dc>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bf2:	d012      	beq.n	8002c1a <UART_SetConfig+0x1a2>
 8002bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bf8:	d802      	bhi.n	8002c00 <UART_SetConfig+0x188>
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d007      	beq.n	8002c0e <UART_SetConfig+0x196>
 8002bfe:	e012      	b.n	8002c26 <UART_SetConfig+0x1ae>
 8002c00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c04:	d00c      	beq.n	8002c20 <UART_SetConfig+0x1a8>
 8002c06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c0a:	d003      	beq.n	8002c14 <UART_SetConfig+0x19c>
 8002c0c:	e00b      	b.n	8002c26 <UART_SetConfig+0x1ae>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	77fb      	strb	r3, [r7, #31]
 8002c12:	e037      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002c14:	2302      	movs	r3, #2
 8002c16:	77fb      	strb	r3, [r7, #31]
 8002c18:	e034      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002c1a:	2304      	movs	r3, #4
 8002c1c:	77fb      	strb	r3, [r7, #31]
 8002c1e:	e031      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002c20:	2308      	movs	r3, #8
 8002c22:	77fb      	strb	r3, [r7, #31]
 8002c24:	e02e      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002c26:	2310      	movs	r3, #16
 8002c28:	77fb      	strb	r3, [r7, #31]
 8002c2a:	bf00      	nop
 8002c2c:	e02a      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a4c      	ldr	r2, [pc, #304]	; (8002d64 <UART_SetConfig+0x2ec>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d123      	bne.n	8002c80 <UART_SetConfig+0x208>
 8002c38:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <UART_SetConfig+0x2dc>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c44:	d012      	beq.n	8002c6c <UART_SetConfig+0x1f4>
 8002c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c4a:	d802      	bhi.n	8002c52 <UART_SetConfig+0x1da>
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <UART_SetConfig+0x1e8>
 8002c50:	e012      	b.n	8002c78 <UART_SetConfig+0x200>
 8002c52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c56:	d00c      	beq.n	8002c72 <UART_SetConfig+0x1fa>
 8002c58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c5c:	d003      	beq.n	8002c66 <UART_SetConfig+0x1ee>
 8002c5e:	e00b      	b.n	8002c78 <UART_SetConfig+0x200>
 8002c60:	2300      	movs	r3, #0
 8002c62:	77fb      	strb	r3, [r7, #31]
 8002c64:	e00e      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002c66:	2302      	movs	r3, #2
 8002c68:	77fb      	strb	r3, [r7, #31]
 8002c6a:	e00b      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	77fb      	strb	r3, [r7, #31]
 8002c70:	e008      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002c72:	2308      	movs	r3, #8
 8002c74:	77fb      	strb	r3, [r7, #31]
 8002c76:	e005      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002c78:	2310      	movs	r3, #16
 8002c7a:	77fb      	strb	r3, [r7, #31]
 8002c7c:	bf00      	nop
 8002c7e:	e001      	b.n	8002c84 <UART_SetConfig+0x20c>
 8002c80:	2310      	movs	r3, #16
 8002c82:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c8c:	d16e      	bne.n	8002d6c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002c8e:	7ffb      	ldrb	r3, [r7, #31]
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d828      	bhi.n	8002ce6 <UART_SetConfig+0x26e>
 8002c94:	a201      	add	r2, pc, #4	; (adr r2, 8002c9c <UART_SetConfig+0x224>)
 8002c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9a:	bf00      	nop
 8002c9c:	08002cc1 	.word	0x08002cc1
 8002ca0:	08002cc9 	.word	0x08002cc9
 8002ca4:	08002cd1 	.word	0x08002cd1
 8002ca8:	08002ce7 	.word	0x08002ce7
 8002cac:	08002cd7 	.word	0x08002cd7
 8002cb0:	08002ce7 	.word	0x08002ce7
 8002cb4:	08002ce7 	.word	0x08002ce7
 8002cb8:	08002ce7 	.word	0x08002ce7
 8002cbc:	08002cdf 	.word	0x08002cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cc0:	f7ff f88e 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002cc4:	61b8      	str	r0, [r7, #24]
        break;
 8002cc6:	e013      	b.n	8002cf0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cc8:	f7ff f8ac 	bl	8001e24 <HAL_RCC_GetPCLK2Freq>
 8002ccc:	61b8      	str	r0, [r7, #24]
        break;
 8002cce:	e00f      	b.n	8002cf0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cd0:	4b25      	ldr	r3, [pc, #148]	; (8002d68 <UART_SetConfig+0x2f0>)
 8002cd2:	61bb      	str	r3, [r7, #24]
        break;
 8002cd4:	e00c      	b.n	8002cf0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cd6:	f7ff f80d 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8002cda:	61b8      	str	r0, [r7, #24]
        break;
 8002cdc:	e008      	b.n	8002cf0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ce2:	61bb      	str	r3, [r7, #24]
        break;
 8002ce4:	e004      	b.n	8002cf0 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	77bb      	strb	r3, [r7, #30]
        break;
 8002cee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 8086 	beq.w	8002e04 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	005a      	lsls	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	085b      	lsrs	r3, r3, #1
 8002d02:	441a      	add	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	2b0f      	cmp	r3, #15
 8002d14:	d916      	bls.n	8002d44 <UART_SetConfig+0x2cc>
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1c:	d212      	bcs.n	8002d44 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f023 030f 	bic.w	r3, r3, #15
 8002d26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	89fb      	ldrh	r3, [r7, #14]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	89fa      	ldrh	r2, [r7, #14]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	e05f      	b.n	8002e04 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	77bb      	strb	r3, [r7, #30]
 8002d48:	e05c      	b.n	8002e04 <UART_SetConfig+0x38c>
 8002d4a:	bf00      	nop
 8002d4c:	efff69f3 	.word	0xefff69f3
 8002d50:	40013800 	.word	0x40013800
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40004400 	.word	0x40004400
 8002d5c:	40004800 	.word	0x40004800
 8002d60:	40004c00 	.word	0x40004c00
 8002d64:	40005000 	.word	0x40005000
 8002d68:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d6c:	7ffb      	ldrb	r3, [r7, #31]
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d827      	bhi.n	8002dc2 <UART_SetConfig+0x34a>
 8002d72:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <UART_SetConfig+0x300>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002d9d 	.word	0x08002d9d
 8002d7c:	08002da5 	.word	0x08002da5
 8002d80:	08002dad 	.word	0x08002dad
 8002d84:	08002dc3 	.word	0x08002dc3
 8002d88:	08002db3 	.word	0x08002db3
 8002d8c:	08002dc3 	.word	0x08002dc3
 8002d90:	08002dc3 	.word	0x08002dc3
 8002d94:	08002dc3 	.word	0x08002dc3
 8002d98:	08002dbb 	.word	0x08002dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d9c:	f7ff f820 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002da0:	61b8      	str	r0, [r7, #24]
        break;
 8002da2:	e013      	b.n	8002dcc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002da4:	f7ff f83e 	bl	8001e24 <HAL_RCC_GetPCLK2Freq>
 8002da8:	61b8      	str	r0, [r7, #24]
        break;
 8002daa:	e00f      	b.n	8002dcc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <UART_SetConfig+0x3a4>)
 8002dae:	61bb      	str	r3, [r7, #24]
        break;
 8002db0:	e00c      	b.n	8002dcc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002db2:	f7fe ff9f 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8002db6:	61b8      	str	r0, [r7, #24]
        break;
 8002db8:	e008      	b.n	8002dcc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dbe:	61bb      	str	r3, [r7, #24]
        break;
 8002dc0:	e004      	b.n	8002dcc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	77bb      	strb	r3, [r7, #30]
        break;
 8002dca:	bf00      	nop
    }

    if (pclk != 0U)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d018      	beq.n	8002e04 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	085a      	lsrs	r2, r3, #1
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	441a      	add	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b0f      	cmp	r3, #15
 8002dec:	d908      	bls.n	8002e00 <UART_SetConfig+0x388>
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df4:	d204      	bcs.n	8002e00 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	e001      	b.n	8002e04 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e10:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	007a1200 	.word	0x007a1200

08002e20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01a      	beq.n	8002f36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f1e:	d10a      	bne.n	8002f36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	605a      	str	r2, [r3, #4]
  }
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f74:	f7fd fb92 	bl	800069c <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d10e      	bne.n	8002fa6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f82d 	bl	8002ff6 <UART_WaitOnFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e023      	b.n	8002fee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d10e      	bne.n	8002fd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f817 	bl	8002ff6 <UART_WaitOnFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e00d      	b.n	8002fee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4613      	mov	r3, r2
 8003004:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003006:	e05e      	b.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300e:	d05a      	beq.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003010:	f7fd fb44 	bl	800069c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	429a      	cmp	r2, r3
 800301e:	d302      	bcc.n	8003026 <UART_WaitOnFlagUntilTimeout+0x30>
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d11b      	bne.n	800305e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003034:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0201 	bic.w	r2, r2, #1
 8003044:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e043      	b.n	80030e6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d02c      	beq.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800307a:	d124      	bne.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003084:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003094:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0201 	bic.w	r2, r2, #1
 80030a4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2220      	movs	r2, #32
 80030aa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e00f      	b.n	80030e6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69da      	ldr	r2, [r3, #28]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d091      	beq.n	8003008 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030f6:	f3ef 8305 	mrs	r3, IPSR
 80030fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80030fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10f      	bne.n	8003122 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003102:	f3ef 8310 	mrs	r3, PRIMASK
 8003106:	607b      	str	r3, [r7, #4]
  return(result);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <osKernelInitialize+0x32>
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <osKernelInitialize+0x64>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d109      	bne.n	800312a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003116:	f3ef 8311 	mrs	r3, BASEPRI
 800311a:	603b      	str	r3, [r7, #0]
  return(result);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003122:	f06f 0305 	mvn.w	r3, #5
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	e00c      	b.n	8003144 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <osKernelInitialize+0x64>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d105      	bne.n	800313e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <osKernelInitialize+0x64>)
 8003134:	2201      	movs	r2, #1
 8003136:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	e002      	b.n	8003144 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800313e:	f04f 33ff 	mov.w	r3, #4294967295
 8003142:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003144:	68fb      	ldr	r3, [r7, #12]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	2000003c 	.word	0x2000003c

08003158 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800315e:	f3ef 8305 	mrs	r3, IPSR
 8003162:	60bb      	str	r3, [r7, #8]
  return(result);
 8003164:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10f      	bne.n	800318a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800316a:	f3ef 8310 	mrs	r3, PRIMASK
 800316e:	607b      	str	r3, [r7, #4]
  return(result);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <osKernelStart+0x32>
 8003176:	4b11      	ldr	r3, [pc, #68]	; (80031bc <osKernelStart+0x64>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d109      	bne.n	8003192 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800317e:	f3ef 8311 	mrs	r3, BASEPRI
 8003182:	603b      	str	r3, [r7, #0]
  return(result);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <osKernelStart+0x3a>
    stat = osErrorISR;
 800318a:	f06f 0305 	mvn.w	r3, #5
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	e00e      	b.n	80031b0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <osKernelStart+0x64>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d107      	bne.n	80031aa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <osKernelStart+0x64>)
 800319c:	2202      	movs	r2, #2
 800319e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80031a0:	f001 f86a 	bl	8004278 <vTaskStartScheduler>
      stat = osOK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	e002      	b.n	80031b0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295
 80031ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80031b0:	68fb      	ldr	r3, [r7, #12]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	2000003c 	.word	0x2000003c

080031c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b092      	sub	sp, #72	; 0x48
 80031c4:	af04      	add	r7, sp, #16
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031d0:	f3ef 8305 	mrs	r3, IPSR
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f040 8094 	bne.w	8003306 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031de:	f3ef 8310 	mrs	r3, PRIMASK
 80031e2:	623b      	str	r3, [r7, #32]
  return(result);
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f040 808d 	bne.w	8003306 <osThreadNew+0x146>
 80031ec:	4b48      	ldr	r3, [pc, #288]	; (8003310 <osThreadNew+0x150>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d106      	bne.n	8003202 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031f4:	f3ef 8311 	mrs	r3, BASEPRI
 80031f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f040 8082 	bne.w	8003306 <osThreadNew+0x146>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d07e      	beq.n	8003306 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800320c:	2318      	movs	r3, #24
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003210:	2300      	movs	r3, #0
 8003212:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003214:	f107 031b 	add.w	r3, r7, #27
 8003218:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800321a:	f04f 33ff 	mov.w	r3, #4294967295
 800321e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d045      	beq.n	80032b2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <osThreadNew+0x74>
        name = attr->name;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <osThreadNew+0x9a>
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324a:	2b38      	cmp	r3, #56	; 0x38
 800324c:	d805      	bhi.n	800325a <osThreadNew+0x9a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <osThreadNew+0x9e>
        return (NULL);
 800325a:	2300      	movs	r3, #0
 800325c:	e054      	b.n	8003308 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	089b      	lsrs	r3, r3, #2
 800326c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00e      	beq.n	8003294 <osThreadNew+0xd4>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b5b      	cmp	r3, #91	; 0x5b
 800327c:	d90a      	bls.n	8003294 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003282:	2b00      	cmp	r3, #0
 8003284:	d006      	beq.n	8003294 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <osThreadNew+0xd4>
        mem = 1;
 800328e:	2301      	movs	r3, #1
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
 8003292:	e010      	b.n	80032b6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10c      	bne.n	80032b6 <osThreadNew+0xf6>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d108      	bne.n	80032b6 <osThreadNew+0xf6>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d104      	bne.n	80032b6 <osThreadNew+0xf6>
          mem = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b0:	e001      	b.n	80032b6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d110      	bne.n	80032de <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032c4:	9202      	str	r2, [sp, #8]
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fe08 	bl	8003ee8 <xTaskCreateStatic>
 80032d8:	4603      	mov	r3, r0
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	e013      	b.n	8003306 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d110      	bne.n	8003306 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80032e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	f107 0314 	add.w	r3, r7, #20
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fe4f 	bl	8003f9a <xTaskCreate>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d001      	beq.n	8003306 <osThreadNew+0x146>
          hTask = NULL;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003306:	697b      	ldr	r3, [r7, #20]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3738      	adds	r7, #56	; 0x38
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	2000003c 	.word	0x2000003c

08003314 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800331c:	f3ef 8305 	mrs	r3, IPSR
 8003320:	613b      	str	r3, [r7, #16]
  return(result);
 8003322:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10f      	bne.n	8003348 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003328:	f3ef 8310 	mrs	r3, PRIMASK
 800332c:	60fb      	str	r3, [r7, #12]
  return(result);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d109      	bne.n	8003348 <osDelay+0x34>
 8003334:	4b0d      	ldr	r3, [pc, #52]	; (800336c <osDelay+0x58>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d109      	bne.n	8003350 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800333c:	f3ef 8311 	mrs	r3, BASEPRI
 8003340:	60bb      	str	r3, [r7, #8]
  return(result);
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <osDelay+0x3c>
    stat = osErrorISR;
 8003348:	f06f 0305 	mvn.w	r3, #5
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	e007      	b.n	8003360 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <osDelay+0x4c>
      vTaskDelay(ticks);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 ff58 	bl	8004210 <vTaskDelay>
    }
  }

  return (stat);
 8003360:	697b      	ldr	r3, [r7, #20]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	2000003c 	.word	0x2000003c

08003370 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a07      	ldr	r2, [pc, #28]	; (800339c <vApplicationGetIdleTaskMemory+0x2c>)
 8003380:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	4a06      	ldr	r2, [pc, #24]	; (80033a0 <vApplicationGetIdleTaskMemory+0x30>)
 8003386:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2280      	movs	r2, #128	; 0x80
 800338c:	601a      	str	r2, [r3, #0]
}
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000040 	.word	0x20000040
 80033a0:	2000009c 	.word	0x2000009c

080033a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4a07      	ldr	r2, [pc, #28]	; (80033d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80033b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4a06      	ldr	r2, [pc, #24]	; (80033d4 <vApplicationGetTimerTaskMemory+0x30>)
 80033ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033c2:	601a      	str	r2, [r3, #0]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	2000029c 	.word	0x2000029c
 80033d4:	200002f8 	.word	0x200002f8

080033d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f103 0208 	add.w	r2, r3, #8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f04f 32ff 	mov.w	r2, #4294967295
 80033f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f103 0208 	add.w	r2, r3, #8
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f103 0208 	add.w	r2, r3, #8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003432:	b480      	push	{r7}
 8003434:	b085      	sub	sp, #20
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	601a      	str	r2, [r3, #0]
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800347a:	b480      	push	{r7}
 800347c:	b085      	sub	sp, #20
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003490:	d103      	bne.n	800349a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	e00c      	b.n	80034b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3308      	adds	r3, #8
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	e002      	b.n	80034a8 <vListInsert+0x2e>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d2f6      	bcs.n	80034a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	601a      	str	r2, [r3, #0]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6892      	ldr	r2, [r2, #8]
 8003502:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6852      	ldr	r2, [r2, #4]
 800350c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	429a      	cmp	r2, r3
 8003516:	d103      	bne.n	8003520 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	1e5a      	subs	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d109      	bne.n	8003568 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	e7fe      	b.n	8003566 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003568:	f001 ffd8 	bl	800551c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003574:	68f9      	ldr	r1, [r7, #12]
 8003576:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003578:	fb01 f303 	mul.w	r3, r1, r3
 800357c:	441a      	add	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003598:	3b01      	subs	r3, #1
 800359a:	68f9      	ldr	r1, [r7, #12]
 800359c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	441a      	add	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	22ff      	movs	r2, #255	; 0xff
 80035ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	22ff      	movs	r2, #255	; 0xff
 80035b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d114      	bne.n	80035e8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d01a      	beq.n	80035fc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3310      	adds	r3, #16
 80035ca:	4618      	mov	r0, r3
 80035cc:	f001 f8da 	bl	8004784 <xTaskRemoveFromEventList>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d012      	beq.n	80035fc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <xQueueGenericReset+0xcc>)
 80035d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	e009      	b.n	80035fc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	3310      	adds	r3, #16
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fef3 	bl	80033d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3324      	adds	r3, #36	; 0x24
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff feee 	bl	80033d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035fc:	f001 ffbc 	bl	8005578 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003600:	2301      	movs	r3, #1
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	e000ed04 	.word	0xe000ed04

08003610 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08e      	sub	sp, #56	; 0x38
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d109      	bne.n	8003638 <xQueueGenericCreateStatic+0x28>
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28
 8003636:	e7fe      	b.n	8003636 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <xQueueGenericCreateStatic+0x42>
 800363e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
 8003650:	e7fe      	b.n	8003650 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <xQueueGenericCreateStatic+0x4e>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <xQueueGenericCreateStatic+0x52>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <xQueueGenericCreateStatic+0x54>
 8003662:	2300      	movs	r3, #0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <xQueueGenericCreateStatic+0x6c>
 8003668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	623b      	str	r3, [r7, #32]
 800367a:	e7fe      	b.n	800367a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <xQueueGenericCreateStatic+0x78>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <xQueueGenericCreateStatic+0x7c>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <xQueueGenericCreateStatic+0x7e>
 800368c:	2300      	movs	r3, #0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <xQueueGenericCreateStatic+0x96>
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	e7fe      	b.n	80036a4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80036a6:	2350      	movs	r3, #80	; 0x50
 80036a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b50      	cmp	r3, #80	; 0x50
 80036ae:	d009      	beq.n	80036c4 <xQueueGenericCreateStatic+0xb4>
 80036b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	e7fe      	b.n	80036c2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80036ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f805 	bl	80036f4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3730      	adds	r7, #48	; 0x30
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d103      	bne.n	8003710 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	e002      	b.n	8003716 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003722:	2101      	movs	r1, #1
 8003724:	69b8      	ldr	r0, [r7, #24]
 8003726:	f7ff ff0b 	bl	8003540 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	78fa      	ldrb	r2, [r7, #3]
 800372e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08e      	sub	sp, #56	; 0x38
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800374a:	2300      	movs	r3, #0
 800374c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	2b00      	cmp	r3, #0
 8003756:	d109      	bne.n	800376c <xQueueGenericSend+0x30>
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	62bb      	str	r3, [r7, #40]	; 0x28
 800376a:	e7fe      	b.n	800376a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <xQueueGenericSend+0x3e>
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <xQueueGenericSend+0x42>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <xQueueGenericSend+0x44>
 800377e:	2300      	movs	r3, #0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d109      	bne.n	8003798 <xQueueGenericSend+0x5c>
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
 8003796:	e7fe      	b.n	8003796 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d103      	bne.n	80037a6 <xQueueGenericSend+0x6a>
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <xQueueGenericSend+0x6e>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <xQueueGenericSend+0x70>
 80037aa:	2300      	movs	r3, #0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d109      	bne.n	80037c4 <xQueueGenericSend+0x88>
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	623b      	str	r3, [r7, #32]
 80037c2:	e7fe      	b.n	80037c2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037c4:	f001 f99a 	bl	8004afc <xTaskGetSchedulerState>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <xQueueGenericSend+0x98>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <xQueueGenericSend+0x9c>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <xQueueGenericSend+0x9e>
 80037d8:	2300      	movs	r3, #0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <xQueueGenericSend+0xb6>
 80037de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	61fb      	str	r3, [r7, #28]
 80037f0:	e7fe      	b.n	80037f0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037f2:	f001 fe93 	bl	800551c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	429a      	cmp	r2, r3
 8003800:	d302      	bcc.n	8003808 <xQueueGenericSend+0xcc>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d129      	bne.n	800385c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800380e:	f000 f9ff 	bl	8003c10 <prvCopyDataToQueue>
 8003812:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	2b00      	cmp	r3, #0
 800381a:	d010      	beq.n	800383e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	3324      	adds	r3, #36	; 0x24
 8003820:	4618      	mov	r0, r3
 8003822:	f000 ffaf 	bl	8004784 <xTaskRemoveFromEventList>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d013      	beq.n	8003854 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800382c:	4b3f      	ldr	r3, [pc, #252]	; (800392c <xQueueGenericSend+0x1f0>)
 800382e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	e00a      	b.n	8003854 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d007      	beq.n	8003854 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003844:	4b39      	ldr	r3, [pc, #228]	; (800392c <xQueueGenericSend+0x1f0>)
 8003846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003854:	f001 fe90 	bl	8005578 <vPortExitCritical>
				return pdPASS;
 8003858:	2301      	movs	r3, #1
 800385a:	e063      	b.n	8003924 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003862:	f001 fe89 	bl	8005578 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003866:	2300      	movs	r3, #0
 8003868:	e05c      	b.n	8003924 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800386a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386c:	2b00      	cmp	r3, #0
 800386e:	d106      	bne.n	800387e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	4618      	mov	r0, r3
 8003876:	f000 ffe7 	bl	8004848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800387a:	2301      	movs	r3, #1
 800387c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800387e:	f001 fe7b 	bl	8005578 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003882:	f000 fd5d 	bl	8004340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003886:	f001 fe49 	bl	800551c <vPortEnterCritical>
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003890:	b25b      	sxtb	r3, r3
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d103      	bne.n	80038a0 <xQueueGenericSend+0x164>
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038a6:	b25b      	sxtb	r3, r3
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d103      	bne.n	80038b6 <xQueueGenericSend+0x17a>
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038b6:	f001 fe5f 	bl	8005578 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038ba:	1d3a      	adds	r2, r7, #4
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 ffd6 	bl	8004874 <xTaskCheckForTimeOut>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d124      	bne.n	8003918 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038d0:	f000 fa96 	bl	8003e00 <prvIsQueueFull>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d018      	beq.n	800390c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	3310      	adds	r3, #16
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 ff00 	bl	80046e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80038e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ea:	f000 fa21 	bl	8003d30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80038ee:	f000 fd35 	bl	800435c <xTaskResumeAll>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f47f af7c 	bne.w	80037f2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <xQueueGenericSend+0x1f0>)
 80038fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	e772      	b.n	80037f2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800390c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800390e:	f000 fa0f 	bl	8003d30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003912:	f000 fd23 	bl	800435c <xTaskResumeAll>
 8003916:	e76c      	b.n	80037f2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800391a:	f000 fa09 	bl	8003d30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800391e:	f000 fd1d 	bl	800435c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003922:	2300      	movs	r3, #0
		}
	}
}
 8003924:	4618      	mov	r0, r3
 8003926:	3738      	adds	r7, #56	; 0x38
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	e000ed04 	.word	0xe000ed04

08003930 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08e      	sub	sp, #56	; 0x38
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <xQueueGenericSendFromISR+0x2c>
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
 800395a:	e7fe      	b.n	800395a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d103      	bne.n	800396a <xQueueGenericSendFromISR+0x3a>
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <xQueueGenericSendFromISR+0x3e>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <xQueueGenericSendFromISR+0x40>
 800396e:	2300      	movs	r3, #0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d109      	bne.n	8003988 <xQueueGenericSendFromISR+0x58>
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	623b      	str	r3, [r7, #32]
 8003986:	e7fe      	b.n	8003986 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d103      	bne.n	8003996 <xQueueGenericSendFromISR+0x66>
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <xQueueGenericSendFromISR+0x6a>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <xQueueGenericSendFromISR+0x6c>
 800399a:	2300      	movs	r3, #0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d109      	bne.n	80039b4 <xQueueGenericSendFromISR+0x84>
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	e7fe      	b.n	80039b2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039b4:	f001 fe8e 	bl	80056d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80039b8:	f3ef 8211 	mrs	r2, BASEPRI
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	61ba      	str	r2, [r7, #24]
 80039ce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80039d0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039dc:	429a      	cmp	r2, r3
 80039de:	d302      	bcc.n	80039e6 <xQueueGenericSendFromISR+0xb6>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d12c      	bne.n	8003a40 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039f6:	f000 f90b 	bl	8003c10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039fa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a02:	d112      	bne.n	8003a2a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d016      	beq.n	8003a3a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	3324      	adds	r3, #36	; 0x24
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 feb7 	bl	8004784 <xTaskRemoveFromEventList>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00e      	beq.n	8003a3a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	e007      	b.n	8003a3a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a2e:	3301      	adds	r3, #1
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	b25a      	sxtb	r2, r3
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003a3e:	e001      	b.n	8003a44 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	637b      	str	r3, [r7, #52]	; 0x34
 8003a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a46:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3738      	adds	r7, #56	; 0x38
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08c      	sub	sp, #48	; 0x30
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <xQueueReceive+0x2e>
	__asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	623b      	str	r3, [r7, #32]
 8003a84:	e7fe      	b.n	8003a84 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d103      	bne.n	8003a94 <xQueueReceive+0x3c>
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <xQueueReceive+0x40>
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <xQueueReceive+0x42>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <xQueueReceive+0x5a>
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	e7fe      	b.n	8003ab0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ab2:	f001 f823 	bl	8004afc <xTaskGetSchedulerState>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <xQueueReceive+0x6a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <xQueueReceive+0x6e>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <xQueueReceive+0x70>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d109      	bne.n	8003ae0 <xQueueReceive+0x88>
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	61bb      	str	r3, [r7, #24]
 8003ade:	e7fe      	b.n	8003ade <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ae0:	f001 fd1c 	bl	800551c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01f      	beq.n	8003b30 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003af4:	f000 f8f6 	bl	8003ce4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	1e5a      	subs	r2, r3, #1
 8003afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00f      	beq.n	8003b28 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	3310      	adds	r3, #16
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fe39 	bl	8004784 <xTaskRemoveFromEventList>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b18:	4b3c      	ldr	r3, [pc, #240]	; (8003c0c <xQueueReceive+0x1b4>)
 8003b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b28:	f001 fd26 	bl	8005578 <vPortExitCritical>
				return pdPASS;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e069      	b.n	8003c04 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d103      	bne.n	8003b3e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b36:	f001 fd1f 	bl	8005578 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e062      	b.n	8003c04 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d106      	bne.n	8003b52 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b44:	f107 0310 	add.w	r3, r7, #16
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 fe7d 	bl	8004848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b52:	f001 fd11 	bl	8005578 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b56:	f000 fbf3 	bl	8004340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b5a:	f001 fcdf 	bl	800551c <vPortEnterCritical>
 8003b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b64:	b25b      	sxtb	r3, r3
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	d103      	bne.n	8003b74 <xQueueReceive+0x11c>
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b7a:	b25b      	sxtb	r3, r3
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b80:	d103      	bne.n	8003b8a <xQueueReceive+0x132>
 8003b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b8a:	f001 fcf5 	bl	8005578 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b8e:	1d3a      	adds	r2, r7, #4
 8003b90:	f107 0310 	add.w	r3, r7, #16
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fe6c 	bl	8004874 <xTaskCheckForTimeOut>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d123      	bne.n	8003bea <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ba4:	f000 f916 	bl	8003dd4 <prvIsQueueEmpty>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d017      	beq.n	8003bde <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb0:	3324      	adds	r3, #36	; 0x24
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fd96 	bl	80046e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bbe:	f000 f8b7 	bl	8003d30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003bc2:	f000 fbcb 	bl	800435c <xTaskResumeAll>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d189      	bne.n	8003ae0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <xQueueReceive+0x1b4>)
 8003bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	e780      	b.n	8003ae0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003bde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003be0:	f000 f8a6 	bl	8003d30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003be4:	f000 fbba 	bl	800435c <xTaskResumeAll>
 8003be8:	e77a      	b.n	8003ae0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bec:	f000 f8a0 	bl	8003d30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bf0:	f000 fbb4 	bl	800435c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bf6:	f000 f8ed 	bl	8003dd4 <prvIsQueueEmpty>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f43f af6f 	beq.w	8003ae0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3730      	adds	r7, #48	; 0x30
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	e000ed04 	.word	0xe000ed04

08003c10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10d      	bne.n	8003c4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d14d      	bne.n	8003cd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 ff7c 	bl	8004b38 <xTaskPriorityDisinherit>
 8003c40:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	e043      	b.n	8003cd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d119      	bne.n	8003c84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6898      	ldr	r0, [r3, #8]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	461a      	mov	r2, r3
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	f001 ff72 	bl	8005b44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	441a      	add	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d32b      	bcc.n	8003cd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	609a      	str	r2, [r3, #8]
 8003c82:	e026      	b.n	8003cd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	68d8      	ldr	r0, [r3, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	f001 ff58 	bl	8005b44 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	425b      	negs	r3, r3
 8003c9e:	441a      	add	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d207      	bcs.n	8003cc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	425b      	negs	r3, r3
 8003cba:	441a      	add	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d105      	bne.n	8003cd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003cda:	697b      	ldr	r3, [r7, #20]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d018      	beq.n	8003d28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	441a      	add	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d303      	bcc.n	8003d18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68d9      	ldr	r1, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	461a      	mov	r2, r3
 8003d22:	6838      	ldr	r0, [r7, #0]
 8003d24:	f001 ff0e 	bl	8005b44 <memcpy>
	}
}
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d38:	f001 fbf0 	bl	800551c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d44:	e011      	b.n	8003d6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d012      	beq.n	8003d74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3324      	adds	r3, #36	; 0x24
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fd16 	bl	8004784 <xTaskRemoveFromEventList>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d5e:	f000 fde9 	bl	8004934 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	dce9      	bgt.n	8003d46 <prvUnlockQueue+0x16>
 8003d72:	e000      	b.n	8003d76 <prvUnlockQueue+0x46>
					break;
 8003d74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	22ff      	movs	r2, #255	; 0xff
 8003d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d7e:	f001 fbfb 	bl	8005578 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d82:	f001 fbcb 	bl	800551c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d8e:	e011      	b.n	8003db4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d012      	beq.n	8003dbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3310      	adds	r3, #16
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fcf1 	bl	8004784 <xTaskRemoveFromEventList>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003da8:	f000 fdc4 	bl	8004934 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003dac:	7bbb      	ldrb	r3, [r7, #14]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003db4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	dce9      	bgt.n	8003d90 <prvUnlockQueue+0x60>
 8003dbc:	e000      	b.n	8003dc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003dbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	22ff      	movs	r2, #255	; 0xff
 8003dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003dc8:	f001 fbd6 	bl	8005578 <vPortExitCritical>
}
 8003dcc:	bf00      	nop
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ddc:	f001 fb9e 	bl	800551c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d102      	bne.n	8003dee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	e001      	b.n	8003df2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003df2:	f001 fbc1 	bl	8005578 <vPortExitCritical>

	return xReturn;
 8003df6:	68fb      	ldr	r3, [r7, #12]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e08:	f001 fb88 	bl	800551c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d102      	bne.n	8003e1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	e001      	b.n	8003e22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e22:	f001 fba9 	bl	8005578 <vPortExitCritical>

	return xReturn;
 8003e26:	68fb      	ldr	r3, [r7, #12]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	e014      	b.n	8003e6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e40:	4a0e      	ldr	r2, [pc, #56]	; (8003e7c <vQueueAddToRegistry+0x4c>)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10b      	bne.n	8003e64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e4c:	490b      	ldr	r1, [pc, #44]	; (8003e7c <vQueueAddToRegistry+0x4c>)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e56:	4a09      	ldr	r2, [pc, #36]	; (8003e7c <vQueueAddToRegistry+0x4c>)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e62:	e005      	b.n	8003e70 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	3301      	adds	r3, #1
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b07      	cmp	r3, #7
 8003e6e:	d9e7      	bls.n	8003e40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	20001a20 	.word	0x20001a20

08003e80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e90:	f001 fb44 	bl	800551c <vPortEnterCritical>
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e9a:	b25b      	sxtb	r3, r3
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d103      	bne.n	8003eaa <vQueueWaitForMessageRestricted+0x2a>
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eb0:	b25b      	sxtb	r3, r3
 8003eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb6:	d103      	bne.n	8003ec0 <vQueueWaitForMessageRestricted+0x40>
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ec0:	f001 fb5a 	bl	8005578 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	3324      	adds	r3, #36	; 0x24
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	68b9      	ldr	r1, [r7, #8]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fc2b 	bl	8004730 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003eda:	6978      	ldr	r0, [r7, #20]
 8003edc:	f7ff ff28 	bl	8003d30 <prvUnlockQueue>
	}
 8003ee0:	bf00      	nop
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08e      	sub	sp, #56	; 0x38
 8003eec:	af04      	add	r7, sp, #16
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d109      	bne.n	8003f10 <xTaskCreateStatic+0x28>
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	623b      	str	r3, [r7, #32]
 8003f0e:	e7fe      	b.n	8003f0e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <xTaskCreateStatic+0x42>
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	e7fe      	b.n	8003f28 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f2a:	235c      	movs	r3, #92	; 0x5c
 8003f2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b5c      	cmp	r3, #92	; 0x5c
 8003f32:	d009      	beq.n	8003f48 <xTaskCreateStatic+0x60>
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	e7fe      	b.n	8003f46 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d01e      	beq.n	8003f8c <xTaskCreateStatic+0xa4>
 8003f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01b      	beq.n	8003f8c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	2202      	movs	r2, #2
 8003f62:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f66:	2300      	movs	r3, #0
 8003f68:	9303      	str	r3, [sp, #12]
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	9302      	str	r3, [sp, #8]
 8003f6e:	f107 0314 	add.w	r3, r7, #20
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f850 	bl	8004024 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f86:	f000 f8d3 	bl	8004130 <prvAddNewTaskToReadyList>
 8003f8a:	e001      	b.n	8003f90 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f90:	697b      	ldr	r3, [r7, #20]
	}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3728      	adds	r7, #40	; 0x28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b08c      	sub	sp, #48	; 0x30
 8003f9e:	af04      	add	r7, sp, #16
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	603b      	str	r3, [r7, #0]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f001 fbce 	bl	8005750 <pvPortMalloc>
 8003fb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003fbc:	205c      	movs	r0, #92	; 0x5c
 8003fbe:	f001 fbc7 	bl	8005750 <pvPortMalloc>
 8003fc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
 8003fd0:	e005      	b.n	8003fde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fd2:	6978      	ldr	r0, [r7, #20]
 8003fd4:	f001 fc7e 	bl	80058d4 <vPortFree>
 8003fd8:	e001      	b.n	8003fde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d017      	beq.n	8004014 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fec:	88fa      	ldrh	r2, [r7, #6]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9303      	str	r3, [sp, #12]
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	9302      	str	r3, [sp, #8]
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f80e 	bl	8004024 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004008:	69f8      	ldr	r0, [r7, #28]
 800400a:	f000 f891 	bl	8004130 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800400e:	2301      	movs	r3, #1
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	e002      	b.n	800401a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004014:	f04f 33ff 	mov.w	r3, #4294967295
 8004018:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800401a:	69bb      	ldr	r3, [r7, #24]
	}
 800401c:	4618      	mov	r0, r3
 800401e:	3720      	adds	r7, #32
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004034:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	461a      	mov	r2, r3
 800403c:	21a5      	movs	r1, #165	; 0xa5
 800403e:	f001 fd8c 	bl	8005b5a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800404c:	3b01      	subs	r3, #1
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	f023 0307 	bic.w	r3, r3, #7
 800405a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <prvInitialiseNewTask+0x56>
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	e7fe      	b.n	8004078 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
 800407e:	e012      	b.n	80040a6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	7819      	ldrb	r1, [r3, #0]
 8004088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	4413      	add	r3, r2
 800408e:	3334      	adds	r3, #52	; 0x34
 8004090:	460a      	mov	r2, r1
 8004092:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4413      	add	r3, r2
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d006      	beq.n	80040ae <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	3301      	adds	r3, #1
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	2b0f      	cmp	r3, #15
 80040aa:	d9e9      	bls.n	8004080 <prvInitialiseNewTask+0x5c>
 80040ac:	e000      	b.n	80040b0 <prvInitialiseNewTask+0x8c>
		{
			break;
 80040ae:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	2b37      	cmp	r3, #55	; 0x37
 80040bc:	d901      	bls.n	80040c2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040be:	2337      	movs	r3, #55	; 0x37
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040cc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	2200      	movs	r2, #0
 80040d2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	3304      	adds	r3, #4
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff f99d 	bl	8003418 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	3318      	adds	r3, #24
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff f998 	bl	8003418 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040fc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004100:	2200      	movs	r2, #0
 8004102:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	68f9      	ldr	r1, [r7, #12]
 8004110:	69b8      	ldr	r0, [r7, #24]
 8004112:	f001 f8db 	bl	80052cc <pxPortInitialiseStack>
 8004116:	4602      	mov	r2, r0
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800411c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004126:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004128:	bf00      	nop
 800412a:	3720      	adds	r7, #32
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004138:	f001 f9f0 	bl	800551c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800413c:	4b2d      	ldr	r3, [pc, #180]	; (80041f4 <prvAddNewTaskToReadyList+0xc4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3301      	adds	r3, #1
 8004142:	4a2c      	ldr	r2, [pc, #176]	; (80041f4 <prvAddNewTaskToReadyList+0xc4>)
 8004144:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004146:	4b2c      	ldr	r3, [pc, #176]	; (80041f8 <prvAddNewTaskToReadyList+0xc8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800414e:	4a2a      	ldr	r2, [pc, #168]	; (80041f8 <prvAddNewTaskToReadyList+0xc8>)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004154:	4b27      	ldr	r3, [pc, #156]	; (80041f4 <prvAddNewTaskToReadyList+0xc4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d110      	bne.n	800417e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800415c:	f000 fc0e 	bl	800497c <prvInitialiseTaskLists>
 8004160:	e00d      	b.n	800417e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004162:	4b26      	ldr	r3, [pc, #152]	; (80041fc <prvAddNewTaskToReadyList+0xcc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800416a:	4b23      	ldr	r3, [pc, #140]	; (80041f8 <prvAddNewTaskToReadyList+0xc8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	429a      	cmp	r2, r3
 8004176:	d802      	bhi.n	800417e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004178:	4a1f      	ldr	r2, [pc, #124]	; (80041f8 <prvAddNewTaskToReadyList+0xc8>)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800417e:	4b20      	ldr	r3, [pc, #128]	; (8004200 <prvAddNewTaskToReadyList+0xd0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3301      	adds	r3, #1
 8004184:	4a1e      	ldr	r2, [pc, #120]	; (8004200 <prvAddNewTaskToReadyList+0xd0>)
 8004186:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004188:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <prvAddNewTaskToReadyList+0xd0>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004194:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <prvAddNewTaskToReadyList+0xd4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d903      	bls.n	80041a4 <prvAddNewTaskToReadyList+0x74>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	4a18      	ldr	r2, [pc, #96]	; (8004204 <prvAddNewTaskToReadyList+0xd4>)
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4a15      	ldr	r2, [pc, #84]	; (8004208 <prvAddNewTaskToReadyList+0xd8>)
 80041b2:	441a      	add	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f7ff f939 	bl	8003432 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041c0:	f001 f9da 	bl	8005578 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041c4:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <prvAddNewTaskToReadyList+0xcc>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00e      	beq.n	80041ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041cc:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <prvAddNewTaskToReadyList+0xc8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d207      	bcs.n	80041ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041da:	4b0c      	ldr	r3, [pc, #48]	; (800420c <prvAddNewTaskToReadyList+0xdc>)
 80041dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000bcc 	.word	0x20000bcc
 80041f8:	200006f8 	.word	0x200006f8
 80041fc:	20000bd8 	.word	0x20000bd8
 8004200:	20000be8 	.word	0x20000be8
 8004204:	20000bd4 	.word	0x20000bd4
 8004208:	200006fc 	.word	0x200006fc
 800420c:	e000ed04 	.word	0xe000ed04

08004210 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d016      	beq.n	8004250 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004222:	4b13      	ldr	r3, [pc, #76]	; (8004270 <vTaskDelay+0x60>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <vTaskDelay+0x2e>
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	e7fe      	b.n	800423c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800423e:	f000 f87f 	bl	8004340 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004242:	2100      	movs	r1, #0
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fce3 	bl	8004c10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800424a:	f000 f887 	bl	800435c <xTaskResumeAll>
 800424e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d107      	bne.n	8004266 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <vTaskDelay+0x64>)
 8004258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000bf4 	.word	0x20000bf4
 8004274:	e000ed04 	.word	0xe000ed04

08004278 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	; 0x28
 800427c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004282:	2300      	movs	r3, #0
 8004284:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004286:	463a      	mov	r2, r7
 8004288:	1d39      	adds	r1, r7, #4
 800428a:	f107 0308 	add.w	r3, r7, #8
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff f86e 	bl	8003370 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004294:	6839      	ldr	r1, [r7, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	9202      	str	r2, [sp, #8]
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	2300      	movs	r3, #0
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	2300      	movs	r3, #0
 80042a4:	460a      	mov	r2, r1
 80042a6:	4920      	ldr	r1, [pc, #128]	; (8004328 <vTaskStartScheduler+0xb0>)
 80042a8:	4820      	ldr	r0, [pc, #128]	; (800432c <vTaskStartScheduler+0xb4>)
 80042aa:	f7ff fe1d 	bl	8003ee8 <xTaskCreateStatic>
 80042ae:	4602      	mov	r2, r0
 80042b0:	4b1f      	ldr	r3, [pc, #124]	; (8004330 <vTaskStartScheduler+0xb8>)
 80042b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042b4:	4b1e      	ldr	r3, [pc, #120]	; (8004330 <vTaskStartScheduler+0xb8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042bc:	2301      	movs	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	e001      	b.n	80042c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d102      	bne.n	80042d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80042cc:	f000 fcf4 	bl	8004cb8 <xTimerCreateTimerTask>
 80042d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d115      	bne.n	8004304 <vTaskStartScheduler+0x8c>
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042ea:	4b12      	ldr	r3, [pc, #72]	; (8004334 <vTaskStartScheduler+0xbc>)
 80042ec:	f04f 32ff 	mov.w	r2, #4294967295
 80042f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042f2:	4b11      	ldr	r3, [pc, #68]	; (8004338 <vTaskStartScheduler+0xc0>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80042f8:	4b10      	ldr	r3, [pc, #64]	; (800433c <vTaskStartScheduler+0xc4>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042fe:	f001 f86f 	bl	80053e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004302:	e00d      	b.n	8004320 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	d109      	bne.n	8004320 <vTaskStartScheduler+0xa8>
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	e7fe      	b.n	800431e <vTaskStartScheduler+0xa6>
}
 8004320:	bf00      	nop
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	08005b94 	.word	0x08005b94
 800432c:	0800494d 	.word	0x0800494d
 8004330:	20000bf0 	.word	0x20000bf0
 8004334:	20000bec 	.word	0x20000bec
 8004338:	20000bd8 	.word	0x20000bd8
 800433c:	20000bd0 	.word	0x20000bd0

08004340 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004344:	4b04      	ldr	r3, [pc, #16]	; (8004358 <vTaskSuspendAll+0x18>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3301      	adds	r3, #1
 800434a:	4a03      	ldr	r2, [pc, #12]	; (8004358 <vTaskSuspendAll+0x18>)
 800434c:	6013      	str	r3, [r2, #0]
}
 800434e:	bf00      	nop
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	20000bf4 	.word	0x20000bf4

0800435c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004366:	2300      	movs	r3, #0
 8004368:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800436a:	4b41      	ldr	r3, [pc, #260]	; (8004470 <xTaskResumeAll+0x114>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <xTaskResumeAll+0x2a>
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	e7fe      	b.n	8004384 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004386:	f001 f8c9 	bl	800551c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800438a:	4b39      	ldr	r3, [pc, #228]	; (8004470 <xTaskResumeAll+0x114>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3b01      	subs	r3, #1
 8004390:	4a37      	ldr	r2, [pc, #220]	; (8004470 <xTaskResumeAll+0x114>)
 8004392:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004394:	4b36      	ldr	r3, [pc, #216]	; (8004470 <xTaskResumeAll+0x114>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d162      	bne.n	8004462 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800439c:	4b35      	ldr	r3, [pc, #212]	; (8004474 <xTaskResumeAll+0x118>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d05e      	beq.n	8004462 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043a4:	e02f      	b.n	8004406 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80043a6:	4b34      	ldr	r3, [pc, #208]	; (8004478 <xTaskResumeAll+0x11c>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3318      	adds	r3, #24
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff f89a 	bl	80034ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3304      	adds	r3, #4
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff f895 	bl	80034ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c6:	4b2d      	ldr	r3, [pc, #180]	; (800447c <xTaskResumeAll+0x120>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d903      	bls.n	80043d6 <xTaskResumeAll+0x7a>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	4a2a      	ldr	r2, [pc, #168]	; (800447c <xTaskResumeAll+0x120>)
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4a27      	ldr	r2, [pc, #156]	; (8004480 <xTaskResumeAll+0x124>)
 80043e4:	441a      	add	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3304      	adds	r3, #4
 80043ea:	4619      	mov	r1, r3
 80043ec:	4610      	mov	r0, r2
 80043ee:	f7ff f820 	bl	8003432 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f6:	4b23      	ldr	r3, [pc, #140]	; (8004484 <xTaskResumeAll+0x128>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d302      	bcc.n	8004406 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004400:	4b21      	ldr	r3, [pc, #132]	; (8004488 <xTaskResumeAll+0x12c>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004406:	4b1c      	ldr	r3, [pc, #112]	; (8004478 <xTaskResumeAll+0x11c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1cb      	bne.n	80043a6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004414:	f000 fb4c 	bl	8004ab0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004418:	4b1c      	ldr	r3, [pc, #112]	; (800448c <xTaskResumeAll+0x130>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d010      	beq.n	8004446 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004424:	f000 f846 	bl	80044b4 <xTaskIncrementTick>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800442e:	4b16      	ldr	r3, [pc, #88]	; (8004488 <xTaskResumeAll+0x12c>)
 8004430:	2201      	movs	r2, #1
 8004432:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3b01      	subs	r3, #1
 8004438:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1f1      	bne.n	8004424 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004440:	4b12      	ldr	r3, [pc, #72]	; (800448c <xTaskResumeAll+0x130>)
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004446:	4b10      	ldr	r3, [pc, #64]	; (8004488 <xTaskResumeAll+0x12c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d009      	beq.n	8004462 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800444e:	2301      	movs	r3, #1
 8004450:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004452:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <xTaskResumeAll+0x134>)
 8004454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004462:	f001 f889 	bl	8005578 <vPortExitCritical>

	return xAlreadyYielded;
 8004466:	68bb      	ldr	r3, [r7, #8]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000bf4 	.word	0x20000bf4
 8004474:	20000bcc 	.word	0x20000bcc
 8004478:	20000b8c 	.word	0x20000b8c
 800447c:	20000bd4 	.word	0x20000bd4
 8004480:	200006fc 	.word	0x200006fc
 8004484:	200006f8 	.word	0x200006f8
 8004488:	20000be0 	.word	0x20000be0
 800448c:	20000bdc 	.word	0x20000bdc
 8004490:	e000ed04 	.word	0xe000ed04

08004494 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <xTaskGetTickCount+0x1c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044a0:	687b      	ldr	r3, [r7, #4]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20000bd0 	.word	0x20000bd0

080044b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044be:	4b51      	ldr	r3, [pc, #324]	; (8004604 <xTaskIncrementTick+0x150>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f040 808d 	bne.w	80045e2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044c8:	4b4f      	ldr	r3, [pc, #316]	; (8004608 <xTaskIncrementTick+0x154>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3301      	adds	r3, #1
 80044ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044d0:	4a4d      	ldr	r2, [pc, #308]	; (8004608 <xTaskIncrementTick+0x154>)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d11f      	bne.n	800451c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80044dc:	4b4b      	ldr	r3, [pc, #300]	; (800460c <xTaskIncrementTick+0x158>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <xTaskIncrementTick+0x46>
 80044e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	e7fe      	b.n	80044f8 <xTaskIncrementTick+0x44>
 80044fa:	4b44      	ldr	r3, [pc, #272]	; (800460c <xTaskIncrementTick+0x158>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	4b43      	ldr	r3, [pc, #268]	; (8004610 <xTaskIncrementTick+0x15c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a41      	ldr	r2, [pc, #260]	; (800460c <xTaskIncrementTick+0x158>)
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	4a41      	ldr	r2, [pc, #260]	; (8004610 <xTaskIncrementTick+0x15c>)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	4b41      	ldr	r3, [pc, #260]	; (8004614 <xTaskIncrementTick+0x160>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3301      	adds	r3, #1
 8004514:	4a3f      	ldr	r2, [pc, #252]	; (8004614 <xTaskIncrementTick+0x160>)
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	f000 faca 	bl	8004ab0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800451c:	4b3e      	ldr	r3, [pc, #248]	; (8004618 <xTaskIncrementTick+0x164>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	429a      	cmp	r2, r3
 8004524:	d34e      	bcc.n	80045c4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004526:	4b39      	ldr	r3, [pc, #228]	; (800460c <xTaskIncrementTick+0x158>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <xTaskIncrementTick+0x80>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <xTaskIncrementTick+0x82>
 8004534:	2300      	movs	r3, #0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d004      	beq.n	8004544 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800453a:	4b37      	ldr	r3, [pc, #220]	; (8004618 <xTaskIncrementTick+0x164>)
 800453c:	f04f 32ff 	mov.w	r2, #4294967295
 8004540:	601a      	str	r2, [r3, #0]
					break;
 8004542:	e03f      	b.n	80045c4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004544:	4b31      	ldr	r3, [pc, #196]	; (800460c <xTaskIncrementTick+0x158>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	429a      	cmp	r2, r3
 800455a:	d203      	bcs.n	8004564 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800455c:	4a2e      	ldr	r2, [pc, #184]	; (8004618 <xTaskIncrementTick+0x164>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6013      	str	r3, [r2, #0]
						break;
 8004562:	e02f      	b.n	80045c4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	3304      	adds	r3, #4
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe ffbf 	bl	80034ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004572:	2b00      	cmp	r3, #0
 8004574:	d004      	beq.n	8004580 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	3318      	adds	r3, #24
 800457a:	4618      	mov	r0, r3
 800457c:	f7fe ffb6 	bl	80034ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004584:	4b25      	ldr	r3, [pc, #148]	; (800461c <xTaskIncrementTick+0x168>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d903      	bls.n	8004594 <xTaskIncrementTick+0xe0>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	4a22      	ldr	r2, [pc, #136]	; (800461c <xTaskIncrementTick+0x168>)
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <xTaskIncrementTick+0x16c>)
 80045a2:	441a      	add	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4619      	mov	r1, r3
 80045aa:	4610      	mov	r0, r2
 80045ac:	f7fe ff41 	bl	8003432 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b4:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <xTaskIncrementTick+0x170>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d3b3      	bcc.n	8004526 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80045be:	2301      	movs	r3, #1
 80045c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045c2:	e7b0      	b.n	8004526 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045c4:	4b17      	ldr	r3, [pc, #92]	; (8004624 <xTaskIncrementTick+0x170>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ca:	4915      	ldr	r1, [pc, #84]	; (8004620 <xTaskIncrementTick+0x16c>)
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d907      	bls.n	80045ec <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80045dc:	2301      	movs	r3, #1
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	e004      	b.n	80045ec <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80045e2:	4b11      	ldr	r3, [pc, #68]	; (8004628 <xTaskIncrementTick+0x174>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3301      	adds	r3, #1
 80045e8:	4a0f      	ldr	r2, [pc, #60]	; (8004628 <xTaskIncrementTick+0x174>)
 80045ea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80045ec:	4b0f      	ldr	r3, [pc, #60]	; (800462c <xTaskIncrementTick+0x178>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80045f4:	2301      	movs	r3, #1
 80045f6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80045f8:	697b      	ldr	r3, [r7, #20]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000bf4 	.word	0x20000bf4
 8004608:	20000bd0 	.word	0x20000bd0
 800460c:	20000b84 	.word	0x20000b84
 8004610:	20000b88 	.word	0x20000b88
 8004614:	20000be4 	.word	0x20000be4
 8004618:	20000bec 	.word	0x20000bec
 800461c:	20000bd4 	.word	0x20000bd4
 8004620:	200006fc 	.word	0x200006fc
 8004624:	200006f8 	.word	0x200006f8
 8004628:	20000bdc 	.word	0x20000bdc
 800462c:	20000be0 	.word	0x20000be0

08004630 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004636:	4b27      	ldr	r3, [pc, #156]	; (80046d4 <vTaskSwitchContext+0xa4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800463e:	4b26      	ldr	r3, [pc, #152]	; (80046d8 <vTaskSwitchContext+0xa8>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004644:	e040      	b.n	80046c8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004646:	4b24      	ldr	r3, [pc, #144]	; (80046d8 <vTaskSwitchContext+0xa8>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800464c:	4b23      	ldr	r3, [pc, #140]	; (80046dc <vTaskSwitchContext+0xac>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	e00f      	b.n	8004674 <vTaskSwitchContext+0x44>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <vTaskSwitchContext+0x3e>
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	607b      	str	r3, [r7, #4]
 800466c:	e7fe      	b.n	800466c <vTaskSwitchContext+0x3c>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3b01      	subs	r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	491a      	ldr	r1, [pc, #104]	; (80046e0 <vTaskSwitchContext+0xb0>)
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0e5      	beq.n	8004654 <vTaskSwitchContext+0x24>
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4a13      	ldr	r2, [pc, #76]	; (80046e0 <vTaskSwitchContext+0xb0>)
 8004694:	4413      	add	r3, r2
 8004696:	60bb      	str	r3, [r7, #8]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	3308      	adds	r3, #8
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d104      	bne.n	80046b8 <vTaskSwitchContext+0x88>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	605a      	str	r2, [r3, #4]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	4a09      	ldr	r2, [pc, #36]	; (80046e4 <vTaskSwitchContext+0xb4>)
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	4a06      	ldr	r2, [pc, #24]	; (80046dc <vTaskSwitchContext+0xac>)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6013      	str	r3, [r2, #0]
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	20000bf4 	.word	0x20000bf4
 80046d8:	20000be0 	.word	0x20000be0
 80046dc:	20000bd4 	.word	0x20000bd4
 80046e0:	200006fc 	.word	0x200006fc
 80046e4:	200006f8 	.word	0x200006f8

080046e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d109      	bne.n	800470c <vTaskPlaceOnEventList+0x24>
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	e7fe      	b.n	800470a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800470c:	4b07      	ldr	r3, [pc, #28]	; (800472c <vTaskPlaceOnEventList+0x44>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3318      	adds	r3, #24
 8004712:	4619      	mov	r1, r3
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7fe feb0 	bl	800347a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800471a:	2101      	movs	r1, #1
 800471c:	6838      	ldr	r0, [r7, #0]
 800471e:	f000 fa77 	bl	8004c10 <prvAddCurrentTaskToDelayedList>
}
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	200006f8 	.word	0x200006f8

08004730 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d109      	bne.n	8004756 <vTaskPlaceOnEventListRestricted+0x26>
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	e7fe      	b.n	8004754 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004756:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <vTaskPlaceOnEventListRestricted+0x50>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3318      	adds	r3, #24
 800475c:	4619      	mov	r1, r3
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f7fe fe67 	bl	8003432 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800476a:	f04f 33ff 	mov.w	r3, #4294967295
 800476e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	68b8      	ldr	r0, [r7, #8]
 8004774:	f000 fa4c 	bl	8004c10 <prvAddCurrentTaskToDelayedList>
	}
 8004778:	bf00      	nop
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	200006f8 	.word	0x200006f8

08004784 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <xTaskRemoveFromEventList+0x2a>
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	e7fe      	b.n	80047ac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	3318      	adds	r3, #24
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe fe9a 	bl	80034ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047b8:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <xTaskRemoveFromEventList+0xac>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d11d      	bne.n	80047fc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	3304      	adds	r3, #4
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fe fe91 	bl	80034ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ce:	4b19      	ldr	r3, [pc, #100]	; (8004834 <xTaskRemoveFromEventList+0xb0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d903      	bls.n	80047de <xTaskRemoveFromEventList+0x5a>
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	4a16      	ldr	r2, [pc, #88]	; (8004834 <xTaskRemoveFromEventList+0xb0>)
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4a13      	ldr	r2, [pc, #76]	; (8004838 <xTaskRemoveFromEventList+0xb4>)
 80047ec:	441a      	add	r2, r3
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	3304      	adds	r3, #4
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f7fe fe1c 	bl	8003432 <vListInsertEnd>
 80047fa:	e005      	b.n	8004808 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	3318      	adds	r3, #24
 8004800:	4619      	mov	r1, r3
 8004802:	480e      	ldr	r0, [pc, #56]	; (800483c <xTaskRemoveFromEventList+0xb8>)
 8004804:	f7fe fe15 	bl	8003432 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480c:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <xTaskRemoveFromEventList+0xbc>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	429a      	cmp	r2, r3
 8004814:	d905      	bls.n	8004822 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004816:	2301      	movs	r3, #1
 8004818:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800481a:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <xTaskRemoveFromEventList+0xc0>)
 800481c:	2201      	movs	r2, #1
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	e001      	b.n	8004826 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004826:	697b      	ldr	r3, [r7, #20]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20000bf4 	.word	0x20000bf4
 8004834:	20000bd4 	.word	0x20000bd4
 8004838:	200006fc 	.word	0x200006fc
 800483c:	20000b8c 	.word	0x20000b8c
 8004840:	200006f8 	.word	0x200006f8
 8004844:	20000be0 	.word	0x20000be0

08004848 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004850:	4b06      	ldr	r3, [pc, #24]	; (800486c <vTaskInternalSetTimeOutState+0x24>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <vTaskInternalSetTimeOutState+0x28>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	605a      	str	r2, [r3, #4]
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	20000be4 	.word	0x20000be4
 8004870:	20000bd0 	.word	0x20000bd0

08004874 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d109      	bne.n	8004898 <xTaskCheckForTimeOut+0x24>
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	e7fe      	b.n	8004896 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d109      	bne.n	80048b2 <xTaskCheckForTimeOut+0x3e>
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e7fe      	b.n	80048b0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80048b2:	f000 fe33 	bl	800551c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048b6:	4b1d      	ldr	r3, [pc, #116]	; (800492c <xTaskCheckForTimeOut+0xb8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ce:	d102      	bne.n	80048d6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	e023      	b.n	800491e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	4b15      	ldr	r3, [pc, #84]	; (8004930 <xTaskCheckForTimeOut+0xbc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d007      	beq.n	80048f2 <xTaskCheckForTimeOut+0x7e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d302      	bcc.n	80048f2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048ec:	2301      	movs	r3, #1
 80048ee:	61fb      	str	r3, [r7, #28]
 80048f0:	e015      	b.n	800491e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d20b      	bcs.n	8004914 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	1ad2      	subs	r2, r2, r3
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff ff9d 	bl	8004848 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	e004      	b.n	800491e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800491a:	2301      	movs	r3, #1
 800491c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800491e:	f000 fe2b 	bl	8005578 <vPortExitCritical>

	return xReturn;
 8004922:	69fb      	ldr	r3, [r7, #28]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3720      	adds	r7, #32
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20000bd0 	.word	0x20000bd0
 8004930:	20000be4 	.word	0x20000be4

08004934 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004938:	4b03      	ldr	r3, [pc, #12]	; (8004948 <vTaskMissedYield+0x14>)
 800493a:	2201      	movs	r2, #1
 800493c:	601a      	str	r2, [r3, #0]
}
 800493e:	bf00      	nop
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	20000be0 	.word	0x20000be0

0800494c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004954:	f000 f852 	bl	80049fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <prvIdleTask+0x28>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d9f9      	bls.n	8004954 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004960:	4b05      	ldr	r3, [pc, #20]	; (8004978 <prvIdleTask+0x2c>)
 8004962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004970:	e7f0      	b.n	8004954 <prvIdleTask+0x8>
 8004972:	bf00      	nop
 8004974:	200006fc 	.word	0x200006fc
 8004978:	e000ed04 	.word	0xe000ed04

0800497c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004982:	2300      	movs	r3, #0
 8004984:	607b      	str	r3, [r7, #4]
 8004986:	e00c      	b.n	80049a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4a12      	ldr	r2, [pc, #72]	; (80049dc <prvInitialiseTaskLists+0x60>)
 8004994:	4413      	add	r3, r2
 8004996:	4618      	mov	r0, r3
 8004998:	f7fe fd1e 	bl	80033d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3301      	adds	r3, #1
 80049a0:	607b      	str	r3, [r7, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b37      	cmp	r3, #55	; 0x37
 80049a6:	d9ef      	bls.n	8004988 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049a8:	480d      	ldr	r0, [pc, #52]	; (80049e0 <prvInitialiseTaskLists+0x64>)
 80049aa:	f7fe fd15 	bl	80033d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049ae:	480d      	ldr	r0, [pc, #52]	; (80049e4 <prvInitialiseTaskLists+0x68>)
 80049b0:	f7fe fd12 	bl	80033d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049b4:	480c      	ldr	r0, [pc, #48]	; (80049e8 <prvInitialiseTaskLists+0x6c>)
 80049b6:	f7fe fd0f 	bl	80033d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049ba:	480c      	ldr	r0, [pc, #48]	; (80049ec <prvInitialiseTaskLists+0x70>)
 80049bc:	f7fe fd0c 	bl	80033d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049c0:	480b      	ldr	r0, [pc, #44]	; (80049f0 <prvInitialiseTaskLists+0x74>)
 80049c2:	f7fe fd09 	bl	80033d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049c6:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <prvInitialiseTaskLists+0x78>)
 80049c8:	4a05      	ldr	r2, [pc, #20]	; (80049e0 <prvInitialiseTaskLists+0x64>)
 80049ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049cc:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <prvInitialiseTaskLists+0x7c>)
 80049ce:	4a05      	ldr	r2, [pc, #20]	; (80049e4 <prvInitialiseTaskLists+0x68>)
 80049d0:	601a      	str	r2, [r3, #0]
}
 80049d2:	bf00      	nop
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	200006fc 	.word	0x200006fc
 80049e0:	20000b5c 	.word	0x20000b5c
 80049e4:	20000b70 	.word	0x20000b70
 80049e8:	20000b8c 	.word	0x20000b8c
 80049ec:	20000ba0 	.word	0x20000ba0
 80049f0:	20000bb8 	.word	0x20000bb8
 80049f4:	20000b84 	.word	0x20000b84
 80049f8:	20000b88 	.word	0x20000b88

080049fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a02:	e019      	b.n	8004a38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a04:	f000 fd8a 	bl	800551c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004a08:	4b0f      	ldr	r3, [pc, #60]	; (8004a48 <prvCheckTasksWaitingTermination+0x4c>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3304      	adds	r3, #4
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fe fd69 	bl	80034ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a1a:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <prvCheckTasksWaitingTermination+0x50>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <prvCheckTasksWaitingTermination+0x50>)
 8004a22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a24:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <prvCheckTasksWaitingTermination+0x54>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <prvCheckTasksWaitingTermination+0x54>)
 8004a2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a2e:	f000 fda3 	bl	8005578 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f80e 	bl	8004a54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <prvCheckTasksWaitingTermination+0x54>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e1      	bne.n	8004a04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20000ba0 	.word	0x20000ba0
 8004a4c:	20000bcc 	.word	0x20000bcc
 8004a50:	20000bb4 	.word	0x20000bb4

08004a54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d108      	bne.n	8004a78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 ff32 	bl	80058d4 <vPortFree>
				vPortFree( pxTCB );
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 ff2f 	bl	80058d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a76:	e017      	b.n	8004aa8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d103      	bne.n	8004a8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 ff26 	bl	80058d4 <vPortFree>
	}
 8004a88:	e00e      	b.n	8004aa8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d009      	beq.n	8004aa8 <prvDeleteTCB+0x54>
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e7fe      	b.n	8004aa6 <prvDeleteTCB+0x52>
	}
 8004aa8:	bf00      	nop
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ab6:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <prvResetNextTaskUnblockTime+0x44>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <prvResetNextTaskUnblockTime+0x14>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <prvResetNextTaskUnblockTime+0x16>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d004      	beq.n	8004ad4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004aca:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <prvResetNextTaskUnblockTime+0x48>)
 8004acc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ad2:	e008      	b.n	8004ae6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ad4:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <prvResetNextTaskUnblockTime+0x44>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	4a05      	ldr	r2, [pc, #20]	; (8004af8 <prvResetNextTaskUnblockTime+0x48>)
 8004ae4:	6013      	str	r3, [r2, #0]
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	20000b84 	.word	0x20000b84
 8004af8:	20000bec 	.word	0x20000bec

08004afc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b02:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <xTaskGetSchedulerState+0x34>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d102      	bne.n	8004b10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	607b      	str	r3, [r7, #4]
 8004b0e:	e008      	b.n	8004b22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b10:	4b08      	ldr	r3, [pc, #32]	; (8004b34 <xTaskGetSchedulerState+0x38>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d102      	bne.n	8004b1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b18:	2302      	movs	r3, #2
 8004b1a:	607b      	str	r3, [r7, #4]
 8004b1c:	e001      	b.n	8004b22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b22:	687b      	ldr	r3, [r7, #4]
	}
 8004b24:	4618      	mov	r0, r3
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	20000bd8 	.word	0x20000bd8
 8004b34:	20000bf4 	.word	0x20000bf4

08004b38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d054      	beq.n	8004bf8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b4e:	4b2d      	ldr	r3, [pc, #180]	; (8004c04 <xTaskPriorityDisinherit+0xcc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d009      	beq.n	8004b6c <xTaskPriorityDisinherit+0x34>
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	e7fe      	b.n	8004b6a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <xTaskPriorityDisinherit+0x50>
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	60bb      	str	r3, [r7, #8]
 8004b86:	e7fe      	b.n	8004b86 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8c:	1e5a      	subs	r2, r3, #1
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d02c      	beq.n	8004bf8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d128      	bne.n	8004bf8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fe fc9e 	bl	80034ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc8:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <xTaskPriorityDisinherit+0xd0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d903      	bls.n	8004bd8 <xTaskPriorityDisinherit+0xa0>
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	4a0c      	ldr	r2, [pc, #48]	; (8004c08 <xTaskPriorityDisinherit+0xd0>)
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4a09      	ldr	r2, [pc, #36]	; (8004c0c <xTaskPriorityDisinherit+0xd4>)
 8004be6:	441a      	add	r2, r3
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	3304      	adds	r3, #4
 8004bec:	4619      	mov	r1, r3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	f7fe fc1f 	bl	8003432 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bf8:	697b      	ldr	r3, [r7, #20]
	}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	200006f8 	.word	0x200006f8
 8004c08:	20000bd4 	.word	0x20000bd4
 8004c0c:	200006fc 	.word	0x200006fc

08004c10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c1a:	4b21      	ldr	r3, [pc, #132]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c20:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3304      	adds	r3, #4
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fe fc60 	bl	80034ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c32:	d10a      	bne.n	8004c4a <prvAddCurrentTaskToDelayedList+0x3a>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d007      	beq.n	8004c4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	4619      	mov	r1, r3
 8004c42:	4819      	ldr	r0, [pc, #100]	; (8004ca8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c44:	f7fe fbf5 	bl	8003432 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c48:	e026      	b.n	8004c98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4413      	add	r3, r2
 8004c50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c52:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d209      	bcs.n	8004c76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c62:	4b12      	ldr	r3, [pc, #72]	; (8004cac <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	f7fe fc03 	bl	800347a <vListInsert>
}
 8004c74:	e010      	b.n	8004c98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c76:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4619      	mov	r1, r3
 8004c82:	4610      	mov	r0, r2
 8004c84:	f7fe fbf9 	bl	800347a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d202      	bcs.n	8004c98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c92:	4a08      	ldr	r2, [pc, #32]	; (8004cb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	6013      	str	r3, [r2, #0]
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20000bd0 	.word	0x20000bd0
 8004ca4:	200006f8 	.word	0x200006f8
 8004ca8:	20000bb8 	.word	0x20000bb8
 8004cac:	20000b88 	.word	0x20000b88
 8004cb0:	20000b84 	.word	0x20000b84
 8004cb4:	20000bec 	.word	0x20000bec

08004cb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08a      	sub	sp, #40	; 0x28
 8004cbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004cc2:	f000 fac3 	bl	800524c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004cc6:	4b1c      	ldr	r3, [pc, #112]	; (8004d38 <xTimerCreateTimerTask+0x80>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d021      	beq.n	8004d12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004cd6:	1d3a      	adds	r2, r7, #4
 8004cd8:	f107 0108 	add.w	r1, r7, #8
 8004cdc:	f107 030c 	add.w	r3, r7, #12
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fe fb5f 	bl	80033a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	9202      	str	r2, [sp, #8]
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	460a      	mov	r2, r1
 8004cf8:	4910      	ldr	r1, [pc, #64]	; (8004d3c <xTimerCreateTimerTask+0x84>)
 8004cfa:	4811      	ldr	r0, [pc, #68]	; (8004d40 <xTimerCreateTimerTask+0x88>)
 8004cfc:	f7ff f8f4 	bl	8003ee8 <xTaskCreateStatic>
 8004d00:	4602      	mov	r2, r0
 8004d02:	4b10      	ldr	r3, [pc, #64]	; (8004d44 <xTimerCreateTimerTask+0x8c>)
 8004d04:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d06:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <xTimerCreateTimerTask+0x8c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d109      	bne.n	8004d2c <xTimerCreateTimerTask+0x74>
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	e7fe      	b.n	8004d2a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004d2c:	697b      	ldr	r3, [r7, #20]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000c28 	.word	0x20000c28
 8004d3c:	08005b9c 	.word	0x08005b9c
 8004d40:	08004e61 	.word	0x08004e61
 8004d44:	20000c2c 	.word	0x20000c2c

08004d48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08a      	sub	sp, #40	; 0x28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d109      	bne.n	8004d74 <xTimerGenericCommand+0x2c>
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	623b      	str	r3, [r7, #32]
 8004d72:	e7fe      	b.n	8004d72 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d74:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <xTimerGenericCommand+0x94>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d02a      	beq.n	8004dd2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b05      	cmp	r3, #5
 8004d8c:	dc18      	bgt.n	8004dc0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d8e:	f7ff feb5 	bl	8004afc <xTaskGetSchedulerState>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d109      	bne.n	8004dac <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d98:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <xTimerGenericCommand+0x94>)
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	f107 0110 	add.w	r1, r7, #16
 8004da0:	2300      	movs	r3, #0
 8004da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da4:	f7fe fcca 	bl	800373c <xQueueGenericSend>
 8004da8:	6278      	str	r0, [r7, #36]	; 0x24
 8004daa:	e012      	b.n	8004dd2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004dac:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <xTimerGenericCommand+0x94>)
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	f107 0110 	add.w	r1, r7, #16
 8004db4:	2300      	movs	r3, #0
 8004db6:	2200      	movs	r2, #0
 8004db8:	f7fe fcc0 	bl	800373c <xQueueGenericSend>
 8004dbc:	6278      	str	r0, [r7, #36]	; 0x24
 8004dbe:	e008      	b.n	8004dd2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <xTimerGenericCommand+0x94>)
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	f107 0110 	add.w	r1, r7, #16
 8004dc8:	2300      	movs	r3, #0
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	f7fe fdb0 	bl	8003930 <xQueueGenericSendFromISR>
 8004dd0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3728      	adds	r7, #40	; 0x28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	20000c28 	.word	0x20000c28

08004de0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dea:	4b1c      	ldr	r3, [pc, #112]	; (8004e5c <prvProcessExpiredTimer+0x7c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	3304      	adds	r3, #4
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fe fb77 	bl	80034ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d121      	bne.n	8004e4a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	18d1      	adds	r1, r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	6978      	ldr	r0, [r7, #20]
 8004e14:	f000 f8c8 	bl	8004fa8 <prvInsertTimerInActiveList>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d015      	beq.n	8004e4a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e1e:	2300      	movs	r3, #0
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	2300      	movs	r3, #0
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	2100      	movs	r1, #0
 8004e28:	6978      	ldr	r0, [r7, #20]
 8004e2a:	f7ff ff8d 	bl	8004d48 <xTimerGenericCommand>
 8004e2e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <prvProcessExpiredTimer+0x6a>
 8004e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	e7fe      	b.n	8004e48 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	6978      	ldr	r0, [r7, #20]
 8004e50:	4798      	blx	r3
}
 8004e52:	bf00      	nop
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000c20 	.word	0x20000c20

08004e60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e68:	f107 0308 	add.w	r3, r7, #8
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 f857 	bl	8004f20 <prvGetNextExpireTime>
 8004e72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	4619      	mov	r1, r3
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 f803 	bl	8004e84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e7e:	f000 f8d5 	bl	800502c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e82:	e7f1      	b.n	8004e68 <prvTimerTask+0x8>

08004e84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e8e:	f7ff fa57 	bl	8004340 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e92:	f107 0308 	add.w	r3, r7, #8
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f866 	bl	8004f68 <prvSampleTimeNow>
 8004e9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d130      	bne.n	8004f06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10a      	bne.n	8004ec0 <prvProcessTimerOrBlockTask+0x3c>
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d806      	bhi.n	8004ec0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004eb2:	f7ff fa53 	bl	800435c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004eb6:	68f9      	ldr	r1, [r7, #12]
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff ff91 	bl	8004de0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ebe:	e024      	b.n	8004f0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d008      	beq.n	8004ed8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ec6:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <prvProcessTimerOrBlockTask+0x90>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf0c      	ite	eq
 8004ed0:	2301      	moveq	r3, #1
 8004ed2:	2300      	movne	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ed8:	4b0f      	ldr	r3, [pc, #60]	; (8004f18 <prvProcessTimerOrBlockTask+0x94>)
 8004eda:	6818      	ldr	r0, [r3, #0]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	f7fe ffcb 	bl	8003e80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004eea:	f7ff fa37 	bl	800435c <xTaskResumeAll>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10a      	bne.n	8004f0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ef4:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <prvProcessTimerOrBlockTask+0x98>)
 8004ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	f3bf 8f6f 	isb	sy
}
 8004f04:	e001      	b.n	8004f0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f06:	f7ff fa29 	bl	800435c <xTaskResumeAll>
}
 8004f0a:	bf00      	nop
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000c24 	.word	0x20000c24
 8004f18:	20000c28 	.word	0x20000c28
 8004f1c:	e000ed04 	.word	0xe000ed04

08004f20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f28:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <prvGetNextExpireTime+0x44>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	bf0c      	ite	eq
 8004f32:	2301      	moveq	r3, #1
 8004f34:	2300      	movne	r3, #0
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	461a      	mov	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d105      	bne.n	8004f52 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f46:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <prvGetNextExpireTime+0x44>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	e001      	b.n	8004f56 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f56:	68fb      	ldr	r3, [r7, #12]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	20000c20 	.word	0x20000c20

08004f68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f70:	f7ff fa90 	bl	8004494 <xTaskGetTickCount>
 8004f74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f76:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <prvSampleTimeNow+0x3c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d205      	bcs.n	8004f8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f80:	f000 f904 	bl	800518c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	e002      	b.n	8004f92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f92:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <prvSampleTimeNow+0x3c>)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f98:	68fb      	ldr	r3, [r7, #12]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000c30 	.word	0x20000c30

08004fa8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d812      	bhi.n	8004ff4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	1ad2      	subs	r2, r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d302      	bcc.n	8004fe2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	e01b      	b.n	800501a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004fe2:	4b10      	ldr	r3, [pc, #64]	; (8005024 <prvInsertTimerInActiveList+0x7c>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	4619      	mov	r1, r3
 8004fec:	4610      	mov	r0, r2
 8004fee:	f7fe fa44 	bl	800347a <vListInsert>
 8004ff2:	e012      	b.n	800501a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d206      	bcs.n	800500a <prvInsertTimerInActiveList+0x62>
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d302      	bcc.n	800500a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005004:	2301      	movs	r3, #1
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	e007      	b.n	800501a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800500a:	4b07      	ldr	r3, [pc, #28]	; (8005028 <prvInsertTimerInActiveList+0x80>)
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3304      	adds	r3, #4
 8005012:	4619      	mov	r1, r3
 8005014:	4610      	mov	r0, r2
 8005016:	f7fe fa30 	bl	800347a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800501a:	697b      	ldr	r3, [r7, #20]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	20000c24 	.word	0x20000c24
 8005028:	20000c20 	.word	0x20000c20

0800502c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08e      	sub	sp, #56	; 0x38
 8005030:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005032:	e099      	b.n	8005168 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	da17      	bge.n	800506a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800503a:	1d3b      	adds	r3, r7, #4
 800503c:	3304      	adds	r3, #4
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <prvProcessReceivedCommands+0x2e>
 8005046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	e7fe      	b.n	8005058 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005060:	6850      	ldr	r0, [r2, #4]
 8005062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005064:	6892      	ldr	r2, [r2, #8]
 8005066:	4611      	mov	r1, r2
 8005068:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	db7a      	blt.n	8005166 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d004      	beq.n	8005086 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	3304      	adds	r3, #4
 8005080:	4618      	mov	r0, r3
 8005082:	f7fe fa33 	bl	80034ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005086:	463b      	mov	r3, r7
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff ff6d 	bl	8004f68 <prvSampleTimeNow>
 800508e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b09      	cmp	r3, #9
 8005094:	d868      	bhi.n	8005168 <prvProcessReceivedCommands+0x13c>
 8005096:	a201      	add	r2, pc, #4	; (adr r2, 800509c <prvProcessReceivedCommands+0x70>)
 8005098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509c:	080050c5 	.word	0x080050c5
 80050a0:	080050c5 	.word	0x080050c5
 80050a4:	080050c5 	.word	0x080050c5
 80050a8:	08005169 	.word	0x08005169
 80050ac:	0800511f 	.word	0x0800511f
 80050b0:	08005155 	.word	0x08005155
 80050b4:	080050c5 	.word	0x080050c5
 80050b8:	080050c5 	.word	0x080050c5
 80050bc:	08005169 	.word	0x08005169
 80050c0:	0800511f 	.word	0x0800511f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	18d1      	adds	r1, r2, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050d2:	f7ff ff69 	bl	8004fa8 <prvInsertTimerInActiveList>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d045      	beq.n	8005168 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050e2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d13d      	bne.n	8005168 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	441a      	add	r2, r3
 80050f4:	2300      	movs	r3, #0
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	2300      	movs	r3, #0
 80050fa:	2100      	movs	r1, #0
 80050fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050fe:	f7ff fe23 	bl	8004d48 <xTimerGenericCommand>
 8005102:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d12e      	bne.n	8005168 <prvProcessReceivedCommands+0x13c>
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	61bb      	str	r3, [r7, #24]
 800511c:	e7fe      	b.n	800511c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d109      	bne.n	8005140 <prvProcessReceivedCommands+0x114>
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	e7fe      	b.n	800513e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	699a      	ldr	r2, [r3, #24]
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	18d1      	adds	r1, r2, r3
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800514e:	f7ff ff2b 	bl	8004fa8 <prvInsertTimerInActiveList>
					break;
 8005152:	e009      	b.n	8005168 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d104      	bne.n	8005168 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800515e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005160:	f000 fbb8 	bl	80058d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005164:	e000      	b.n	8005168 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005166:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005168:	4b07      	ldr	r3, [pc, #28]	; (8005188 <prvProcessReceivedCommands+0x15c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	1d39      	adds	r1, r7, #4
 800516e:	2200      	movs	r2, #0
 8005170:	4618      	mov	r0, r3
 8005172:	f7fe fc71 	bl	8003a58 <xQueueReceive>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	f47f af5b 	bne.w	8005034 <prvProcessReceivedCommands+0x8>
	}
}
 800517e:	bf00      	nop
 8005180:	3730      	adds	r7, #48	; 0x30
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000c28 	.word	0x20000c28

0800518c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005192:	e044      	b.n	800521e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005194:	4b2b      	ldr	r3, [pc, #172]	; (8005244 <prvSwitchTimerLists+0xb8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800519e:	4b29      	ldr	r3, [pc, #164]	; (8005244 <prvSwitchTimerLists+0xb8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3304      	adds	r3, #4
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fe f99d 	bl	80034ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d12d      	bne.n	800521e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4413      	add	r3, r2
 80051ca:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d90e      	bls.n	80051f2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051e0:	4b18      	ldr	r3, [pc, #96]	; (8005244 <prvSwitchTimerLists+0xb8>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	3304      	adds	r3, #4
 80051e8:	4619      	mov	r1, r3
 80051ea:	4610      	mov	r0, r2
 80051ec:	f7fe f945 	bl	800347a <vListInsert>
 80051f0:	e015      	b.n	800521e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051f2:	2300      	movs	r3, #0
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	2300      	movs	r3, #0
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	2100      	movs	r1, #0
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f7ff fda3 	bl	8004d48 <xTimerGenericCommand>
 8005202:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d109      	bne.n	800521e <prvSwitchTimerLists+0x92>
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	e7fe      	b.n	800521c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <prvSwitchTimerLists+0xb8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1b5      	bne.n	8005194 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005228:	4b06      	ldr	r3, [pc, #24]	; (8005244 <prvSwitchTimerLists+0xb8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800522e:	4b06      	ldr	r3, [pc, #24]	; (8005248 <prvSwitchTimerLists+0xbc>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a04      	ldr	r2, [pc, #16]	; (8005244 <prvSwitchTimerLists+0xb8>)
 8005234:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005236:	4a04      	ldr	r2, [pc, #16]	; (8005248 <prvSwitchTimerLists+0xbc>)
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	6013      	str	r3, [r2, #0]
}
 800523c:	bf00      	nop
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	20000c20 	.word	0x20000c20
 8005248:	20000c24 	.word	0x20000c24

0800524c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005252:	f000 f963 	bl	800551c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005256:	4b15      	ldr	r3, [pc, #84]	; (80052ac <prvCheckForValidListAndQueue+0x60>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d120      	bne.n	80052a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800525e:	4814      	ldr	r0, [pc, #80]	; (80052b0 <prvCheckForValidListAndQueue+0x64>)
 8005260:	f7fe f8ba 	bl	80033d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005264:	4813      	ldr	r0, [pc, #76]	; (80052b4 <prvCheckForValidListAndQueue+0x68>)
 8005266:	f7fe f8b7 	bl	80033d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <prvCheckForValidListAndQueue+0x6c>)
 800526c:	4a10      	ldr	r2, [pc, #64]	; (80052b0 <prvCheckForValidListAndQueue+0x64>)
 800526e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005270:	4b12      	ldr	r3, [pc, #72]	; (80052bc <prvCheckForValidListAndQueue+0x70>)
 8005272:	4a10      	ldr	r2, [pc, #64]	; (80052b4 <prvCheckForValidListAndQueue+0x68>)
 8005274:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005276:	2300      	movs	r3, #0
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	4b11      	ldr	r3, [pc, #68]	; (80052c0 <prvCheckForValidListAndQueue+0x74>)
 800527c:	4a11      	ldr	r2, [pc, #68]	; (80052c4 <prvCheckForValidListAndQueue+0x78>)
 800527e:	2110      	movs	r1, #16
 8005280:	200a      	movs	r0, #10
 8005282:	f7fe f9c5 	bl	8003610 <xQueueGenericCreateStatic>
 8005286:	4602      	mov	r2, r0
 8005288:	4b08      	ldr	r3, [pc, #32]	; (80052ac <prvCheckForValidListAndQueue+0x60>)
 800528a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800528c:	4b07      	ldr	r3, [pc, #28]	; (80052ac <prvCheckForValidListAndQueue+0x60>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <prvCheckForValidListAndQueue+0x60>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	490b      	ldr	r1, [pc, #44]	; (80052c8 <prvCheckForValidListAndQueue+0x7c>)
 800529a:	4618      	mov	r0, r3
 800529c:	f7fe fdc8 	bl	8003e30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052a0:	f000 f96a 	bl	8005578 <vPortExitCritical>
}
 80052a4:	bf00      	nop
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20000c28 	.word	0x20000c28
 80052b0:	20000bf8 	.word	0x20000bf8
 80052b4:	20000c0c 	.word	0x20000c0c
 80052b8:	20000c20 	.word	0x20000c20
 80052bc:	20000c24 	.word	0x20000c24
 80052c0:	20000cd4 	.word	0x20000cd4
 80052c4:	20000c34 	.word	0x20000c34
 80052c8:	08005ba4 	.word	0x08005ba4

080052cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3b04      	subs	r3, #4
 80052dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3b04      	subs	r3, #4
 80052ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f023 0201 	bic.w	r2, r3, #1
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3b04      	subs	r3, #4
 80052fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052fc:	4a0c      	ldr	r2, [pc, #48]	; (8005330 <pxPortInitialiseStack+0x64>)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3b14      	subs	r3, #20
 8005306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3b04      	subs	r3, #4
 8005312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f06f 0202 	mvn.w	r2, #2
 800531a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3b20      	subs	r3, #32
 8005320:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005322:	68fb      	ldr	r3, [r7, #12]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	08005335 	.word	0x08005335

08005334 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800533e:	4b11      	ldr	r3, [pc, #68]	; (8005384 <prvTaskExitError+0x50>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005346:	d009      	beq.n	800535c <prvTaskExitError+0x28>
 8005348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	e7fe      	b.n	800535a <prvTaskExitError+0x26>
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800536e:	bf00      	nop
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0fc      	beq.n	8005370 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005376:	bf00      	nop
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	2000001c 	.word	0x2000001c
	...

08005390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005390:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <pxCurrentTCBConst2>)
 8005392:	6819      	ldr	r1, [r3, #0]
 8005394:	6808      	ldr	r0, [r1, #0]
 8005396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539a:	f380 8809 	msr	PSP, r0
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f04f 0000 	mov.w	r0, #0
 80053a6:	f380 8811 	msr	BASEPRI, r0
 80053aa:	4770      	bx	lr
 80053ac:	f3af 8000 	nop.w

080053b0 <pxCurrentTCBConst2>:
 80053b0:	200006f8 	.word	0x200006f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop

080053b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053b8:	4808      	ldr	r0, [pc, #32]	; (80053dc <prvPortStartFirstTask+0x24>)
 80053ba:	6800      	ldr	r0, [r0, #0]
 80053bc:	6800      	ldr	r0, [r0, #0]
 80053be:	f380 8808 	msr	MSP, r0
 80053c2:	f04f 0000 	mov.w	r0, #0
 80053c6:	f380 8814 	msr	CONTROL, r0
 80053ca:	b662      	cpsie	i
 80053cc:	b661      	cpsie	f
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	df00      	svc	0
 80053d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053da:	bf00      	nop
 80053dc:	e000ed08 	.word	0xe000ed08

080053e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053e6:	4b44      	ldr	r3, [pc, #272]	; (80054f8 <xPortStartScheduler+0x118>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a44      	ldr	r2, [pc, #272]	; (80054fc <xPortStartScheduler+0x11c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d109      	bne.n	8005404 <xPortStartScheduler+0x24>
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	e7fe      	b.n	8005402 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005404:	4b3c      	ldr	r3, [pc, #240]	; (80054f8 <xPortStartScheduler+0x118>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a3d      	ldr	r2, [pc, #244]	; (8005500 <xPortStartScheduler+0x120>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d109      	bne.n	8005422 <xPortStartScheduler+0x42>
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	e7fe      	b.n	8005420 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005422:	4b38      	ldr	r3, [pc, #224]	; (8005504 <xPortStartScheduler+0x124>)
 8005424:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	22ff      	movs	r2, #255	; 0xff
 8005432:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005444:	b2da      	uxtb	r2, r3
 8005446:	4b30      	ldr	r3, [pc, #192]	; (8005508 <xPortStartScheduler+0x128>)
 8005448:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800544a:	4b30      	ldr	r3, [pc, #192]	; (800550c <xPortStartScheduler+0x12c>)
 800544c:	2207      	movs	r2, #7
 800544e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005450:	e009      	b.n	8005466 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005452:	4b2e      	ldr	r3, [pc, #184]	; (800550c <xPortStartScheduler+0x12c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3b01      	subs	r3, #1
 8005458:	4a2c      	ldr	r2, [pc, #176]	; (800550c <xPortStartScheduler+0x12c>)
 800545a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	b2db      	uxtb	r3, r3
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	b2db      	uxtb	r3, r3
 8005464:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005466:	78fb      	ldrb	r3, [r7, #3]
 8005468:	b2db      	uxtb	r3, r3
 800546a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546e:	2b80      	cmp	r3, #128	; 0x80
 8005470:	d0ef      	beq.n	8005452 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005472:	4b26      	ldr	r3, [pc, #152]	; (800550c <xPortStartScheduler+0x12c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f1c3 0307 	rsb	r3, r3, #7
 800547a:	2b04      	cmp	r3, #4
 800547c:	d009      	beq.n	8005492 <xPortStartScheduler+0xb2>
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	60bb      	str	r3, [r7, #8]
 8005490:	e7fe      	b.n	8005490 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005492:	4b1e      	ldr	r3, [pc, #120]	; (800550c <xPortStartScheduler+0x12c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	4a1c      	ldr	r2, [pc, #112]	; (800550c <xPortStartScheduler+0x12c>)
 800549a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800549c:	4b1b      	ldr	r3, [pc, #108]	; (800550c <xPortStartScheduler+0x12c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054a4:	4a19      	ldr	r2, [pc, #100]	; (800550c <xPortStartScheduler+0x12c>)
 80054a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054b0:	4b17      	ldr	r3, [pc, #92]	; (8005510 <xPortStartScheduler+0x130>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a16      	ldr	r2, [pc, #88]	; (8005510 <xPortStartScheduler+0x130>)
 80054b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054bc:	4b14      	ldr	r3, [pc, #80]	; (8005510 <xPortStartScheduler+0x130>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a13      	ldr	r2, [pc, #76]	; (8005510 <xPortStartScheduler+0x130>)
 80054c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054c8:	f000 f8d6 	bl	8005678 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054cc:	4b11      	ldr	r3, [pc, #68]	; (8005514 <xPortStartScheduler+0x134>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80054d2:	f000 f8f5 	bl	80056c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054d6:	4b10      	ldr	r3, [pc, #64]	; (8005518 <xPortStartScheduler+0x138>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a0f      	ldr	r2, [pc, #60]	; (8005518 <xPortStartScheduler+0x138>)
 80054dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80054e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054e2:	f7ff ff69 	bl	80053b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054e6:	f7ff f8a3 	bl	8004630 <vTaskSwitchContext>
	prvTaskExitError();
 80054ea:	f7ff ff23 	bl	8005334 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	e000ed00 	.word	0xe000ed00
 80054fc:	410fc271 	.word	0x410fc271
 8005500:	410fc270 	.word	0x410fc270
 8005504:	e000e400 	.word	0xe000e400
 8005508:	20000d24 	.word	0x20000d24
 800550c:	20000d28 	.word	0x20000d28
 8005510:	e000ed20 	.word	0xe000ed20
 8005514:	2000001c 	.word	0x2000001c
 8005518:	e000ef34 	.word	0xe000ef34

0800551c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005534:	4b0e      	ldr	r3, [pc, #56]	; (8005570 <vPortEnterCritical+0x54>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	4a0d      	ldr	r2, [pc, #52]	; (8005570 <vPortEnterCritical+0x54>)
 800553c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800553e:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <vPortEnterCritical+0x54>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d10e      	bne.n	8005564 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005546:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <vPortEnterCritical+0x58>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d009      	beq.n	8005564 <vPortEnterCritical+0x48>
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	603b      	str	r3, [r7, #0]
 8005562:	e7fe      	b.n	8005562 <vPortEnterCritical+0x46>
	}
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	2000001c 	.word	0x2000001c
 8005574:	e000ed04 	.word	0xe000ed04

08005578 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800557e:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <vPortExitCritical+0x4c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <vPortExitCritical+0x22>
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	607b      	str	r3, [r7, #4]
 8005598:	e7fe      	b.n	8005598 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800559a:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <vPortExitCritical+0x4c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3b01      	subs	r3, #1
 80055a0:	4a08      	ldr	r2, [pc, #32]	; (80055c4 <vPortExitCritical+0x4c>)
 80055a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055a4:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <vPortExitCritical+0x4c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d104      	bne.n	80055b6 <vPortExitCritical+0x3e>
 80055ac:	2300      	movs	r3, #0
 80055ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	2000001c 	.word	0x2000001c
	...

080055d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055d0:	f3ef 8009 	mrs	r0, PSP
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	4b15      	ldr	r3, [pc, #84]	; (8005630 <pxCurrentTCBConst>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	f01e 0f10 	tst.w	lr, #16
 80055e0:	bf08      	it	eq
 80055e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ea:	6010      	str	r0, [r2, #0]
 80055ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055f4:	f380 8811 	msr	BASEPRI, r0
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f7ff f816 	bl	8004630 <vTaskSwitchContext>
 8005604:	f04f 0000 	mov.w	r0, #0
 8005608:	f380 8811 	msr	BASEPRI, r0
 800560c:	bc09      	pop	{r0, r3}
 800560e:	6819      	ldr	r1, [r3, #0]
 8005610:	6808      	ldr	r0, [r1, #0]
 8005612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005616:	f01e 0f10 	tst.w	lr, #16
 800561a:	bf08      	it	eq
 800561c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005620:	f380 8809 	msr	PSP, r0
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	f3af 8000 	nop.w

08005630 <pxCurrentTCBConst>:
 8005630:	200006f8 	.word	0x200006f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop

08005638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005650:	f7fe ff30 	bl	80044b4 <xTaskIncrementTick>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800565a:	4b06      	ldr	r3, [pc, #24]	; (8005674 <SysTick_Handler+0x3c>)
 800565c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	2300      	movs	r3, #0
 8005664:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800566c:	bf00      	nop
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	e000ed04 	.word	0xe000ed04

08005678 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <vPortSetupTimerInterrupt+0x34>)
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005682:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <vPortSetupTimerInterrupt+0x38>)
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005688:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <vPortSetupTimerInterrupt+0x3c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a0a      	ldr	r2, [pc, #40]	; (80056b8 <vPortSetupTimerInterrupt+0x40>)
 800568e:	fba2 2303 	umull	r2, r3, r2, r3
 8005692:	099b      	lsrs	r3, r3, #6
 8005694:	4a09      	ldr	r2, [pc, #36]	; (80056bc <vPortSetupTimerInterrupt+0x44>)
 8005696:	3b01      	subs	r3, #1
 8005698:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800569a:	4b04      	ldr	r3, [pc, #16]	; (80056ac <vPortSetupTimerInterrupt+0x34>)
 800569c:	2207      	movs	r2, #7
 800569e:	601a      	str	r2, [r3, #0]
}
 80056a0:	bf00      	nop
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	e000e010 	.word	0xe000e010
 80056b0:	e000e018 	.word	0xe000e018
 80056b4:	20000010 	.word	0x20000010
 80056b8:	10624dd3 	.word	0x10624dd3
 80056bc:	e000e014 	.word	0xe000e014

080056c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80056c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80056d0 <vPortEnableVFP+0x10>
 80056c4:	6801      	ldr	r1, [r0, #0]
 80056c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80056ca:	6001      	str	r1, [r0, #0]
 80056cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80056ce:	bf00      	nop
 80056d0:	e000ed88 	.word	0xe000ed88

080056d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056da:	f3ef 8305 	mrs	r3, IPSR
 80056de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b0f      	cmp	r3, #15
 80056e4:	d913      	bls.n	800570e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056e6:	4a16      	ldr	r2, [pc, #88]	; (8005740 <vPortValidateInterruptPriority+0x6c>)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056f0:	4b14      	ldr	r3, [pc, #80]	; (8005744 <vPortValidateInterruptPriority+0x70>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	7afa      	ldrb	r2, [r7, #11]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d209      	bcs.n	800570e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	607b      	str	r3, [r7, #4]
 800570c:	e7fe      	b.n	800570c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800570e:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <vPortValidateInterruptPriority+0x74>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005716:	4b0d      	ldr	r3, [pc, #52]	; (800574c <vPortValidateInterruptPriority+0x78>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	429a      	cmp	r2, r3
 800571c:	d909      	bls.n	8005732 <vPortValidateInterruptPriority+0x5e>
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	603b      	str	r3, [r7, #0]
 8005730:	e7fe      	b.n	8005730 <vPortValidateInterruptPriority+0x5c>
	}
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	e000e3f0 	.word	0xe000e3f0
 8005744:	20000d24 	.word	0x20000d24
 8005748:	e000ed0c 	.word	0xe000ed0c
 800574c:	20000d28 	.word	0x20000d28

08005750 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08a      	sub	sp, #40	; 0x28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005758:	2300      	movs	r3, #0
 800575a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800575c:	f7fe fdf0 	bl	8004340 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005760:	4b57      	ldr	r3, [pc, #348]	; (80058c0 <pvPortMalloc+0x170>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005768:	f000 f90c 	bl	8005984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800576c:	4b55      	ldr	r3, [pc, #340]	; (80058c4 <pvPortMalloc+0x174>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4013      	ands	r3, r2
 8005774:	2b00      	cmp	r3, #0
 8005776:	f040 808c 	bne.w	8005892 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01c      	beq.n	80057ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005780:	2208      	movs	r2, #8
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4413      	add	r3, r2
 8005786:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	2b00      	cmp	r3, #0
 8005790:	d013      	beq.n	80057ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f023 0307 	bic.w	r3, r3, #7
 8005798:	3308      	adds	r3, #8
 800579a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d009      	beq.n	80057ba <pvPortMalloc+0x6a>
 80057a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	e7fe      	b.n	80057b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d068      	beq.n	8005892 <pvPortMalloc+0x142>
 80057c0:	4b41      	ldr	r3, [pc, #260]	; (80058c8 <pvPortMalloc+0x178>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d863      	bhi.n	8005892 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057ca:	4b40      	ldr	r3, [pc, #256]	; (80058cc <pvPortMalloc+0x17c>)
 80057cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057ce:	4b3f      	ldr	r3, [pc, #252]	; (80058cc <pvPortMalloc+0x17c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057d4:	e004      	b.n	80057e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d903      	bls.n	80057f2 <pvPortMalloc+0xa2>
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f1      	bne.n	80057d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057f2:	4b33      	ldr	r3, [pc, #204]	; (80058c0 <pvPortMalloc+0x170>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d04a      	beq.n	8005892 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2208      	movs	r2, #8
 8005802:	4413      	add	r3, r2
 8005804:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	1ad2      	subs	r2, r2, r3
 8005816:	2308      	movs	r3, #8
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	429a      	cmp	r2, r3
 800581c:	d91e      	bls.n	800585c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800581e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4413      	add	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <pvPortMalloc+0xf4>
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	613b      	str	r3, [r7, #16]
 8005842:	e7fe      	b.n	8005842 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	1ad2      	subs	r2, r2, r3
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005856:	69b8      	ldr	r0, [r7, #24]
 8005858:	f000 f8f6 	bl	8005a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800585c:	4b1a      	ldr	r3, [pc, #104]	; (80058c8 <pvPortMalloc+0x178>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	4a18      	ldr	r2, [pc, #96]	; (80058c8 <pvPortMalloc+0x178>)
 8005868:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800586a:	4b17      	ldr	r3, [pc, #92]	; (80058c8 <pvPortMalloc+0x178>)
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	4b18      	ldr	r3, [pc, #96]	; (80058d0 <pvPortMalloc+0x180>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d203      	bcs.n	800587e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005876:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <pvPortMalloc+0x178>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a15      	ldr	r2, [pc, #84]	; (80058d0 <pvPortMalloc+0x180>)
 800587c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	4b10      	ldr	r3, [pc, #64]	; (80058c4 <pvPortMalloc+0x174>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	431a      	orrs	r2, r3
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005892:	f7fe fd63 	bl	800435c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	2b00      	cmp	r3, #0
 800589e:	d009      	beq.n	80058b4 <pvPortMalloc+0x164>
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	e7fe      	b.n	80058b2 <pvPortMalloc+0x162>
	return pvReturn;
 80058b4:	69fb      	ldr	r3, [r7, #28]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3728      	adds	r7, #40	; 0x28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	20001934 	.word	0x20001934
 80058c4:	20001940 	.word	0x20001940
 80058c8:	20001938 	.word	0x20001938
 80058cc:	2000192c 	.word	0x2000192c
 80058d0:	2000193c 	.word	0x2000193c

080058d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d046      	beq.n	8005974 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058e6:	2308      	movs	r3, #8
 80058e8:	425b      	negs	r3, r3
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4413      	add	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	4b20      	ldr	r3, [pc, #128]	; (800597c <vPortFree+0xa8>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4013      	ands	r3, r2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d109      	bne.n	8005916 <vPortFree+0x42>
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	e7fe      	b.n	8005914 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d009      	beq.n	8005932 <vPortFree+0x5e>
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	60bb      	str	r3, [r7, #8]
 8005930:	e7fe      	b.n	8005930 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	4b11      	ldr	r3, [pc, #68]	; (800597c <vPortFree+0xa8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4013      	ands	r3, r2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d019      	beq.n	8005974 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d115      	bne.n	8005974 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	4b0b      	ldr	r3, [pc, #44]	; (800597c <vPortFree+0xa8>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	43db      	mvns	r3, r3
 8005952:	401a      	ands	r2, r3
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005958:	f7fe fcf2 	bl	8004340 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	4b07      	ldr	r3, [pc, #28]	; (8005980 <vPortFree+0xac>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4413      	add	r3, r2
 8005966:	4a06      	ldr	r2, [pc, #24]	; (8005980 <vPortFree+0xac>)
 8005968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800596a:	6938      	ldr	r0, [r7, #16]
 800596c:	f000 f86c 	bl	8005a48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005970:	f7fe fcf4 	bl	800435c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005974:	bf00      	nop
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20001940 	.word	0x20001940
 8005980:	20001938 	.word	0x20001938

08005984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800598a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800598e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005990:	4b27      	ldr	r3, [pc, #156]	; (8005a30 <prvHeapInit+0xac>)
 8005992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00c      	beq.n	80059b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3307      	adds	r3, #7
 80059a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0307 	bic.w	r3, r3, #7
 80059aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	4a1f      	ldr	r2, [pc, #124]	; (8005a30 <prvHeapInit+0xac>)
 80059b4:	4413      	add	r3, r2
 80059b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059bc:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <prvHeapInit+0xb0>)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059c2:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <prvHeapInit+0xb0>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	4413      	add	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059d0:	2208      	movs	r2, #8
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1a9b      	subs	r3, r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0307 	bic.w	r3, r3, #7
 80059de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4a15      	ldr	r2, [pc, #84]	; (8005a38 <prvHeapInit+0xb4>)
 80059e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059e6:	4b14      	ldr	r3, [pc, #80]	; (8005a38 <prvHeapInit+0xb4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2200      	movs	r2, #0
 80059ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059ee:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <prvHeapInit+0xb4>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2200      	movs	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	1ad2      	subs	r2, r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a04:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <prvHeapInit+0xb4>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	4a0a      	ldr	r2, [pc, #40]	; (8005a3c <prvHeapInit+0xb8>)
 8005a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	4a09      	ldr	r2, [pc, #36]	; (8005a40 <prvHeapInit+0xbc>)
 8005a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a1c:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <prvHeapInit+0xc0>)
 8005a1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a22:	601a      	str	r2, [r3, #0]
}
 8005a24:	bf00      	nop
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	20000d2c 	.word	0x20000d2c
 8005a34:	2000192c 	.word	0x2000192c
 8005a38:	20001934 	.word	0x20001934
 8005a3c:	2000193c 	.word	0x2000193c
 8005a40:	20001938 	.word	0x20001938
 8005a44:	20001940 	.word	0x20001940

08005a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a50:	4b28      	ldr	r3, [pc, #160]	; (8005af4 <prvInsertBlockIntoFreeList+0xac>)
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	e002      	b.n	8005a5c <prvInsertBlockIntoFreeList+0x14>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d8f7      	bhi.n	8005a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	4413      	add	r3, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d108      	bne.n	8005a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	441a      	add	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	441a      	add	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d118      	bne.n	8005ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4b15      	ldr	r3, [pc, #84]	; (8005af8 <prvInsertBlockIntoFreeList+0xb0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d00d      	beq.n	8005ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	441a      	add	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	e008      	b.n	8005ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	e003      	b.n	8005ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d002      	beq.n	8005ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	2000192c 	.word	0x2000192c
 8005af8:	20001934 	.word	0x20001934

08005afc <__libc_init_array>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	4e0d      	ldr	r6, [pc, #52]	; (8005b34 <__libc_init_array+0x38>)
 8005b00:	4c0d      	ldr	r4, [pc, #52]	; (8005b38 <__libc_init_array+0x3c>)
 8005b02:	1ba4      	subs	r4, r4, r6
 8005b04:	10a4      	asrs	r4, r4, #2
 8005b06:	2500      	movs	r5, #0
 8005b08:	42a5      	cmp	r5, r4
 8005b0a:	d109      	bne.n	8005b20 <__libc_init_array+0x24>
 8005b0c:	4e0b      	ldr	r6, [pc, #44]	; (8005b3c <__libc_init_array+0x40>)
 8005b0e:	4c0c      	ldr	r4, [pc, #48]	; (8005b40 <__libc_init_array+0x44>)
 8005b10:	f000 f82c 	bl	8005b6c <_init>
 8005b14:	1ba4      	subs	r4, r4, r6
 8005b16:	10a4      	asrs	r4, r4, #2
 8005b18:	2500      	movs	r5, #0
 8005b1a:	42a5      	cmp	r5, r4
 8005b1c:	d105      	bne.n	8005b2a <__libc_init_array+0x2e>
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b24:	4798      	blx	r3
 8005b26:	3501      	adds	r5, #1
 8005b28:	e7ee      	b.n	8005b08 <__libc_init_array+0xc>
 8005b2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b2e:	4798      	blx	r3
 8005b30:	3501      	adds	r5, #1
 8005b32:	e7f2      	b.n	8005b1a <__libc_init_array+0x1e>
 8005b34:	08005c2c 	.word	0x08005c2c
 8005b38:	08005c2c 	.word	0x08005c2c
 8005b3c:	08005c2c 	.word	0x08005c2c
 8005b40:	08005c30 	.word	0x08005c30

08005b44 <memcpy>:
 8005b44:	b510      	push	{r4, lr}
 8005b46:	1e43      	subs	r3, r0, #1
 8005b48:	440a      	add	r2, r1
 8005b4a:	4291      	cmp	r1, r2
 8005b4c:	d100      	bne.n	8005b50 <memcpy+0xc>
 8005b4e:	bd10      	pop	{r4, pc}
 8005b50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b58:	e7f7      	b.n	8005b4a <memcpy+0x6>

08005b5a <memset>:
 8005b5a:	4402      	add	r2, r0
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d100      	bne.n	8005b64 <memset+0xa>
 8005b62:	4770      	bx	lr
 8005b64:	f803 1b01 	strb.w	r1, [r3], #1
 8005b68:	e7f9      	b.n	8005b5e <memset+0x4>
	...

08005b6c <_init>:
 8005b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6e:	bf00      	nop
 8005b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b72:	bc08      	pop	{r3}
 8005b74:	469e      	mov	lr, r3
 8005b76:	4770      	bx	lr

08005b78 <_fini>:
 8005b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7a:	bf00      	nop
 8005b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7e:	bc08      	pop	{r3}
 8005b80:	469e      	mov	lr, r3
 8005b82:	4770      	bx	lr
