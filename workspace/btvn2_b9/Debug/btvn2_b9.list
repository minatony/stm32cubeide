
btvn2_b9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004bd0  08004bd0  00014bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c40  08004c40  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004c40  08004c40  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c40  08004c40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c40  08004c40  00014c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c44  08004c44  00014c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  08004cb8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004cb8  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a89d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018e7  00000000  00000000  0002a93d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d0  00000000  00000000  0002c228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000828  00000000  00000000  0002caf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001feb0  00000000  00000000  0002d320  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008ec4  00000000  00000000  0004d1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c70b5  00000000  00000000  00056094  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d149  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002680  00000000  00000000  0011d1c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004bb8 	.word	0x08004bb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004bb8 	.word	0x08004bb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	value_adc = HAL_ADC_GetValue(&hadc1);
 8000288:	4805      	ldr	r0, [pc, #20]	; (80002a0 <HAL_ADC_ConvCpltCallback+0x20>)
 800028a:	f000 fe5b 	bl	8000f44 <HAL_ADC_GetValue>
 800028e:	4603      	mov	r3, r0
 8000290:	b2da      	uxtb	r2, r3
 8000292:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x24>)
 8000294:	701a      	strb	r2, [r3, #0]
}
 8000296:	bf00      	nop
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	200000a0 	.word	0x200000a0
 80002a4:	2000008c 	.word	0x2000008c

080002a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ac:	f000 fa74 	bl	8000798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b0:	f000 f826 	bl	8000300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b4:	f000 f924 	bl	8000500 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002b8:	f000 f882 	bl	80003c0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80002bc:	f000 f8f0 	bl	80004a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80002c0:	480a      	ldr	r0, [pc, #40]	; (80002ec <main+0x44>)
 80002c2:	f000 fcff 	bl	8000cc4 <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(mang,"%d",value_adc);
 80002c6:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <main+0x48>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	461a      	mov	r2, r3
 80002cc:	4909      	ldr	r1, [pc, #36]	; (80002f4 <main+0x4c>)
 80002ce:	480a      	ldr	r0, [pc, #40]	; (80002f8 <main+0x50>)
 80002d0:	f004 f86c 	bl	80043ac <siprintf>
	  HAL_UART_Transmit(&huart2,mang,3,100);
 80002d4:	2364      	movs	r3, #100	; 0x64
 80002d6:	2203      	movs	r2, #3
 80002d8:	4907      	ldr	r1, [pc, #28]	; (80002f8 <main+0x50>)
 80002da:	4808      	ldr	r0, [pc, #32]	; (80002fc <main+0x54>)
 80002dc:	f003 fc64 	bl	8003ba8 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80002e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e4:	f000 fabe 	bl	8000864 <HAL_Delay>
  {
 80002e8:	e7ed      	b.n	80002c6 <main+0x1e>
 80002ea:	bf00      	nop
 80002ec:	200000a0 	.word	0x200000a0
 80002f0:	2000008c 	.word	0x2000008c
 80002f4:	08004bd0 	.word	0x08004bd0
 80002f8:	20000090 	.word	0x20000090
 80002fc:	200000f0 	.word	0x200000f0

08000300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b0a6      	sub	sp, #152	; 0x98
 8000304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800030a:	2228      	movs	r2, #40	; 0x28
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f004 f844 	bl	800439c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000314:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2258      	movs	r2, #88	; 0x58
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f004 f836 	bl	800439c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000330:	2302      	movs	r3, #2
 8000332:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000334:	2301      	movs	r3, #1
 8000336:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000338:	2310      	movs	r3, #16
 800033a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033e:	2302      	movs	r3, #2
 8000340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000348:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800034c:	2300      	movs	r3, #0
 800034e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000358:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800035c:	4618      	mov	r0, r3
 800035e:	f002 f86b 	bl	8002438 <HAL_RCC_OscConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000368:	f000 f8e2 	bl	8000530 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036c:	230f      	movs	r3, #15
 800036e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000370:	2300      	movs	r3, #0
 8000372:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000380:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f002 ff6c 	bl	8003264 <HAL_RCC_ClockConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000392:	f000 f8cd 	bl	8000530 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000396:	2382      	movs	r3, #130	; 0x82
 8000398:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800039a:	2300      	movs	r3, #0
 800039c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800039e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	4618      	mov	r0, r3
 80003a8:	f003 f992 	bl	80036d0 <HAL_RCCEx_PeriphCLKConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003b2:	f000 f8bd 	bl	8000530 <Error_Handler>
  }
}
 80003b6:	bf00      	nop
 80003b8:	3798      	adds	r7, #152	; 0x98
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	; 0x28
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003c6:	f107 031c 	add.w	r3, r7, #28
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003e2:	4b2e      	ldr	r3, [pc, #184]	; (800049c <MX_ADC1_Init+0xdc>)
 80003e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003ea:	4b2c      	ldr	r3, [pc, #176]	; (800049c <MX_ADC1_Init+0xdc>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003f0:	4b2a      	ldr	r3, [pc, #168]	; (800049c <MX_ADC1_Init+0xdc>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003f6:	4b29      	ldr	r3, [pc, #164]	; (800049c <MX_ADC1_Init+0xdc>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003fc:	4b27      	ldr	r3, [pc, #156]	; (800049c <MX_ADC1_Init+0xdc>)
 80003fe:	2201      	movs	r2, #1
 8000400:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000402:	4b26      	ldr	r3, [pc, #152]	; (800049c <MX_ADC1_Init+0xdc>)
 8000404:	2200      	movs	r2, #0
 8000406:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800040a:	4b24      	ldr	r3, [pc, #144]	; (800049c <MX_ADC1_Init+0xdc>)
 800040c:	2200      	movs	r2, #0
 800040e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000410:	4b22      	ldr	r3, [pc, #136]	; (800049c <MX_ADC1_Init+0xdc>)
 8000412:	2201      	movs	r2, #1
 8000414:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000416:	4b21      	ldr	r3, [pc, #132]	; (800049c <MX_ADC1_Init+0xdc>)
 8000418:	2200      	movs	r2, #0
 800041a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800041c:	4b1f      	ldr	r3, [pc, #124]	; (800049c <MX_ADC1_Init+0xdc>)
 800041e:	2201      	movs	r2, #1
 8000420:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000422:	4b1e      	ldr	r3, [pc, #120]	; (800049c <MX_ADC1_Init+0xdc>)
 8000424:	2200      	movs	r2, #0
 8000426:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800042a:	4b1c      	ldr	r3, [pc, #112]	; (800049c <MX_ADC1_Init+0xdc>)
 800042c:	2208      	movs	r2, #8
 800042e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000430:	4b1a      	ldr	r3, [pc, #104]	; (800049c <MX_ADC1_Init+0xdc>)
 8000432:	2200      	movs	r2, #0
 8000434:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <MX_ADC1_Init+0xdc>)
 8000438:	2200      	movs	r2, #0
 800043a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800043c:	4817      	ldr	r0, [pc, #92]	; (800049c <MX_ADC1_Init+0xdc>)
 800043e:	f000 fa47 	bl	80008d0 <HAL_ADC_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000448:	f000 f872 	bl	8000530 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800044c:	2300      	movs	r3, #0
 800044e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000450:	f107 031c 	add.w	r3, r7, #28
 8000454:	4619      	mov	r1, r3
 8000456:	4811      	ldr	r0, [pc, #68]	; (800049c <MX_ADC1_Init+0xdc>)
 8000458:	f001 fba2 	bl	8001ba0 <HAL_ADCEx_MultiModeConfigChannel>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000462:	f000 f865 	bl	8000530 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000466:	2310      	movs	r3, #16
 8000468:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800046a:	2301      	movs	r3, #1
 800046c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800046e:	2300      	movs	r3, #0
 8000470:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000472:	2307      	movs	r3, #7
 8000474:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	4619      	mov	r1, r3
 8000482:	4806      	ldr	r0, [pc, #24]	; (800049c <MX_ADC1_Init+0xdc>)
 8000484:	f001 f8a0 	bl	80015c8 <HAL_ADC_ConfigChannel>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800048e:	f000 f84f 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	3728      	adds	r7, #40	; 0x28
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	200000a0 	.word	0x200000a0

080004a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004a4:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004a6:	4a15      	ldr	r2, [pc, #84]	; (80004fc <MX_USART2_UART_Init+0x5c>)
 80004a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004aa:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004c6:	220c      	movs	r2, #12
 80004c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004de:	2200      	movs	r2, #0
 80004e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004e4:	f003 fb12 	bl	8003b0c <HAL_UART_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004ee:	f000 f81f 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200000f0 	.word	0x200000f0
 80004fc:	40004400 	.word	0x40004400

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_GPIO_Init+0x2c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a08      	ldr	r2, [pc, #32]	; (800052c <MX_GPIO_Init+0x2c>)
 800050c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_GPIO_Init+0x2c>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000534:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000536:	e7fe      	b.n	8000536 <Error_Handler+0x6>

08000538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <HAL_MspInit+0x44>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a0e      	ldr	r2, [pc, #56]	; (800057c <HAL_MspInit+0x44>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6193      	str	r3, [r2, #24]
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <HAL_MspInit+0x44>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <HAL_MspInit+0x44>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4a08      	ldr	r2, [pc, #32]	; (800057c <HAL_MspInit+0x44>)
 800055c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000560:	61d3      	str	r3, [r2, #28]
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <HAL_MspInit+0x44>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000

08000580 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000590:	d113      	bne.n	80005ba <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_ADC_MspInit+0x44>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <HAL_ADC_MspInit+0x44>)
 8000598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_ADC_MspInit+0x44>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2100      	movs	r1, #0
 80005ae:	2012      	movs	r0, #18
 80005b0:	f001 fd81 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80005b4:	2012      	movs	r0, #18
 80005b6:	f001 fd9a 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a17      	ldr	r2, [pc, #92]	; (8000644 <HAL_UART_MspInit+0x7c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d128      	bne.n	800063c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HAL_UART_MspInit+0x80>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a16      	ldr	r2, [pc, #88]	; (8000648 <HAL_UART_MspInit+0x80>)
 80005f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <HAL_UART_MspInit+0x80>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <HAL_UART_MspInit+0x80>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a10      	ldr	r2, [pc, #64]	; (8000648 <HAL_UART_MspInit+0x80>)
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <HAL_UART_MspInit+0x80>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800061a:	230c      	movs	r3, #12
 800061c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061e:	2302      	movs	r3, #2
 8000620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000626:	2303      	movs	r3, #3
 8000628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800062a:	2307      	movs	r3, #7
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000638:	f001 fd74 	bl	8002124 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800063c:	bf00      	nop
 800063e:	3728      	adds	r7, #40	; 0x28
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40004400 	.word	0x40004400
 8000648:	40021000 	.word	0x40021000

0800064c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <NMI_Handler+0x4>

08000652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <HardFault_Handler+0x4>

08000658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <MemManage_Handler+0x4>

0800065e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <BusFault_Handler+0x4>

08000664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <UsageFault_Handler+0x4>

0800066a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000698:	f000 f8c4 	bl	8000824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80006a4:	4802      	ldr	r0, [pc, #8]	; (80006b0 <ADC1_2_IRQHandler+0x10>)
 80006a6:	f000 fc5b 	bl	8000f60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000a0 	.word	0x200000a0

080006b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006bc:	4a14      	ldr	r2, [pc, #80]	; (8000710 <_sbrk+0x5c>)
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <_sbrk+0x60>)
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <_sbrk+0x64>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d102      	bne.n	80006d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <_sbrk+0x64>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <_sbrk+0x68>)
 80006d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <_sbrk+0x64>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d207      	bcs.n	80006f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e4:	f003 fe30 	bl	8004348 <__errno>
 80006e8:	4602      	mov	r2, r0
 80006ea:	230c      	movs	r3, #12
 80006ec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
 80006f2:	e009      	b.n	8000708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	4a05      	ldr	r2, [pc, #20]	; (8000718 <_sbrk+0x64>)
 8000704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000706:	68fb      	ldr	r3, [r7, #12]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20010000 	.word	0x20010000
 8000714:	00000400 	.word	0x00000400
 8000718:	20000094 	.word	0x20000094
 800071c:	20000180 	.word	0x20000180

08000720 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <SystemInit+0x20>)
 8000726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800072a:	4a05      	ldr	r2, [pc, #20]	; (8000740 <SystemInit+0x20>)
 800072c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800077c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <LoopForever+0x6>)
  ldr r1, =_edata
 800074a:	490e      	ldr	r1, [pc, #56]	; (8000784 <LoopForever+0xa>)
  ldr r2, =_sidata
 800074c:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <LoopForever+0xe>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000750:	e002      	b.n	8000758 <LoopCopyDataInit>

08000752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000756:	3304      	adds	r3, #4

08000758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800075c:	d3f9      	bcc.n	8000752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075e:	4a0b      	ldr	r2, [pc, #44]	; (800078c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000760:	4c0b      	ldr	r4, [pc, #44]	; (8000790 <LoopForever+0x16>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000764:	e001      	b.n	800076a <LoopFillZerobss>

08000766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000768:	3204      	adds	r2, #4

0800076a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800076c:	d3fb      	bcc.n	8000766 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800076e:	f7ff ffd7 	bl	8000720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000772:	f003 fdef 	bl	8004354 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000776:	f7ff fd97 	bl	80002a8 <main>

0800077a <LoopForever>:

LoopForever:
    b LoopForever
 800077a:	e7fe      	b.n	800077a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800077c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000784:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000788:	08004c48 	.word	0x08004c48
  ldr r2, =_sbss
 800078c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000790:	2000017c 	.word	0x2000017c

08000794 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC3_IRQHandler>
	...

08000798 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <HAL_Init+0x28>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <HAL_Init+0x28>)
 80007a2:	f043 0310 	orr.w	r3, r3, #16
 80007a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a8:	2003      	movs	r0, #3
 80007aa:	f001 fc79 	bl	80020a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 f808 	bl	80007c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b4:	f7ff fec0 	bl	8000538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40022000 	.word	0x40022000

080007c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_InitTick+0x54>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_InitTick+0x58>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4619      	mov	r1, r3
 80007d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007da:	fbb3 f3f1 	udiv	r3, r3, r1
 80007de:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fc91 	bl	800210a <HAL_SYSTICK_Config>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	e00e      	b.n	8000810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b0f      	cmp	r3, #15
 80007f6:	d80a      	bhi.n	800080e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f8:	2200      	movs	r2, #0
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000800:	f001 fc59 	bl	80020b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000804:	4a06      	ldr	r2, [pc, #24]	; (8000820 <HAL_InitTick+0x5c>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800080a:	2300      	movs	r3, #0
 800080c:	e000      	b.n	8000810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
}
 8000810:	4618      	mov	r0, r3
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000000 	.word	0x20000000
 800081c:	20000008 	.word	0x20000008
 8000820:	20000004 	.word	0x20000004

08000824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_IncTick+0x20>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_IncTick+0x24>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4413      	add	r3, r2
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <HAL_IncTick+0x24>)
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	20000008 	.word	0x20000008
 8000848:	20000174 	.word	0x20000174

0800084c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <HAL_GetTick+0x14>)
 8000852:	681b      	ldr	r3, [r3, #0]
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	20000174 	.word	0x20000174

08000864 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800086c:	f7ff ffee 	bl	800084c <HAL_GetTick>
 8000870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800087c:	d005      	beq.n	800088a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_Delay+0x40>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4413      	add	r3, r2
 8000888:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800088a:	bf00      	nop
 800088c:	f7ff ffde 	bl	800084c <HAL_GetTick>
 8000890:	4602      	mov	r2, r0
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	429a      	cmp	r2, r3
 800089a:	d8f7      	bhi.n	800088c <HAL_Delay+0x28>
  {
  }
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000008 	.word	0x20000008

080008a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b09a      	sub	sp, #104	; 0x68
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008d8:	2300      	movs	r3, #0
 80008da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80008de:	2300      	movs	r3, #0
 80008e0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e1e3      	b.n	8000cb8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f003 0310 	and.w	r3, r3, #16
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d176      	bne.n	80009f0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	2b00      	cmp	r3, #0
 8000908:	d152      	bne.n	80009b0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fe2b 	bl	8000580 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000934:	2b00      	cmp	r3, #0
 8000936:	d13b      	bne.n	80009b0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f001 fa81 	bl	8001e40 <ADC_Disable>
 800093e:	4603      	mov	r3, r0
 8000940:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	f003 0310 	and.w	r3, r3, #16
 800094c:	2b00      	cmp	r3, #0
 800094e:	d12f      	bne.n	80009b0 <HAL_ADC_Init+0xe0>
 8000950:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000954:	2b00      	cmp	r3, #0
 8000956:	d12b      	bne.n	80009b0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000960:	f023 0302 	bic.w	r3, r3, #2
 8000964:	f043 0202 	orr.w	r2, r3, #2
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	689a      	ldr	r2, [r3, #8]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800097a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	689a      	ldr	r2, [r3, #8]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800098a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800098c:	4b92      	ldr	r3, [pc, #584]	; (8000bd8 <HAL_ADC_Init+0x308>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a92      	ldr	r2, [pc, #584]	; (8000bdc <HAL_ADC_Init+0x30c>)
 8000992:	fba2 2303 	umull	r2, r3, r2, r3
 8000996:	0c9a      	lsrs	r2, r3, #18
 8000998:	4613      	mov	r3, r2
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	4413      	add	r3, r2
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009a2:	e002      	b.n	80009aa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1f9      	bne.n	80009a4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d007      	beq.n	80009ce <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80009c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009cc:	d110      	bne.n	80009f0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f023 0312 	bic.w	r3, r3, #18
 80009d6:	f043 0210 	orr.w	r2, r3, #16
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	f043 0201 	orr.w	r2, r3, #1
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f003 0310 	and.w	r3, r3, #16
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	f040 8150 	bne.w	8000c9e <HAL_ADC_Init+0x3ce>
 80009fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f040 814b 	bne.w	8000c9e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f040 8143 	bne.w	8000c9e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000a20:	f043 0202 	orr.w	r2, r3, #2
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a30:	d004      	beq.n	8000a3c <HAL_ADC_Init+0x16c>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a6a      	ldr	r2, [pc, #424]	; (8000be0 <HAL_ADC_Init+0x310>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d101      	bne.n	8000a40 <HAL_ADC_Init+0x170>
 8000a3c:	4b69      	ldr	r3, [pc, #420]	; (8000be4 <HAL_ADC_Init+0x314>)
 8000a3e:	e000      	b.n	8000a42 <HAL_ADC_Init+0x172>
 8000a40:	4b69      	ldr	r3, [pc, #420]	; (8000be8 <HAL_ADC_Init+0x318>)
 8000a42:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a4c:	d102      	bne.n	8000a54 <HAL_ADC_Init+0x184>
 8000a4e:	4b64      	ldr	r3, [pc, #400]	; (8000be0 <HAL_ADC_Init+0x310>)
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	e01a      	b.n	8000a8a <HAL_ADC_Init+0x1ba>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a61      	ldr	r2, [pc, #388]	; (8000be0 <HAL_ADC_Init+0x310>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d103      	bne.n	8000a66 <HAL_ADC_Init+0x196>
 8000a5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	e011      	b.n	8000a8a <HAL_ADC_Init+0x1ba>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a60      	ldr	r2, [pc, #384]	; (8000bec <HAL_ADC_Init+0x31c>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d102      	bne.n	8000a76 <HAL_ADC_Init+0x1a6>
 8000a70:	4b5f      	ldr	r3, [pc, #380]	; (8000bf0 <HAL_ADC_Init+0x320>)
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	e009      	b.n	8000a8a <HAL_ADC_Init+0x1ba>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a5d      	ldr	r2, [pc, #372]	; (8000bf0 <HAL_ADC_Init+0x320>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d102      	bne.n	8000a86 <HAL_ADC_Init+0x1b6>
 8000a80:	4b5a      	ldr	r3, [pc, #360]	; (8000bec <HAL_ADC_Init+0x31c>)
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e001      	b.n	8000a8a <HAL_ADC_Init+0x1ba>
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f003 0303 	and.w	r3, r3, #3
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d108      	bne.n	8000aaa <HAL_ADC_Init+0x1da>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d101      	bne.n	8000aaa <HAL_ADC_Init+0x1da>
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e000      	b.n	8000aac <HAL_ADC_Init+0x1dc>
 8000aaa:	2300      	movs	r3, #0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d11c      	bne.n	8000aea <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d010      	beq.n	8000ad8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	f003 0303 	and.w	r3, r3, #3
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d107      	bne.n	8000ad2 <HAL_ADC_Init+0x202>
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d101      	bne.n	8000ad2 <HAL_ADC_Init+0x202>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e000      	b.n	8000ad4 <HAL_ADC_Init+0x204>
 8000ad2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d108      	bne.n	8000aea <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ae8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7e5b      	ldrb	r3, [r3, #25]
 8000aee:	035b      	lsls	r3, r3, #13
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000af4:	2a01      	cmp	r2, #1
 8000af6:	d002      	beq.n	8000afe <HAL_ADC_Init+0x22e>
 8000af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000afc:	e000      	b.n	8000b00 <HAL_ADC_Init+0x230>
 8000afe:	2200      	movs	r2, #0
 8000b00:	431a      	orrs	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	431a      	orrs	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b10:	4313      	orrs	r3, r2
 8000b12:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d11b      	bne.n	8000b56 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	7e5b      	ldrb	r3, [r3, #25]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d109      	bne.n	8000b3a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	045a      	lsls	r2, r3, #17
 8000b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b30:	4313      	orrs	r3, r2
 8000b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b36:	663b      	str	r3, [r7, #96]	; 0x60
 8000b38:	e00d      	b.n	8000b56 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000b42:	f043 0220 	orr.w	r2, r3, #32
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f043 0201 	orr.w	r2, r3, #1
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d054      	beq.n	8000c08 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a22      	ldr	r2, [pc, #136]	; (8000bec <HAL_ADC_Init+0x31c>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d004      	beq.n	8000b72 <HAL_ADC_Init+0x2a2>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a20      	ldr	r2, [pc, #128]	; (8000bf0 <HAL_ADC_Init+0x320>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d140      	bne.n	8000bf4 <HAL_ADC_Init+0x324>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b76:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000b7a:	d02a      	beq.n	8000bd2 <HAL_ADC_Init+0x302>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b84:	d022      	beq.n	8000bcc <HAL_ADC_Init+0x2fc>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000b8e:	d01a      	beq.n	8000bc6 <HAL_ADC_Init+0x2f6>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b94:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000b98:	d012      	beq.n	8000bc0 <HAL_ADC_Init+0x2f0>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000ba2:	d00a      	beq.n	8000bba <HAL_ADC_Init+0x2ea>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba8:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000bac:	d002      	beq.n	8000bb4 <HAL_ADC_Init+0x2e4>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb2:	e023      	b.n	8000bfc <HAL_ADC_Init+0x32c>
 8000bb4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bb8:	e020      	b.n	8000bfc <HAL_ADC_Init+0x32c>
 8000bba:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000bbe:	e01d      	b.n	8000bfc <HAL_ADC_Init+0x32c>
 8000bc0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000bc4:	e01a      	b.n	8000bfc <HAL_ADC_Init+0x32c>
 8000bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bca:	e017      	b.n	8000bfc <HAL_ADC_Init+0x32c>
 8000bcc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000bd0:	e014      	b.n	8000bfc <HAL_ADC_Init+0x32c>
 8000bd2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000bd6:	e011      	b.n	8000bfc <HAL_ADC_Init+0x32c>
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	431bde83 	.word	0x431bde83
 8000be0:	50000100 	.word	0x50000100
 8000be4:	50000300 	.word	0x50000300
 8000be8:	50000700 	.word	0x50000700
 8000bec:	50000400 	.word	0x50000400
 8000bf0:	50000500 	.word	0x50000500
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000c00:	4313      	orrs	r3, r2
 8000c02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c04:	4313      	orrs	r3, r2
 8000c06:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f003 030c 	and.w	r3, r3, #12
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d114      	bne.n	8000c40 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	6812      	ldr	r2, [r2, #0]
 8000c20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c24:	f023 0302 	bic.w	r3, r3, #2
 8000c28:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	7e1b      	ldrb	r3, [r3, #24]
 8000c2e:	039a      	lsls	r2, r3, #14
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	68da      	ldr	r2, [r3, #12]
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <HAL_ADC_Init+0x3f0>)
 8000c48:	4013      	ands	r3, r2
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	6812      	ldr	r2, [r2, #0]
 8000c4e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c50:	430b      	orrs	r3, r1
 8000c52:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d10c      	bne.n	8000c76 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f023 010f 	bic.w	r1, r3, #15
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	430a      	orrs	r2, r1
 8000c72:	631a      	str	r2, [r3, #48]	; 0x30
 8000c74:	e007      	b.n	8000c86 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f022 020f 	bic.w	r2, r2, #15
 8000c84:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f023 0303 	bic.w	r3, r3, #3
 8000c94:	f043 0201 	orr.w	r2, r3, #1
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c9c:	e00a      	b.n	8000cb4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f023 0312 	bic.w	r3, r3, #18
 8000ca6:	f043 0210 	orr.w	r2, r3, #16
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000cae:	2301      	movs	r3, #1
 8000cb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000cb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3768      	adds	r7, #104	; 0x68
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	fff0c007 	.word	0xfff0c007

08000cc4 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f040 8123 	bne.w	8000f26 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d101      	bne.n	8000cee <HAL_ADC_Start_IT+0x2a>
 8000cea:	2302      	movs	r3, #2
 8000cec:	e11e      	b.n	8000f2c <HAL_ADC_Start_IT+0x268>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f001 f844 	bl	8001d84 <ADC_Enable>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 810a 	bne.w	8000f1c <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d10:	f023 0301 	bic.w	r3, r3, #1
 8000d14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d24:	d004      	beq.n	8000d30 <HAL_ADC_Start_IT+0x6c>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a82      	ldr	r2, [pc, #520]	; (8000f34 <HAL_ADC_Start_IT+0x270>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d106      	bne.n	8000d3e <HAL_ADC_Start_IT+0x7a>
 8000d30:	4b81      	ldr	r3, [pc, #516]	; (8000f38 <HAL_ADC_Start_IT+0x274>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f003 031f 	and.w	r3, r3, #31
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d010      	beq.n	8000d5e <HAL_ADC_Start_IT+0x9a>
 8000d3c:	e005      	b.n	8000d4a <HAL_ADC_Start_IT+0x86>
 8000d3e:	4b7f      	ldr	r3, [pc, #508]	; (8000f3c <HAL_ADC_Start_IT+0x278>)
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f003 031f 	and.w	r3, r3, #31
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d009      	beq.n	8000d5e <HAL_ADC_Start_IT+0x9a>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d52:	d004      	beq.n	8000d5e <HAL_ADC_Start_IT+0x9a>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a79      	ldr	r2, [pc, #484]	; (8000f40 <HAL_ADC_Start_IT+0x27c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d115      	bne.n	8000d8a <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d036      	beq.n	8000de6 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d88:	e02d      	b.n	8000de6 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d9e:	d004      	beq.n	8000daa <HAL_ADC_Start_IT+0xe6>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a63      	ldr	r2, [pc, #396]	; (8000f34 <HAL_ADC_Start_IT+0x270>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d10a      	bne.n	8000dc0 <HAL_ADC_Start_IT+0xfc>
 8000daa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	bf14      	ite	ne
 8000db8:	2301      	movne	r3, #1
 8000dba:	2300      	moveq	r3, #0
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	e008      	b.n	8000dd2 <HAL_ADC_Start_IT+0x10e>
 8000dc0:	4b5f      	ldr	r3, [pc, #380]	; (8000f40 <HAL_ADC_Start_IT+0x27c>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	bf14      	ite	ne
 8000dcc:	2301      	movne	r3, #1
 8000dce:	2300      	moveq	r3, #0
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d007      	beq.n	8000de6 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dde:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000df2:	d106      	bne.n	8000e02 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df8:	f023 0206 	bic.w	r2, r3, #6
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	645a      	str	r2, [r3, #68]	; 0x44
 8000e00:	e002      	b.n	8000e08 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	221c      	movs	r2, #28
 8000e16:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	d110      	bne.n	8000e42 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0204 	bic.w	r2, r2, #4
 8000e2e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f042 0208 	orr.w	r2, r2, #8
 8000e3e:	605a      	str	r2, [r3, #4]
          break;
 8000e40:	e008      	b.n	8000e54 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f042 020c 	orr.w	r2, r2, #12
 8000e50:	605a      	str	r2, [r3, #4]
          break;
 8000e52:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d107      	bne.n	8000e6c <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f022 0210 	bic.w	r2, r2, #16
 8000e6a:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e74:	d004      	beq.n	8000e80 <HAL_ADC_Start_IT+0x1bc>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a2e      	ldr	r2, [pc, #184]	; (8000f34 <HAL_ADC_Start_IT+0x270>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d106      	bne.n	8000e8e <HAL_ADC_Start_IT+0x1ca>
 8000e80:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <HAL_ADC_Start_IT+0x274>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f003 031f 	and.w	r3, r3, #31
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d03e      	beq.n	8000f0a <HAL_ADC_Start_IT+0x246>
 8000e8c:	e005      	b.n	8000e9a <HAL_ADC_Start_IT+0x1d6>
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <HAL_ADC_Start_IT+0x278>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d037      	beq.n	8000f0a <HAL_ADC_Start_IT+0x246>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ea2:	d004      	beq.n	8000eae <HAL_ADC_Start_IT+0x1ea>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a22      	ldr	r2, [pc, #136]	; (8000f34 <HAL_ADC_Start_IT+0x270>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d106      	bne.n	8000ebc <HAL_ADC_Start_IT+0x1f8>
 8000eae:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <HAL_ADC_Start_IT+0x274>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f003 031f 	and.w	r3, r3, #31
 8000eb6:	2b05      	cmp	r3, #5
 8000eb8:	d027      	beq.n	8000f0a <HAL_ADC_Start_IT+0x246>
 8000eba:	e005      	b.n	8000ec8 <HAL_ADC_Start_IT+0x204>
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <HAL_ADC_Start_IT+0x278>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f003 031f 	and.w	r3, r3, #31
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	d020      	beq.n	8000f0a <HAL_ADC_Start_IT+0x246>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ed0:	d004      	beq.n	8000edc <HAL_ADC_Start_IT+0x218>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <HAL_ADC_Start_IT+0x270>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d106      	bne.n	8000eea <HAL_ADC_Start_IT+0x226>
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_ADC_Start_IT+0x274>)
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f003 031f 	and.w	r3, r3, #31
 8000ee4:	2b09      	cmp	r3, #9
 8000ee6:	d010      	beq.n	8000f0a <HAL_ADC_Start_IT+0x246>
 8000ee8:	e005      	b.n	8000ef6 <HAL_ADC_Start_IT+0x232>
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_ADC_Start_IT+0x278>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f003 031f 	and.w	r3, r3, #31
 8000ef2:	2b09      	cmp	r3, #9
 8000ef4:	d009      	beq.n	8000f0a <HAL_ADC_Start_IT+0x246>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000efe:	d004      	beq.n	8000f0a <HAL_ADC_Start_IT+0x246>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <HAL_ADC_Start_IT+0x27c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d10f      	bne.n	8000f2a <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f042 0204 	orr.w	r2, r2, #4
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	e006      	b.n	8000f2a <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000f24:	e001      	b.n	8000f2a <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f26:	2302      	movs	r3, #2
 8000f28:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	50000100 	.word	0x50000100
 8000f38:	50000300 	.word	0x50000300
 8000f3c:	50000700 	.word	0x50000700
 8000f40:	50000400 	.word	0x50000400

08000f44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	d106      	bne.n	8000f90 <HAL_ADC_IRQHandler+0x30>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d00f      	beq.n	8000fb0 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000f9a:	2b08      	cmp	r3, #8
 8000f9c:	f040 80c0 	bne.w	8001120 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	f040 80b8 	bne.w	8001120 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	f003 0310 	and.w	r3, r3, #16
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d105      	bne.n	8000fc8 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fd0:	d004      	beq.n	8000fdc <HAL_ADC_IRQHandler+0x7c>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a95      	ldr	r2, [pc, #596]	; (800122c <HAL_ADC_IRQHandler+0x2cc>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d106      	bne.n	8000fea <HAL_ADC_IRQHandler+0x8a>
 8000fdc:	4b94      	ldr	r3, [pc, #592]	; (8001230 <HAL_ADC_IRQHandler+0x2d0>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 031f 	and.w	r3, r3, #31
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d03e      	beq.n	8001066 <HAL_ADC_IRQHandler+0x106>
 8000fe8:	e005      	b.n	8000ff6 <HAL_ADC_IRQHandler+0x96>
 8000fea:	4b92      	ldr	r3, [pc, #584]	; (8001234 <HAL_ADC_IRQHandler+0x2d4>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d037      	beq.n	8001066 <HAL_ADC_IRQHandler+0x106>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ffe:	d004      	beq.n	800100a <HAL_ADC_IRQHandler+0xaa>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a89      	ldr	r2, [pc, #548]	; (800122c <HAL_ADC_IRQHandler+0x2cc>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d106      	bne.n	8001018 <HAL_ADC_IRQHandler+0xb8>
 800100a:	4b89      	ldr	r3, [pc, #548]	; (8001230 <HAL_ADC_IRQHandler+0x2d0>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 031f 	and.w	r3, r3, #31
 8001012:	2b05      	cmp	r3, #5
 8001014:	d027      	beq.n	8001066 <HAL_ADC_IRQHandler+0x106>
 8001016:	e005      	b.n	8001024 <HAL_ADC_IRQHandler+0xc4>
 8001018:	4b86      	ldr	r3, [pc, #536]	; (8001234 <HAL_ADC_IRQHandler+0x2d4>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 031f 	and.w	r3, r3, #31
 8001020:	2b05      	cmp	r3, #5
 8001022:	d020      	beq.n	8001066 <HAL_ADC_IRQHandler+0x106>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800102c:	d004      	beq.n	8001038 <HAL_ADC_IRQHandler+0xd8>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a7e      	ldr	r2, [pc, #504]	; (800122c <HAL_ADC_IRQHandler+0x2cc>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d106      	bne.n	8001046 <HAL_ADC_IRQHandler+0xe6>
 8001038:	4b7d      	ldr	r3, [pc, #500]	; (8001230 <HAL_ADC_IRQHandler+0x2d0>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 031f 	and.w	r3, r3, #31
 8001040:	2b09      	cmp	r3, #9
 8001042:	d010      	beq.n	8001066 <HAL_ADC_IRQHandler+0x106>
 8001044:	e005      	b.n	8001052 <HAL_ADC_IRQHandler+0xf2>
 8001046:	4b7b      	ldr	r3, [pc, #492]	; (8001234 <HAL_ADC_IRQHandler+0x2d4>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	2b09      	cmp	r3, #9
 8001050:	d009      	beq.n	8001066 <HAL_ADC_IRQHandler+0x106>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800105a:	d004      	beq.n	8001066 <HAL_ADC_IRQHandler+0x106>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a75      	ldr	r2, [pc, #468]	; (8001238 <HAL_ADC_IRQHandler+0x2d8>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d104      	bne.n	8001070 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	e00f      	b.n	8001090 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001078:	d004      	beq.n	8001084 <HAL_ADC_IRQHandler+0x124>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a6b      	ldr	r2, [pc, #428]	; (800122c <HAL_ADC_IRQHandler+0x2cc>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d102      	bne.n	800108a <HAL_ADC_IRQHandler+0x12a>
 8001084:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001088:	e000      	b.n	800108c <HAL_ADC_IRQHandler+0x12c>
 800108a:	4b6b      	ldr	r3, [pc, #428]	; (8001238 <HAL_ADC_IRQHandler+0x2d8>)
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800109a:	2b00      	cmp	r3, #0
 800109c:	d139      	bne.n	8001112 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d134      	bne.n	8001112 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	d12d      	bne.n	8001112 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d11a      	bne.n	80010fa <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 020c 	bic.w	r2, r2, #12
 80010d2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d112      	bne.n	8001112 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f043 0201 	orr.w	r2, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	641a      	str	r2, [r3, #64]	; 0x40
 80010f8:	e00b      	b.n	8001112 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f043 0210 	orr.w	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f043 0201 	orr.w	r2, r3, #1
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff f8b4 	bl	8000280 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	220c      	movs	r2, #12
 800111e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0320 	and.w	r3, r3, #32
 800112a:	2b20      	cmp	r3, #32
 800112c:	d106      	bne.n	800113c <HAL_ADC_IRQHandler+0x1dc>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0320 	and.w	r3, r3, #32
 8001138:	2b20      	cmp	r3, #32
 800113a:	d00f      	beq.n	800115c <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001146:	2b40      	cmp	r3, #64	; 0x40
 8001148:	f040 813c 	bne.w	80013c4 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001156:	2b40      	cmp	r3, #64	; 0x40
 8001158:	f040 8134 	bne.w	80013c4 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001170:	d004      	beq.n	800117c <HAL_ADC_IRQHandler+0x21c>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a2d      	ldr	r2, [pc, #180]	; (800122c <HAL_ADC_IRQHandler+0x2cc>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d106      	bne.n	800118a <HAL_ADC_IRQHandler+0x22a>
 800117c:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <HAL_ADC_IRQHandler+0x2d0>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 031f 	and.w	r3, r3, #31
 8001184:	2b00      	cmp	r3, #0
 8001186:	d03e      	beq.n	8001206 <HAL_ADC_IRQHandler+0x2a6>
 8001188:	e005      	b.n	8001196 <HAL_ADC_IRQHandler+0x236>
 800118a:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <HAL_ADC_IRQHandler+0x2d4>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	2b00      	cmp	r3, #0
 8001194:	d037      	beq.n	8001206 <HAL_ADC_IRQHandler+0x2a6>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800119e:	d004      	beq.n	80011aa <HAL_ADC_IRQHandler+0x24a>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a21      	ldr	r2, [pc, #132]	; (800122c <HAL_ADC_IRQHandler+0x2cc>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d106      	bne.n	80011b8 <HAL_ADC_IRQHandler+0x258>
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <HAL_ADC_IRQHandler+0x2d0>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	2b05      	cmp	r3, #5
 80011b4:	d027      	beq.n	8001206 <HAL_ADC_IRQHandler+0x2a6>
 80011b6:	e005      	b.n	80011c4 <HAL_ADC_IRQHandler+0x264>
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <HAL_ADC_IRQHandler+0x2d4>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 031f 	and.w	r3, r3, #31
 80011c0:	2b05      	cmp	r3, #5
 80011c2:	d020      	beq.n	8001206 <HAL_ADC_IRQHandler+0x2a6>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011cc:	d004      	beq.n	80011d8 <HAL_ADC_IRQHandler+0x278>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a16      	ldr	r2, [pc, #88]	; (800122c <HAL_ADC_IRQHandler+0x2cc>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d106      	bne.n	80011e6 <HAL_ADC_IRQHandler+0x286>
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_ADC_IRQHandler+0x2d0>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 031f 	and.w	r3, r3, #31
 80011e0:	2b09      	cmp	r3, #9
 80011e2:	d010      	beq.n	8001206 <HAL_ADC_IRQHandler+0x2a6>
 80011e4:	e005      	b.n	80011f2 <HAL_ADC_IRQHandler+0x292>
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <HAL_ADC_IRQHandler+0x2d4>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 031f 	and.w	r3, r3, #31
 80011ee:	2b09      	cmp	r3, #9
 80011f0:	d009      	beq.n	8001206 <HAL_ADC_IRQHandler+0x2a6>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011fa:	d004      	beq.n	8001206 <HAL_ADC_IRQHandler+0x2a6>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <HAL_ADC_IRQHandler+0x2d8>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d104      	bne.n	8001210 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	e018      	b.n	8001242 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001218:	d004      	beq.n	8001224 <HAL_ADC_IRQHandler+0x2c4>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a03      	ldr	r2, [pc, #12]	; (800122c <HAL_ADC_IRQHandler+0x2cc>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d10b      	bne.n	800123c <HAL_ADC_IRQHandler+0x2dc>
 8001224:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001228:	e009      	b.n	800123e <HAL_ADC_IRQHandler+0x2de>
 800122a:	bf00      	nop
 800122c:	50000100 	.word	0x50000100
 8001230:	50000300 	.word	0x50000300
 8001234:	50000700 	.word	0x50000700
 8001238:	50000400 	.word	0x50000400
 800123c:	4b9d      	ldr	r3, [pc, #628]	; (80014b4 <HAL_ADC_IRQHandler+0x554>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001248:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800124c:	2b00      	cmp	r3, #0
 800124e:	f040 80b2 	bne.w	80013b6 <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00d      	beq.n	8001278 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001266:	2b00      	cmp	r3, #0
 8001268:	f040 80a5 	bne.w	80013b6 <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001272:	2b00      	cmp	r3, #0
 8001274:	f040 809f 	bne.w	80013b6 <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001282:	2b40      	cmp	r3, #64	; 0x40
 8001284:	f040 8097 	bne.w	80013b6 <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001290:	d004      	beq.n	800129c <HAL_ADC_IRQHandler+0x33c>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a88      	ldr	r2, [pc, #544]	; (80014b8 <HAL_ADC_IRQHandler+0x558>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d106      	bne.n	80012aa <HAL_ADC_IRQHandler+0x34a>
 800129c:	4b87      	ldr	r3, [pc, #540]	; (80014bc <HAL_ADC_IRQHandler+0x55c>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 031f 	and.w	r3, r3, #31
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d03e      	beq.n	8001326 <HAL_ADC_IRQHandler+0x3c6>
 80012a8:	e005      	b.n	80012b6 <HAL_ADC_IRQHandler+0x356>
 80012aa:	4b85      	ldr	r3, [pc, #532]	; (80014c0 <HAL_ADC_IRQHandler+0x560>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 031f 	and.w	r3, r3, #31
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d037      	beq.n	8001326 <HAL_ADC_IRQHandler+0x3c6>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012be:	d004      	beq.n	80012ca <HAL_ADC_IRQHandler+0x36a>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a7c      	ldr	r2, [pc, #496]	; (80014b8 <HAL_ADC_IRQHandler+0x558>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d106      	bne.n	80012d8 <HAL_ADC_IRQHandler+0x378>
 80012ca:	4b7c      	ldr	r3, [pc, #496]	; (80014bc <HAL_ADC_IRQHandler+0x55c>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 031f 	and.w	r3, r3, #31
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d027      	beq.n	8001326 <HAL_ADC_IRQHandler+0x3c6>
 80012d6:	e005      	b.n	80012e4 <HAL_ADC_IRQHandler+0x384>
 80012d8:	4b79      	ldr	r3, [pc, #484]	; (80014c0 <HAL_ADC_IRQHandler+0x560>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 031f 	and.w	r3, r3, #31
 80012e0:	2b06      	cmp	r3, #6
 80012e2:	d020      	beq.n	8001326 <HAL_ADC_IRQHandler+0x3c6>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ec:	d004      	beq.n	80012f8 <HAL_ADC_IRQHandler+0x398>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a71      	ldr	r2, [pc, #452]	; (80014b8 <HAL_ADC_IRQHandler+0x558>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d106      	bne.n	8001306 <HAL_ADC_IRQHandler+0x3a6>
 80012f8:	4b70      	ldr	r3, [pc, #448]	; (80014bc <HAL_ADC_IRQHandler+0x55c>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 031f 	and.w	r3, r3, #31
 8001300:	2b07      	cmp	r3, #7
 8001302:	d010      	beq.n	8001326 <HAL_ADC_IRQHandler+0x3c6>
 8001304:	e005      	b.n	8001312 <HAL_ADC_IRQHandler+0x3b2>
 8001306:	4b6e      	ldr	r3, [pc, #440]	; (80014c0 <HAL_ADC_IRQHandler+0x560>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	2b07      	cmp	r3, #7
 8001310:	d009      	beq.n	8001326 <HAL_ADC_IRQHandler+0x3c6>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800131a:	d004      	beq.n	8001326 <HAL_ADC_IRQHandler+0x3c6>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a64      	ldr	r2, [pc, #400]	; (80014b4 <HAL_ADC_IRQHandler+0x554>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d104      	bne.n	8001330 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	e00f      	b.n	8001350 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001338:	d004      	beq.n	8001344 <HAL_ADC_IRQHandler+0x3e4>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a5e      	ldr	r2, [pc, #376]	; (80014b8 <HAL_ADC_IRQHandler+0x558>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d102      	bne.n	800134a <HAL_ADC_IRQHandler+0x3ea>
 8001344:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001348:	e000      	b.n	800134c <HAL_ADC_IRQHandler+0x3ec>
 800134a:	4b5a      	ldr	r3, [pc, #360]	; (80014b4 <HAL_ADC_IRQHandler+0x554>)
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d12d      	bne.n	80013b6 <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 0308 	and.w	r3, r3, #8
 8001364:	2b00      	cmp	r3, #0
 8001366:	d11a      	bne.n	800139e <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001376:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138c:	2b00      	cmp	r3, #0
 800138e:	d112      	bne.n	80013b6 <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f043 0201 	orr.w	r2, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	641a      	str	r2, [r3, #64]	; 0x40
 800139c:	e00b      	b.n	80013b6 <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f043 0210 	orr.w	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f043 0201 	orr.w	r2, r3, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 f8de 	bl	8001578 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2260      	movs	r2, #96	; 0x60
 80013c2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ce:	2b80      	cmp	r3, #128	; 0x80
 80013d0:	d113      	bne.n	80013fa <HAL_ADC_IRQHandler+0x49a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013dc:	2b80      	cmp	r3, #128	; 0x80
 80013de:	d10c      	bne.n	80013fa <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff fa5b 	bl	80008a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2280      	movs	r2, #128	; 0x80
 80013f8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001408:	d115      	bne.n	8001436 <HAL_ADC_IRQHandler+0x4d6>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001418:	d10d      	bne.n	8001436 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f8ba 	bl	80015a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001434:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001444:	d115      	bne.n	8001472 <HAL_ADC_IRQHandler+0x512>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001454:	d10d      	bne.n	8001472 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f8a6 	bl	80015b4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001470:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0310 	and.w	r3, r3, #16
 800147c:	2b10      	cmp	r3, #16
 800147e:	d151      	bne.n	8001524 <HAL_ADC_IRQHandler+0x5c4>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	2b10      	cmp	r3, #16
 800148c:	d14a      	bne.n	8001524 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001492:	2b01      	cmp	r3, #1
 8001494:	d102      	bne.n	800149c <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8001496:	2301      	movs	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e02d      	b.n	80014f8 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a4:	d004      	beq.n	80014b0 <HAL_ADC_IRQHandler+0x550>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <HAL_ADC_IRQHandler+0x558>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d109      	bne.n	80014c4 <HAL_ADC_IRQHandler+0x564>
 80014b0:	4b02      	ldr	r3, [pc, #8]	; (80014bc <HAL_ADC_IRQHandler+0x55c>)
 80014b2:	e008      	b.n	80014c6 <HAL_ADC_IRQHandler+0x566>
 80014b4:	50000400 	.word	0x50000400
 80014b8:	50000100 	.word	0x50000100
 80014bc:	50000300 	.word	0x50000300
 80014c0:	50000700 	.word	0x50000700
 80014c4:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <HAL_ADC_IRQHandler+0x614>)
 80014c6:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 031f 	and.w	r3, r3, #31
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d109      	bne.n	80014e8 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d10a      	bne.n	80014f8 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 80014e2:	2301      	movs	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	e007      	b.n	80014f8 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 80014f4:	2301      	movs	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d10e      	bne.n	800151c <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f043 0202 	orr.w	r2, r3, #2
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff f9d0 	bl	80008bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2210      	movs	r2, #16
 8001522:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001532:	d11b      	bne.n	800156c <HAL_ADC_IRQHandler+0x60c>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001542:	d113      	bne.n	800156c <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001554:	f043 0208 	orr.w	r2, r3, #8
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001564:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f810 	bl	800158c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	50000700 	.word	0x50000700

08001578 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b09b      	sub	sp, #108	; 0x6c
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x22>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e2cb      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x5ba>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f040 82af 	bne.w	8001b60 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b04      	cmp	r3, #4
 8001608:	d81c      	bhi.n	8001644 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	461a      	mov	r2, r3
 800161e:	231f      	movs	r3, #31
 8001620:	4093      	lsls	r3, r2
 8001622:	43db      	mvns	r3, r3
 8001624:	4019      	ands	r1, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	6818      	ldr	r0, [r3, #0]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa00 f203 	lsl.w	r2, r0, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	631a      	str	r2, [r3, #48]	; 0x30
 8001642:	e063      	b.n	800170c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b09      	cmp	r3, #9
 800164a:	d81e      	bhi.n	800168a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	3b1e      	subs	r3, #30
 8001660:	221f      	movs	r2, #31
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	4019      	ands	r1, r3
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	3b1e      	subs	r3, #30
 800167c:	fa00 f203 	lsl.w	r2, r0, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	635a      	str	r2, [r3, #52]	; 0x34
 8001688:	e040      	b.n	800170c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b0e      	cmp	r3, #14
 8001690:	d81e      	bhi.n	80016d0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	3b3c      	subs	r3, #60	; 0x3c
 80016a6:	221f      	movs	r2, #31
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	4019      	ands	r1, r3
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	3b3c      	subs	r3, #60	; 0x3c
 80016c2:	fa00 f203 	lsl.w	r2, r0, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	639a      	str	r2, [r3, #56]	; 0x38
 80016ce:	e01d      	b.n	800170c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	3b5a      	subs	r3, #90	; 0x5a
 80016e4:	221f      	movs	r2, #31
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	4019      	ands	r1, r3
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	3b5a      	subs	r3, #90	; 0x5a
 8001700:	fa00 f203 	lsl.w	r2, r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b00      	cmp	r3, #0
 8001718:	f040 80e5 	bne.w	80018e6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b09      	cmp	r3, #9
 8001722:	d91c      	bls.n	800175e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6999      	ldr	r1, [r3, #24]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	3b1e      	subs	r3, #30
 8001736:	2207      	movs	r2, #7
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	4019      	ands	r1, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6898      	ldr	r0, [r3, #8]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	3b1e      	subs	r3, #30
 8001750:	fa00 f203 	lsl.w	r2, r0, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	619a      	str	r2, [r3, #24]
 800175c:	e019      	b.n	8001792 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6959      	ldr	r1, [r3, #20]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	2207      	movs	r2, #7
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	4019      	ands	r1, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	6898      	ldr	r0, [r3, #8]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	fa00 f203 	lsl.w	r2, r0, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	695a      	ldr	r2, [r3, #20]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	08db      	lsrs	r3, r3, #3
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d84f      	bhi.n	8001854 <HAL_ADC_ConfigChannel+0x28c>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <HAL_ADC_ConfigChannel+0x1f4>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	080017cd 	.word	0x080017cd
 80017c0:	080017ef 	.word	0x080017ef
 80017c4:	08001811 	.word	0x08001811
 80017c8:	08001833 	.word	0x08001833
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017d2:	4b9f      	ldr	r3, [pc, #636]	; (8001a50 <HAL_ADC_ConfigChannel+0x488>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	0691      	lsls	r1, r2, #26
 80017dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017de:	430a      	orrs	r2, r1
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ea:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017ec:	e07e      	b.n	80018ec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017f4:	4b96      	ldr	r3, [pc, #600]	; (8001a50 <HAL_ADC_ConfigChannel+0x488>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	0691      	lsls	r1, r2, #26
 80017fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001800:	430a      	orrs	r2, r1
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800180c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800180e:	e06d      	b.n	80018ec <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001816:	4b8e      	ldr	r3, [pc, #568]	; (8001a50 <HAL_ADC_ConfigChannel+0x488>)
 8001818:	4013      	ands	r3, r2
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	0691      	lsls	r1, r2, #26
 8001820:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001822:	430a      	orrs	r2, r1
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800182e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001830:	e05c      	b.n	80018ec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001838:	4b85      	ldr	r3, [pc, #532]	; (8001a50 <HAL_ADC_ConfigChannel+0x488>)
 800183a:	4013      	ands	r3, r2
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	0691      	lsls	r1, r2, #26
 8001842:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001844:	430a      	orrs	r2, r1
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001850:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001852:	e04b      	b.n	80018ec <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	069b      	lsls	r3, r3, #26
 8001864:	429a      	cmp	r2, r3
 8001866:	d107      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001876:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800187e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	069b      	lsls	r3, r3, #26
 8001888:	429a      	cmp	r2, r3
 800188a:	d107      	bne.n	800189c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800189a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	069b      	lsls	r3, r3, #26
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d107      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018be:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	069b      	lsls	r3, r3, #26
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d10a      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018e2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80018e4:	e001      	b.n	80018ea <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80018e6:	bf00      	nop
 80018e8:	e000      	b.n	80018ec <HAL_ADC_ConfigChannel+0x324>
      break;
 80018ea:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d108      	bne.n	800190c <HAL_ADC_ConfigChannel+0x344>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_ADC_ConfigChannel+0x344>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <HAL_ADC_ConfigChannel+0x346>
 800190c:	2300      	movs	r3, #0
 800190e:	2b00      	cmp	r3, #0
 8001910:	f040 8131 	bne.w	8001b76 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d00f      	beq.n	800193c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	400a      	ands	r2, r1
 8001936:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800193a:	e049      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2201      	movs	r2, #1
 800194a:	409a      	lsls	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b09      	cmp	r3, #9
 800195c:	d91c      	bls.n	8001998 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6999      	ldr	r1, [r3, #24]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	3b1b      	subs	r3, #27
 8001970:	2207      	movs	r2, #7
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	4019      	ands	r1, r3
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	6898      	ldr	r0, [r3, #8]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	3b1b      	subs	r3, #27
 800198a:	fa00 f203 	lsl.w	r2, r0, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	619a      	str	r2, [r3, #24]
 8001996:	e01b      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6959      	ldr	r1, [r3, #20]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	2207      	movs	r2, #7
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	4019      	ands	r1, r3
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	6898      	ldr	r0, [r3, #8]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	fa00 f203 	lsl.w	r2, r0, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019d8:	d004      	beq.n	80019e4 <HAL_ADC_ConfigChannel+0x41c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <HAL_ADC_ConfigChannel+0x48c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x420>
 80019e4:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <HAL_ADC_ConfigChannel+0x490>)
 80019e6:	e000      	b.n	80019ea <HAL_ADC_ConfigChannel+0x422>
 80019e8:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <HAL_ADC_ConfigChannel+0x494>)
 80019ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b10      	cmp	r3, #16
 80019f2:	d105      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d015      	beq.n	8001a2c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a04:	2b11      	cmp	r3, #17
 8001a06:	d105      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00b      	beq.n	8001a2c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a18:	2b12      	cmp	r3, #18
 8001a1a:	f040 80ac 	bne.w	8001b76 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f040 80a5 	bne.w	8001b76 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a34:	d102      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x474>
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_ADC_ConfigChannel+0x48c>)
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	e023      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x4bc>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <HAL_ADC_ConfigChannel+0x48c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d10c      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x498>
 8001a46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	e01a      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x4bc>
 8001a4e:	bf00      	nop
 8001a50:	83fff000 	.word	0x83fff000
 8001a54:	50000100 	.word	0x50000100
 8001a58:	50000300 	.word	0x50000300
 8001a5c:	50000700 	.word	0x50000700
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a4a      	ldr	r2, [pc, #296]	; (8001b90 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d102      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x4a8>
 8001a6a:	4b4a      	ldr	r3, [pc, #296]	; (8001b94 <HAL_ADC_ConfigChannel+0x5cc>)
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	e009      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x4bc>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a47      	ldr	r2, [pc, #284]	; (8001b94 <HAL_ADC_ConfigChannel+0x5cc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d102      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x4b8>
 8001a7a:	4b45      	ldr	r3, [pc, #276]	; (8001b90 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	e001      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x4bc>
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d108      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x4dc>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x4dc>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x4de>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d150      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001aaa:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d010      	beq.n	8001ad2 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d107      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x504>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x504>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_ADC_ConfigChannel+0x506>
 8001acc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d13c      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b10      	cmp	r3, #16
 8001ad8:	d11d      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x54e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ae2:	d118      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aee:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001af0:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <HAL_ADC_ConfigChannel+0x5d0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a29      	ldr	r2, [pc, #164]	; (8001b9c <HAL_ADC_ConfigChannel+0x5d4>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	0c9a      	lsrs	r2, r3, #18
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b06:	e002      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f9      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b14:	e02e      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b11      	cmp	r3, #17
 8001b1c:	d10b      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x56e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b26:	d106      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b32:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b34:	e01e      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2b12      	cmp	r3, #18
 8001b3c:	d11a      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b48:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b4a:	e013      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f043 0220 	orr.w	r2, r3, #32
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b5e:	e00a      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	f043 0220 	orr.w	r2, r3, #32
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b72:	e000      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b74:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	376c      	adds	r7, #108	; 0x6c
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	50000400 	.word	0x50000400
 8001b94:	50000500 	.word	0x50000500
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	431bde83 	.word	0x431bde83

08001ba0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b099      	sub	sp, #100	; 0x64
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bb8:	d102      	bne.n	8001bc0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001bba:	4b6d      	ldr	r3, [pc, #436]	; (8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	e01a      	b.n	8001bf6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a6a      	ldr	r2, [pc, #424]	; (8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d103      	bne.n	8001bd2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001bca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	e011      	b.n	8001bf6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a67      	ldr	r2, [pc, #412]	; (8001d74 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d102      	bne.n	8001be2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001bdc:	4b66      	ldr	r3, [pc, #408]	; (8001d78 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	e009      	b.n	8001bf6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a64      	ldr	r2, [pc, #400]	; (8001d78 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d102      	bne.n	8001bf2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001bec:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	e001      	b.n	8001bf6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0b0      	b.n	8001d62 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e0a9      	b.n	8001d62 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f040 808d 	bne.w	8001d40 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 8086 	bne.w	8001d40 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c3c:	d004      	beq.n	8001c48 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a4b      	ldr	r2, [pc, #300]	; (8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d101      	bne.n	8001c4c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001c48:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001c4a:	e000      	b.n	8001c4e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001c4c:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001c4e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d040      	beq.n	8001cda <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c6a:	035b      	lsls	r3, r3, #13
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c72:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d108      	bne.n	8001c94 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001c94:	2300      	movs	r3, #0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d15c      	bne.n	8001d54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d107      	bne.n	8001cb6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001cb6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d14b      	bne.n	8001d54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001cbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001cc4:	f023 030f 	bic.w	r3, r3, #15
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	6811      	ldr	r1, [r2, #0]
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	6892      	ldr	r2, [r2, #8]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cd6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cd8:	e03c      	b.n	8001d54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ce4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d108      	bne.n	8001d06 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001d06:	2300      	movs	r3, #0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d123      	bne.n	8001d54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d107      	bne.n	8001d28 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001d28:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d112      	bne.n	8001d54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001d2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d36:	f023 030f 	bic.w	r3, r3, #15
 8001d3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d3c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d3e:	e009      	b.n	8001d54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f043 0220 	orr.w	r2, r3, #32
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001d52:	e000      	b.n	8001d56 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d54:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001d62:	4618      	mov	r0, r3
 8001d64:	3764      	adds	r7, #100	; 0x64
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	50000100 	.word	0x50000100
 8001d74:	50000400 	.word	0x50000400
 8001d78:	50000500 	.word	0x50000500
 8001d7c:	50000300 	.word	0x50000300
 8001d80:	50000700 	.word	0x50000700

08001d84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d108      	bne.n	8001db0 <ADC_Enable+0x2c>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <ADC_Enable+0x2c>
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <ADC_Enable+0x2e>
 8001db0:	2300      	movs	r3, #0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d13c      	bne.n	8001e30 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <ADC_Enable+0xb8>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00d      	beq.n	8001de0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f043 0210 	orr.w	r2, r3, #16
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	f043 0201 	orr.w	r2, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e028      	b.n	8001e32 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001df0:	f7fe fd2c 	bl	800084c <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001df6:	e014      	b.n	8001e22 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001df8:	f7fe fd28 	bl	800084c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d90d      	bls.n	8001e22 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f043 0210 	orr.w	r2, r3, #16
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f043 0201 	orr.w	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e007      	b.n	8001e32 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d1e3      	bne.n	8001df8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	8000003f 	.word	0x8000003f

08001e40 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d108      	bne.n	8001e6c <ADC_Disable+0x2c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <ADC_Disable+0x2c>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <ADC_Disable+0x2e>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d040      	beq.n	8001ef4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 030d 	and.w	r3, r3, #13
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d10f      	bne.n	8001ea0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0202 	orr.w	r2, r2, #2
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2203      	movs	r2, #3
 8001e96:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001e98:	f7fe fcd8 	bl	800084c <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e9e:	e022      	b.n	8001ee6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f043 0210 	orr.w	r2, r3, #16
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	f043 0201 	orr.w	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e01c      	b.n	8001ef6 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ebc:	f7fe fcc6 	bl	800084c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d90d      	bls.n	8001ee6 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f043 0210 	orr.w	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f043 0201 	orr.w	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e007      	b.n	8001ef6 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d0e3      	beq.n	8001ebc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f32:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60d3      	str	r3, [r2, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <__NVIC_GetPriorityGrouping+0x18>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	f003 0307 	and.w	r3, r3, #7
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	db0b      	blt.n	8001f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	f003 021f 	and.w	r2, r3, #31
 8001f7c:	4907      	ldr	r1, [pc, #28]	; (8001f9c <__NVIC_EnableIRQ+0x38>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	2001      	movs	r0, #1
 8001f86:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000e100 	.word	0xe000e100

08001fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	db0a      	blt.n	8001fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	490c      	ldr	r1, [pc, #48]	; (8001fec <__NVIC_SetPriority+0x4c>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc8:	e00a      	b.n	8001fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4908      	ldr	r1, [pc, #32]	; (8001ff0 <__NVIC_SetPriority+0x50>)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	3b04      	subs	r3, #4
 8001fd8:	0112      	lsls	r2, r2, #4
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	440b      	add	r3, r1
 8001fde:	761a      	strb	r2, [r3, #24]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000e100 	.word	0xe000e100
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	; 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f1c3 0307 	rsb	r3, r3, #7
 800200e:	2b04      	cmp	r3, #4
 8002010:	bf28      	it	cs
 8002012:	2304      	movcs	r3, #4
 8002014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3304      	adds	r3, #4
 800201a:	2b06      	cmp	r3, #6
 800201c:	d902      	bls.n	8002024 <NVIC_EncodePriority+0x30>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3b03      	subs	r3, #3
 8002022:	e000      	b.n	8002026 <NVIC_EncodePriority+0x32>
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	f04f 32ff 	mov.w	r2, #4294967295
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	401a      	ands	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800203c:	f04f 31ff 	mov.w	r1, #4294967295
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43d9      	mvns	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	4313      	orrs	r3, r2
         );
}
 800204e:	4618      	mov	r0, r3
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800206c:	d301      	bcc.n	8002072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206e:	2301      	movs	r3, #1
 8002070:	e00f      	b.n	8002092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <SysTick_Config+0x40>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207a:	210f      	movs	r1, #15
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	f7ff ff8e 	bl	8001fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <SysTick_Config+0x40>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <SysTick_Config+0x40>)
 800208c:	2207      	movs	r2, #7
 800208e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	e000e010 	.word	0xe000e010

080020a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff29 	bl	8001f00 <__NVIC_SetPriorityGrouping>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff3e 	bl	8001f48 <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff8e 	bl	8001ff4 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5d 	bl	8001fa0 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff31 	bl	8001f64 <__NVIC_EnableIRQ>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffa2 	bl	800205c <SysTick_Config>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002132:	e160      	b.n	80023f6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	4013      	ands	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8152 	beq.w	80023f0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d00b      	beq.n	800216c <HAL_GPIO_Init+0x48>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d007      	beq.n	800216c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002160:	2b11      	cmp	r3, #17
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b12      	cmp	r3, #18
 800216a:	d130      	bne.n	80021ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a2:	2201      	movs	r2, #1
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	f003 0201 	and.w	r2, r3, #1
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0xea>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b12      	cmp	r3, #18
 800220c:	d123      	bne.n	8002256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	08da      	lsrs	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3208      	adds	r2, #8
 8002216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	220f      	movs	r2, #15
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	08da      	lsrs	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3208      	adds	r2, #8
 8002250:	6939      	ldr	r1, [r7, #16]
 8002252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	2203      	movs	r2, #3
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0203 	and.w	r2, r3, #3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80ac 	beq.w	80023f0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002298:	4b5e      	ldr	r3, [pc, #376]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4a5d      	ldr	r2, [pc, #372]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6193      	str	r3, [r2, #24]
 80022a4:	4b5b      	ldr	r3, [pc, #364]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022b0:	4a59      	ldr	r2, [pc, #356]	; (8002418 <HAL_GPIO_Init+0x2f4>)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	089b      	lsrs	r3, r3, #2
 80022b6:	3302      	adds	r3, #2
 80022b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022da:	d025      	beq.n	8002328 <HAL_GPIO_Init+0x204>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a4f      	ldr	r2, [pc, #316]	; (800241c <HAL_GPIO_Init+0x2f8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d01f      	beq.n	8002324 <HAL_GPIO_Init+0x200>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a4e      	ldr	r2, [pc, #312]	; (8002420 <HAL_GPIO_Init+0x2fc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d019      	beq.n	8002320 <HAL_GPIO_Init+0x1fc>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a4d      	ldr	r2, [pc, #308]	; (8002424 <HAL_GPIO_Init+0x300>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d013      	beq.n	800231c <HAL_GPIO_Init+0x1f8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <HAL_GPIO_Init+0x304>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00d      	beq.n	8002318 <HAL_GPIO_Init+0x1f4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a4b      	ldr	r2, [pc, #300]	; (800242c <HAL_GPIO_Init+0x308>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d007      	beq.n	8002314 <HAL_GPIO_Init+0x1f0>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a4a      	ldr	r2, [pc, #296]	; (8002430 <HAL_GPIO_Init+0x30c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d101      	bne.n	8002310 <HAL_GPIO_Init+0x1ec>
 800230c:	2306      	movs	r3, #6
 800230e:	e00c      	b.n	800232a <HAL_GPIO_Init+0x206>
 8002310:	2307      	movs	r3, #7
 8002312:	e00a      	b.n	800232a <HAL_GPIO_Init+0x206>
 8002314:	2305      	movs	r3, #5
 8002316:	e008      	b.n	800232a <HAL_GPIO_Init+0x206>
 8002318:	2304      	movs	r3, #4
 800231a:	e006      	b.n	800232a <HAL_GPIO_Init+0x206>
 800231c:	2303      	movs	r3, #3
 800231e:	e004      	b.n	800232a <HAL_GPIO_Init+0x206>
 8002320:	2302      	movs	r3, #2
 8002322:	e002      	b.n	800232a <HAL_GPIO_Init+0x206>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <HAL_GPIO_Init+0x206>
 8002328:	2300      	movs	r3, #0
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	f002 0203 	and.w	r2, r2, #3
 8002330:	0092      	lsls	r2, r2, #2
 8002332:	4093      	lsls	r3, r2
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800233a:	4937      	ldr	r1, [pc, #220]	; (8002418 <HAL_GPIO_Init+0x2f4>)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	089b      	lsrs	r3, r3, #2
 8002340:	3302      	adds	r3, #2
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002348:	4b3a      	ldr	r3, [pc, #232]	; (8002434 <HAL_GPIO_Init+0x310>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	43db      	mvns	r3, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800236c:	4a31      	ldr	r2, [pc, #196]	; (8002434 <HAL_GPIO_Init+0x310>)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002372:	4b30      	ldr	r3, [pc, #192]	; (8002434 <HAL_GPIO_Init+0x310>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002396:	4a27      	ldr	r2, [pc, #156]	; (8002434 <HAL_GPIO_Init+0x310>)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800239c:	4b25      	ldr	r3, [pc, #148]	; (8002434 <HAL_GPIO_Init+0x310>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023c0:	4a1c      	ldr	r2, [pc, #112]	; (8002434 <HAL_GPIO_Init+0x310>)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_GPIO_Init+0x310>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023ea:	4a12      	ldr	r2, [pc, #72]	; (8002434 <HAL_GPIO_Init+0x310>)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3301      	adds	r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	f47f ae97 	bne.w	8002134 <HAL_GPIO_Init+0x10>
  }
}
 8002406:	bf00      	nop
 8002408:	371c      	adds	r7, #28
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
 8002418:	40010000 	.word	0x40010000
 800241c:	48000400 	.word	0x48000400
 8002420:	48000800 	.word	0x48000800
 8002424:	48000c00 	.word	0x48000c00
 8002428:	48001000 	.word	0x48001000
 800242c:	48001400 	.word	0x48001400
 8002430:	48001800 	.word	0x48001800
 8002434:	40010400 	.word	0x40010400

08002438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800243e:	af00      	add	r7, sp, #0
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	f000 bf01 	b.w	8003254 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8160 	beq.w	8002722 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002462:	4bae      	ldr	r3, [pc, #696]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b04      	cmp	r3, #4
 800246c:	d00c      	beq.n	8002488 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800246e:	4bab      	ldr	r3, [pc, #684]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b08      	cmp	r3, #8
 8002478:	d159      	bne.n	800252e <HAL_RCC_OscConfig+0xf6>
 800247a:	4ba8      	ldr	r3, [pc, #672]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002486:	d152      	bne.n	800252e <HAL_RCC_OscConfig+0xf6>
 8002488:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800248c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800249c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d102      	bne.n	80024ba <HAL_RCC_OscConfig+0x82>
 80024b4:	4b99      	ldr	r3, [pc, #612]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	e015      	b.n	80024e6 <HAL_RCC_OscConfig+0xae>
 80024ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024be:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80024ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024d2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80024d6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80024e2:	4b8e      	ldr	r3, [pc, #568]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024ea:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80024ee:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80024f2:	fa92 f2a2 	rbit	r2, r2
 80024f6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80024fa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80024fe:	fab2 f282 	clz	r2, r2
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	f042 0220 	orr.w	r2, r2, #32
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f002 021f 	and.w	r2, r2, #31
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f202 	lsl.w	r2, r1, r2
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8102 	beq.w	8002720 <HAL_RCC_OscConfig+0x2e8>
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 80fc 	bne.w	8002720 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	f000 be93 	b.w	8003254 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002538:	d106      	bne.n	8002548 <HAL_RCC_OscConfig+0x110>
 800253a:	4b78      	ldr	r3, [pc, #480]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a77      	ldr	r2, [pc, #476]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e030      	b.n	80025aa <HAL_RCC_OscConfig+0x172>
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0x134>
 8002552:	4b72      	ldr	r3, [pc, #456]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a71      	ldr	r2, [pc, #452]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 8002558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b6f      	ldr	r3, [pc, #444]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a6e      	ldr	r2, [pc, #440]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 8002564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e01e      	b.n	80025aa <HAL_RCC_OscConfig+0x172>
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002576:	d10c      	bne.n	8002592 <HAL_RCC_OscConfig+0x15a>
 8002578:	4b68      	ldr	r3, [pc, #416]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a67      	ldr	r2, [pc, #412]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 800257e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4b65      	ldr	r3, [pc, #404]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a64      	ldr	r2, [pc, #400]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 800258a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	e00b      	b.n	80025aa <HAL_RCC_OscConfig+0x172>
 8002592:	4b62      	ldr	r3, [pc, #392]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a61      	ldr	r2, [pc, #388]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 8002598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b5f      	ldr	r3, [pc, #380]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a5e      	ldr	r2, [pc, #376]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 80025a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d059      	beq.n	8002668 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7fe f94a 	bl	800084c <HAL_GetTick>
 80025b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025bc:	e00a      	b.n	80025d4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025be:	f7fe f945 	bl	800084c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d902      	bls.n	80025d4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	f000 be40 	b.w	8003254 <HAL_RCC_OscConfig+0xe1c>
 80025d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80025e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d102      	bne.n	8002606 <HAL_RCC_OscConfig+0x1ce>
 8002600:	4b46      	ldr	r3, [pc, #280]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	e015      	b.n	8002632 <HAL_RCC_OscConfig+0x1fa>
 8002606:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800260a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800261a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800261e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002622:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800262e:	4b3b      	ldr	r3, [pc, #236]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002636:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800263a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800263e:	fa92 f2a2 	rbit	r2, r2
 8002642:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002646:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800264a:	fab2 f282 	clz	r2, r2
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	f042 0220 	orr.w	r2, r2, #32
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	f002 021f 	and.w	r2, r2, #31
 800265a:	2101      	movs	r1, #1
 800265c:	fa01 f202 	lsl.w	r2, r1, r2
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0ab      	beq.n	80025be <HAL_RCC_OscConfig+0x186>
 8002666:	e05c      	b.n	8002722 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe f8f0 	bl	800084c <HAL_GetTick>
 800266c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002672:	f7fe f8eb 	bl	800084c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d902      	bls.n	8002688 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	f000 bde6 	b.w	8003254 <HAL_RCC_OscConfig+0xe1c>
 8002688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800268c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800269c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d102      	bne.n	80026ba <HAL_RCC_OscConfig+0x282>
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	e015      	b.n	80026e6 <HAL_RCC_OscConfig+0x2ae>
 80026ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026be:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80026ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80026d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <HAL_RCC_OscConfig+0x2e4>)
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026ea:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80026ee:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80026f2:	fa92 f2a2 	rbit	r2, r2
 80026f6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80026fa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80026fe:	fab2 f282 	clz	r2, r2
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	f042 0220 	orr.w	r2, r2, #32
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	f002 021f 	and.w	r2, r2, #31
 800270e:	2101      	movs	r1, #1
 8002710:	fa01 f202 	lsl.w	r2, r1, r2
 8002714:	4013      	ands	r3, r2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1ab      	bne.n	8002672 <HAL_RCC_OscConfig+0x23a>
 800271a:	e002      	b.n	8002722 <HAL_RCC_OscConfig+0x2ea>
 800271c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8170 	beq.w	8002a12 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002732:	4bd0      	ldr	r3, [pc, #832]	; (8002a74 <HAL_RCC_OscConfig+0x63c>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00c      	beq.n	8002758 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800273e:	4bcd      	ldr	r3, [pc, #820]	; (8002a74 <HAL_RCC_OscConfig+0x63c>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b08      	cmp	r3, #8
 8002748:	d16d      	bne.n	8002826 <HAL_RCC_OscConfig+0x3ee>
 800274a:	4bca      	ldr	r3, [pc, #808]	; (8002a74 <HAL_RCC_OscConfig+0x63c>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002756:	d166      	bne.n	8002826 <HAL_RCC_OscConfig+0x3ee>
 8002758:	2302      	movs	r3, #2
 800275a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800276a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d102      	bne.n	8002788 <HAL_RCC_OscConfig+0x350>
 8002782:	4bbc      	ldr	r3, [pc, #752]	; (8002a74 <HAL_RCC_OscConfig+0x63c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	e013      	b.n	80027b0 <HAL_RCC_OscConfig+0x378>
 8002788:	2302      	movs	r3, #2
 800278a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800279a:	2302      	movs	r3, #2
 800279c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80027a0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80027a4:	fa93 f3a3 	rbit	r3, r3
 80027a8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80027ac:	4bb1      	ldr	r3, [pc, #708]	; (8002a74 <HAL_RCC_OscConfig+0x63c>)
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	2202      	movs	r2, #2
 80027b2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80027b6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80027ba:	fa92 f2a2 	rbit	r2, r2
 80027be:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80027c2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80027c6:	fab2 f282 	clz	r2, r2
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	f042 0220 	orr.w	r2, r2, #32
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	f002 021f 	and.w	r2, r2, #31
 80027d6:	2101      	movs	r1, #1
 80027d8:	fa01 f202 	lsl.w	r2, r1, r2
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <HAL_RCC_OscConfig+0x3ba>
 80027e2:	1d3b      	adds	r3, r7, #4
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d002      	beq.n	80027f2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	f000 bd31 	b.w	8003254 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	4ba0      	ldr	r3, [pc, #640]	; (8002a74 <HAL_RCC_OscConfig+0x63c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	21f8      	movs	r1, #248	; 0xf8
 8002802:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800280a:	fa91 f1a1 	rbit	r1, r1
 800280e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002812:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002816:	fab1 f181 	clz	r1, r1
 800281a:	b2c9      	uxtb	r1, r1
 800281c:	408b      	lsls	r3, r1
 800281e:	4995      	ldr	r1, [pc, #596]	; (8002a74 <HAL_RCC_OscConfig+0x63c>)
 8002820:	4313      	orrs	r3, r2
 8002822:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002824:	e0f5      	b.n	8002a12 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8085 	beq.w	800293c <HAL_RCC_OscConfig+0x504>
 8002832:	2301      	movs	r3, #1
 8002834:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002844:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002852:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	461a      	mov	r2, r3
 800285a:	2301      	movs	r3, #1
 800285c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7fd fff5 	bl	800084c <HAL_GetTick>
 8002862:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002866:	e00a      	b.n	800287e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002868:	f7fd fff0 	bl	800084c <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d902      	bls.n	800287e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	f000 bceb 	b.w	8003254 <HAL_RCC_OscConfig+0xe1c>
 800287e:	2302      	movs	r3, #2
 8002880:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002890:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	b2db      	uxtb	r3, r3
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d102      	bne.n	80028ae <HAL_RCC_OscConfig+0x476>
 80028a8:	4b72      	ldr	r3, [pc, #456]	; (8002a74 <HAL_RCC_OscConfig+0x63c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	e013      	b.n	80028d6 <HAL_RCC_OscConfig+0x49e>
 80028ae:	2302      	movs	r3, #2
 80028b0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80028c0:	2302      	movs	r3, #2
 80028c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028c6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028d2:	4b68      	ldr	r3, [pc, #416]	; (8002a74 <HAL_RCC_OscConfig+0x63c>)
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	2202      	movs	r2, #2
 80028d8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80028dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80028e0:	fa92 f2a2 	rbit	r2, r2
 80028e4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80028e8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80028ec:	fab2 f282 	clz	r2, r2
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	f042 0220 	orr.w	r2, r2, #32
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	f002 021f 	and.w	r2, r2, #31
 80028fc:	2101      	movs	r1, #1
 80028fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0af      	beq.n	8002868 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002908:	4b5a      	ldr	r3, [pc, #360]	; (8002a74 <HAL_RCC_OscConfig+0x63c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	21f8      	movs	r1, #248	; 0xf8
 8002918:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002920:	fa91 f1a1 	rbit	r1, r1
 8002924:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002928:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800292c:	fab1 f181 	clz	r1, r1
 8002930:	b2c9      	uxtb	r1, r1
 8002932:	408b      	lsls	r3, r1
 8002934:	494f      	ldr	r1, [pc, #316]	; (8002a74 <HAL_RCC_OscConfig+0x63c>)
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]
 800293a:	e06a      	b.n	8002a12 <HAL_RCC_OscConfig+0x5da>
 800293c:	2301      	movs	r3, #1
 800293e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800294e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800295c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	461a      	mov	r2, r3
 8002964:	2300      	movs	r3, #0
 8002966:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7fd ff70 	bl	800084c <HAL_GetTick>
 800296c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002970:	e00a      	b.n	8002988 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002972:	f7fd ff6b 	bl	800084c <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d902      	bls.n	8002988 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	f000 bc66 	b.w	8003254 <HAL_RCC_OscConfig+0xe1c>
 8002988:	2302      	movs	r3, #2
 800298a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800299a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d102      	bne.n	80029b8 <HAL_RCC_OscConfig+0x580>
 80029b2:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <HAL_RCC_OscConfig+0x63c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	e013      	b.n	80029e0 <HAL_RCC_OscConfig+0x5a8>
 80029b8:	2302      	movs	r3, #2
 80029ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80029ca:	2302      	movs	r3, #2
 80029cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029dc:	4b25      	ldr	r3, [pc, #148]	; (8002a74 <HAL_RCC_OscConfig+0x63c>)
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	2202      	movs	r2, #2
 80029e2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80029e6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80029ea:	fa92 f2a2 	rbit	r2, r2
 80029ee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80029f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80029f6:	fab2 f282 	clz	r2, r2
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	f042 0220 	orr.w	r2, r2, #32
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	f002 021f 	and.w	r2, r2, #31
 8002a06:	2101      	movs	r1, #1
 8002a08:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1af      	bne.n	8002972 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80da 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d069      	beq.n	8002b00 <HAL_RCC_OscConfig+0x6c8>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002a3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCC_OscConfig+0x640>)
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	461a      	mov	r2, r3
 8002a52:	2301      	movs	r3, #1
 8002a54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a56:	f7fd fef9 	bl	800084c <HAL_GetTick>
 8002a5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	e00d      	b.n	8002a7c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a60:	f7fd fef4 	bl	800084c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d905      	bls.n	8002a7c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e3ef      	b.n	8003254 <HAL_RCC_OscConfig+0xe1c>
 8002a74:	40021000 	.word	0x40021000
 8002a78:	10908120 	.word	0x10908120
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a86:	fa93 f2a3 	rbit	r2, r3
 8002a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002a94:	2202      	movs	r2, #2
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	fa93 f2a3 	rbit	r2, r3
 8002aa2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002aac:	2202      	movs	r2, #2
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	fa93 f2a3 	rbit	r2, r3
 8002aba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002abe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac0:	4ba4      	ldr	r3, [pc, #656]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002ac8:	2102      	movs	r1, #2
 8002aca:	6019      	str	r1, [r3, #0]
 8002acc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	fa93 f1a3 	rbit	r1, r3
 8002ad6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002ada:	6019      	str	r1, [r3, #0]
  return result;
 8002adc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0b0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x628>
 8002afe:	e06a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x79e>
 8002b00:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b04:	2201      	movs	r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	fa93 f2a3 	rbit	r2, r3
 8002b12:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b16:	601a      	str	r2, [r3, #0]
  return result;
 8002b18:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b1c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b8c      	ldr	r3, [pc, #560]	; (8002d58 <HAL_RCC_OscConfig+0x920>)
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2300      	movs	r3, #0
 8002b30:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b32:	f7fd fe8b 	bl	800084c <HAL_GetTick>
 8002b36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3a:	e009      	b.n	8002b50 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b3c:	f7fd fe86 	bl	800084c <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e381      	b.n	8003254 <HAL_RCC_OscConfig+0xe1c>
 8002b50:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b54:	2202      	movs	r2, #2
 8002b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	fa93 f2a3 	rbit	r2, r3
 8002b62:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	fa93 f2a3 	rbit	r2, r3
 8002b7a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b84:	2202      	movs	r2, #2
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	fa93 f2a3 	rbit	r2, r3
 8002b92:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b96:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b98:	4b6e      	ldr	r3, [pc, #440]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	6019      	str	r1, [r3, #0]
 8002ba4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	fa93 f1a3 	rbit	r1, r3
 8002bae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002bb2:	6019      	str	r1, [r3, #0]
  return result;
 8002bb4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	fab3 f383 	clz	r3, r3
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f003 031f 	and.w	r3, r3, #31
 8002bca:	2101      	movs	r1, #1
 8002bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1b2      	bne.n	8002b3c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8157 	beq.w	8002e94 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bec:	4b59      	ldr	r3, [pc, #356]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d112      	bne.n	8002c1e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf8:	4b56      	ldr	r3, [pc, #344]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	4a55      	ldr	r2, [pc, #340]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c02:	61d3      	str	r3, [r2, #28]
 8002c04:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	f107 030c 	add.w	r3, r7, #12
 8002c16:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1e:	4b4f      	ldr	r3, [pc, #316]	; (8002d5c <HAL_RCC_OscConfig+0x924>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d11a      	bne.n	8002c60 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2a:	4b4c      	ldr	r3, [pc, #304]	; (8002d5c <HAL_RCC_OscConfig+0x924>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a4b      	ldr	r2, [pc, #300]	; (8002d5c <HAL_RCC_OscConfig+0x924>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c36:	f7fd fe09 	bl	800084c <HAL_GetTick>
 8002c3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3e:	e009      	b.n	8002c54 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c40:	f7fd fe04 	bl	800084c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b64      	cmp	r3, #100	; 0x64
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e2ff      	b.n	8003254 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c54:	4b41      	ldr	r3, [pc, #260]	; (8002d5c <HAL_RCC_OscConfig+0x924>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ef      	beq.n	8002c40 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d106      	bne.n	8002c78 <HAL_RCC_OscConfig+0x840>
 8002c6a:	4b3a      	ldr	r3, [pc, #232]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	4a39      	ldr	r2, [pc, #228]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6213      	str	r3, [r2, #32]
 8002c76:	e02f      	b.n	8002cd8 <HAL_RCC_OscConfig+0x8a0>
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x864>
 8002c82:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	4a33      	ldr	r2, [pc, #204]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6213      	str	r3, [r2, #32]
 8002c8e:	4b31      	ldr	r3, [pc, #196]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4a30      	ldr	r2, [pc, #192]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002c94:	f023 0304 	bic.w	r3, r3, #4
 8002c98:	6213      	str	r3, [r2, #32]
 8002c9a:	e01d      	b.n	8002cd8 <HAL_RCC_OscConfig+0x8a0>
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b05      	cmp	r3, #5
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x888>
 8002ca6:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	4a2a      	ldr	r2, [pc, #168]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	6213      	str	r3, [r2, #32]
 8002cb2:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4a27      	ldr	r2, [pc, #156]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6213      	str	r3, [r2, #32]
 8002cbe:	e00b      	b.n	8002cd8 <HAL_RCC_OscConfig+0x8a0>
 8002cc0:	4b24      	ldr	r3, [pc, #144]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4a23      	ldr	r2, [pc, #140]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002cc6:	f023 0301 	bic.w	r3, r3, #1
 8002cca:	6213      	str	r3, [r2, #32]
 8002ccc:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	4a20      	ldr	r2, [pc, #128]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002cd2:	f023 0304 	bic.w	r3, r3, #4
 8002cd6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d06a      	beq.n	8002db8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce2:	f7fd fdb3 	bl	800084c <HAL_GetTick>
 8002ce6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cea:	e00b      	b.n	8002d04 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cec:	f7fd fdae 	bl	800084c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e2a7      	b.n	8003254 <HAL_RCC_OscConfig+0xe1c>
 8002d04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d08:	2202      	movs	r2, #2
 8002d0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	fa93 f2a3 	rbit	r2, r3
 8002d16:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d20:	2202      	movs	r2, #2
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	fa93 f2a3 	rbit	r2, r3
 8002d2e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d32:	601a      	str	r2, [r3, #0]
  return result;
 8002d34:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d38:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f043 0302 	orr.w	r3, r3, #2
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d108      	bne.n	8002d60 <HAL_RCC_OscConfig+0x928>
 8002d4e:	4b01      	ldr	r3, [pc, #4]	; (8002d54 <HAL_RCC_OscConfig+0x91c>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	e013      	b.n	8002d7c <HAL_RCC_OscConfig+0x944>
 8002d54:	40021000 	.word	0x40021000
 8002d58:	10908120 	.word	0x10908120
 8002d5c:	40007000 	.word	0x40007000
 8002d60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d64:	2202      	movs	r2, #2
 8002d66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	fa93 f2a3 	rbit	r2, r3
 8002d72:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	4bc0      	ldr	r3, [pc, #768]	; (800307c <HAL_RCC_OscConfig+0xc44>)
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002d80:	2102      	movs	r1, #2
 8002d82:	6011      	str	r1, [r2, #0]
 8002d84:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	fa92 f1a2 	rbit	r1, r2
 8002d8e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d92:	6011      	str	r1, [r2, #0]
  return result;
 8002d94:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	fab2 f282 	clz	r2, r2
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	f002 021f 	and.w	r2, r2, #31
 8002daa:	2101      	movs	r1, #1
 8002dac:	fa01 f202 	lsl.w	r2, r1, r2
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d09a      	beq.n	8002cec <HAL_RCC_OscConfig+0x8b4>
 8002db6:	e063      	b.n	8002e80 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db8:	f7fd fd48 	bl	800084c <HAL_GetTick>
 8002dbc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc0:	e00b      	b.n	8002dda <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7fd fd43 	bl	800084c <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e23c      	b.n	8003254 <HAL_RCC_OscConfig+0xe1c>
 8002dda:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002dde:	2202      	movs	r2, #2
 8002de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	fa93 f2a3 	rbit	r2, r3
 8002dec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002df6:	2202      	movs	r2, #2
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	fa93 f2a3 	rbit	r2, r3
 8002e04:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e08:	601a      	str	r2, [r3, #0]
  return result;
 8002e0a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e0e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f043 0302 	orr.w	r3, r3, #2
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d102      	bne.n	8002e2a <HAL_RCC_OscConfig+0x9f2>
 8002e24:	4b95      	ldr	r3, [pc, #596]	; (800307c <HAL_RCC_OscConfig+0xc44>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	e00d      	b.n	8002e46 <HAL_RCC_OscConfig+0xa0e>
 8002e2a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e2e:	2202      	movs	r2, #2
 8002e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	fa93 f2a3 	rbit	r2, r3
 8002e3c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	4b8e      	ldr	r3, [pc, #568]	; (800307c <HAL_RCC_OscConfig+0xc44>)
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	6011      	str	r1, [r2, #0]
 8002e4e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	fa92 f1a2 	rbit	r1, r2
 8002e58:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e5c:	6011      	str	r1, [r2, #0]
  return result;
 8002e5e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	fab2 f282 	clz	r2, r2
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	f002 021f 	and.w	r2, r2, #31
 8002e74:	2101      	movs	r1, #1
 8002e76:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1a0      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e80:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d105      	bne.n	8002e94 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e88:	4b7c      	ldr	r3, [pc, #496]	; (800307c <HAL_RCC_OscConfig+0xc44>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	4a7b      	ldr	r2, [pc, #492]	; (800307c <HAL_RCC_OscConfig+0xc44>)
 8002e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e92:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 81d9 	beq.w	8003252 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ea0:	4b76      	ldr	r3, [pc, #472]	; (800307c <HAL_RCC_OscConfig+0xc44>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 030c 	and.w	r3, r3, #12
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	f000 81a6 	beq.w	80031fa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	f040 811e 	bne.w	80030f6 <HAL_RCC_OscConfig+0xcbe>
 8002eba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002ebe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	fa93 f2a3 	rbit	r2, r3
 8002ece:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ed2:	601a      	str	r2, [r3, #0]
  return result;
 8002ed4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ed8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eda:	fab3 f383 	clz	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ee4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	461a      	mov	r2, r3
 8002eec:	2300      	movs	r3, #0
 8002eee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fd fcac 	bl	800084c <HAL_GetTick>
 8002ef4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef8:	e009      	b.n	8002f0e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002efa:	f7fd fca7 	bl	800084c <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e1a2      	b.n	8003254 <HAL_RCC_OscConfig+0xe1c>
 8002f0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	fa93 f2a3 	rbit	r2, r3
 8002f22:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f26:	601a      	str	r2, [r3, #0]
  return result;
 8002f28:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	095b      	lsrs	r3, r3, #5
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d102      	bne.n	8002f48 <HAL_RCC_OscConfig+0xb10>
 8002f42:	4b4e      	ldr	r3, [pc, #312]	; (800307c <HAL_RCC_OscConfig+0xc44>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	e01b      	b.n	8002f80 <HAL_RCC_OscConfig+0xb48>
 8002f48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	fa93 f2a3 	rbit	r2, r3
 8002f5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	fa93 f2a3 	rbit	r2, r3
 8002f76:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	4b3f      	ldr	r3, [pc, #252]	; (800307c <HAL_RCC_OscConfig+0xc44>)
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002f84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f88:	6011      	str	r1, [r2, #0]
 8002f8a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	fa92 f1a2 	rbit	r1, r2
 8002f94:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f98:	6011      	str	r1, [r2, #0]
  return result;
 8002f9a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	fab2 f282 	clz	r2, r2
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	f042 0220 	orr.w	r2, r2, #32
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	f002 021f 	and.w	r2, r2, #31
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d19e      	bne.n	8002efa <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fbc:	4b2f      	ldr	r3, [pc, #188]	; (800307c <HAL_RCC_OscConfig+0xc44>)
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	f023 020f 	bic.w	r2, r3, #15
 8002fc4:	1d3b      	adds	r3, r7, #4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	492c      	ldr	r1, [pc, #176]	; (800307c <HAL_RCC_OscConfig+0xc44>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002fd0:	4b2a      	ldr	r3, [pc, #168]	; (800307c <HAL_RCC_OscConfig+0xc44>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002fd8:	1d3b      	adds	r3, r7, #4
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6a19      	ldr	r1, [r3, #32]
 8002fde:	1d3b      	adds	r3, r7, #4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	4925      	ldr	r1, [pc, #148]	; (800307c <HAL_RCC_OscConfig+0xc44>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	604b      	str	r3, [r1, #4]
 8002fec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ff0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ff4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	fa93 f2a3 	rbit	r2, r3
 8003000:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003004:	601a      	str	r2, [r3, #0]
  return result;
 8003006:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800300a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003016:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	461a      	mov	r2, r3
 800301e:	2301      	movs	r3, #1
 8003020:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fd fc13 	bl	800084c <HAL_GetTick>
 8003026:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800302a:	e009      	b.n	8003040 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302c:	f7fd fc0e 	bl	800084c <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e109      	b.n	8003254 <HAL_RCC_OscConfig+0xe1c>
 8003040:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003044:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	fa93 f2a3 	rbit	r2, r3
 8003054:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003058:	601a      	str	r2, [r3, #0]
  return result;
 800305a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800305e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003060:	fab3 f383 	clz	r3, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	d105      	bne.n	8003080 <HAL_RCC_OscConfig+0xc48>
 8003074:	4b01      	ldr	r3, [pc, #4]	; (800307c <HAL_RCC_OscConfig+0xc44>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	e01e      	b.n	80030b8 <HAL_RCC_OscConfig+0xc80>
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003084:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003088:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	fa93 f2a3 	rbit	r2, r3
 8003094:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800309e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	fa93 f2a3 	rbit	r2, r3
 80030ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	4b6a      	ldr	r3, [pc, #424]	; (8003260 <HAL_RCC_OscConfig+0xe28>)
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80030bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030c0:	6011      	str	r1, [r2, #0]
 80030c2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	fa92 f1a2 	rbit	r1, r2
 80030cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030d0:	6011      	str	r1, [r2, #0]
  return result;
 80030d2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	fab2 f282 	clz	r2, r2
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	f042 0220 	orr.w	r2, r2, #32
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	f002 021f 	and.w	r2, r2, #31
 80030e8:	2101      	movs	r1, #1
 80030ea:	fa01 f202 	lsl.w	r2, r1, r2
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d09b      	beq.n	800302c <HAL_RCC_OscConfig+0xbf4>
 80030f4:	e0ad      	b.n	8003252 <HAL_RCC_OscConfig+0xe1a>
 80030f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003100:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	fa93 f2a3 	rbit	r2, r3
 800310a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800310e:	601a      	str	r2, [r3, #0]
  return result;
 8003110:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003114:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003120:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	461a      	mov	r2, r3
 8003128:	2300      	movs	r3, #0
 800312a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fd fb8e 	bl	800084c <HAL_GetTick>
 8003130:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003134:	e009      	b.n	800314a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003136:	f7fd fb89 	bl	800084c <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e084      	b.n	8003254 <HAL_RCC_OscConfig+0xe1c>
 800314a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800314e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	fa93 f2a3 	rbit	r2, r3
 800315e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003162:	601a      	str	r2, [r3, #0]
  return result;
 8003164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003168:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316a:	fab3 f383 	clz	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d102      	bne.n	8003184 <HAL_RCC_OscConfig+0xd4c>
 800317e:	4b38      	ldr	r3, [pc, #224]	; (8003260 <HAL_RCC_OscConfig+0xe28>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	e01b      	b.n	80031bc <HAL_RCC_OscConfig+0xd84>
 8003184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003188:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800318c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	fa93 f2a3 	rbit	r2, r3
 8003198:	f107 0320 	add.w	r3, r7, #32
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	f107 031c 	add.w	r3, r7, #28
 80031a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	f107 031c 	add.w	r3, r7, #28
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	fa93 f2a3 	rbit	r2, r3
 80031b2:	f107 0318 	add.w	r3, r7, #24
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	4b29      	ldr	r3, [pc, #164]	; (8003260 <HAL_RCC_OscConfig+0xe28>)
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	f107 0214 	add.w	r2, r7, #20
 80031c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031c4:	6011      	str	r1, [r2, #0]
 80031c6:	f107 0214 	add.w	r2, r7, #20
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	fa92 f1a2 	rbit	r1, r2
 80031d0:	f107 0210 	add.w	r2, r7, #16
 80031d4:	6011      	str	r1, [r2, #0]
  return result;
 80031d6:	f107 0210 	add.w	r2, r7, #16
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	fab2 f282 	clz	r2, r2
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	f042 0220 	orr.w	r2, r2, #32
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	f002 021f 	and.w	r2, r2, #31
 80031ec:	2101      	movs	r1, #1
 80031ee:	fa01 f202 	lsl.w	r2, r1, r2
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d19e      	bne.n	8003136 <HAL_RCC_OscConfig+0xcfe>
 80031f8:	e02b      	b.n	8003252 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031fa:	1d3b      	adds	r3, r7, #4
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e025      	b.n	8003254 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003208:	4b15      	ldr	r3, [pc, #84]	; (8003260 <HAL_RCC_OscConfig+0xe28>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003210:	4b13      	ldr	r3, [pc, #76]	; (8003260 <HAL_RCC_OscConfig+0xe28>)
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003218:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800321c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003220:	1d3b      	adds	r3, r7, #4
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	429a      	cmp	r2, r3
 8003228:	d111      	bne.n	800324e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800322a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800322e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003232:	1d3b      	adds	r3, r7, #4
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003238:	429a      	cmp	r2, r3
 800323a:	d108      	bne.n	800324e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800323c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003240:	f003 020f 	and.w	r2, r3, #15
 8003244:	1d3b      	adds	r3, r7, #4
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800324a:	429a      	cmp	r2, r3
 800324c:	d001      	beq.n	8003252 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000

08003264 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b09e      	sub	sp, #120	; 0x78
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e162      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800327c:	4b90      	ldr	r3, [pc, #576]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d910      	bls.n	80032ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b8d      	ldr	r3, [pc, #564]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 0207 	bic.w	r2, r3, #7
 8003292:	498b      	ldr	r1, [pc, #556]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b89      	ldr	r3, [pc, #548]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e14a      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b8:	4b82      	ldr	r3, [pc, #520]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	497f      	ldr	r1, [pc, #508]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80dc 	beq.w	8003490 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d13c      	bne.n	800335a <HAL_RCC_ClockConfig+0xf6>
 80032e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e8:	fa93 f3a3 	rbit	r3, r3
 80032ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f0:	fab3 f383 	clz	r3, r3
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d102      	bne.n	800330a <HAL_RCC_ClockConfig+0xa6>
 8003304:	4b6f      	ldr	r3, [pc, #444]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	e00f      	b.n	800332a <HAL_RCC_ClockConfig+0xc6>
 800330a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800330e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	667b      	str	r3, [r7, #100]	; 0x64
 8003318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800331c:	663b      	str	r3, [r7, #96]	; 0x60
 800331e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003326:	4b67      	ldr	r3, [pc, #412]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800332e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003332:	fa92 f2a2 	rbit	r2, r2
 8003336:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003338:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	f042 0220 	orr.w	r2, r2, #32
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f002 021f 	and.w	r2, r2, #31
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f202 	lsl.w	r2, r1, r2
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d17b      	bne.n	800344e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0f3      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d13c      	bne.n	80033dc <HAL_RCC_ClockConfig+0x178>
 8003362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003366:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b01      	cmp	r3, #1
 8003384:	d102      	bne.n	800338c <HAL_RCC_ClockConfig+0x128>
 8003386:	4b4f      	ldr	r3, [pc, #316]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	e00f      	b.n	80033ac <HAL_RCC_ClockConfig+0x148>
 800338c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003390:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	647b      	str	r3, [r7, #68]	; 0x44
 800339a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800339e:	643b      	str	r3, [r7, #64]	; 0x40
 80033a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a8:	4b46      	ldr	r3, [pc, #280]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80033b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033b4:	fa92 f2a2 	rbit	r2, r2
 80033b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80033ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033bc:	fab2 f282 	clz	r2, r2
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	f042 0220 	orr.w	r2, r2, #32
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	f002 021f 	and.w	r2, r2, #31
 80033cc:	2101      	movs	r1, #1
 80033ce:	fa01 f202 	lsl.w	r2, r1, r2
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d13a      	bne.n	800344e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0b2      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
 80033dc:	2302      	movs	r3, #2
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ea:	fab3 f383 	clz	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	095b      	lsrs	r3, r3, #5
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d102      	bne.n	8003404 <HAL_RCC_ClockConfig+0x1a0>
 80033fe:	4b31      	ldr	r3, [pc, #196]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	e00d      	b.n	8003420 <HAL_RCC_ClockConfig+0x1bc>
 8003404:	2302      	movs	r3, #2
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	fa93 f3a3 	rbit	r3, r3
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
 8003410:	2302      	movs	r3, #2
 8003412:	623b      	str	r3, [r7, #32]
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	4b29      	ldr	r3, [pc, #164]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	2202      	movs	r2, #2
 8003422:	61ba      	str	r2, [r7, #24]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	fa92 f2a2 	rbit	r2, r2
 800342a:	617a      	str	r2, [r7, #20]
  return result;
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	fab2 f282 	clz	r2, r2
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	f042 0220 	orr.w	r2, r2, #32
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	f002 021f 	and.w	r2, r2, #31
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f202 	lsl.w	r2, r1, r2
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e079      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f023 0203 	bic.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	491a      	ldr	r1, [pc, #104]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003460:	f7fd f9f4 	bl	800084c <HAL_GetTick>
 8003464:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	e00a      	b.n	800347e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003468:	f7fd f9f0 	bl	800084c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e061      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 020c 	and.w	r2, r3, #12
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	429a      	cmp	r2, r3
 800348e:	d1eb      	bne.n	8003468 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d214      	bcs.n	80034c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 0207 	bic.w	r2, r3, #7
 80034a6:	4906      	ldr	r1, [pc, #24]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d005      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e040      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
 80034c0:	40022000 	.word	0x40022000
 80034c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d4:	4b1d      	ldr	r3, [pc, #116]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	491a      	ldr	r1, [pc, #104]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034f2:	4b16      	ldr	r3, [pc, #88]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4912      	ldr	r1, [pc, #72]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003506:	f000 f829 	bl	800355c <HAL_RCC_GetSysClockFreq>
 800350a:	4601      	mov	r1, r0
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003514:	22f0      	movs	r2, #240	; 0xf0
 8003516:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	fa92 f2a2 	rbit	r2, r2
 800351e:	60fa      	str	r2, [r7, #12]
  return result;
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	fab2 f282 	clz	r2, r2
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	40d3      	lsrs	r3, r2
 800352a:	4a09      	ldr	r2, [pc, #36]	; (8003550 <HAL_RCC_ClockConfig+0x2ec>)
 800352c:	5cd3      	ldrb	r3, [r2, r3]
 800352e:	fa21 f303 	lsr.w	r3, r1, r3
 8003532:	4a08      	ldr	r2, [pc, #32]	; (8003554 <HAL_RCC_ClockConfig+0x2f0>)
 8003534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <HAL_RCC_ClockConfig+0x2f4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd f942 	bl	80007c4 <HAL_InitTick>
  
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3778      	adds	r7, #120	; 0x78
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	08004bd4 	.word	0x08004bd4
 8003554:	20000000 	.word	0x20000000
 8003558:	20000004 	.word	0x20000004

0800355c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800355c:	b480      	push	{r7}
 800355e:	b08b      	sub	sp, #44	; 0x2c
 8003560:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	2300      	movs	r3, #0
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003576:	4b2a      	ldr	r3, [pc, #168]	; (8003620 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b04      	cmp	r3, #4
 8003584:	d002      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0x30>
 8003586:	2b08      	cmp	r3, #8
 8003588:	d003      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0x36>
 800358a:	e03f      	b.n	800360c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800358c:	4b25      	ldr	r3, [pc, #148]	; (8003624 <HAL_RCC_GetSysClockFreq+0xc8>)
 800358e:	623b      	str	r3, [r7, #32]
      break;
 8003590:	e03f      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003598:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800359c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	fa92 f2a2 	rbit	r2, r2
 80035a4:	607a      	str	r2, [r7, #4]
  return result;
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	fab2 f282 	clz	r2, r2
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	40d3      	lsrs	r3, r2
 80035b0:	4a1d      	ldr	r2, [pc, #116]	; (8003628 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035b2:	5cd3      	ldrb	r3, [r2, r3]
 80035b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035b6:	4b1a      	ldr	r3, [pc, #104]	; (8003620 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	220f      	movs	r2, #15
 80035c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	fa92 f2a2 	rbit	r2, r2
 80035c8:	60fa      	str	r2, [r7, #12]
  return result;
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	fab2 f282 	clz	r2, r2
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	40d3      	lsrs	r3, r2
 80035d4:	4a15      	ldr	r2, [pc, #84]	; (800362c <HAL_RCC_GetSysClockFreq+0xd0>)
 80035d6:	5cd3      	ldrb	r3, [r2, r3]
 80035d8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035e4:	4a0f      	ldr	r2, [pc, #60]	; (8003624 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	fb02 f303 	mul.w	r3, r2, r3
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
 80035f4:	e007      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035f6:	4a0b      	ldr	r2, [pc, #44]	; (8003624 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	fb02 f303 	mul.w	r3, r2, r3
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	623b      	str	r3, [r7, #32]
      break;
 800360a:	e002      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_GetSysClockFreq+0xc8>)
 800360e:	623b      	str	r3, [r7, #32]
      break;
 8003610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003612:	6a3b      	ldr	r3, [r7, #32]
}
 8003614:	4618      	mov	r0, r3
 8003616:	372c      	adds	r7, #44	; 0x2c
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40021000 	.word	0x40021000
 8003624:	007a1200 	.word	0x007a1200
 8003628:	08004bec 	.word	0x08004bec
 800362c:	08004bfc 	.word	0x08004bfc

08003630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <HAL_RCC_GetHCLKFreq+0x14>)
 8003636:	681b      	ldr	r3, [r3, #0]
}
 8003638:	4618      	mov	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20000000 	.word	0x20000000

08003648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800364e:	f7ff ffef 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8003652:	4601      	mov	r1, r0
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800365c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003660:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	fa92 f2a2 	rbit	r2, r2
 8003668:	603a      	str	r2, [r7, #0]
  return result;
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	fab2 f282 	clz	r2, r2
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	40d3      	lsrs	r3, r2
 8003674:	4a04      	ldr	r2, [pc, #16]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003676:	5cd3      	ldrb	r3, [r2, r3]
 8003678:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	08004be4 	.word	0x08004be4

0800368c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003692:	f7ff ffcd 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8003696:	4601      	mov	r1, r0
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80036a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80036a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	fa92 f2a2 	rbit	r2, r2
 80036ac:	603a      	str	r2, [r7, #0]
  return result;
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	fab2 f282 	clz	r2, r2
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	40d3      	lsrs	r3, r2
 80036b8:	4a04      	ldr	r2, [pc, #16]	; (80036cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80036ba:	5cd3      	ldrb	r3, [r2, r3]
 80036bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	08004be4 	.word	0x08004be4

080036d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b092      	sub	sp, #72	; 0x48
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80036e0:	2300      	movs	r3, #0
 80036e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80d4 	beq.w	800389c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f4:	4b4e      	ldr	r3, [pc, #312]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10e      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003700:	4b4b      	ldr	r3, [pc, #300]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	4a4a      	ldr	r2, [pc, #296]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370a:	61d3      	str	r3, [r2, #28]
 800370c:	4b48      	ldr	r3, [pc, #288]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003718:	2301      	movs	r3, #1
 800371a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371e:	4b45      	ldr	r3, [pc, #276]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003726:	2b00      	cmp	r3, #0
 8003728:	d118      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800372a:	4b42      	ldr	r3, [pc, #264]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a41      	ldr	r2, [pc, #260]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003734:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003736:	f7fd f889 	bl	800084c <HAL_GetTick>
 800373a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	e008      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373e:	f7fd f885 	bl	800084c <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b64      	cmp	r3, #100	; 0x64
 800374a:	d901      	bls.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e1d6      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003750:	4b38      	ldr	r3, [pc, #224]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800375c:	4b34      	ldr	r3, [pc, #208]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003764:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8084 	beq.w	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003776:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003778:	429a      	cmp	r2, r3
 800377a:	d07c      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800377c:	4b2c      	ldr	r3, [pc, #176]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800378a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	4b26      	ldr	r3, [pc, #152]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	461a      	mov	r2, r3
 80037a6:	2301      	movs	r3, #1
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80037b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	461a      	mov	r2, r3
 80037ca:	2300      	movs	r3, #0
 80037cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037ce:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d04b      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fd f835 	bl	800084c <HAL_GetTick>
 80037e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e4:	e00a      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fd f831 	bl	800084c <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e180      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80037fc:	2302      	movs	r3, #2
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
 8003808:	2302      	movs	r3, #2
 800380a:	623b      	str	r3, [r7, #32]
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	61fb      	str	r3, [r7, #28]
  return result;
 8003814:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d108      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800382a:	4b01      	ldr	r3, [pc, #4]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	e00d      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003830:	40021000 	.word	0x40021000
 8003834:	40007000 	.word	0x40007000
 8003838:	10908100 	.word	0x10908100
 800383c:	2302      	movs	r3, #2
 800383e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	fa93 f3a3 	rbit	r3, r3
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	4ba0      	ldr	r3, [pc, #640]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	2202      	movs	r2, #2
 800384e:	613a      	str	r2, [r7, #16]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	fa92 f2a2 	rbit	r2, r2
 8003856:	60fa      	str	r2, [r7, #12]
  return result;
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	fab2 f282 	clz	r2, r2
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	f002 021f 	and.w	r2, r2, #31
 800386a:	2101      	movs	r1, #1
 800386c:	fa01 f202 	lsl.w	r2, r1, r2
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0b7      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003876:	4b95      	ldr	r3, [pc, #596]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4992      	ldr	r1, [pc, #584]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003884:	4313      	orrs	r3, r2
 8003886:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003888:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800388c:	2b01      	cmp	r3, #1
 800388e:	d105      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003890:	4b8e      	ldr	r3, [pc, #568]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	4a8d      	ldr	r2, [pc, #564]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038a8:	4b88      	ldr	r3, [pc, #544]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	f023 0203 	bic.w	r2, r3, #3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4985      	ldr	r1, [pc, #532]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038c6:	4b81      	ldr	r3, [pc, #516]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	497e      	ldr	r1, [pc, #504]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038e4:	4b79      	ldr	r3, [pc, #484]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	4976      	ldr	r1, [pc, #472]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003902:	4b72      	ldr	r3, [pc, #456]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f023 0210 	bic.w	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	496f      	ldr	r1, [pc, #444]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003910:	4313      	orrs	r3, r2
 8003912:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003920:	4b6a      	ldr	r3, [pc, #424]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392c:	4967      	ldr	r1, [pc, #412]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d008      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800393e:	4b63      	ldr	r3, [pc, #396]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f023 0220 	bic.w	r2, r3, #32
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	4960      	ldr	r1, [pc, #384]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800394c:	4313      	orrs	r3, r2
 800394e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800395c:	4b5b      	ldr	r3, [pc, #364]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	4958      	ldr	r1, [pc, #352]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800397a:	4b54      	ldr	r3, [pc, #336]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	4951      	ldr	r1, [pc, #324]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003988:	4313      	orrs	r3, r2
 800398a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003998:	4b4c      	ldr	r3, [pc, #304]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	4949      	ldr	r1, [pc, #292]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039b6:	4b45      	ldr	r3, [pc, #276]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	4942      	ldr	r1, [pc, #264]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039d4:	4b3d      	ldr	r3, [pc, #244]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	493a      	ldr	r1, [pc, #232]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80039f2:	4b36      	ldr	r3, [pc, #216]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	4933      	ldr	r1, [pc, #204]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a10:	4b2e      	ldr	r3, [pc, #184]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	492b      	ldr	r1, [pc, #172]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003a2e:	4b27      	ldr	r3, [pc, #156]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	4924      	ldr	r1, [pc, #144]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003a4c:	4b1f      	ldr	r3, [pc, #124]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	491c      	ldr	r1, [pc, #112]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003a6a:	4b18      	ldr	r3, [pc, #96]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a76:	4915      	ldr	r1, [pc, #84]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003a88:	4b10      	ldr	r3, [pc, #64]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a94:	490d      	ldr	r1, [pc, #52]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003aa6:	4b09      	ldr	r3, [pc, #36]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab2:	4906      	ldr	r1, [pc, #24]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00c      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003ac4:	4b01      	ldr	r3, [pc, #4]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	e002      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad8:	490b      	ldr	r1, [pc, #44]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d008      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003aea:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af6:	4904      	ldr	r1, [pc, #16]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3748      	adds	r7, #72	; 0x48
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000

08003b0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e040      	b.n	8003ba0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fc fd4a 	bl	80005c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2224      	movs	r2, #36	; 0x24
 8003b38:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0201 	bic.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f8c0 	bl	8003cd0 <UART_SetConfig>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e022      	b.n	8003ba0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 fa88 	bl	8004078 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fb0f 	bl	80041bc <UART_CheckIdleState>
 8003b9e:	4603      	mov	r3, r0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	; 0x28
 8003bac:	af02      	add	r7, sp, #8
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	f040 8082 	bne.w	8003cc6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_UART_Transmit+0x26>
 8003bc8:	88fb      	ldrh	r3, [r7, #6]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e07a      	b.n	8003cc8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_UART_Transmit+0x38>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e073      	b.n	8003cc8 <HAL_UART_Transmit+0x120>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2221      	movs	r2, #33	; 0x21
 8003bf4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bf6:	f7fc fe29 	bl	800084c <HAL_GetTick>
 8003bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	88fa      	ldrh	r2, [r7, #6]
 8003c00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	88fa      	ldrh	r2, [r7, #6]
 8003c08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c14:	d108      	bne.n	8003c28 <HAL_UART_Transmit+0x80>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d104      	bne.n	8003c28 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	e003      	b.n	8003c30 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003c38:	e02d      	b.n	8003c96 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2200      	movs	r2, #0
 8003c42:	2180      	movs	r1, #128	; 0x80
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fb02 	bl	800424e <UART_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e039      	b.n	8003cc8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10b      	bne.n	8003c72 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	881a      	ldrh	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c66:	b292      	uxth	r2, r2
 8003c68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	3302      	adds	r3, #2
 8003c6e:	61bb      	str	r3, [r7, #24]
 8003c70:	e008      	b.n	8003c84 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	781a      	ldrb	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	b292      	uxth	r2, r2
 8003c7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3301      	adds	r3, #1
 8003c82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1cb      	bne.n	8003c3a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2140      	movs	r1, #64	; 0x40
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 face 	bl	800424e <UART_WaitOnFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e005      	b.n	8003cc8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e000      	b.n	8003cc8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003cc6:	2302      	movs	r3, #2
  }
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3720      	adds	r7, #32
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4baa      	ldr	r3, [pc, #680]	; (8003fa4 <UART_SetConfig+0x2d4>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	6979      	ldr	r1, [r7, #20]
 8003d04:	430b      	orrs	r3, r1
 8003d06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a98      	ldr	r2, [pc, #608]	; (8003fa8 <UART_SetConfig+0x2d8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d121      	bne.n	8003d90 <UART_SetConfig+0xc0>
 8003d4c:	4b97      	ldr	r3, [pc, #604]	; (8003fac <UART_SetConfig+0x2dc>)
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d817      	bhi.n	8003d88 <UART_SetConfig+0xb8>
 8003d58:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <UART_SetConfig+0x90>)
 8003d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5e:	bf00      	nop
 8003d60:	08003d71 	.word	0x08003d71
 8003d64:	08003d7d 	.word	0x08003d7d
 8003d68:	08003d83 	.word	0x08003d83
 8003d6c:	08003d77 	.word	0x08003d77
 8003d70:	2301      	movs	r3, #1
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	e0b2      	b.n	8003edc <UART_SetConfig+0x20c>
 8003d76:	2302      	movs	r3, #2
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e0af      	b.n	8003edc <UART_SetConfig+0x20c>
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	e0ac      	b.n	8003edc <UART_SetConfig+0x20c>
 8003d82:	2308      	movs	r3, #8
 8003d84:	77fb      	strb	r3, [r7, #31]
 8003d86:	e0a9      	b.n	8003edc <UART_SetConfig+0x20c>
 8003d88:	2310      	movs	r3, #16
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	bf00      	nop
 8003d8e:	e0a5      	b.n	8003edc <UART_SetConfig+0x20c>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a86      	ldr	r2, [pc, #536]	; (8003fb0 <UART_SetConfig+0x2e0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d123      	bne.n	8003de2 <UART_SetConfig+0x112>
 8003d9a:	4b84      	ldr	r3, [pc, #528]	; (8003fac <UART_SetConfig+0x2dc>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da6:	d012      	beq.n	8003dce <UART_SetConfig+0xfe>
 8003da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dac:	d802      	bhi.n	8003db4 <UART_SetConfig+0xe4>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <UART_SetConfig+0xf2>
 8003db2:	e012      	b.n	8003dda <UART_SetConfig+0x10a>
 8003db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003db8:	d00c      	beq.n	8003dd4 <UART_SetConfig+0x104>
 8003dba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dbe:	d003      	beq.n	8003dc8 <UART_SetConfig+0xf8>
 8003dc0:	e00b      	b.n	8003dda <UART_SetConfig+0x10a>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e089      	b.n	8003edc <UART_SetConfig+0x20c>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e086      	b.n	8003edc <UART_SetConfig+0x20c>
 8003dce:	2304      	movs	r3, #4
 8003dd0:	77fb      	strb	r3, [r7, #31]
 8003dd2:	e083      	b.n	8003edc <UART_SetConfig+0x20c>
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	e080      	b.n	8003edc <UART_SetConfig+0x20c>
 8003dda:	2310      	movs	r3, #16
 8003ddc:	77fb      	strb	r3, [r7, #31]
 8003dde:	bf00      	nop
 8003de0:	e07c      	b.n	8003edc <UART_SetConfig+0x20c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a73      	ldr	r2, [pc, #460]	; (8003fb4 <UART_SetConfig+0x2e4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d123      	bne.n	8003e34 <UART_SetConfig+0x164>
 8003dec:	4b6f      	ldr	r3, [pc, #444]	; (8003fac <UART_SetConfig+0x2dc>)
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003df4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003df8:	d012      	beq.n	8003e20 <UART_SetConfig+0x150>
 8003dfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dfe:	d802      	bhi.n	8003e06 <UART_SetConfig+0x136>
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <UART_SetConfig+0x144>
 8003e04:	e012      	b.n	8003e2c <UART_SetConfig+0x15c>
 8003e06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e0a:	d00c      	beq.n	8003e26 <UART_SetConfig+0x156>
 8003e0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e10:	d003      	beq.n	8003e1a <UART_SetConfig+0x14a>
 8003e12:	e00b      	b.n	8003e2c <UART_SetConfig+0x15c>
 8003e14:	2300      	movs	r3, #0
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e060      	b.n	8003edc <UART_SetConfig+0x20c>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	77fb      	strb	r3, [r7, #31]
 8003e1e:	e05d      	b.n	8003edc <UART_SetConfig+0x20c>
 8003e20:	2304      	movs	r3, #4
 8003e22:	77fb      	strb	r3, [r7, #31]
 8003e24:	e05a      	b.n	8003edc <UART_SetConfig+0x20c>
 8003e26:	2308      	movs	r3, #8
 8003e28:	77fb      	strb	r3, [r7, #31]
 8003e2a:	e057      	b.n	8003edc <UART_SetConfig+0x20c>
 8003e2c:	2310      	movs	r3, #16
 8003e2e:	77fb      	strb	r3, [r7, #31]
 8003e30:	bf00      	nop
 8003e32:	e053      	b.n	8003edc <UART_SetConfig+0x20c>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a5f      	ldr	r2, [pc, #380]	; (8003fb8 <UART_SetConfig+0x2e8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d123      	bne.n	8003e86 <UART_SetConfig+0x1b6>
 8003e3e:	4b5b      	ldr	r3, [pc, #364]	; (8003fac <UART_SetConfig+0x2dc>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e4a:	d012      	beq.n	8003e72 <UART_SetConfig+0x1a2>
 8003e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e50:	d802      	bhi.n	8003e58 <UART_SetConfig+0x188>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <UART_SetConfig+0x196>
 8003e56:	e012      	b.n	8003e7e <UART_SetConfig+0x1ae>
 8003e58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e5c:	d00c      	beq.n	8003e78 <UART_SetConfig+0x1a8>
 8003e5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e62:	d003      	beq.n	8003e6c <UART_SetConfig+0x19c>
 8003e64:	e00b      	b.n	8003e7e <UART_SetConfig+0x1ae>
 8003e66:	2300      	movs	r3, #0
 8003e68:	77fb      	strb	r3, [r7, #31]
 8003e6a:	e037      	b.n	8003edc <UART_SetConfig+0x20c>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	77fb      	strb	r3, [r7, #31]
 8003e70:	e034      	b.n	8003edc <UART_SetConfig+0x20c>
 8003e72:	2304      	movs	r3, #4
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	e031      	b.n	8003edc <UART_SetConfig+0x20c>
 8003e78:	2308      	movs	r3, #8
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e02e      	b.n	8003edc <UART_SetConfig+0x20c>
 8003e7e:	2310      	movs	r3, #16
 8003e80:	77fb      	strb	r3, [r7, #31]
 8003e82:	bf00      	nop
 8003e84:	e02a      	b.n	8003edc <UART_SetConfig+0x20c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a4c      	ldr	r2, [pc, #304]	; (8003fbc <UART_SetConfig+0x2ec>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d123      	bne.n	8003ed8 <UART_SetConfig+0x208>
 8003e90:	4b46      	ldr	r3, [pc, #280]	; (8003fac <UART_SetConfig+0x2dc>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003e98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e9c:	d012      	beq.n	8003ec4 <UART_SetConfig+0x1f4>
 8003e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea2:	d802      	bhi.n	8003eaa <UART_SetConfig+0x1da>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d007      	beq.n	8003eb8 <UART_SetConfig+0x1e8>
 8003ea8:	e012      	b.n	8003ed0 <UART_SetConfig+0x200>
 8003eaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eae:	d00c      	beq.n	8003eca <UART_SetConfig+0x1fa>
 8003eb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003eb4:	d003      	beq.n	8003ebe <UART_SetConfig+0x1ee>
 8003eb6:	e00b      	b.n	8003ed0 <UART_SetConfig+0x200>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	e00e      	b.n	8003edc <UART_SetConfig+0x20c>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	77fb      	strb	r3, [r7, #31]
 8003ec2:	e00b      	b.n	8003edc <UART_SetConfig+0x20c>
 8003ec4:	2304      	movs	r3, #4
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e008      	b.n	8003edc <UART_SetConfig+0x20c>
 8003eca:	2308      	movs	r3, #8
 8003ecc:	77fb      	strb	r3, [r7, #31]
 8003ece:	e005      	b.n	8003edc <UART_SetConfig+0x20c>
 8003ed0:	2310      	movs	r3, #16
 8003ed2:	77fb      	strb	r3, [r7, #31]
 8003ed4:	bf00      	nop
 8003ed6:	e001      	b.n	8003edc <UART_SetConfig+0x20c>
 8003ed8:	2310      	movs	r3, #16
 8003eda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee4:	d16e      	bne.n	8003fc4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003ee6:	7ffb      	ldrb	r3, [r7, #31]
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d828      	bhi.n	8003f3e <UART_SetConfig+0x26e>
 8003eec:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <UART_SetConfig+0x224>)
 8003eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef2:	bf00      	nop
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f21 	.word	0x08003f21
 8003efc:	08003f29 	.word	0x08003f29
 8003f00:	08003f3f 	.word	0x08003f3f
 8003f04:	08003f2f 	.word	0x08003f2f
 8003f08:	08003f3f 	.word	0x08003f3f
 8003f0c:	08003f3f 	.word	0x08003f3f
 8003f10:	08003f3f 	.word	0x08003f3f
 8003f14:	08003f37 	.word	0x08003f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f18:	f7ff fb96 	bl	8003648 <HAL_RCC_GetPCLK1Freq>
 8003f1c:	61b8      	str	r0, [r7, #24]
        break;
 8003f1e:	e013      	b.n	8003f48 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f20:	f7ff fbb4 	bl	800368c <HAL_RCC_GetPCLK2Freq>
 8003f24:	61b8      	str	r0, [r7, #24]
        break;
 8003f26:	e00f      	b.n	8003f48 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f28:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <UART_SetConfig+0x2f0>)
 8003f2a:	61bb      	str	r3, [r7, #24]
        break;
 8003f2c:	e00c      	b.n	8003f48 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2e:	f7ff fb15 	bl	800355c <HAL_RCC_GetSysClockFreq>
 8003f32:	61b8      	str	r0, [r7, #24]
        break;
 8003f34:	e008      	b.n	8003f48 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f3a:	61bb      	str	r3, [r7, #24]
        break;
 8003f3c:	e004      	b.n	8003f48 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	77bb      	strb	r3, [r7, #30]
        break;
 8003f46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 8086 	beq.w	800405c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	005a      	lsls	r2, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	441a      	add	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2b0f      	cmp	r3, #15
 8003f6c:	d916      	bls.n	8003f9c <UART_SetConfig+0x2cc>
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f74:	d212      	bcs.n	8003f9c <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f023 030f 	bic.w	r3, r3, #15
 8003f7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	085b      	lsrs	r3, r3, #1
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	89fb      	ldrh	r3, [r7, #14]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	89fa      	ldrh	r2, [r7, #14]
 8003f98:	60da      	str	r2, [r3, #12]
 8003f9a:	e05f      	b.n	800405c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	77bb      	strb	r3, [r7, #30]
 8003fa0:	e05c      	b.n	800405c <UART_SetConfig+0x38c>
 8003fa2:	bf00      	nop
 8003fa4:	efff69f3 	.word	0xefff69f3
 8003fa8:	40013800 	.word	0x40013800
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	40004400 	.word	0x40004400
 8003fb4:	40004800 	.word	0x40004800
 8003fb8:	40004c00 	.word	0x40004c00
 8003fbc:	40005000 	.word	0x40005000
 8003fc0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fc4:	7ffb      	ldrb	r3, [r7, #31]
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d827      	bhi.n	800401a <UART_SetConfig+0x34a>
 8003fca:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <UART_SetConfig+0x300>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	08003ff5 	.word	0x08003ff5
 8003fd4:	08003ffd 	.word	0x08003ffd
 8003fd8:	08004005 	.word	0x08004005
 8003fdc:	0800401b 	.word	0x0800401b
 8003fe0:	0800400b 	.word	0x0800400b
 8003fe4:	0800401b 	.word	0x0800401b
 8003fe8:	0800401b 	.word	0x0800401b
 8003fec:	0800401b 	.word	0x0800401b
 8003ff0:	08004013 	.word	0x08004013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff4:	f7ff fb28 	bl	8003648 <HAL_RCC_GetPCLK1Freq>
 8003ff8:	61b8      	str	r0, [r7, #24]
        break;
 8003ffa:	e013      	b.n	8004024 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ffc:	f7ff fb46 	bl	800368c <HAL_RCC_GetPCLK2Freq>
 8004000:	61b8      	str	r0, [r7, #24]
        break;
 8004002:	e00f      	b.n	8004024 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004004:	4b1b      	ldr	r3, [pc, #108]	; (8004074 <UART_SetConfig+0x3a4>)
 8004006:	61bb      	str	r3, [r7, #24]
        break;
 8004008:	e00c      	b.n	8004024 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800400a:	f7ff faa7 	bl	800355c <HAL_RCC_GetSysClockFreq>
 800400e:	61b8      	str	r0, [r7, #24]
        break;
 8004010:	e008      	b.n	8004024 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004016:	61bb      	str	r3, [r7, #24]
        break;
 8004018:	e004      	b.n	8004024 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	77bb      	strb	r3, [r7, #30]
        break;
 8004022:	bf00      	nop
    }

    if (pclk != 0U)
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d018      	beq.n	800405c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	085a      	lsrs	r2, r3, #1
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	441a      	add	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	fbb2 f3f3 	udiv	r3, r2, r3
 800403c:	b29b      	uxth	r3, r3
 800403e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	2b0f      	cmp	r3, #15
 8004044:	d908      	bls.n	8004058 <UART_SetConfig+0x388>
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404c:	d204      	bcs.n	8004058 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	e001      	b.n	800405c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004068:	7fbb      	ldrb	r3, [r7, #30]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	007a1200 	.word	0x007a1200

08004078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01a      	beq.n	800418e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004176:	d10a      	bne.n	800418e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	605a      	str	r2, [r3, #4]
  }
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041cc:	f7fc fb3e 	bl	800084c <HAL_GetTick>
 80041d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d10e      	bne.n	80041fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f82d 	bl	800424e <UART_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e023      	b.n	8004246 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b04      	cmp	r3, #4
 800420a:	d10e      	bne.n	800422a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800420c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f817 	bl	800424e <UART_WaitOnFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e00d      	b.n	8004246 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2220      	movs	r2, #32
 800422e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	603b      	str	r3, [r7, #0]
 800425a:	4613      	mov	r3, r2
 800425c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800425e:	e05e      	b.n	800431e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004266:	d05a      	beq.n	800431e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004268:	f7fc faf0 	bl	800084c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	429a      	cmp	r2, r3
 8004276:	d302      	bcc.n	800427e <UART_WaitOnFlagUntilTimeout+0x30>
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d11b      	bne.n	80042b6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800428c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0201 	bic.w	r2, r2, #1
 800429c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2220      	movs	r2, #32
 80042a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e043      	b.n	800433e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d02c      	beq.n	800431e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d2:	d124      	bne.n	800431e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0201 	bic.w	r2, r2, #1
 80042fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e00f      	b.n	800433e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69da      	ldr	r2, [r3, #28]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4013      	ands	r3, r2
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	429a      	cmp	r2, r3
 800432c:	bf0c      	ite	eq
 800432e:	2301      	moveq	r3, #1
 8004330:	2300      	movne	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	429a      	cmp	r2, r3
 800433a:	d091      	beq.n	8004260 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <__errno>:
 8004348:	4b01      	ldr	r3, [pc, #4]	; (8004350 <__errno+0x8>)
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	2000000c 	.word	0x2000000c

08004354 <__libc_init_array>:
 8004354:	b570      	push	{r4, r5, r6, lr}
 8004356:	4e0d      	ldr	r6, [pc, #52]	; (800438c <__libc_init_array+0x38>)
 8004358:	4c0d      	ldr	r4, [pc, #52]	; (8004390 <__libc_init_array+0x3c>)
 800435a:	1ba4      	subs	r4, r4, r6
 800435c:	10a4      	asrs	r4, r4, #2
 800435e:	2500      	movs	r5, #0
 8004360:	42a5      	cmp	r5, r4
 8004362:	d109      	bne.n	8004378 <__libc_init_array+0x24>
 8004364:	4e0b      	ldr	r6, [pc, #44]	; (8004394 <__libc_init_array+0x40>)
 8004366:	4c0c      	ldr	r4, [pc, #48]	; (8004398 <__libc_init_array+0x44>)
 8004368:	f000 fc26 	bl	8004bb8 <_init>
 800436c:	1ba4      	subs	r4, r4, r6
 800436e:	10a4      	asrs	r4, r4, #2
 8004370:	2500      	movs	r5, #0
 8004372:	42a5      	cmp	r5, r4
 8004374:	d105      	bne.n	8004382 <__libc_init_array+0x2e>
 8004376:	bd70      	pop	{r4, r5, r6, pc}
 8004378:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800437c:	4798      	blx	r3
 800437e:	3501      	adds	r5, #1
 8004380:	e7ee      	b.n	8004360 <__libc_init_array+0xc>
 8004382:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004386:	4798      	blx	r3
 8004388:	3501      	adds	r5, #1
 800438a:	e7f2      	b.n	8004372 <__libc_init_array+0x1e>
 800438c:	08004c40 	.word	0x08004c40
 8004390:	08004c40 	.word	0x08004c40
 8004394:	08004c40 	.word	0x08004c40
 8004398:	08004c44 	.word	0x08004c44

0800439c <memset>:
 800439c:	4402      	add	r2, r0
 800439e:	4603      	mov	r3, r0
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d100      	bne.n	80043a6 <memset+0xa>
 80043a4:	4770      	bx	lr
 80043a6:	f803 1b01 	strb.w	r1, [r3], #1
 80043aa:	e7f9      	b.n	80043a0 <memset+0x4>

080043ac <siprintf>:
 80043ac:	b40e      	push	{r1, r2, r3}
 80043ae:	b500      	push	{lr}
 80043b0:	b09c      	sub	sp, #112	; 0x70
 80043b2:	ab1d      	add	r3, sp, #116	; 0x74
 80043b4:	9002      	str	r0, [sp, #8]
 80043b6:	9006      	str	r0, [sp, #24]
 80043b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043bc:	4809      	ldr	r0, [pc, #36]	; (80043e4 <siprintf+0x38>)
 80043be:	9107      	str	r1, [sp, #28]
 80043c0:	9104      	str	r1, [sp, #16]
 80043c2:	4909      	ldr	r1, [pc, #36]	; (80043e8 <siprintf+0x3c>)
 80043c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80043c8:	9105      	str	r1, [sp, #20]
 80043ca:	6800      	ldr	r0, [r0, #0]
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	a902      	add	r1, sp, #8
 80043d0:	f000 f866 	bl	80044a0 <_svfiprintf_r>
 80043d4:	9b02      	ldr	r3, [sp, #8]
 80043d6:	2200      	movs	r2, #0
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	b01c      	add	sp, #112	; 0x70
 80043dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80043e0:	b003      	add	sp, #12
 80043e2:	4770      	bx	lr
 80043e4:	2000000c 	.word	0x2000000c
 80043e8:	ffff0208 	.word	0xffff0208

080043ec <__ssputs_r>:
 80043ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f0:	688e      	ldr	r6, [r1, #8]
 80043f2:	429e      	cmp	r6, r3
 80043f4:	4682      	mov	sl, r0
 80043f6:	460c      	mov	r4, r1
 80043f8:	4690      	mov	r8, r2
 80043fa:	4699      	mov	r9, r3
 80043fc:	d837      	bhi.n	800446e <__ssputs_r+0x82>
 80043fe:	898a      	ldrh	r2, [r1, #12]
 8004400:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004404:	d031      	beq.n	800446a <__ssputs_r+0x7e>
 8004406:	6825      	ldr	r5, [r4, #0]
 8004408:	6909      	ldr	r1, [r1, #16]
 800440a:	1a6f      	subs	r7, r5, r1
 800440c:	6965      	ldr	r5, [r4, #20]
 800440e:	2302      	movs	r3, #2
 8004410:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004414:	fb95 f5f3 	sdiv	r5, r5, r3
 8004418:	f109 0301 	add.w	r3, r9, #1
 800441c:	443b      	add	r3, r7
 800441e:	429d      	cmp	r5, r3
 8004420:	bf38      	it	cc
 8004422:	461d      	movcc	r5, r3
 8004424:	0553      	lsls	r3, r2, #21
 8004426:	d530      	bpl.n	800448a <__ssputs_r+0x9e>
 8004428:	4629      	mov	r1, r5
 800442a:	f000 fb2b 	bl	8004a84 <_malloc_r>
 800442e:	4606      	mov	r6, r0
 8004430:	b950      	cbnz	r0, 8004448 <__ssputs_r+0x5c>
 8004432:	230c      	movs	r3, #12
 8004434:	f8ca 3000 	str.w	r3, [sl]
 8004438:	89a3      	ldrh	r3, [r4, #12]
 800443a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800443e:	81a3      	strh	r3, [r4, #12]
 8004440:	f04f 30ff 	mov.w	r0, #4294967295
 8004444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004448:	463a      	mov	r2, r7
 800444a:	6921      	ldr	r1, [r4, #16]
 800444c:	f000 faa8 	bl	80049a0 <memcpy>
 8004450:	89a3      	ldrh	r3, [r4, #12]
 8004452:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445a:	81a3      	strh	r3, [r4, #12]
 800445c:	6126      	str	r6, [r4, #16]
 800445e:	6165      	str	r5, [r4, #20]
 8004460:	443e      	add	r6, r7
 8004462:	1bed      	subs	r5, r5, r7
 8004464:	6026      	str	r6, [r4, #0]
 8004466:	60a5      	str	r5, [r4, #8]
 8004468:	464e      	mov	r6, r9
 800446a:	454e      	cmp	r6, r9
 800446c:	d900      	bls.n	8004470 <__ssputs_r+0x84>
 800446e:	464e      	mov	r6, r9
 8004470:	4632      	mov	r2, r6
 8004472:	4641      	mov	r1, r8
 8004474:	6820      	ldr	r0, [r4, #0]
 8004476:	f000 fa9e 	bl	80049b6 <memmove>
 800447a:	68a3      	ldr	r3, [r4, #8]
 800447c:	1b9b      	subs	r3, r3, r6
 800447e:	60a3      	str	r3, [r4, #8]
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	441e      	add	r6, r3
 8004484:	6026      	str	r6, [r4, #0]
 8004486:	2000      	movs	r0, #0
 8004488:	e7dc      	b.n	8004444 <__ssputs_r+0x58>
 800448a:	462a      	mov	r2, r5
 800448c:	f000 fb54 	bl	8004b38 <_realloc_r>
 8004490:	4606      	mov	r6, r0
 8004492:	2800      	cmp	r0, #0
 8004494:	d1e2      	bne.n	800445c <__ssputs_r+0x70>
 8004496:	6921      	ldr	r1, [r4, #16]
 8004498:	4650      	mov	r0, sl
 800449a:	f000 faa5 	bl	80049e8 <_free_r>
 800449e:	e7c8      	b.n	8004432 <__ssputs_r+0x46>

080044a0 <_svfiprintf_r>:
 80044a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a4:	461d      	mov	r5, r3
 80044a6:	898b      	ldrh	r3, [r1, #12]
 80044a8:	061f      	lsls	r7, r3, #24
 80044aa:	b09d      	sub	sp, #116	; 0x74
 80044ac:	4680      	mov	r8, r0
 80044ae:	460c      	mov	r4, r1
 80044b0:	4616      	mov	r6, r2
 80044b2:	d50f      	bpl.n	80044d4 <_svfiprintf_r+0x34>
 80044b4:	690b      	ldr	r3, [r1, #16]
 80044b6:	b96b      	cbnz	r3, 80044d4 <_svfiprintf_r+0x34>
 80044b8:	2140      	movs	r1, #64	; 0x40
 80044ba:	f000 fae3 	bl	8004a84 <_malloc_r>
 80044be:	6020      	str	r0, [r4, #0]
 80044c0:	6120      	str	r0, [r4, #16]
 80044c2:	b928      	cbnz	r0, 80044d0 <_svfiprintf_r+0x30>
 80044c4:	230c      	movs	r3, #12
 80044c6:	f8c8 3000 	str.w	r3, [r8]
 80044ca:	f04f 30ff 	mov.w	r0, #4294967295
 80044ce:	e0c8      	b.n	8004662 <_svfiprintf_r+0x1c2>
 80044d0:	2340      	movs	r3, #64	; 0x40
 80044d2:	6163      	str	r3, [r4, #20]
 80044d4:	2300      	movs	r3, #0
 80044d6:	9309      	str	r3, [sp, #36]	; 0x24
 80044d8:	2320      	movs	r3, #32
 80044da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044de:	2330      	movs	r3, #48	; 0x30
 80044e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044e4:	9503      	str	r5, [sp, #12]
 80044e6:	f04f 0b01 	mov.w	fp, #1
 80044ea:	4637      	mov	r7, r6
 80044ec:	463d      	mov	r5, r7
 80044ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80044f2:	b10b      	cbz	r3, 80044f8 <_svfiprintf_r+0x58>
 80044f4:	2b25      	cmp	r3, #37	; 0x25
 80044f6:	d13e      	bne.n	8004576 <_svfiprintf_r+0xd6>
 80044f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80044fc:	d00b      	beq.n	8004516 <_svfiprintf_r+0x76>
 80044fe:	4653      	mov	r3, sl
 8004500:	4632      	mov	r2, r6
 8004502:	4621      	mov	r1, r4
 8004504:	4640      	mov	r0, r8
 8004506:	f7ff ff71 	bl	80043ec <__ssputs_r>
 800450a:	3001      	adds	r0, #1
 800450c:	f000 80a4 	beq.w	8004658 <_svfiprintf_r+0x1b8>
 8004510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004512:	4453      	add	r3, sl
 8004514:	9309      	str	r3, [sp, #36]	; 0x24
 8004516:	783b      	ldrb	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 809d 	beq.w	8004658 <_svfiprintf_r+0x1b8>
 800451e:	2300      	movs	r3, #0
 8004520:	f04f 32ff 	mov.w	r2, #4294967295
 8004524:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004528:	9304      	str	r3, [sp, #16]
 800452a:	9307      	str	r3, [sp, #28]
 800452c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004530:	931a      	str	r3, [sp, #104]	; 0x68
 8004532:	462f      	mov	r7, r5
 8004534:	2205      	movs	r2, #5
 8004536:	f817 1b01 	ldrb.w	r1, [r7], #1
 800453a:	4850      	ldr	r0, [pc, #320]	; (800467c <_svfiprintf_r+0x1dc>)
 800453c:	f7fb fe50 	bl	80001e0 <memchr>
 8004540:	9b04      	ldr	r3, [sp, #16]
 8004542:	b9d0      	cbnz	r0, 800457a <_svfiprintf_r+0xda>
 8004544:	06d9      	lsls	r1, r3, #27
 8004546:	bf44      	itt	mi
 8004548:	2220      	movmi	r2, #32
 800454a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800454e:	071a      	lsls	r2, r3, #28
 8004550:	bf44      	itt	mi
 8004552:	222b      	movmi	r2, #43	; 0x2b
 8004554:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004558:	782a      	ldrb	r2, [r5, #0]
 800455a:	2a2a      	cmp	r2, #42	; 0x2a
 800455c:	d015      	beq.n	800458a <_svfiprintf_r+0xea>
 800455e:	9a07      	ldr	r2, [sp, #28]
 8004560:	462f      	mov	r7, r5
 8004562:	2000      	movs	r0, #0
 8004564:	250a      	movs	r5, #10
 8004566:	4639      	mov	r1, r7
 8004568:	f811 3b01 	ldrb.w	r3, [r1], #1
 800456c:	3b30      	subs	r3, #48	; 0x30
 800456e:	2b09      	cmp	r3, #9
 8004570:	d94d      	bls.n	800460e <_svfiprintf_r+0x16e>
 8004572:	b1b8      	cbz	r0, 80045a4 <_svfiprintf_r+0x104>
 8004574:	e00f      	b.n	8004596 <_svfiprintf_r+0xf6>
 8004576:	462f      	mov	r7, r5
 8004578:	e7b8      	b.n	80044ec <_svfiprintf_r+0x4c>
 800457a:	4a40      	ldr	r2, [pc, #256]	; (800467c <_svfiprintf_r+0x1dc>)
 800457c:	1a80      	subs	r0, r0, r2
 800457e:	fa0b f000 	lsl.w	r0, fp, r0
 8004582:	4318      	orrs	r0, r3
 8004584:	9004      	str	r0, [sp, #16]
 8004586:	463d      	mov	r5, r7
 8004588:	e7d3      	b.n	8004532 <_svfiprintf_r+0x92>
 800458a:	9a03      	ldr	r2, [sp, #12]
 800458c:	1d11      	adds	r1, r2, #4
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	9103      	str	r1, [sp, #12]
 8004592:	2a00      	cmp	r2, #0
 8004594:	db01      	blt.n	800459a <_svfiprintf_r+0xfa>
 8004596:	9207      	str	r2, [sp, #28]
 8004598:	e004      	b.n	80045a4 <_svfiprintf_r+0x104>
 800459a:	4252      	negs	r2, r2
 800459c:	f043 0302 	orr.w	r3, r3, #2
 80045a0:	9207      	str	r2, [sp, #28]
 80045a2:	9304      	str	r3, [sp, #16]
 80045a4:	783b      	ldrb	r3, [r7, #0]
 80045a6:	2b2e      	cmp	r3, #46	; 0x2e
 80045a8:	d10c      	bne.n	80045c4 <_svfiprintf_r+0x124>
 80045aa:	787b      	ldrb	r3, [r7, #1]
 80045ac:	2b2a      	cmp	r3, #42	; 0x2a
 80045ae:	d133      	bne.n	8004618 <_svfiprintf_r+0x178>
 80045b0:	9b03      	ldr	r3, [sp, #12]
 80045b2:	1d1a      	adds	r2, r3, #4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	9203      	str	r2, [sp, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bfb8      	it	lt
 80045bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80045c0:	3702      	adds	r7, #2
 80045c2:	9305      	str	r3, [sp, #20]
 80045c4:	4d2e      	ldr	r5, [pc, #184]	; (8004680 <_svfiprintf_r+0x1e0>)
 80045c6:	7839      	ldrb	r1, [r7, #0]
 80045c8:	2203      	movs	r2, #3
 80045ca:	4628      	mov	r0, r5
 80045cc:	f7fb fe08 	bl	80001e0 <memchr>
 80045d0:	b138      	cbz	r0, 80045e2 <_svfiprintf_r+0x142>
 80045d2:	2340      	movs	r3, #64	; 0x40
 80045d4:	1b40      	subs	r0, r0, r5
 80045d6:	fa03 f000 	lsl.w	r0, r3, r0
 80045da:	9b04      	ldr	r3, [sp, #16]
 80045dc:	4303      	orrs	r3, r0
 80045de:	3701      	adds	r7, #1
 80045e0:	9304      	str	r3, [sp, #16]
 80045e2:	7839      	ldrb	r1, [r7, #0]
 80045e4:	4827      	ldr	r0, [pc, #156]	; (8004684 <_svfiprintf_r+0x1e4>)
 80045e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045ea:	2206      	movs	r2, #6
 80045ec:	1c7e      	adds	r6, r7, #1
 80045ee:	f7fb fdf7 	bl	80001e0 <memchr>
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d038      	beq.n	8004668 <_svfiprintf_r+0x1c8>
 80045f6:	4b24      	ldr	r3, [pc, #144]	; (8004688 <_svfiprintf_r+0x1e8>)
 80045f8:	bb13      	cbnz	r3, 8004640 <_svfiprintf_r+0x1a0>
 80045fa:	9b03      	ldr	r3, [sp, #12]
 80045fc:	3307      	adds	r3, #7
 80045fe:	f023 0307 	bic.w	r3, r3, #7
 8004602:	3308      	adds	r3, #8
 8004604:	9303      	str	r3, [sp, #12]
 8004606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004608:	444b      	add	r3, r9
 800460a:	9309      	str	r3, [sp, #36]	; 0x24
 800460c:	e76d      	b.n	80044ea <_svfiprintf_r+0x4a>
 800460e:	fb05 3202 	mla	r2, r5, r2, r3
 8004612:	2001      	movs	r0, #1
 8004614:	460f      	mov	r7, r1
 8004616:	e7a6      	b.n	8004566 <_svfiprintf_r+0xc6>
 8004618:	2300      	movs	r3, #0
 800461a:	3701      	adds	r7, #1
 800461c:	9305      	str	r3, [sp, #20]
 800461e:	4619      	mov	r1, r3
 8004620:	250a      	movs	r5, #10
 8004622:	4638      	mov	r0, r7
 8004624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004628:	3a30      	subs	r2, #48	; 0x30
 800462a:	2a09      	cmp	r2, #9
 800462c:	d903      	bls.n	8004636 <_svfiprintf_r+0x196>
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0c8      	beq.n	80045c4 <_svfiprintf_r+0x124>
 8004632:	9105      	str	r1, [sp, #20]
 8004634:	e7c6      	b.n	80045c4 <_svfiprintf_r+0x124>
 8004636:	fb05 2101 	mla	r1, r5, r1, r2
 800463a:	2301      	movs	r3, #1
 800463c:	4607      	mov	r7, r0
 800463e:	e7f0      	b.n	8004622 <_svfiprintf_r+0x182>
 8004640:	ab03      	add	r3, sp, #12
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	4622      	mov	r2, r4
 8004646:	4b11      	ldr	r3, [pc, #68]	; (800468c <_svfiprintf_r+0x1ec>)
 8004648:	a904      	add	r1, sp, #16
 800464a:	4640      	mov	r0, r8
 800464c:	f3af 8000 	nop.w
 8004650:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004654:	4681      	mov	r9, r0
 8004656:	d1d6      	bne.n	8004606 <_svfiprintf_r+0x166>
 8004658:	89a3      	ldrh	r3, [r4, #12]
 800465a:	065b      	lsls	r3, r3, #25
 800465c:	f53f af35 	bmi.w	80044ca <_svfiprintf_r+0x2a>
 8004660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004662:	b01d      	add	sp, #116	; 0x74
 8004664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004668:	ab03      	add	r3, sp, #12
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	4622      	mov	r2, r4
 800466e:	4b07      	ldr	r3, [pc, #28]	; (800468c <_svfiprintf_r+0x1ec>)
 8004670:	a904      	add	r1, sp, #16
 8004672:	4640      	mov	r0, r8
 8004674:	f000 f882 	bl	800477c <_printf_i>
 8004678:	e7ea      	b.n	8004650 <_svfiprintf_r+0x1b0>
 800467a:	bf00      	nop
 800467c:	08004c0c 	.word	0x08004c0c
 8004680:	08004c12 	.word	0x08004c12
 8004684:	08004c16 	.word	0x08004c16
 8004688:	00000000 	.word	0x00000000
 800468c:	080043ed 	.word	0x080043ed

08004690 <_printf_common>:
 8004690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004694:	4691      	mov	r9, r2
 8004696:	461f      	mov	r7, r3
 8004698:	688a      	ldr	r2, [r1, #8]
 800469a:	690b      	ldr	r3, [r1, #16]
 800469c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046a0:	4293      	cmp	r3, r2
 80046a2:	bfb8      	it	lt
 80046a4:	4613      	movlt	r3, r2
 80046a6:	f8c9 3000 	str.w	r3, [r9]
 80046aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046ae:	4606      	mov	r6, r0
 80046b0:	460c      	mov	r4, r1
 80046b2:	b112      	cbz	r2, 80046ba <_printf_common+0x2a>
 80046b4:	3301      	adds	r3, #1
 80046b6:	f8c9 3000 	str.w	r3, [r9]
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	0699      	lsls	r1, r3, #26
 80046be:	bf42      	ittt	mi
 80046c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80046c4:	3302      	addmi	r3, #2
 80046c6:	f8c9 3000 	strmi.w	r3, [r9]
 80046ca:	6825      	ldr	r5, [r4, #0]
 80046cc:	f015 0506 	ands.w	r5, r5, #6
 80046d0:	d107      	bne.n	80046e2 <_printf_common+0x52>
 80046d2:	f104 0a19 	add.w	sl, r4, #25
 80046d6:	68e3      	ldr	r3, [r4, #12]
 80046d8:	f8d9 2000 	ldr.w	r2, [r9]
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	42ab      	cmp	r3, r5
 80046e0:	dc28      	bgt.n	8004734 <_printf_common+0xa4>
 80046e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80046e6:	6822      	ldr	r2, [r4, #0]
 80046e8:	3300      	adds	r3, #0
 80046ea:	bf18      	it	ne
 80046ec:	2301      	movne	r3, #1
 80046ee:	0692      	lsls	r2, r2, #26
 80046f0:	d42d      	bmi.n	800474e <_printf_common+0xbe>
 80046f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046f6:	4639      	mov	r1, r7
 80046f8:	4630      	mov	r0, r6
 80046fa:	47c0      	blx	r8
 80046fc:	3001      	adds	r0, #1
 80046fe:	d020      	beq.n	8004742 <_printf_common+0xb2>
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	68e5      	ldr	r5, [r4, #12]
 8004704:	f8d9 2000 	ldr.w	r2, [r9]
 8004708:	f003 0306 	and.w	r3, r3, #6
 800470c:	2b04      	cmp	r3, #4
 800470e:	bf08      	it	eq
 8004710:	1aad      	subeq	r5, r5, r2
 8004712:	68a3      	ldr	r3, [r4, #8]
 8004714:	6922      	ldr	r2, [r4, #16]
 8004716:	bf0c      	ite	eq
 8004718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800471c:	2500      	movne	r5, #0
 800471e:	4293      	cmp	r3, r2
 8004720:	bfc4      	itt	gt
 8004722:	1a9b      	subgt	r3, r3, r2
 8004724:	18ed      	addgt	r5, r5, r3
 8004726:	f04f 0900 	mov.w	r9, #0
 800472a:	341a      	adds	r4, #26
 800472c:	454d      	cmp	r5, r9
 800472e:	d11a      	bne.n	8004766 <_printf_common+0xd6>
 8004730:	2000      	movs	r0, #0
 8004732:	e008      	b.n	8004746 <_printf_common+0xb6>
 8004734:	2301      	movs	r3, #1
 8004736:	4652      	mov	r2, sl
 8004738:	4639      	mov	r1, r7
 800473a:	4630      	mov	r0, r6
 800473c:	47c0      	blx	r8
 800473e:	3001      	adds	r0, #1
 8004740:	d103      	bne.n	800474a <_printf_common+0xba>
 8004742:	f04f 30ff 	mov.w	r0, #4294967295
 8004746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800474a:	3501      	adds	r5, #1
 800474c:	e7c3      	b.n	80046d6 <_printf_common+0x46>
 800474e:	18e1      	adds	r1, r4, r3
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	2030      	movs	r0, #48	; 0x30
 8004754:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004758:	4422      	add	r2, r4
 800475a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800475e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004762:	3302      	adds	r3, #2
 8004764:	e7c5      	b.n	80046f2 <_printf_common+0x62>
 8004766:	2301      	movs	r3, #1
 8004768:	4622      	mov	r2, r4
 800476a:	4639      	mov	r1, r7
 800476c:	4630      	mov	r0, r6
 800476e:	47c0      	blx	r8
 8004770:	3001      	adds	r0, #1
 8004772:	d0e6      	beq.n	8004742 <_printf_common+0xb2>
 8004774:	f109 0901 	add.w	r9, r9, #1
 8004778:	e7d8      	b.n	800472c <_printf_common+0x9c>
	...

0800477c <_printf_i>:
 800477c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004780:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004784:	460c      	mov	r4, r1
 8004786:	7e09      	ldrb	r1, [r1, #24]
 8004788:	b085      	sub	sp, #20
 800478a:	296e      	cmp	r1, #110	; 0x6e
 800478c:	4617      	mov	r7, r2
 800478e:	4606      	mov	r6, r0
 8004790:	4698      	mov	r8, r3
 8004792:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004794:	f000 80b3 	beq.w	80048fe <_printf_i+0x182>
 8004798:	d822      	bhi.n	80047e0 <_printf_i+0x64>
 800479a:	2963      	cmp	r1, #99	; 0x63
 800479c:	d036      	beq.n	800480c <_printf_i+0x90>
 800479e:	d80a      	bhi.n	80047b6 <_printf_i+0x3a>
 80047a0:	2900      	cmp	r1, #0
 80047a2:	f000 80b9 	beq.w	8004918 <_printf_i+0x19c>
 80047a6:	2958      	cmp	r1, #88	; 0x58
 80047a8:	f000 8083 	beq.w	80048b2 <_printf_i+0x136>
 80047ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80047b4:	e032      	b.n	800481c <_printf_i+0xa0>
 80047b6:	2964      	cmp	r1, #100	; 0x64
 80047b8:	d001      	beq.n	80047be <_printf_i+0x42>
 80047ba:	2969      	cmp	r1, #105	; 0x69
 80047bc:	d1f6      	bne.n	80047ac <_printf_i+0x30>
 80047be:	6820      	ldr	r0, [r4, #0]
 80047c0:	6813      	ldr	r3, [r2, #0]
 80047c2:	0605      	lsls	r5, r0, #24
 80047c4:	f103 0104 	add.w	r1, r3, #4
 80047c8:	d52a      	bpl.n	8004820 <_printf_i+0xa4>
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6011      	str	r1, [r2, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	da03      	bge.n	80047da <_printf_i+0x5e>
 80047d2:	222d      	movs	r2, #45	; 0x2d
 80047d4:	425b      	negs	r3, r3
 80047d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80047da:	486f      	ldr	r0, [pc, #444]	; (8004998 <_printf_i+0x21c>)
 80047dc:	220a      	movs	r2, #10
 80047de:	e039      	b.n	8004854 <_printf_i+0xd8>
 80047e0:	2973      	cmp	r1, #115	; 0x73
 80047e2:	f000 809d 	beq.w	8004920 <_printf_i+0x1a4>
 80047e6:	d808      	bhi.n	80047fa <_printf_i+0x7e>
 80047e8:	296f      	cmp	r1, #111	; 0x6f
 80047ea:	d020      	beq.n	800482e <_printf_i+0xb2>
 80047ec:	2970      	cmp	r1, #112	; 0x70
 80047ee:	d1dd      	bne.n	80047ac <_printf_i+0x30>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	f043 0320 	orr.w	r3, r3, #32
 80047f6:	6023      	str	r3, [r4, #0]
 80047f8:	e003      	b.n	8004802 <_printf_i+0x86>
 80047fa:	2975      	cmp	r1, #117	; 0x75
 80047fc:	d017      	beq.n	800482e <_printf_i+0xb2>
 80047fe:	2978      	cmp	r1, #120	; 0x78
 8004800:	d1d4      	bne.n	80047ac <_printf_i+0x30>
 8004802:	2378      	movs	r3, #120	; 0x78
 8004804:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004808:	4864      	ldr	r0, [pc, #400]	; (800499c <_printf_i+0x220>)
 800480a:	e055      	b.n	80048b8 <_printf_i+0x13c>
 800480c:	6813      	ldr	r3, [r2, #0]
 800480e:	1d19      	adds	r1, r3, #4
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6011      	str	r1, [r2, #0]
 8004814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800481c:	2301      	movs	r3, #1
 800481e:	e08c      	b.n	800493a <_printf_i+0x1be>
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6011      	str	r1, [r2, #0]
 8004824:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004828:	bf18      	it	ne
 800482a:	b21b      	sxthne	r3, r3
 800482c:	e7cf      	b.n	80047ce <_printf_i+0x52>
 800482e:	6813      	ldr	r3, [r2, #0]
 8004830:	6825      	ldr	r5, [r4, #0]
 8004832:	1d18      	adds	r0, r3, #4
 8004834:	6010      	str	r0, [r2, #0]
 8004836:	0628      	lsls	r0, r5, #24
 8004838:	d501      	bpl.n	800483e <_printf_i+0xc2>
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	e002      	b.n	8004844 <_printf_i+0xc8>
 800483e:	0668      	lsls	r0, r5, #25
 8004840:	d5fb      	bpl.n	800483a <_printf_i+0xbe>
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	4854      	ldr	r0, [pc, #336]	; (8004998 <_printf_i+0x21c>)
 8004846:	296f      	cmp	r1, #111	; 0x6f
 8004848:	bf14      	ite	ne
 800484a:	220a      	movne	r2, #10
 800484c:	2208      	moveq	r2, #8
 800484e:	2100      	movs	r1, #0
 8004850:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004854:	6865      	ldr	r5, [r4, #4]
 8004856:	60a5      	str	r5, [r4, #8]
 8004858:	2d00      	cmp	r5, #0
 800485a:	f2c0 8095 	blt.w	8004988 <_printf_i+0x20c>
 800485e:	6821      	ldr	r1, [r4, #0]
 8004860:	f021 0104 	bic.w	r1, r1, #4
 8004864:	6021      	str	r1, [r4, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d13d      	bne.n	80048e6 <_printf_i+0x16a>
 800486a:	2d00      	cmp	r5, #0
 800486c:	f040 808e 	bne.w	800498c <_printf_i+0x210>
 8004870:	4665      	mov	r5, ip
 8004872:	2a08      	cmp	r2, #8
 8004874:	d10b      	bne.n	800488e <_printf_i+0x112>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	07db      	lsls	r3, r3, #31
 800487a:	d508      	bpl.n	800488e <_printf_i+0x112>
 800487c:	6923      	ldr	r3, [r4, #16]
 800487e:	6862      	ldr	r2, [r4, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	bfde      	ittt	le
 8004884:	2330      	movle	r3, #48	; 0x30
 8004886:	f805 3c01 	strble.w	r3, [r5, #-1]
 800488a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800488e:	ebac 0305 	sub.w	r3, ip, r5
 8004892:	6123      	str	r3, [r4, #16]
 8004894:	f8cd 8000 	str.w	r8, [sp]
 8004898:	463b      	mov	r3, r7
 800489a:	aa03      	add	r2, sp, #12
 800489c:	4621      	mov	r1, r4
 800489e:	4630      	mov	r0, r6
 80048a0:	f7ff fef6 	bl	8004690 <_printf_common>
 80048a4:	3001      	adds	r0, #1
 80048a6:	d14d      	bne.n	8004944 <_printf_i+0x1c8>
 80048a8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ac:	b005      	add	sp, #20
 80048ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048b2:	4839      	ldr	r0, [pc, #228]	; (8004998 <_printf_i+0x21c>)
 80048b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80048b8:	6813      	ldr	r3, [r2, #0]
 80048ba:	6821      	ldr	r1, [r4, #0]
 80048bc:	1d1d      	adds	r5, r3, #4
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6015      	str	r5, [r2, #0]
 80048c2:	060a      	lsls	r2, r1, #24
 80048c4:	d50b      	bpl.n	80048de <_printf_i+0x162>
 80048c6:	07ca      	lsls	r2, r1, #31
 80048c8:	bf44      	itt	mi
 80048ca:	f041 0120 	orrmi.w	r1, r1, #32
 80048ce:	6021      	strmi	r1, [r4, #0]
 80048d0:	b91b      	cbnz	r3, 80048da <_printf_i+0x15e>
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	f022 0220 	bic.w	r2, r2, #32
 80048d8:	6022      	str	r2, [r4, #0]
 80048da:	2210      	movs	r2, #16
 80048dc:	e7b7      	b.n	800484e <_printf_i+0xd2>
 80048de:	064d      	lsls	r5, r1, #25
 80048e0:	bf48      	it	mi
 80048e2:	b29b      	uxthmi	r3, r3
 80048e4:	e7ef      	b.n	80048c6 <_printf_i+0x14a>
 80048e6:	4665      	mov	r5, ip
 80048e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80048ec:	fb02 3311 	mls	r3, r2, r1, r3
 80048f0:	5cc3      	ldrb	r3, [r0, r3]
 80048f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80048f6:	460b      	mov	r3, r1
 80048f8:	2900      	cmp	r1, #0
 80048fa:	d1f5      	bne.n	80048e8 <_printf_i+0x16c>
 80048fc:	e7b9      	b.n	8004872 <_printf_i+0xf6>
 80048fe:	6813      	ldr	r3, [r2, #0]
 8004900:	6825      	ldr	r5, [r4, #0]
 8004902:	6961      	ldr	r1, [r4, #20]
 8004904:	1d18      	adds	r0, r3, #4
 8004906:	6010      	str	r0, [r2, #0]
 8004908:	0628      	lsls	r0, r5, #24
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	d501      	bpl.n	8004912 <_printf_i+0x196>
 800490e:	6019      	str	r1, [r3, #0]
 8004910:	e002      	b.n	8004918 <_printf_i+0x19c>
 8004912:	066a      	lsls	r2, r5, #25
 8004914:	d5fb      	bpl.n	800490e <_printf_i+0x192>
 8004916:	8019      	strh	r1, [r3, #0]
 8004918:	2300      	movs	r3, #0
 800491a:	6123      	str	r3, [r4, #16]
 800491c:	4665      	mov	r5, ip
 800491e:	e7b9      	b.n	8004894 <_printf_i+0x118>
 8004920:	6813      	ldr	r3, [r2, #0]
 8004922:	1d19      	adds	r1, r3, #4
 8004924:	6011      	str	r1, [r2, #0]
 8004926:	681d      	ldr	r5, [r3, #0]
 8004928:	6862      	ldr	r2, [r4, #4]
 800492a:	2100      	movs	r1, #0
 800492c:	4628      	mov	r0, r5
 800492e:	f7fb fc57 	bl	80001e0 <memchr>
 8004932:	b108      	cbz	r0, 8004938 <_printf_i+0x1bc>
 8004934:	1b40      	subs	r0, r0, r5
 8004936:	6060      	str	r0, [r4, #4]
 8004938:	6863      	ldr	r3, [r4, #4]
 800493a:	6123      	str	r3, [r4, #16]
 800493c:	2300      	movs	r3, #0
 800493e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004942:	e7a7      	b.n	8004894 <_printf_i+0x118>
 8004944:	6923      	ldr	r3, [r4, #16]
 8004946:	462a      	mov	r2, r5
 8004948:	4639      	mov	r1, r7
 800494a:	4630      	mov	r0, r6
 800494c:	47c0      	blx	r8
 800494e:	3001      	adds	r0, #1
 8004950:	d0aa      	beq.n	80048a8 <_printf_i+0x12c>
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	079b      	lsls	r3, r3, #30
 8004956:	d413      	bmi.n	8004980 <_printf_i+0x204>
 8004958:	68e0      	ldr	r0, [r4, #12]
 800495a:	9b03      	ldr	r3, [sp, #12]
 800495c:	4298      	cmp	r0, r3
 800495e:	bfb8      	it	lt
 8004960:	4618      	movlt	r0, r3
 8004962:	e7a3      	b.n	80048ac <_printf_i+0x130>
 8004964:	2301      	movs	r3, #1
 8004966:	464a      	mov	r2, r9
 8004968:	4639      	mov	r1, r7
 800496a:	4630      	mov	r0, r6
 800496c:	47c0      	blx	r8
 800496e:	3001      	adds	r0, #1
 8004970:	d09a      	beq.n	80048a8 <_printf_i+0x12c>
 8004972:	3501      	adds	r5, #1
 8004974:	68e3      	ldr	r3, [r4, #12]
 8004976:	9a03      	ldr	r2, [sp, #12]
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	42ab      	cmp	r3, r5
 800497c:	dcf2      	bgt.n	8004964 <_printf_i+0x1e8>
 800497e:	e7eb      	b.n	8004958 <_printf_i+0x1dc>
 8004980:	2500      	movs	r5, #0
 8004982:	f104 0919 	add.w	r9, r4, #25
 8004986:	e7f5      	b.n	8004974 <_printf_i+0x1f8>
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1ac      	bne.n	80048e6 <_printf_i+0x16a>
 800498c:	7803      	ldrb	r3, [r0, #0]
 800498e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004992:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004996:	e76c      	b.n	8004872 <_printf_i+0xf6>
 8004998:	08004c1d 	.word	0x08004c1d
 800499c:	08004c2e 	.word	0x08004c2e

080049a0 <memcpy>:
 80049a0:	b510      	push	{r4, lr}
 80049a2:	1e43      	subs	r3, r0, #1
 80049a4:	440a      	add	r2, r1
 80049a6:	4291      	cmp	r1, r2
 80049a8:	d100      	bne.n	80049ac <memcpy+0xc>
 80049aa:	bd10      	pop	{r4, pc}
 80049ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049b4:	e7f7      	b.n	80049a6 <memcpy+0x6>

080049b6 <memmove>:
 80049b6:	4288      	cmp	r0, r1
 80049b8:	b510      	push	{r4, lr}
 80049ba:	eb01 0302 	add.w	r3, r1, r2
 80049be:	d807      	bhi.n	80049d0 <memmove+0x1a>
 80049c0:	1e42      	subs	r2, r0, #1
 80049c2:	4299      	cmp	r1, r3
 80049c4:	d00a      	beq.n	80049dc <memmove+0x26>
 80049c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 80049ce:	e7f8      	b.n	80049c2 <memmove+0xc>
 80049d0:	4283      	cmp	r3, r0
 80049d2:	d9f5      	bls.n	80049c0 <memmove+0xa>
 80049d4:	1881      	adds	r1, r0, r2
 80049d6:	1ad2      	subs	r2, r2, r3
 80049d8:	42d3      	cmn	r3, r2
 80049da:	d100      	bne.n	80049de <memmove+0x28>
 80049dc:	bd10      	pop	{r4, pc}
 80049de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80049e6:	e7f7      	b.n	80049d8 <memmove+0x22>

080049e8 <_free_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	4605      	mov	r5, r0
 80049ec:	2900      	cmp	r1, #0
 80049ee:	d045      	beq.n	8004a7c <_free_r+0x94>
 80049f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049f4:	1f0c      	subs	r4, r1, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	bfb8      	it	lt
 80049fa:	18e4      	addlt	r4, r4, r3
 80049fc:	f000 f8d2 	bl	8004ba4 <__malloc_lock>
 8004a00:	4a1f      	ldr	r2, [pc, #124]	; (8004a80 <_free_r+0x98>)
 8004a02:	6813      	ldr	r3, [r2, #0]
 8004a04:	4610      	mov	r0, r2
 8004a06:	b933      	cbnz	r3, 8004a16 <_free_r+0x2e>
 8004a08:	6063      	str	r3, [r4, #4]
 8004a0a:	6014      	str	r4, [r2, #0]
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a12:	f000 b8c8 	b.w	8004ba6 <__malloc_unlock>
 8004a16:	42a3      	cmp	r3, r4
 8004a18:	d90c      	bls.n	8004a34 <_free_r+0x4c>
 8004a1a:	6821      	ldr	r1, [r4, #0]
 8004a1c:	1862      	adds	r2, r4, r1
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	bf04      	itt	eq
 8004a22:	681a      	ldreq	r2, [r3, #0]
 8004a24:	685b      	ldreq	r3, [r3, #4]
 8004a26:	6063      	str	r3, [r4, #4]
 8004a28:	bf04      	itt	eq
 8004a2a:	1852      	addeq	r2, r2, r1
 8004a2c:	6022      	streq	r2, [r4, #0]
 8004a2e:	6004      	str	r4, [r0, #0]
 8004a30:	e7ec      	b.n	8004a0c <_free_r+0x24>
 8004a32:	4613      	mov	r3, r2
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	b10a      	cbz	r2, 8004a3c <_free_r+0x54>
 8004a38:	42a2      	cmp	r2, r4
 8004a3a:	d9fa      	bls.n	8004a32 <_free_r+0x4a>
 8004a3c:	6819      	ldr	r1, [r3, #0]
 8004a3e:	1858      	adds	r0, r3, r1
 8004a40:	42a0      	cmp	r0, r4
 8004a42:	d10b      	bne.n	8004a5c <_free_r+0x74>
 8004a44:	6820      	ldr	r0, [r4, #0]
 8004a46:	4401      	add	r1, r0
 8004a48:	1858      	adds	r0, r3, r1
 8004a4a:	4282      	cmp	r2, r0
 8004a4c:	6019      	str	r1, [r3, #0]
 8004a4e:	d1dd      	bne.n	8004a0c <_free_r+0x24>
 8004a50:	6810      	ldr	r0, [r2, #0]
 8004a52:	6852      	ldr	r2, [r2, #4]
 8004a54:	605a      	str	r2, [r3, #4]
 8004a56:	4401      	add	r1, r0
 8004a58:	6019      	str	r1, [r3, #0]
 8004a5a:	e7d7      	b.n	8004a0c <_free_r+0x24>
 8004a5c:	d902      	bls.n	8004a64 <_free_r+0x7c>
 8004a5e:	230c      	movs	r3, #12
 8004a60:	602b      	str	r3, [r5, #0]
 8004a62:	e7d3      	b.n	8004a0c <_free_r+0x24>
 8004a64:	6820      	ldr	r0, [r4, #0]
 8004a66:	1821      	adds	r1, r4, r0
 8004a68:	428a      	cmp	r2, r1
 8004a6a:	bf04      	itt	eq
 8004a6c:	6811      	ldreq	r1, [r2, #0]
 8004a6e:	6852      	ldreq	r2, [r2, #4]
 8004a70:	6062      	str	r2, [r4, #4]
 8004a72:	bf04      	itt	eq
 8004a74:	1809      	addeq	r1, r1, r0
 8004a76:	6021      	streq	r1, [r4, #0]
 8004a78:	605c      	str	r4, [r3, #4]
 8004a7a:	e7c7      	b.n	8004a0c <_free_r+0x24>
 8004a7c:	bd38      	pop	{r3, r4, r5, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000098 	.word	0x20000098

08004a84 <_malloc_r>:
 8004a84:	b570      	push	{r4, r5, r6, lr}
 8004a86:	1ccd      	adds	r5, r1, #3
 8004a88:	f025 0503 	bic.w	r5, r5, #3
 8004a8c:	3508      	adds	r5, #8
 8004a8e:	2d0c      	cmp	r5, #12
 8004a90:	bf38      	it	cc
 8004a92:	250c      	movcc	r5, #12
 8004a94:	2d00      	cmp	r5, #0
 8004a96:	4606      	mov	r6, r0
 8004a98:	db01      	blt.n	8004a9e <_malloc_r+0x1a>
 8004a9a:	42a9      	cmp	r1, r5
 8004a9c:	d903      	bls.n	8004aa6 <_malloc_r+0x22>
 8004a9e:	230c      	movs	r3, #12
 8004aa0:	6033      	str	r3, [r6, #0]
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	bd70      	pop	{r4, r5, r6, pc}
 8004aa6:	f000 f87d 	bl	8004ba4 <__malloc_lock>
 8004aaa:	4a21      	ldr	r2, [pc, #132]	; (8004b30 <_malloc_r+0xac>)
 8004aac:	6814      	ldr	r4, [r2, #0]
 8004aae:	4621      	mov	r1, r4
 8004ab0:	b991      	cbnz	r1, 8004ad8 <_malloc_r+0x54>
 8004ab2:	4c20      	ldr	r4, [pc, #128]	; (8004b34 <_malloc_r+0xb0>)
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	b91b      	cbnz	r3, 8004ac0 <_malloc_r+0x3c>
 8004ab8:	4630      	mov	r0, r6
 8004aba:	f000 f863 	bl	8004b84 <_sbrk_r>
 8004abe:	6020      	str	r0, [r4, #0]
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f000 f85e 	bl	8004b84 <_sbrk_r>
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	d124      	bne.n	8004b16 <_malloc_r+0x92>
 8004acc:	230c      	movs	r3, #12
 8004ace:	6033      	str	r3, [r6, #0]
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f000 f868 	bl	8004ba6 <__malloc_unlock>
 8004ad6:	e7e4      	b.n	8004aa2 <_malloc_r+0x1e>
 8004ad8:	680b      	ldr	r3, [r1, #0]
 8004ada:	1b5b      	subs	r3, r3, r5
 8004adc:	d418      	bmi.n	8004b10 <_malloc_r+0x8c>
 8004ade:	2b0b      	cmp	r3, #11
 8004ae0:	d90f      	bls.n	8004b02 <_malloc_r+0x7e>
 8004ae2:	600b      	str	r3, [r1, #0]
 8004ae4:	50cd      	str	r5, [r1, r3]
 8004ae6:	18cc      	adds	r4, r1, r3
 8004ae8:	4630      	mov	r0, r6
 8004aea:	f000 f85c 	bl	8004ba6 <__malloc_unlock>
 8004aee:	f104 000b 	add.w	r0, r4, #11
 8004af2:	1d23      	adds	r3, r4, #4
 8004af4:	f020 0007 	bic.w	r0, r0, #7
 8004af8:	1ac3      	subs	r3, r0, r3
 8004afa:	d0d3      	beq.n	8004aa4 <_malloc_r+0x20>
 8004afc:	425a      	negs	r2, r3
 8004afe:	50e2      	str	r2, [r4, r3]
 8004b00:	e7d0      	b.n	8004aa4 <_malloc_r+0x20>
 8004b02:	428c      	cmp	r4, r1
 8004b04:	684b      	ldr	r3, [r1, #4]
 8004b06:	bf16      	itet	ne
 8004b08:	6063      	strne	r3, [r4, #4]
 8004b0a:	6013      	streq	r3, [r2, #0]
 8004b0c:	460c      	movne	r4, r1
 8004b0e:	e7eb      	b.n	8004ae8 <_malloc_r+0x64>
 8004b10:	460c      	mov	r4, r1
 8004b12:	6849      	ldr	r1, [r1, #4]
 8004b14:	e7cc      	b.n	8004ab0 <_malloc_r+0x2c>
 8004b16:	1cc4      	adds	r4, r0, #3
 8004b18:	f024 0403 	bic.w	r4, r4, #3
 8004b1c:	42a0      	cmp	r0, r4
 8004b1e:	d005      	beq.n	8004b2c <_malloc_r+0xa8>
 8004b20:	1a21      	subs	r1, r4, r0
 8004b22:	4630      	mov	r0, r6
 8004b24:	f000 f82e 	bl	8004b84 <_sbrk_r>
 8004b28:	3001      	adds	r0, #1
 8004b2a:	d0cf      	beq.n	8004acc <_malloc_r+0x48>
 8004b2c:	6025      	str	r5, [r4, #0]
 8004b2e:	e7db      	b.n	8004ae8 <_malloc_r+0x64>
 8004b30:	20000098 	.word	0x20000098
 8004b34:	2000009c 	.word	0x2000009c

08004b38 <_realloc_r>:
 8004b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3a:	4607      	mov	r7, r0
 8004b3c:	4614      	mov	r4, r2
 8004b3e:	460e      	mov	r6, r1
 8004b40:	b921      	cbnz	r1, 8004b4c <_realloc_r+0x14>
 8004b42:	4611      	mov	r1, r2
 8004b44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b48:	f7ff bf9c 	b.w	8004a84 <_malloc_r>
 8004b4c:	b922      	cbnz	r2, 8004b58 <_realloc_r+0x20>
 8004b4e:	f7ff ff4b 	bl	80049e8 <_free_r>
 8004b52:	4625      	mov	r5, r4
 8004b54:	4628      	mov	r0, r5
 8004b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b58:	f000 f826 	bl	8004ba8 <_malloc_usable_size_r>
 8004b5c:	42a0      	cmp	r0, r4
 8004b5e:	d20f      	bcs.n	8004b80 <_realloc_r+0x48>
 8004b60:	4621      	mov	r1, r4
 8004b62:	4638      	mov	r0, r7
 8004b64:	f7ff ff8e 	bl	8004a84 <_malloc_r>
 8004b68:	4605      	mov	r5, r0
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d0f2      	beq.n	8004b54 <_realloc_r+0x1c>
 8004b6e:	4631      	mov	r1, r6
 8004b70:	4622      	mov	r2, r4
 8004b72:	f7ff ff15 	bl	80049a0 <memcpy>
 8004b76:	4631      	mov	r1, r6
 8004b78:	4638      	mov	r0, r7
 8004b7a:	f7ff ff35 	bl	80049e8 <_free_r>
 8004b7e:	e7e9      	b.n	8004b54 <_realloc_r+0x1c>
 8004b80:	4635      	mov	r5, r6
 8004b82:	e7e7      	b.n	8004b54 <_realloc_r+0x1c>

08004b84 <_sbrk_r>:
 8004b84:	b538      	push	{r3, r4, r5, lr}
 8004b86:	4c06      	ldr	r4, [pc, #24]	; (8004ba0 <_sbrk_r+0x1c>)
 8004b88:	2300      	movs	r3, #0
 8004b8a:	4605      	mov	r5, r0
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	6023      	str	r3, [r4, #0]
 8004b90:	f7fb fd90 	bl	80006b4 <_sbrk>
 8004b94:	1c43      	adds	r3, r0, #1
 8004b96:	d102      	bne.n	8004b9e <_sbrk_r+0x1a>
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	b103      	cbz	r3, 8004b9e <_sbrk_r+0x1a>
 8004b9c:	602b      	str	r3, [r5, #0]
 8004b9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ba0:	20000178 	.word	0x20000178

08004ba4 <__malloc_lock>:
 8004ba4:	4770      	bx	lr

08004ba6 <__malloc_unlock>:
 8004ba6:	4770      	bx	lr

08004ba8 <_malloc_usable_size_r>:
 8004ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bac:	1f18      	subs	r0, r3, #4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	bfbc      	itt	lt
 8004bb2:	580b      	ldrlt	r3, [r1, r0]
 8004bb4:	18c0      	addlt	r0, r0, r3
 8004bb6:	4770      	bx	lr

08004bb8 <_init>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	bf00      	nop
 8004bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bbe:	bc08      	pop	{r3}
 8004bc0:	469e      	mov	lr, r3
 8004bc2:	4770      	bx	lr

08004bc4 <_fini>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	bf00      	nop
 8004bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bca:	bc08      	pop	{r3}
 8004bcc:	469e      	mov	lr, r3
 8004bce:	4770      	bx	lr
