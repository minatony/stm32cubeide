
b12_clock_cnt_ccr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003014  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080031a8  080031a8  000131a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031d8  080031d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031d8  080031d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031d8  080031d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031d8  080031d8  000131d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031dc  080031dc  000131dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080031ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080031ec  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009623  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001535  00000000  00000000  0002965f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000990  00000000  00000000  0002ab98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d8  00000000  00000000  0002b528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f2e5  00000000  00000000  0002be00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008ef6  00000000  00000000  0004b0e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c0f42  00000000  00000000  00053fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00114f1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002790  00000000  00000000  00114f98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003190 	.word	0x08003190

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003190 	.word	0x08003190

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 f9da 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f80c 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8d8 	bl	8000394 <MX_GPIO_Init>
  MX_TIM4_Init();
 80001e4:	f000 f85c 	bl	80002a0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start(&htim4,TIM_CHANNEL_1);
 80001e8:	2100      	movs	r1, #0
 80001ea:	4802      	ldr	r0, [pc, #8]	; (80001f4 <main+0x20>)
 80001ec:	f002 f878 	bl	80022e0 <HAL_TIM_OC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f0:	e7fe      	b.n	80001f0 <main+0x1c>
 80001f2:	bf00      	nop
 80001f4:	20000028 	.word	0x20000028

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b0a6      	sub	sp, #152	; 0x98
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 ffba 	bl	8003180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2258      	movs	r2, #88	; 0x58
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f002 ffac 	bl	8003180 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000228:	2302      	movs	r3, #2
 800022a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022c:	2301      	movs	r3, #1
 800022e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000230:	2310      	movs	r3, #16
 8000232:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000236:	2300      	movs	r3, #0
 8000238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fc7b 	bl	8000b3c <HAL_RCC_OscConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800024c:	f000 f8ba 	bl	80003c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000250:	230f      	movs	r3, #15
 8000252:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000254:	2300      	movs	r3, #0
 8000256:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000264:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fb7c 	bl	8001968 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000276:	f000 f8a5 	bl	80003c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM34;
 800027a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800027e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000280:	2300      	movs	r3, #0
 8000282:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fd54 	bl	8001d34 <HAL_RCCEx_PeriphCLKConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000292:	f000 f897 	bl	80003c4 <Error_Handler>
  }
}
 8000296:	bf00      	nop
 8000298:	3798      	adds	r7, #152	; 0x98
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08e      	sub	sp, #56	; 0x38
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b4:	f107 031c 	add.w	r3, r7, #28
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002c0:	463b      	mov	r3, r7
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	611a      	str	r2, [r3, #16]
 80002ce:	615a      	str	r2, [r3, #20]
 80002d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80002d2:	4b2e      	ldr	r3, [pc, #184]	; (800038c <MX_TIM4_Init+0xec>)
 80002d4:	4a2e      	ldr	r2, [pc, #184]	; (8000390 <MX_TIM4_Init+0xf0>)
 80002d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 80002d8:	4b2c      	ldr	r3, [pc, #176]	; (800038c <MX_TIM4_Init+0xec>)
 80002da:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e0:	4b2a      	ldr	r3, [pc, #168]	; (800038c <MX_TIM4_Init+0xec>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80002e6:	4b29      	ldr	r3, [pc, #164]	; (800038c <MX_TIM4_Init+0xec>)
 80002e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ee:	4b27      	ldr	r3, [pc, #156]	; (800038c <MX_TIM4_Init+0xec>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002f4:	4b25      	ldr	r3, [pc, #148]	; (800038c <MX_TIM4_Init+0xec>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80002fa:	4824      	ldr	r0, [pc, #144]	; (800038c <MX_TIM4_Init+0xec>)
 80002fc:	f001 ff38 	bl	8002170 <HAL_TIM_Base_Init>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8000306:	f000 f85d 	bl	80003c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800030a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800030e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000310:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000314:	4619      	mov	r1, r3
 8000316:	481d      	ldr	r0, [pc, #116]	; (800038c <MX_TIM4_Init+0xec>)
 8000318:	f002 f964 	bl	80025e4 <HAL_TIM_ConfigClockSource>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8000322:	f000 f84f 	bl	80003c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000326:	4819      	ldr	r0, [pc, #100]	; (800038c <MX_TIM4_Init+0xec>)
 8000328:	f001 ff79 	bl	800221e <HAL_TIM_OC_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000332:	f000 f847 	bl	80003c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000336:	2300      	movs	r3, #0
 8000338:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800033a:	2300      	movs	r3, #0
 800033c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800033e:	f107 031c 	add.w	r3, r7, #28
 8000342:	4619      	mov	r1, r3
 8000344:	4811      	ldr	r0, [pc, #68]	; (800038c <MX_TIM4_Init+0xec>)
 8000346:	f002 fe6b 	bl	8003020 <HAL_TIMEx_MasterConfigSynchronization>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000350:	f000 f838 	bl	80003c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000354:	2330      	movs	r3, #48	; 0x30
 8000356:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 8000358:	f240 13f3 	movw	r3, #499	; 0x1f3
 800035c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800035e:	2300      	movs	r3, #0
 8000360:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000366:	463b      	mov	r3, r7
 8000368:	2200      	movs	r2, #0
 800036a:	4619      	mov	r1, r3
 800036c:	4807      	ldr	r0, [pc, #28]	; (800038c <MX_TIM4_Init+0xec>)
 800036e:	f002 f8c3 	bl	80024f8 <HAL_TIM_OC_ConfigChannel>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8000378:	f000 f824 	bl	80003c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800037c:	4803      	ldr	r0, [pc, #12]	; (800038c <MX_TIM4_Init+0xec>)
 800037e:	f000 f869 	bl	8000454 <HAL_TIM_MspPostInit>

}
 8000382:	bf00      	nop
 8000384:	3738      	adds	r7, #56	; 0x38
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000028 	.word	0x20000028
 8000390:	40000800 	.word	0x40000800

08000394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_GPIO_Init+0x2c>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <MX_GPIO_Init+0x2c>)
 80003a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_GPIO_Init+0x2c>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]

}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000

080003c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ca:	e7fe      	b.n	80003ca <Error_Handler+0x6>

080003cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <HAL_MspInit+0x44>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <HAL_MspInit+0x44>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <HAL_MspInit+0x44>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <HAL_MspInit+0x44>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	4a08      	ldr	r2, [pc, #32]	; (8000410 <HAL_MspInit+0x44>)
 80003f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f4:	61d3      	str	r3, [r2, #28]
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <HAL_MspInit+0x44>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fe:	603b      	str	r3, [r7, #0]
 8000400:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000

08000414 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a0a      	ldr	r2, [pc, #40]	; (800044c <HAL_TIM_Base_MspInit+0x38>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d10b      	bne.n	800043e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <HAL_TIM_Base_MspInit+0x3c>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	4a09      	ldr	r2, [pc, #36]	; (8000450 <HAL_TIM_Base_MspInit+0x3c>)
 800042c:	f043 0304 	orr.w	r3, r3, #4
 8000430:	61d3      	str	r3, [r2, #28]
 8000432:	4b07      	ldr	r3, [pc, #28]	; (8000450 <HAL_TIM_Base_MspInit+0x3c>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	f003 0304 	and.w	r3, r3, #4
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800043e:	bf00      	nop
 8000440:	3714      	adds	r7, #20
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40000800 	.word	0x40000800
 8000450:	40021000 	.word	0x40021000

08000454 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b088      	sub	sp, #32
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045c:	f107 030c 	add.w	r3, r7, #12
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a12      	ldr	r2, [pc, #72]	; (80004bc <HAL_TIM_MspPostInit+0x68>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d11d      	bne.n	80004b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <HAL_TIM_MspPostInit+0x6c>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a11      	ldr	r2, [pc, #68]	; (80004c0 <HAL_TIM_MspPostInit+0x6c>)
 800047c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000480:	6153      	str	r3, [r2, #20]
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <HAL_TIM_MspPostInit+0x6c>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800048e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000492:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000494:	2302      	movs	r3, #2
 8000496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80004a0:	230a      	movs	r3, #10
 80004a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	f107 030c 	add.w	r3, r7, #12
 80004a8:	4619      	mov	r1, r3
 80004aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ae:	f000 f9bb 	bl	8000828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80004b2:	bf00      	nop
 80004b4:	3720      	adds	r7, #32
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40000800 	.word	0x40000800
 80004c0:	40021000 	.word	0x40021000

080004c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <NMI_Handler+0x4>

080004ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <HardFault_Handler+0x4>

080004d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <MemManage_Handler+0x4>

080004d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <BusFault_Handler+0x4>

080004dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <UsageFault_Handler+0x4>

080004e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000510:	f000 f884 	bl	800061c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}

08000518 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <SystemInit+0x20>)
 800051e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000522:	4a05      	ldr	r2, [pc, #20]	; (8000538 <SystemInit+0x20>)
 8000524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800053c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000574 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000540:	480d      	ldr	r0, [pc, #52]	; (8000578 <LoopForever+0x6>)
  ldr r1, =_edata
 8000542:	490e      	ldr	r1, [pc, #56]	; (800057c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000544:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <LoopForever+0xe>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000548:	e002      	b.n	8000550 <LoopCopyDataInit>

0800054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054e:	3304      	adds	r3, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000554:	d3f9      	bcc.n	800054a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000556:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000558:	4c0b      	ldr	r4, [pc, #44]	; (8000588 <LoopForever+0x16>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800055c:	e001      	b.n	8000562 <LoopFillZerobss>

0800055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000560:	3204      	adds	r2, #4

08000562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000564:	d3fb      	bcc.n	800055e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000566:	f7ff ffd7 	bl	8000518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800056a:	f002 fde5 	bl	8003138 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800056e:	f7ff fe31 	bl	80001d4 <main>

08000572 <LoopForever>:

LoopForever:
    b LoopForever
 8000572:	e7fe      	b.n	8000572 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000574:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800057c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000580:	080031e0 	.word	0x080031e0
  ldr r2, =_sbss
 8000584:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000588:	20000078 	.word	0x20000078

0800058c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800058c:	e7fe      	b.n	800058c <ADC1_2_IRQHandler>
	...

08000590 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <HAL_Init+0x28>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <HAL_Init+0x28>)
 800059a:	f043 0310 	orr.w	r3, r3, #16
 800059e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a0:	2003      	movs	r0, #3
 80005a2:	f000 f90d 	bl	80007c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 f808 	bl	80005bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005ac:	f7ff ff0e 	bl	80003cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b0:	2300      	movs	r3, #0
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40022000 	.word	0x40022000

080005bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_InitTick+0x54>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_InitTick+0x58>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4619      	mov	r1, r3
 80005ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f917 	bl	800080e <HAL_SYSTICK_Config>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
 80005e8:	e00e      	b.n	8000608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b0f      	cmp	r3, #15
 80005ee:	d80a      	bhi.n	8000606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f0:	2200      	movs	r2, #0
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	f04f 30ff 	mov.w	r0, #4294967295
 80005f8:	f000 f8ed 	bl	80007d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005fc:	4a06      	ldr	r2, [pc, #24]	; (8000618 <HAL_InitTick+0x5c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000602:	2300      	movs	r3, #0
 8000604:	e000      	b.n	8000608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000000 	.word	0x20000000
 8000614:	20000008 	.word	0x20000008
 8000618:	20000004 	.word	0x20000004

0800061c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_IncTick+0x20>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_IncTick+0x24>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4413      	add	r3, r2
 800062c:	4a04      	ldr	r2, [pc, #16]	; (8000640 <HAL_IncTick+0x24>)
 800062e:	6013      	str	r3, [r2, #0]
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000008 	.word	0x20000008
 8000640:	20000074 	.word	0x20000074

08000644 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return uwTick;  
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <HAL_GetTick+0x14>)
 800064a:	681b      	ldr	r3, [r3, #0]
}
 800064c:	4618      	mov	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000074 	.word	0x20000074

0800065c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <__NVIC_SetPriorityGrouping+0x44>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000678:	4013      	ands	r3, r2
 800067a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800068e:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	60d3      	str	r3, [r2, #12]
}
 8000694:	bf00      	nop
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <__NVIC_GetPriorityGrouping+0x18>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	0a1b      	lsrs	r3, r3, #8
 80006ae:	f003 0307 	and.w	r3, r3, #7
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	6039      	str	r1, [r7, #0]
 80006ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db0a      	blt.n	80006ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	490c      	ldr	r1, [pc, #48]	; (800070c <__NVIC_SetPriority+0x4c>)
 80006da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006de:	0112      	lsls	r2, r2, #4
 80006e0:	b2d2      	uxtb	r2, r2
 80006e2:	440b      	add	r3, r1
 80006e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e8:	e00a      	b.n	8000700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4908      	ldr	r1, [pc, #32]	; (8000710 <__NVIC_SetPriority+0x50>)
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	f003 030f 	and.w	r3, r3, #15
 80006f6:	3b04      	subs	r3, #4
 80006f8:	0112      	lsls	r2, r2, #4
 80006fa:	b2d2      	uxtb	r2, r2
 80006fc:	440b      	add	r3, r1
 80006fe:	761a      	strb	r2, [r3, #24]
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000e100 	.word	0xe000e100
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000714:	b480      	push	{r7}
 8000716:	b089      	sub	sp, #36	; 0x24
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	f1c3 0307 	rsb	r3, r3, #7
 800072e:	2b04      	cmp	r3, #4
 8000730:	bf28      	it	cs
 8000732:	2304      	movcs	r3, #4
 8000734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3304      	adds	r3, #4
 800073a:	2b06      	cmp	r3, #6
 800073c:	d902      	bls.n	8000744 <NVIC_EncodePriority+0x30>
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3b03      	subs	r3, #3
 8000742:	e000      	b.n	8000746 <NVIC_EncodePriority+0x32>
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	f04f 32ff 	mov.w	r2, #4294967295
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	fa02 f303 	lsl.w	r3, r2, r3
 8000752:	43da      	mvns	r2, r3
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	401a      	ands	r2, r3
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800075c:	f04f 31ff 	mov.w	r1, #4294967295
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	fa01 f303 	lsl.w	r3, r1, r3
 8000766:	43d9      	mvns	r1, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800076c:	4313      	orrs	r3, r2
         );
}
 800076e:	4618      	mov	r0, r3
 8000770:	3724      	adds	r7, #36	; 0x24
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3b01      	subs	r3, #1
 8000788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800078c:	d301      	bcc.n	8000792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800078e:	2301      	movs	r3, #1
 8000790:	e00f      	b.n	80007b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <SysTick_Config+0x40>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3b01      	subs	r3, #1
 8000798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800079a:	210f      	movs	r1, #15
 800079c:	f04f 30ff 	mov.w	r0, #4294967295
 80007a0:	f7ff ff8e 	bl	80006c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <SysTick_Config+0x40>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <SysTick_Config+0x40>)
 80007ac:	2207      	movs	r2, #7
 80007ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	e000e010 	.word	0xe000e010

080007c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff ff47 	bl	800065c <__NVIC_SetPriorityGrouping>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b086      	sub	sp, #24
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4603      	mov	r3, r0
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
 80007e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e8:	f7ff ff5c 	bl	80006a4 <__NVIC_GetPriorityGrouping>
 80007ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	68b9      	ldr	r1, [r7, #8]
 80007f2:	6978      	ldr	r0, [r7, #20]
 80007f4:	f7ff ff8e 	bl	8000714 <NVIC_EncodePriority>
 80007f8:	4602      	mov	r2, r0
 80007fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff5d 	bl	80006c0 <__NVIC_SetPriority>
}
 8000806:	bf00      	nop
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f7ff ffb0 	bl	800077c <SysTick_Config>
 800081c:	4603      	mov	r3, r0
}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000828:	b480      	push	{r7}
 800082a:	b087      	sub	sp, #28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000836:	e160      	b.n	8000afa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	2101      	movs	r1, #1
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	fa01 f303 	lsl.w	r3, r1, r3
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	f000 8152 	beq.w	8000af4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d00b      	beq.n	8000870 <HAL_GPIO_Init+0x48>
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d007      	beq.n	8000870 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000864:	2b11      	cmp	r3, #17
 8000866:	d003      	beq.n	8000870 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2b12      	cmp	r3, #18
 800086e:	d130      	bne.n	80008d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	2203      	movs	r2, #3
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	43db      	mvns	r3, r3
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	4013      	ands	r3, r2
 8000886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	68da      	ldr	r2, [r3, #12]
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	4313      	orrs	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008a6:	2201      	movs	r2, #1
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43db      	mvns	r3, r3
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	4013      	ands	r3, r2
 80008b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	091b      	lsrs	r3, r3, #4
 80008bc:	f003 0201 	and.w	r2, r3, #1
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	2203      	movs	r2, #3
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43db      	mvns	r3, r3
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4013      	ands	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	2b02      	cmp	r3, #2
 8000908:	d003      	beq.n	8000912 <HAL_GPIO_Init+0xea>
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	2b12      	cmp	r3, #18
 8000910:	d123      	bne.n	800095a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	08da      	lsrs	r2, r3, #3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3208      	adds	r2, #8
 800091a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800091e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	220f      	movs	r2, #15
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	4013      	ands	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	691a      	ldr	r2, [r3, #16]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	f003 0307 	and.w	r3, r3, #7
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	4313      	orrs	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	08da      	lsrs	r2, r3, #3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3208      	adds	r2, #8
 8000954:	6939      	ldr	r1, [r7, #16]
 8000956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	2203      	movs	r2, #3
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43db      	mvns	r3, r3
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4013      	ands	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f003 0203 	and.w	r2, r3, #3
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	2b00      	cmp	r3, #0
 8000998:	f000 80ac 	beq.w	8000af4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099c:	4b5e      	ldr	r3, [pc, #376]	; (8000b18 <HAL_GPIO_Init+0x2f0>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a5d      	ldr	r2, [pc, #372]	; (8000b18 <HAL_GPIO_Init+0x2f0>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b5b      	ldr	r3, [pc, #364]	; (8000b18 <HAL_GPIO_Init+0x2f0>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009b4:	4a59      	ldr	r2, [pc, #356]	; (8000b1c <HAL_GPIO_Init+0x2f4>)
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	089b      	lsrs	r3, r3, #2
 80009ba:	3302      	adds	r3, #2
 80009bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	220f      	movs	r2, #15
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009de:	d025      	beq.n	8000a2c <HAL_GPIO_Init+0x204>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a4f      	ldr	r2, [pc, #316]	; (8000b20 <HAL_GPIO_Init+0x2f8>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d01f      	beq.n	8000a28 <HAL_GPIO_Init+0x200>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a4e      	ldr	r2, [pc, #312]	; (8000b24 <HAL_GPIO_Init+0x2fc>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d019      	beq.n	8000a24 <HAL_GPIO_Init+0x1fc>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a4d      	ldr	r2, [pc, #308]	; (8000b28 <HAL_GPIO_Init+0x300>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d013      	beq.n	8000a20 <HAL_GPIO_Init+0x1f8>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a4c      	ldr	r2, [pc, #304]	; (8000b2c <HAL_GPIO_Init+0x304>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d00d      	beq.n	8000a1c <HAL_GPIO_Init+0x1f4>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a4b      	ldr	r2, [pc, #300]	; (8000b30 <HAL_GPIO_Init+0x308>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d007      	beq.n	8000a18 <HAL_GPIO_Init+0x1f0>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a4a      	ldr	r2, [pc, #296]	; (8000b34 <HAL_GPIO_Init+0x30c>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d101      	bne.n	8000a14 <HAL_GPIO_Init+0x1ec>
 8000a10:	2306      	movs	r3, #6
 8000a12:	e00c      	b.n	8000a2e <HAL_GPIO_Init+0x206>
 8000a14:	2307      	movs	r3, #7
 8000a16:	e00a      	b.n	8000a2e <HAL_GPIO_Init+0x206>
 8000a18:	2305      	movs	r3, #5
 8000a1a:	e008      	b.n	8000a2e <HAL_GPIO_Init+0x206>
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	e006      	b.n	8000a2e <HAL_GPIO_Init+0x206>
 8000a20:	2303      	movs	r3, #3
 8000a22:	e004      	b.n	8000a2e <HAL_GPIO_Init+0x206>
 8000a24:	2302      	movs	r3, #2
 8000a26:	e002      	b.n	8000a2e <HAL_GPIO_Init+0x206>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e000      	b.n	8000a2e <HAL_GPIO_Init+0x206>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	f002 0203 	and.w	r2, r2, #3
 8000a34:	0092      	lsls	r2, r2, #2
 8000a36:	4093      	lsls	r3, r2
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a3e:	4937      	ldr	r1, [pc, #220]	; (8000b1c <HAL_GPIO_Init+0x2f4>)
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	3302      	adds	r3, #2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a4c:	4b3a      	ldr	r3, [pc, #232]	; (8000b38 <HAL_GPIO_Init+0x310>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a70:	4a31      	ldr	r2, [pc, #196]	; (8000b38 <HAL_GPIO_Init+0x310>)
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a76:	4b30      	ldr	r3, [pc, #192]	; (8000b38 <HAL_GPIO_Init+0x310>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a9a:	4a27      	ldr	r2, [pc, #156]	; (8000b38 <HAL_GPIO_Init+0x310>)
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aa0:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <HAL_GPIO_Init+0x310>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ac4:	4a1c      	ldr	r2, [pc, #112]	; (8000b38 <HAL_GPIO_Init+0x310>)
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_GPIO_Init+0x310>)
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <HAL_GPIO_Init+0x310>)
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	3301      	adds	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	fa22 f303 	lsr.w	r3, r2, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f47f ae97 	bne.w	8000838 <HAL_GPIO_Init+0x10>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	371c      	adds	r7, #28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010000 	.word	0x40010000
 8000b20:	48000400 	.word	0x48000400
 8000b24:	48000800 	.word	0x48000800
 8000b28:	48000c00 	.word	0x48000c00
 8000b2c:	48001000 	.word	0x48001000
 8000b30:	48001400 	.word	0x48001400
 8000b34:	48001800 	.word	0x48001800
 8000b38:	40010400 	.word	0x40010400

08000b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	f000 bf01 	b.w	8001958 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	f000 8160 	beq.w	8000e26 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b66:	4bae      	ldr	r3, [pc, #696]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 030c 	and.w	r3, r3, #12
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	d00c      	beq.n	8000b8c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b72:	4bab      	ldr	r3, [pc, #684]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 030c 	and.w	r3, r3, #12
 8000b7a:	2b08      	cmp	r3, #8
 8000b7c:	d159      	bne.n	8000c32 <HAL_RCC_OscConfig+0xf6>
 8000b7e:	4ba8      	ldr	r3, [pc, #672]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b8a:	d152      	bne.n	8000c32 <HAL_RCC_OscConfig+0xf6>
 8000b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b90:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b94:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000b98:	fa93 f3a3 	rbit	r3, r3
 8000b9c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ba0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba4:	fab3 f383 	clz	r3, r3
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	095b      	lsrs	r3, r3, #5
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d102      	bne.n	8000bbe <HAL_RCC_OscConfig+0x82>
 8000bb8:	4b99      	ldr	r3, [pc, #612]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	e015      	b.n	8000bea <HAL_RCC_OscConfig+0xae>
 8000bbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bc2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000bca:	fa93 f3a3 	rbit	r3, r3
 8000bce:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000bd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bd6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000bda:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000bde:	fa93 f3a3 	rbit	r3, r3
 8000be2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000be6:	4b8e      	ldr	r3, [pc, #568]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bee:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000bf2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000bf6:	fa92 f2a2 	rbit	r2, r2
 8000bfa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000bfe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c02:	fab2 f282 	clz	r2, r2
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	f042 0220 	orr.w	r2, r2, #32
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	f002 021f 	and.w	r2, r2, #31
 8000c12:	2101      	movs	r1, #1
 8000c14:	fa01 f202 	lsl.w	r2, r1, r2
 8000c18:	4013      	ands	r3, r2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f000 8102 	beq.w	8000e24 <HAL_RCC_OscConfig+0x2e8>
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f040 80fc 	bne.w	8000e24 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	f000 be93 	b.w	8001958 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c3c:	d106      	bne.n	8000c4c <HAL_RCC_OscConfig+0x110>
 8000c3e:	4b78      	ldr	r3, [pc, #480]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a77      	ldr	r2, [pc, #476]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e030      	b.n	8000cae <HAL_RCC_OscConfig+0x172>
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10c      	bne.n	8000c70 <HAL_RCC_OscConfig+0x134>
 8000c56:	4b72      	ldr	r3, [pc, #456]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a71      	ldr	r2, [pc, #452]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	4b6f      	ldr	r3, [pc, #444]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a6e      	ldr	r2, [pc, #440]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	e01e      	b.n	8000cae <HAL_RCC_OscConfig+0x172>
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c7a:	d10c      	bne.n	8000c96 <HAL_RCC_OscConfig+0x15a>
 8000c7c:	4b68      	ldr	r3, [pc, #416]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a67      	ldr	r2, [pc, #412]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000c82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b65      	ldr	r3, [pc, #404]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a64      	ldr	r2, [pc, #400]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	e00b      	b.n	8000cae <HAL_RCC_OscConfig+0x172>
 8000c96:	4b62      	ldr	r3, [pc, #392]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a61      	ldr	r2, [pc, #388]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	4b5f      	ldr	r3, [pc, #380]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a5e      	ldr	r2, [pc, #376]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cac:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d059      	beq.n	8000d6c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fcc4 	bl	8000644 <HAL_GetTick>
 8000cbc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc0:	e00a      	b.n	8000cd8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cc2:	f7ff fcbf 	bl	8000644 <HAL_GetTick>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b64      	cmp	r3, #100	; 0x64
 8000cd0:	d902      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	f000 be40 	b.w	8001958 <HAL_RCC_OscConfig+0xe1c>
 8000cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cdc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000ce4:	fa93 f3a3 	rbit	r3, r3
 8000ce8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000cec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf0:	fab3 f383 	clz	r3, r3
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d102      	bne.n	8000d0a <HAL_RCC_OscConfig+0x1ce>
 8000d04:	4b46      	ldr	r3, [pc, #280]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	e015      	b.n	8000d36 <HAL_RCC_OscConfig+0x1fa>
 8000d0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d0e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d12:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000d16:	fa93 f3a3 	rbit	r3, r3
 8000d1a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000d1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d22:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d26:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000d2a:	fa93 f3a3 	rbit	r3, r3
 8000d2e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d32:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d3a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000d3e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000d42:	fa92 f2a2 	rbit	r2, r2
 8000d46:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000d4a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d4e:	fab2 f282 	clz	r2, r2
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	f042 0220 	orr.w	r2, r2, #32
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	f002 021f 	and.w	r2, r2, #31
 8000d5e:	2101      	movs	r1, #1
 8000d60:	fa01 f202 	lsl.w	r2, r1, r2
 8000d64:	4013      	ands	r3, r2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0ab      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x186>
 8000d6a:	e05c      	b.n	8000e26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fc6a 	bl	8000644 <HAL_GetTick>
 8000d70:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d74:	e00a      	b.n	8000d8c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d76:	f7ff fc65 	bl	8000644 <HAL_GetTick>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b64      	cmp	r3, #100	; 0x64
 8000d84:	d902      	bls.n	8000d8c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	f000 bde6 	b.w	8001958 <HAL_RCC_OscConfig+0xe1c>
 8000d8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d90:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000d98:	fa93 f3a3 	rbit	r3, r3
 8000d9c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000da0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000da4:	fab3 f383 	clz	r3, r3
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d102      	bne.n	8000dbe <HAL_RCC_OscConfig+0x282>
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	e015      	b.n	8000dea <HAL_RCC_OscConfig+0x2ae>
 8000dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000dca:	fa93 f3a3 	rbit	r3, r3
 8000dce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000dda:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000dde:	fa93 f3a3 	rbit	r3, r3
 8000de2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_RCC_OscConfig+0x2e4>)
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dee:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000df2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000df6:	fa92 f2a2 	rbit	r2, r2
 8000dfa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000dfe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e02:	fab2 f282 	clz	r2, r2
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	f042 0220 	orr.w	r2, r2, #32
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	f002 021f 	and.w	r2, r2, #31
 8000e12:	2101      	movs	r1, #1
 8000e14:	fa01 f202 	lsl.w	r2, r1, r2
 8000e18:	4013      	ands	r3, r2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1ab      	bne.n	8000d76 <HAL_RCC_OscConfig+0x23a>
 8000e1e:	e002      	b.n	8000e26 <HAL_RCC_OscConfig+0x2ea>
 8000e20:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 8170 	beq.w	8001116 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e36:	4bd0      	ldr	r3, [pc, #832]	; (8001178 <HAL_RCC_OscConfig+0x63c>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 030c 	and.w	r3, r3, #12
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00c      	beq.n	8000e5c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e42:	4bcd      	ldr	r3, [pc, #820]	; (8001178 <HAL_RCC_OscConfig+0x63c>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	2b08      	cmp	r3, #8
 8000e4c:	d16d      	bne.n	8000f2a <HAL_RCC_OscConfig+0x3ee>
 8000e4e:	4bca      	ldr	r3, [pc, #808]	; (8001178 <HAL_RCC_OscConfig+0x63c>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e5a:	d166      	bne.n	8000f2a <HAL_RCC_OscConfig+0x3ee>
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e62:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000e66:	fa93 f3a3 	rbit	r3, r3
 8000e6a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000e6e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e72:	fab3 f383 	clz	r3, r3
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	095b      	lsrs	r3, r3, #5
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d102      	bne.n	8000e8c <HAL_RCC_OscConfig+0x350>
 8000e86:	4bbc      	ldr	r3, [pc, #752]	; (8001178 <HAL_RCC_OscConfig+0x63c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	e013      	b.n	8000eb4 <HAL_RCC_OscConfig+0x378>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e92:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000e96:	fa93 f3a3 	rbit	r3, r3
 8000e9a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000ea4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000ea8:	fa93 f3a3 	rbit	r3, r3
 8000eac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000eb0:	4bb1      	ldr	r3, [pc, #708]	; (8001178 <HAL_RCC_OscConfig+0x63c>)
 8000eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000eba:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000ebe:	fa92 f2a2 	rbit	r2, r2
 8000ec2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000ec6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000eca:	fab2 f282 	clz	r2, r2
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	f042 0220 	orr.w	r2, r2, #32
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	f002 021f 	and.w	r2, r2, #31
 8000eda:	2101      	movs	r1, #1
 8000edc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d007      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x3ba>
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d002      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	f000 bd31 	b.w	8001958 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef6:	4ba0      	ldr	r3, [pc, #640]	; (8001178 <HAL_RCC_OscConfig+0x63c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	21f8      	movs	r1, #248	; 0xf8
 8000f06:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000f0e:	fa91 f1a1 	rbit	r1, r1
 8000f12:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000f16:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f1a:	fab1 f181 	clz	r1, r1
 8000f1e:	b2c9      	uxtb	r1, r1
 8000f20:	408b      	lsls	r3, r1
 8000f22:	4995      	ldr	r1, [pc, #596]	; (8001178 <HAL_RCC_OscConfig+0x63c>)
 8000f24:	4313      	orrs	r3, r2
 8000f26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f28:	e0f5      	b.n	8001116 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 8085 	beq.w	8001040 <HAL_RCC_OscConfig+0x504>
 8000f36:	2301      	movs	r3, #1
 8000f38:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000f40:	fa93 f3a3 	rbit	r3, r3
 8000f44:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000f48:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f4c:	fab3 f383 	clz	r3, r3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	2301      	movs	r3, #1
 8000f60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f62:	f7ff fb6f 	bl	8000644 <HAL_GetTick>
 8000f66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6a:	e00a      	b.n	8000f82 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f6c:	f7ff fb6a 	bl	8000644 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d902      	bls.n	8000f82 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	f000 bceb 	b.w	8001958 <HAL_RCC_OscConfig+0xe1c>
 8000f82:	2302      	movs	r3, #2
 8000f84:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f88:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000f8c:	fa93 f3a3 	rbit	r3, r3
 8000f90:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8000f94:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f98:	fab3 f383 	clz	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d102      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x476>
 8000fac:	4b72      	ldr	r3, [pc, #456]	; (8001178 <HAL_RCC_OscConfig+0x63c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	e013      	b.n	8000fda <HAL_RCC_OscConfig+0x49e>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000fbc:	fa93 f3a3 	rbit	r3, r3
 8000fc0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000fca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000fd6:	4b68      	ldr	r3, [pc, #416]	; (8001178 <HAL_RCC_OscConfig+0x63c>)
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	2202      	movs	r2, #2
 8000fdc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000fe0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000fe4:	fa92 f2a2 	rbit	r2, r2
 8000fe8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8000fec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000ff0:	fab2 f282 	clz	r2, r2
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	f042 0220 	orr.w	r2, r2, #32
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	f002 021f 	and.w	r2, r2, #31
 8001000:	2101      	movs	r1, #1
 8001002:	fa01 f202 	lsl.w	r2, r1, r2
 8001006:	4013      	ands	r3, r2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0af      	beq.n	8000f6c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100c:	4b5a      	ldr	r3, [pc, #360]	; (8001178 <HAL_RCC_OscConfig+0x63c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	21f8      	movs	r1, #248	; 0xf8
 800101c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001020:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001024:	fa91 f1a1 	rbit	r1, r1
 8001028:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800102c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001030:	fab1 f181 	clz	r1, r1
 8001034:	b2c9      	uxtb	r1, r1
 8001036:	408b      	lsls	r3, r1
 8001038:	494f      	ldr	r1, [pc, #316]	; (8001178 <HAL_RCC_OscConfig+0x63c>)
 800103a:	4313      	orrs	r3, r2
 800103c:	600b      	str	r3, [r1, #0]
 800103e:	e06a      	b.n	8001116 <HAL_RCC_OscConfig+0x5da>
 8001040:	2301      	movs	r3, #1
 8001042:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001046:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001052:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001056:	fab3 f383 	clz	r3, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001060:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	461a      	mov	r2, r3
 8001068:	2300      	movs	r3, #0
 800106a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff faea 	bl	8000644 <HAL_GetTick>
 8001070:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001074:	e00a      	b.n	800108c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001076:	f7ff fae5 	bl	8000644 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d902      	bls.n	800108c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	f000 bc66 	b.w	8001958 <HAL_RCC_OscConfig+0xe1c>
 800108c:	2302      	movs	r3, #2
 800108e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001092:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001096:	fa93 f3a3 	rbit	r3, r3
 800109a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800109e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a2:	fab3 f383 	clz	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	095b      	lsrs	r3, r3, #5
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d102      	bne.n	80010bc <HAL_RCC_OscConfig+0x580>
 80010b6:	4b30      	ldr	r3, [pc, #192]	; (8001178 <HAL_RCC_OscConfig+0x63c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	e013      	b.n	80010e4 <HAL_RCC_OscConfig+0x5a8>
 80010bc:	2302      	movs	r3, #2
 80010be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80010c6:	fa93 f3a3 	rbit	r3, r3
 80010ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80010d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80010d8:	fa93 f3a3 	rbit	r3, r3
 80010dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <HAL_RCC_OscConfig+0x63c>)
 80010e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e4:	2202      	movs	r2, #2
 80010e6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80010ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80010ee:	fa92 f2a2 	rbit	r2, r2
 80010f2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80010f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80010fa:	fab2 f282 	clz	r2, r2
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	f042 0220 	orr.w	r2, r2, #32
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	f002 021f 	and.w	r2, r2, #31
 800110a:	2101      	movs	r1, #1
 800110c:	fa01 f202 	lsl.w	r2, r1, r2
 8001110:	4013      	ands	r3, r2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1af      	bne.n	8001076 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 80da 	beq.w	80012da <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d069      	beq.n	8001204 <HAL_RCC_OscConfig+0x6c8>
 8001130:	2301      	movs	r3, #1
 8001132:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800113a:	fa93 f3a3 	rbit	r3, r3
 800113e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001142:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001146:	fab3 f383 	clz	r3, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	461a      	mov	r2, r3
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_RCC_OscConfig+0x640>)
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	461a      	mov	r2, r3
 8001156:	2301      	movs	r3, #1
 8001158:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff fa73 	bl	8000644 <HAL_GetTick>
 800115e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001162:	e00d      	b.n	8001180 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001164:	f7ff fa6e 	bl	8000644 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d905      	bls.n	8001180 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e3ef      	b.n	8001958 <HAL_RCC_OscConfig+0xe1c>
 8001178:	40021000 	.word	0x40021000
 800117c:	10908120 	.word	0x10908120
 8001180:	2302      	movs	r3, #2
 8001182:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800118a:	fa93 f2a3 	rbit	r2, r3
 800118e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001198:	2202      	movs	r2, #2
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	fa93 f2a3 	rbit	r2, r3
 80011a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011b0:	2202      	movs	r2, #2
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	fa93 f2a3 	rbit	r2, r3
 80011be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80011c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c4:	4ba4      	ldr	r3, [pc, #656]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 80011c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011c8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011cc:	2102      	movs	r1, #2
 80011ce:	6019      	str	r1, [r3, #0]
 80011d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	fa93 f1a3 	rbit	r1, r3
 80011da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011de:	6019      	str	r1, [r3, #0]
  return result;
 80011e0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	fab3 f383 	clz	r3, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f003 031f 	and.w	r3, r3, #31
 80011f6:	2101      	movs	r1, #1
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	4013      	ands	r3, r2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0b0      	beq.n	8001164 <HAL_RCC_OscConfig+0x628>
 8001202:	e06a      	b.n	80012da <HAL_RCC_OscConfig+0x79e>
 8001204:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	fa93 f2a3 	rbit	r2, r3
 8001216:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800121a:	601a      	str	r2, [r3, #0]
  return result;
 800121c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001220:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001222:	fab3 f383 	clz	r3, r3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	461a      	mov	r2, r3
 800122a:	4b8c      	ldr	r3, [pc, #560]	; (800145c <HAL_RCC_OscConfig+0x920>)
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	461a      	mov	r2, r3
 8001232:	2300      	movs	r3, #0
 8001234:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001236:	f7ff fa05 	bl	8000644 <HAL_GetTick>
 800123a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800123e:	e009      	b.n	8001254 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001240:	f7ff fa00 	bl	8000644 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e381      	b.n	8001958 <HAL_RCC_OscConfig+0xe1c>
 8001254:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001258:	2202      	movs	r2, #2
 800125a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	fa93 f2a3 	rbit	r2, r3
 8001266:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001270:	2202      	movs	r2, #2
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	fa93 f2a3 	rbit	r2, r3
 800127e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001288:	2202      	movs	r2, #2
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	fa93 f2a3 	rbit	r2, r3
 8001296:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800129a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129c:	4b6e      	ldr	r3, [pc, #440]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 800129e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012a4:	2102      	movs	r1, #2
 80012a6:	6019      	str	r1, [r3, #0]
 80012a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	fa93 f1a3 	rbit	r1, r3
 80012b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012b6:	6019      	str	r1, [r3, #0]
  return result;
 80012b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	fab3 f383 	clz	r3, r3
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	2101      	movs	r1, #1
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1b2      	bne.n	8001240 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 8157 	beq.w	8001598 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f0:	4b59      	ldr	r3, [pc, #356]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d112      	bne.n	8001322 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fc:	4b56      	ldr	r3, [pc, #344]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	4a55      	ldr	r2, [pc, #340]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 8001302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001306:	61d3      	str	r3, [r2, #28]
 8001308:	4b53      	ldr	r3, [pc, #332]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800131c:	2301      	movs	r3, #1
 800131e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001322:	4b4f      	ldr	r3, [pc, #316]	; (8001460 <HAL_RCC_OscConfig+0x924>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132a:	2b00      	cmp	r3, #0
 800132c:	d11a      	bne.n	8001364 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800132e:	4b4c      	ldr	r3, [pc, #304]	; (8001460 <HAL_RCC_OscConfig+0x924>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a4b      	ldr	r2, [pc, #300]	; (8001460 <HAL_RCC_OscConfig+0x924>)
 8001334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001338:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800133a:	f7ff f983 	bl	8000644 <HAL_GetTick>
 800133e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001342:	e009      	b.n	8001358 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001344:	f7ff f97e 	bl	8000644 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b64      	cmp	r3, #100	; 0x64
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e2ff      	b.n	8001958 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001358:	4b41      	ldr	r3, [pc, #260]	; (8001460 <HAL_RCC_OscConfig+0x924>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0ef      	beq.n	8001344 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d106      	bne.n	800137c <HAL_RCC_OscConfig+0x840>
 800136e:	4b3a      	ldr	r3, [pc, #232]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	4a39      	ldr	r2, [pc, #228]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6213      	str	r3, [r2, #32]
 800137a:	e02f      	b.n	80013dc <HAL_RCC_OscConfig+0x8a0>
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x864>
 8001386:	4b34      	ldr	r3, [pc, #208]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	4a33      	ldr	r2, [pc, #204]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 800138c:	f023 0301 	bic.w	r3, r3, #1
 8001390:	6213      	str	r3, [r2, #32]
 8001392:	4b31      	ldr	r3, [pc, #196]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	4a30      	ldr	r2, [pc, #192]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 8001398:	f023 0304 	bic.w	r3, r3, #4
 800139c:	6213      	str	r3, [r2, #32]
 800139e:	e01d      	b.n	80013dc <HAL_RCC_OscConfig+0x8a0>
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b05      	cmp	r3, #5
 80013a8:	d10c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x888>
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4a2a      	ldr	r2, [pc, #168]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	6213      	str	r3, [r2, #32]
 80013b6:	4b28      	ldr	r3, [pc, #160]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	4a27      	ldr	r2, [pc, #156]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6213      	str	r3, [r2, #32]
 80013c2:	e00b      	b.n	80013dc <HAL_RCC_OscConfig+0x8a0>
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	4a23      	ldr	r2, [pc, #140]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 80013ca:	f023 0301 	bic.w	r3, r3, #1
 80013ce:	6213      	str	r3, [r2, #32]
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4a20      	ldr	r2, [pc, #128]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 80013d6:	f023 0304 	bic.w	r3, r3, #4
 80013da:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d06a      	beq.n	80014bc <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e6:	f7ff f92d 	bl	8000644 <HAL_GetTick>
 80013ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ee:	e00b      	b.n	8001408 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f0:	f7ff f928 	bl	8000644 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001400:	4293      	cmp	r3, r2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e2a7      	b.n	8001958 <HAL_RCC_OscConfig+0xe1c>
 8001408:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800140c:	2202      	movs	r2, #2
 800140e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	fa93 f2a3 	rbit	r2, r3
 800141a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001424:	2202      	movs	r2, #2
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	fa93 f2a3 	rbit	r2, r3
 8001432:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001436:	601a      	str	r2, [r3, #0]
  return result;
 8001438:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800143c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143e:	fab3 f383 	clz	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	095b      	lsrs	r3, r3, #5
 8001446:	b2db      	uxtb	r3, r3
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d108      	bne.n	8001464 <HAL_RCC_OscConfig+0x928>
 8001452:	4b01      	ldr	r3, [pc, #4]	; (8001458 <HAL_RCC_OscConfig+0x91c>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	e013      	b.n	8001480 <HAL_RCC_OscConfig+0x944>
 8001458:	40021000 	.word	0x40021000
 800145c:	10908120 	.word	0x10908120
 8001460:	40007000 	.word	0x40007000
 8001464:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001468:	2202      	movs	r2, #2
 800146a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	fa93 f2a3 	rbit	r2, r3
 8001476:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	4bc0      	ldr	r3, [pc, #768]	; (8001780 <HAL_RCC_OscConfig+0xc44>)
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001484:	2102      	movs	r1, #2
 8001486:	6011      	str	r1, [r2, #0]
 8001488:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	fa92 f1a2 	rbit	r1, r2
 8001492:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001496:	6011      	str	r1, [r2, #0]
  return result;
 8001498:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	fab2 f282 	clz	r2, r2
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	f002 021f 	and.w	r2, r2, #31
 80014ae:	2101      	movs	r1, #1
 80014b0:	fa01 f202 	lsl.w	r2, r1, r2
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d09a      	beq.n	80013f0 <HAL_RCC_OscConfig+0x8b4>
 80014ba:	e063      	b.n	8001584 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014bc:	f7ff f8c2 	bl	8000644 <HAL_GetTick>
 80014c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c4:	e00b      	b.n	80014de <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c6:	f7ff f8bd 	bl	8000644 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e23c      	b.n	8001958 <HAL_RCC_OscConfig+0xe1c>
 80014de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014e2:	2202      	movs	r2, #2
 80014e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	fa93 f2a3 	rbit	r2, r3
 80014f0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014fa:	2202      	movs	r2, #2
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	fa93 f2a3 	rbit	r2, r3
 8001508:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800150c:	601a      	str	r2, [r3, #0]
  return result;
 800150e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001512:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001514:	fab3 f383 	clz	r3, r3
 8001518:	b2db      	uxtb	r3, r3
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	b2db      	uxtb	r3, r3
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d102      	bne.n	800152e <HAL_RCC_OscConfig+0x9f2>
 8001528:	4b95      	ldr	r3, [pc, #596]	; (8001780 <HAL_RCC_OscConfig+0xc44>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	e00d      	b.n	800154a <HAL_RCC_OscConfig+0xa0e>
 800152e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001532:	2202      	movs	r2, #2
 8001534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	fa93 f2a3 	rbit	r2, r3
 8001540:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	4b8e      	ldr	r3, [pc, #568]	; (8001780 <HAL_RCC_OscConfig+0xc44>)
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800154e:	2102      	movs	r1, #2
 8001550:	6011      	str	r1, [r2, #0]
 8001552:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	fa92 f1a2 	rbit	r1, r2
 800155c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001560:	6011      	str	r1, [r2, #0]
  return result;
 8001562:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	fab2 f282 	clz	r2, r2
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	f002 021f 	and.w	r2, r2, #31
 8001578:	2101      	movs	r1, #1
 800157a:	fa01 f202 	lsl.w	r2, r1, r2
 800157e:	4013      	ands	r3, r2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1a0      	bne.n	80014c6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001584:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001588:	2b01      	cmp	r3, #1
 800158a:	d105      	bne.n	8001598 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800158c:	4b7c      	ldr	r3, [pc, #496]	; (8001780 <HAL_RCC_OscConfig+0xc44>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	4a7b      	ldr	r2, [pc, #492]	; (8001780 <HAL_RCC_OscConfig+0xc44>)
 8001592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001596:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 81d9 	beq.w	8001956 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a4:	4b76      	ldr	r3, [pc, #472]	; (8001780 <HAL_RCC_OscConfig+0xc44>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	f000 81a6 	beq.w	80018fe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	f040 811e 	bne.w	80017fa <HAL_RCC_OscConfig+0xcbe>
 80015be:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80015c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	fa93 f2a3 	rbit	r2, r3
 80015d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015d6:	601a      	str	r2, [r3, #0]
  return result;
 80015d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015de:	fab3 f383 	clz	r3, r3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	461a      	mov	r2, r3
 80015f0:	2300      	movs	r3, #0
 80015f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff f826 	bl	8000644 <HAL_GetTick>
 80015f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fc:	e009      	b.n	8001612 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fe:	f7ff f821 	bl	8000644 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e1a2      	b.n	8001958 <HAL_RCC_OscConfig+0xe1c>
 8001612:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001616:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800161a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	fa93 f2a3 	rbit	r2, r3
 8001626:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800162a:	601a      	str	r2, [r3, #0]
  return result;
 800162c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001630:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001632:	fab3 f383 	clz	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	095b      	lsrs	r3, r3, #5
 800163a:	b2db      	uxtb	r3, r3
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b01      	cmp	r3, #1
 8001644:	d102      	bne.n	800164c <HAL_RCC_OscConfig+0xb10>
 8001646:	4b4e      	ldr	r3, [pc, #312]	; (8001780 <HAL_RCC_OscConfig+0xc44>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	e01b      	b.n	8001684 <HAL_RCC_OscConfig+0xb48>
 800164c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001650:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001656:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	fa93 f2a3 	rbit	r2, r3
 8001660:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800166a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fa93 f2a3 	rbit	r2, r3
 800167a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <HAL_RCC_OscConfig+0xc44>)
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001688:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800168c:	6011      	str	r1, [r2, #0]
 800168e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	fa92 f1a2 	rbit	r1, r2
 8001698:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800169c:	6011      	str	r1, [r2, #0]
  return result;
 800169e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	fab2 f282 	clz	r2, r2
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	f042 0220 	orr.w	r2, r2, #32
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	f002 021f 	and.w	r2, r2, #31
 80016b4:	2101      	movs	r1, #1
 80016b6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d19e      	bne.n	80015fe <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c0:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <HAL_RCC_OscConfig+0xc44>)
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	f023 020f 	bic.w	r2, r3, #15
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	492c      	ldr	r1, [pc, #176]	; (8001780 <HAL_RCC_OscConfig+0xc44>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80016d4:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <HAL_RCC_OscConfig+0xc44>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6a19      	ldr	r1, [r3, #32]
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	430b      	orrs	r3, r1
 80016ea:	4925      	ldr	r1, [pc, #148]	; (8001780 <HAL_RCC_OscConfig+0xc44>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
 80016f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	fa93 f2a3 	rbit	r2, r3
 8001704:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001708:	601a      	str	r2, [r3, #0]
  return result;
 800170a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800170e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800171a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	461a      	mov	r2, r3
 8001722:	2301      	movs	r3, #1
 8001724:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7fe ff8d 	bl	8000644 <HAL_GetTick>
 800172a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800172e:	e009      	b.n	8001744 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001730:	f7fe ff88 	bl	8000644 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e109      	b.n	8001958 <HAL_RCC_OscConfig+0xe1c>
 8001744:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001748:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800174c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	fa93 f2a3 	rbit	r2, r3
 8001758:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800175c:	601a      	str	r2, [r3, #0]
  return result;
 800175e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001762:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001764:	fab3 f383 	clz	r3, r3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b01      	cmp	r3, #1
 8001776:	d105      	bne.n	8001784 <HAL_RCC_OscConfig+0xc48>
 8001778:	4b01      	ldr	r3, [pc, #4]	; (8001780 <HAL_RCC_OscConfig+0xc44>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	e01e      	b.n	80017bc <HAL_RCC_OscConfig+0xc80>
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
 8001784:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001788:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800178c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	fa93 f2a3 	rbit	r2, r3
 8001798:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	fa93 f2a3 	rbit	r2, r3
 80017b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	4b6a      	ldr	r3, [pc, #424]	; (8001964 <HAL_RCC_OscConfig+0xe28>)
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80017c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017c4:	6011      	str	r1, [r2, #0]
 80017c6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	fa92 f1a2 	rbit	r1, r2
 80017d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017d4:	6011      	str	r1, [r2, #0]
  return result;
 80017d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	fab2 f282 	clz	r2, r2
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	f042 0220 	orr.w	r2, r2, #32
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	f002 021f 	and.w	r2, r2, #31
 80017ec:	2101      	movs	r1, #1
 80017ee:	fa01 f202 	lsl.w	r2, r1, r2
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d09b      	beq.n	8001730 <HAL_RCC_OscConfig+0xbf4>
 80017f8:	e0ad      	b.n	8001956 <HAL_RCC_OscConfig+0xe1a>
 80017fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	fa93 f2a3 	rbit	r2, r3
 800180e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001812:	601a      	str	r2, [r3, #0]
  return result;
 8001814:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001818:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001824:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	461a      	mov	r2, r3
 800182c:	2300      	movs	r3, #0
 800182e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7fe ff08 	bl	8000644 <HAL_GetTick>
 8001834:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001838:	e009      	b.n	800184e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183a:	f7fe ff03 	bl	8000644 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e084      	b.n	8001958 <HAL_RCC_OscConfig+0xe1c>
 800184e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001852:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	fa93 f2a3 	rbit	r2, r3
 8001862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001866:	601a      	str	r2, [r3, #0]
  return result;
 8001868:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800186c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186e:	fab3 f383 	clz	r3, r3
 8001872:	b2db      	uxtb	r3, r3
 8001874:	095b      	lsrs	r3, r3, #5
 8001876:	b2db      	uxtb	r3, r3
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b01      	cmp	r3, #1
 8001880:	d102      	bne.n	8001888 <HAL_RCC_OscConfig+0xd4c>
 8001882:	4b38      	ldr	r3, [pc, #224]	; (8001964 <HAL_RCC_OscConfig+0xe28>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	e01b      	b.n	80018c0 <HAL_RCC_OscConfig+0xd84>
 8001888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001890:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	fa93 f2a3 	rbit	r2, r3
 800189c:	f107 0320 	add.w	r3, r7, #32
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	fa93 f2a3 	rbit	r2, r3
 80018b6:	f107 0318 	add.w	r3, r7, #24
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	4b29      	ldr	r3, [pc, #164]	; (8001964 <HAL_RCC_OscConfig+0xe28>)
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	f107 0214 	add.w	r2, r7, #20
 80018c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018c8:	6011      	str	r1, [r2, #0]
 80018ca:	f107 0214 	add.w	r2, r7, #20
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	fa92 f1a2 	rbit	r1, r2
 80018d4:	f107 0210 	add.w	r2, r7, #16
 80018d8:	6011      	str	r1, [r2, #0]
  return result;
 80018da:	f107 0210 	add.w	r2, r7, #16
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	fab2 f282 	clz	r2, r2
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	f042 0220 	orr.w	r2, r2, #32
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	f002 021f 	and.w	r2, r2, #31
 80018f0:	2101      	movs	r1, #1
 80018f2:	fa01 f202 	lsl.w	r2, r1, r2
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d19e      	bne.n	800183a <HAL_RCC_OscConfig+0xcfe>
 80018fc:	e02b      	b.n	8001956 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e025      	b.n	8001958 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_RCC_OscConfig+0xe28>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_RCC_OscConfig+0xe28>)
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800191c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001920:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	429a      	cmp	r2, r3
 800192c:	d111      	bne.n	8001952 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800192e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001932:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800193c:	429a      	cmp	r2, r3
 800193e:	d108      	bne.n	8001952 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001940:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001944:	f003 020f 	and.w	r2, r3, #15
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800194e:	429a      	cmp	r2, r3
 8001950:	d001      	beq.n	8001956 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000

08001968 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b09e      	sub	sp, #120	; 0x78
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e162      	b.n	8001c46 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001980:	4b90      	ldr	r3, [pc, #576]	; (8001bc4 <HAL_RCC_ClockConfig+0x25c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d910      	bls.n	80019b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b8d      	ldr	r3, [pc, #564]	; (8001bc4 <HAL_RCC_ClockConfig+0x25c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 0207 	bic.w	r2, r3, #7
 8001996:	498b      	ldr	r1, [pc, #556]	; (8001bc4 <HAL_RCC_ClockConfig+0x25c>)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b89      	ldr	r3, [pc, #548]	; (8001bc4 <HAL_RCC_ClockConfig+0x25c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e14a      	b.n	8001c46 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019bc:	4b82      	ldr	r3, [pc, #520]	; (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	497f      	ldr	r1, [pc, #508]	; (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 80dc 	beq.w	8001b94 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d13c      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xf6>
 80019e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019ec:	fa93 f3a3 	rbit	r3, r3
 80019f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80019f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f4:	fab3 f383 	clz	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d102      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xa6>
 8001a08:	4b6f      	ldr	r3, [pc, #444]	; (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	e00f      	b.n	8001a2e <HAL_RCC_ClockConfig+0xc6>
 8001a0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	667b      	str	r3, [r7, #100]	; 0x64
 8001a1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a20:	663b      	str	r3, [r7, #96]	; 0x60
 8001a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a2a:	4b67      	ldr	r3, [pc, #412]	; (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a32:	65ba      	str	r2, [r7, #88]	; 0x58
 8001a34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a36:	fa92 f2a2 	rbit	r2, r2
 8001a3a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001a3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a3e:	fab2 f282 	clz	r2, r2
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f042 0220 	orr.w	r2, r2, #32
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	f002 021f 	and.w	r2, r2, #31
 8001a4e:	2101      	movs	r1, #1
 8001a50:	fa01 f202 	lsl.w	r2, r1, r2
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d17b      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0f3      	b.n	8001c46 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d13c      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x178>
 8001a66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a6e:	fa93 f3a3 	rbit	r3, r3
 8001a72:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a76:	fab3 f383 	clz	r3, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	095b      	lsrs	r3, r3, #5
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d102      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x128>
 8001a8a:	4b4f      	ldr	r3, [pc, #316]	; (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	e00f      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x148>
 8001a90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8001a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8001aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aac:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ab8:	fa92 f2a2 	rbit	r2, r2
 8001abc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ac0:	fab2 f282 	clz	r2, r2
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	f042 0220 	orr.w	r2, r2, #32
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	f002 021f 	and.w	r2, r2, #31
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d13a      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0b2      	b.n	8001c46 <HAL_RCC_ClockConfig+0x2de>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae6:	fa93 f3a3 	rbit	r3, r3
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	095b      	lsrs	r3, r3, #5
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d102      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x1a0>
 8001b02:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	e00d      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1bc>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
 8001b14:	2302      	movs	r3, #2
 8001b16:	623b      	str	r3, [r7, #32]
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	2202      	movs	r2, #2
 8001b26:	61ba      	str	r2, [r7, #24]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	fa92 f2a2 	rbit	r2, r2
 8001b2e:	617a      	str	r2, [r7, #20]
  return result;
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	fab2 f282 	clz	r2, r2
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	f042 0220 	orr.w	r2, r2, #32
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	f002 021f 	and.w	r2, r2, #31
 8001b42:	2101      	movs	r1, #1
 8001b44:	fa01 f202 	lsl.w	r2, r1, r2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e079      	b.n	8001c46 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b52:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f023 0203 	bic.w	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	491a      	ldr	r1, [pc, #104]	; (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b64:	f7fe fd6e 	bl	8000644 <HAL_GetTick>
 8001b68:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6c:	f7fe fd6a 	bl	8000644 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e061      	b.n	8001c46 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 020c 	and.w	r2, r3, #12
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d1eb      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_ClockConfig+0x25c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d214      	bcs.n	8001bcc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_RCC_ClockConfig+0x25c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 0207 	bic.w	r2, r3, #7
 8001baa:	4906      	ldr	r1, [pc, #24]	; (8001bc4 <HAL_RCC_ClockConfig+0x25c>)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <HAL_RCC_ClockConfig+0x25c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d005      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e040      	b.n	8001c46 <HAL_RCC_ClockConfig+0x2de>
 8001bc4:	40022000 	.word	0x40022000
 8001bc8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_RCC_ClockConfig+0x2e8>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	491a      	ldr	r1, [pc, #104]	; (8001c50 <HAL_RCC_ClockConfig+0x2e8>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d009      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <HAL_RCC_ClockConfig+0x2e8>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4912      	ldr	r1, [pc, #72]	; (8001c50 <HAL_RCC_ClockConfig+0x2e8>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c0a:	f000 f829 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001c0e:	4601      	mov	r1, r0
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_RCC_ClockConfig+0x2e8>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c18:	22f0      	movs	r2, #240	; 0xf0
 8001c1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	fa92 f2a2 	rbit	r2, r2
 8001c22:	60fa      	str	r2, [r7, #12]
  return result;
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	fab2 f282 	clz	r2, r2
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	40d3      	lsrs	r3, r2
 8001c2e:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <HAL_RCC_ClockConfig+0x2ec>)
 8001c30:	5cd3      	ldrb	r3, [r2, r3]
 8001c32:	fa21 f303 	lsr.w	r3, r1, r3
 8001c36:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <HAL_RCC_ClockConfig+0x2f0>)
 8001c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_RCC_ClockConfig+0x2f4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fcbc 	bl	80005bc <HAL_InitTick>
  
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3778      	adds	r7, #120	; 0x78
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	080031a8 	.word	0x080031a8
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b08b      	sub	sp, #44	; 0x2c
 8001c64:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d002      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x30>
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d003      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0x36>
 8001c8e:	e03f      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c92:	623b      	str	r3, [r7, #32]
      break;
 8001c94:	e03f      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c9c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001ca0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	fa92 f2a2 	rbit	r2, r2
 8001ca8:	607a      	str	r2, [r7, #4]
  return result;
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	fab2 f282 	clz	r2, r2
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	40d3      	lsrs	r3, r2
 8001cb4:	4a1d      	ldr	r2, [pc, #116]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
 8001cb8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	fa92 f2a2 	rbit	r2, r2
 8001ccc:	60fa      	str	r2, [r7, #12]
  return result;
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	fab2 f282 	clz	r2, r2
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	40d3      	lsrs	r3, r2
 8001cd8:	4a15      	ldr	r2, [pc, #84]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ce8:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fb02 f303 	mul.w	r3, r2, r3
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf8:	e007      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cfa:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	fb02 f303 	mul.w	r3, r2, r3
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	623b      	str	r3, [r7, #32]
      break;
 8001d0e:	e002      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d12:	623b      	str	r3, [r7, #32]
      break;
 8001d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d16:	6a3b      	ldr	r3, [r7, #32]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	372c      	adds	r7, #44	; 0x2c
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	40021000 	.word	0x40021000
 8001d28:	007a1200 	.word	0x007a1200
 8001d2c:	080031b8 	.word	0x080031b8
 8001d30:	080031c8 	.word	0x080031c8

08001d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b092      	sub	sp, #72	; 0x48
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80d4 	beq.w	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d58:	4b4e      	ldr	r3, [pc, #312]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10e      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d64:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	4a4a      	ldr	r2, [pc, #296]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	61d3      	str	r3, [r2, #28]
 8001d70:	4b48      	ldr	r3, [pc, #288]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	4b45      	ldr	r3, [pc, #276]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d118      	bne.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8e:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a41      	ldr	r2, [pc, #260]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9a:	f7fe fc53 	bl	8000644 <HAL_GetTick>
 8001d9e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	e008      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7fe fc4f 	bl	8000644 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b64      	cmp	r3, #100	; 0x64
 8001dae:	d901      	bls.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e1d6      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dc0:	4b34      	ldr	r3, [pc, #208]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 8084 	beq.w	8001eda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d07c      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001de0:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	2300      	movs	r3, #0
 8001e30:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e32:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e36:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d04b      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7fe fbff 	bl	8000644 <HAL_GetTick>
 8001e46:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4a:	f7fe fbfb 	bl	8000644 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e180      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8001e60:	2302      	movs	r3, #2
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	623b      	str	r3, [r7, #32]
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	61fb      	str	r3, [r7, #28]
  return result;
 8001e78:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d108      	bne.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001e8e:	4b01      	ldr	r3, [pc, #4]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	e00d      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	10908100 	.word	0x10908100
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	4ba0      	ldr	r3, [pc, #640]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	613a      	str	r2, [r7, #16]
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	fa92 f2a2 	rbit	r2, r2
 8001eba:	60fa      	str	r2, [r7, #12]
  return result;
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	fab2 f282 	clz	r2, r2
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	f002 021f 	and.w	r2, r2, #31
 8001ece:	2101      	movs	r1, #1
 8001ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0b7      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001eda:	4b95      	ldr	r3, [pc, #596]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4992      	ldr	r1, [pc, #584]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d105      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef4:	4b8e      	ldr	r3, [pc, #568]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	4a8d      	ldr	r2, [pc, #564]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f0c:	4b88      	ldr	r3, [pc, #544]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	f023 0203 	bic.w	r2, r3, #3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4985      	ldr	r1, [pc, #532]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d008      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f2a:	4b81      	ldr	r3, [pc, #516]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	497e      	ldr	r1, [pc, #504]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f48:	4b79      	ldr	r3, [pc, #484]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	4976      	ldr	r1, [pc, #472]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f66:	4b72      	ldr	r3, [pc, #456]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f023 0210 	bic.w	r2, r3, #16
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	496f      	ldr	r1, [pc, #444]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001f84:	4b6a      	ldr	r3, [pc, #424]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f90:	4967      	ldr	r1, [pc, #412]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d008      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fa2:	4b63      	ldr	r3, [pc, #396]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f023 0220 	bic.w	r2, r3, #32
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4960      	ldr	r1, [pc, #384]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fc0:	4b5b      	ldr	r3, [pc, #364]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	4958      	ldr	r1, [pc, #352]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d008      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fde:	4b54      	ldr	r3, [pc, #336]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	4951      	ldr	r1, [pc, #324]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001ffc:	4b4c      	ldr	r3, [pc, #304]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4949      	ldr	r1, [pc, #292]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800200a:	4313      	orrs	r3, r2
 800200c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002016:	2b00      	cmp	r3, #0
 8002018:	d008      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800201a:	4b45      	ldr	r3, [pc, #276]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4942      	ldr	r1, [pc, #264]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002038:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	493a      	ldr	r1, [pc, #232]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002046:	4313      	orrs	r3, r2
 8002048:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d008      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002056:	4b36      	ldr	r3, [pc, #216]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002062:	4933      	ldr	r1, [pc, #204]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002064:	4313      	orrs	r3, r2
 8002066:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002074:	4b2e      	ldr	r3, [pc, #184]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002080:	492b      	ldr	r1, [pc, #172]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002082:	4313      	orrs	r3, r2
 8002084:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002092:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4924      	ldr	r1, [pc, #144]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80020b0:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020bc:	491c      	ldr	r1, [pc, #112]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020da:	4915      	ldr	r1, [pc, #84]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80020ec:	4b10      	ldr	r3, [pc, #64]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f8:	490d      	ldr	r1, [pc, #52]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d008      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002116:	4906      	ldr	r1, [pc, #24]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002118:	4313      	orrs	r3, r2
 800211a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00c      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002128:	4b01      	ldr	r3, [pc, #4]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	e002      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213c:	490b      	ldr	r1, [pc, #44]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800213e:	4313      	orrs	r3, r2
 8002140:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800215a:	4904      	ldr	r1, [pc, #16]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800215c:	4313      	orrs	r3, r2
 800215e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3748      	adds	r7, #72	; 0x48
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000

08002170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e049      	b.n	8002216 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d106      	bne.n	800219c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7fe f93c 	bl	8000414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3304      	adds	r3, #4
 80021ac:	4619      	mov	r1, r3
 80021ae:	4610      	mov	r0, r2
 80021b0:	f000 fad2 	bl	8002758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e049      	b.n	80022c4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f841 	bl	80022cc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2202      	movs	r2, #2
 800224e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3304      	adds	r3, #4
 800225a:	4619      	mov	r1, r3
 800225c:	4610      	mov	r0, r2
 800225e:	f000 fa7b 	bl	8002758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d109      	bne.n	8002304 <HAL_TIM_OC_Start+0x24>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	bf14      	ite	ne
 80022fc:	2301      	movne	r3, #1
 80022fe:	2300      	moveq	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	e03c      	b.n	800237e <HAL_TIM_OC_Start+0x9e>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2b04      	cmp	r3, #4
 8002308:	d109      	bne.n	800231e <HAL_TIM_OC_Start+0x3e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b01      	cmp	r3, #1
 8002314:	bf14      	ite	ne
 8002316:	2301      	movne	r3, #1
 8002318:	2300      	moveq	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	e02f      	b.n	800237e <HAL_TIM_OC_Start+0x9e>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d109      	bne.n	8002338 <HAL_TIM_OC_Start+0x58>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b01      	cmp	r3, #1
 800232e:	bf14      	ite	ne
 8002330:	2301      	movne	r3, #1
 8002332:	2300      	moveq	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	e022      	b.n	800237e <HAL_TIM_OC_Start+0x9e>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b0c      	cmp	r3, #12
 800233c:	d109      	bne.n	8002352 <HAL_TIM_OC_Start+0x72>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b01      	cmp	r3, #1
 8002348:	bf14      	ite	ne
 800234a:	2301      	movne	r3, #1
 800234c:	2300      	moveq	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	e015      	b.n	800237e <HAL_TIM_OC_Start+0x9e>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b10      	cmp	r3, #16
 8002356:	d109      	bne.n	800236c <HAL_TIM_OC_Start+0x8c>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	bf14      	ite	ne
 8002364:	2301      	movne	r3, #1
 8002366:	2300      	moveq	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	e008      	b.n	800237e <HAL_TIM_OC_Start+0x9e>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	bf14      	ite	ne
 8002378:	2301      	movne	r3, #1
 800237a:	2300      	moveq	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e0a1      	b.n	80024ca <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d104      	bne.n	8002396 <HAL_TIM_OC_Start+0xb6>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002394:	e023      	b.n	80023de <HAL_TIM_OC_Start+0xfe>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b04      	cmp	r3, #4
 800239a:	d104      	bne.n	80023a6 <HAL_TIM_OC_Start+0xc6>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023a4:	e01b      	b.n	80023de <HAL_TIM_OC_Start+0xfe>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d104      	bne.n	80023b6 <HAL_TIM_OC_Start+0xd6>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2202      	movs	r2, #2
 80023b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023b4:	e013      	b.n	80023de <HAL_TIM_OC_Start+0xfe>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b0c      	cmp	r3, #12
 80023ba:	d104      	bne.n	80023c6 <HAL_TIM_OC_Start+0xe6>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023c4:	e00b      	b.n	80023de <HAL_TIM_OC_Start+0xfe>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b10      	cmp	r3, #16
 80023ca:	d104      	bne.n	80023d6 <HAL_TIM_OC_Start+0xf6>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023d4:	e003      	b.n	80023de <HAL_TIM_OC_Start+0xfe>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2202      	movs	r2, #2
 80023da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2201      	movs	r2, #1
 80023e4:	6839      	ldr	r1, [r7, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fdf4 	bl	8002fd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a38      	ldr	r2, [pc, #224]	; (80024d4 <HAL_TIM_OC_Start+0x1f4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d018      	beq.n	8002428 <HAL_TIM_OC_Start+0x148>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a37      	ldr	r2, [pc, #220]	; (80024d8 <HAL_TIM_OC_Start+0x1f8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d013      	beq.n	8002428 <HAL_TIM_OC_Start+0x148>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a35      	ldr	r2, [pc, #212]	; (80024dc <HAL_TIM_OC_Start+0x1fc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00e      	beq.n	8002428 <HAL_TIM_OC_Start+0x148>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a34      	ldr	r2, [pc, #208]	; (80024e0 <HAL_TIM_OC_Start+0x200>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d009      	beq.n	8002428 <HAL_TIM_OC_Start+0x148>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a32      	ldr	r2, [pc, #200]	; (80024e4 <HAL_TIM_OC_Start+0x204>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d004      	beq.n	8002428 <HAL_TIM_OC_Start+0x148>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a31      	ldr	r2, [pc, #196]	; (80024e8 <HAL_TIM_OC_Start+0x208>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d101      	bne.n	800242c <HAL_TIM_OC_Start+0x14c>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <HAL_TIM_OC_Start+0x14e>
 800242c:	2300      	movs	r3, #0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002440:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a23      	ldr	r2, [pc, #140]	; (80024d4 <HAL_TIM_OC_Start+0x1f4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d01d      	beq.n	8002488 <HAL_TIM_OC_Start+0x1a8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002454:	d018      	beq.n	8002488 <HAL_TIM_OC_Start+0x1a8>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a24      	ldr	r2, [pc, #144]	; (80024ec <HAL_TIM_OC_Start+0x20c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d013      	beq.n	8002488 <HAL_TIM_OC_Start+0x1a8>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a22      	ldr	r2, [pc, #136]	; (80024f0 <HAL_TIM_OC_Start+0x210>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d00e      	beq.n	8002488 <HAL_TIM_OC_Start+0x1a8>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <HAL_TIM_OC_Start+0x1f8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d009      	beq.n	8002488 <HAL_TIM_OC_Start+0x1a8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a18      	ldr	r2, [pc, #96]	; (80024dc <HAL_TIM_OC_Start+0x1fc>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d004      	beq.n	8002488 <HAL_TIM_OC_Start+0x1a8>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <HAL_TIM_OC_Start+0x208>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d115      	bne.n	80024b4 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_TIM_OC_Start+0x214>)
 8002490:	4013      	ands	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b06      	cmp	r3, #6
 8002498:	d015      	beq.n	80024c6 <HAL_TIM_OC_Start+0x1e6>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a0:	d011      	beq.n	80024c6 <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0201 	orr.w	r2, r2, #1
 80024b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b2:	e008      	b.n	80024c6 <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0201 	orr.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e000      	b.n	80024c8 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40012c00 	.word	0x40012c00
 80024d8:	40013400 	.word	0x40013400
 80024dc:	40014000 	.word	0x40014000
 80024e0:	40014400 	.word	0x40014400
 80024e4:	40014800 	.word	0x40014800
 80024e8:	40015000 	.word	0x40015000
 80024ec:	40000400 	.word	0x40000400
 80024f0:	40000800 	.word	0x40000800
 80024f4:	00010007 	.word	0x00010007

080024f8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_TIM_OC_ConfigChannel+0x1a>
 800250e:	2302      	movs	r3, #2
 8002510:	e064      	b.n	80025dc <HAL_TIM_OC_ConfigChannel+0xe4>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b14      	cmp	r3, #20
 800251e:	d857      	bhi.n	80025d0 <HAL_TIM_OC_ConfigChannel+0xd8>
 8002520:	a201      	add	r2, pc, #4	; (adr r2, 8002528 <HAL_TIM_OC_ConfigChannel+0x30>)
 8002522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002526:	bf00      	nop
 8002528:	0800257d 	.word	0x0800257d
 800252c:	080025d1 	.word	0x080025d1
 8002530:	080025d1 	.word	0x080025d1
 8002534:	080025d1 	.word	0x080025d1
 8002538:	0800258b 	.word	0x0800258b
 800253c:	080025d1 	.word	0x080025d1
 8002540:	080025d1 	.word	0x080025d1
 8002544:	080025d1 	.word	0x080025d1
 8002548:	08002599 	.word	0x08002599
 800254c:	080025d1 	.word	0x080025d1
 8002550:	080025d1 	.word	0x080025d1
 8002554:	080025d1 	.word	0x080025d1
 8002558:	080025a7 	.word	0x080025a7
 800255c:	080025d1 	.word	0x080025d1
 8002560:	080025d1 	.word	0x080025d1
 8002564:	080025d1 	.word	0x080025d1
 8002568:	080025b5 	.word	0x080025b5
 800256c:	080025d1 	.word	0x080025d1
 8002570:	080025d1 	.word	0x080025d1
 8002574:	080025d1 	.word	0x080025d1
 8002578:	080025c3 	.word	0x080025c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f986 	bl	8002894 <TIM_OC1_SetConfig>
      break;
 8002588:	e023      	b.n	80025d2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fa19 	bl	80029c8 <TIM_OC2_SetConfig>
      break;
 8002596:	e01c      	b.n	80025d2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 faa6 	bl	8002af0 <TIM_OC3_SetConfig>
      break;
 80025a4:	e015      	b.n	80025d2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fb31 	bl	8002c14 <TIM_OC4_SetConfig>
      break;
 80025b2:	e00e      	b.n	80025d2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fb9a 	bl	8002cf4 <TIM_OC5_SetConfig>
      break;
 80025c0:	e007      	b.n	80025d2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fbfd 	bl	8002dc8 <TIM_OC6_SetConfig>
      break;
 80025ce:	e000      	b.n	80025d2 <HAL_TIM_OC_ConfigChannel+0xda>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80025d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_TIM_ConfigClockSource+0x18>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e0a8      	b.n	800274e <HAL_TIM_ConfigClockSource+0x16a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800261e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002626:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b40      	cmp	r3, #64	; 0x40
 8002636:	d067      	beq.n	8002708 <HAL_TIM_ConfigClockSource+0x124>
 8002638:	2b40      	cmp	r3, #64	; 0x40
 800263a:	d80b      	bhi.n	8002654 <HAL_TIM_ConfigClockSource+0x70>
 800263c:	2b10      	cmp	r3, #16
 800263e:	d073      	beq.n	8002728 <HAL_TIM_ConfigClockSource+0x144>
 8002640:	2b10      	cmp	r3, #16
 8002642:	d802      	bhi.n	800264a <HAL_TIM_ConfigClockSource+0x66>
 8002644:	2b00      	cmp	r3, #0
 8002646:	d06f      	beq.n	8002728 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002648:	e078      	b.n	800273c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800264a:	2b20      	cmp	r3, #32
 800264c:	d06c      	beq.n	8002728 <HAL_TIM_ConfigClockSource+0x144>
 800264e:	2b30      	cmp	r3, #48	; 0x30
 8002650:	d06a      	beq.n	8002728 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002652:	e073      	b.n	800273c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002654:	2b70      	cmp	r3, #112	; 0x70
 8002656:	d00d      	beq.n	8002674 <HAL_TIM_ConfigClockSource+0x90>
 8002658:	2b70      	cmp	r3, #112	; 0x70
 800265a:	d804      	bhi.n	8002666 <HAL_TIM_ConfigClockSource+0x82>
 800265c:	2b50      	cmp	r3, #80	; 0x50
 800265e:	d033      	beq.n	80026c8 <HAL_TIM_ConfigClockSource+0xe4>
 8002660:	2b60      	cmp	r3, #96	; 0x60
 8002662:	d041      	beq.n	80026e8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002664:	e06a      	b.n	800273c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266a:	d066      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x156>
 800266c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002670:	d017      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002672:	e063      	b.n	800273c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6899      	ldr	r1, [r3, #8]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f000 fc86 	bl	8002f94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002696:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	609a      	str	r2, [r3, #8]
      break;
 80026a0:	e04c      	b.n	800273c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6899      	ldr	r1, [r3, #8]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f000 fc6f 	bl	8002f94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026c4:	609a      	str	r2, [r3, #8]
      break;
 80026c6:	e039      	b.n	800273c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	461a      	mov	r2, r3
 80026d6:	f000 fbe3 	bl	8002ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2150      	movs	r1, #80	; 0x50
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fc3c 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 80026e6:	e029      	b.n	800273c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	461a      	mov	r2, r3
 80026f6:	f000 fc02 	bl	8002efe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2160      	movs	r1, #96	; 0x60
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fc2c 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002706:	e019      	b.n	800273c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6859      	ldr	r1, [r3, #4]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	461a      	mov	r2, r3
 8002716:	f000 fbc3 	bl	8002ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2140      	movs	r1, #64	; 0x40
 8002720:	4618      	mov	r0, r3
 8002722:	f000 fc1c 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002726:	e009      	b.n	800273c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	4610      	mov	r0, r2
 8002734:	f000 fc13 	bl	8002f5e <TIM_ITRx_SetConfig>
        break;
 8002738:	e000      	b.n	800273c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800273a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a42      	ldr	r2, [pc, #264]	; (8002874 <TIM_Base_SetConfig+0x11c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d013      	beq.n	8002798 <TIM_Base_SetConfig+0x40>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002776:	d00f      	beq.n	8002798 <TIM_Base_SetConfig+0x40>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a3f      	ldr	r2, [pc, #252]	; (8002878 <TIM_Base_SetConfig+0x120>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00b      	beq.n	8002798 <TIM_Base_SetConfig+0x40>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a3e      	ldr	r2, [pc, #248]	; (800287c <TIM_Base_SetConfig+0x124>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d007      	beq.n	8002798 <TIM_Base_SetConfig+0x40>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a3d      	ldr	r2, [pc, #244]	; (8002880 <TIM_Base_SetConfig+0x128>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d003      	beq.n	8002798 <TIM_Base_SetConfig+0x40>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a3c      	ldr	r2, [pc, #240]	; (8002884 <TIM_Base_SetConfig+0x12c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d108      	bne.n	80027aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a31      	ldr	r2, [pc, #196]	; (8002874 <TIM_Base_SetConfig+0x11c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d01f      	beq.n	80027f2 <TIM_Base_SetConfig+0x9a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b8:	d01b      	beq.n	80027f2 <TIM_Base_SetConfig+0x9a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a2e      	ldr	r2, [pc, #184]	; (8002878 <TIM_Base_SetConfig+0x120>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d017      	beq.n	80027f2 <TIM_Base_SetConfig+0x9a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a2d      	ldr	r2, [pc, #180]	; (800287c <TIM_Base_SetConfig+0x124>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <TIM_Base_SetConfig+0x9a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a2c      	ldr	r2, [pc, #176]	; (8002880 <TIM_Base_SetConfig+0x128>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00f      	beq.n	80027f2 <TIM_Base_SetConfig+0x9a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a2c      	ldr	r2, [pc, #176]	; (8002888 <TIM_Base_SetConfig+0x130>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00b      	beq.n	80027f2 <TIM_Base_SetConfig+0x9a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a2b      	ldr	r2, [pc, #172]	; (800288c <TIM_Base_SetConfig+0x134>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d007      	beq.n	80027f2 <TIM_Base_SetConfig+0x9a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a2a      	ldr	r2, [pc, #168]	; (8002890 <TIM_Base_SetConfig+0x138>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d003      	beq.n	80027f2 <TIM_Base_SetConfig+0x9a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a25      	ldr	r2, [pc, #148]	; (8002884 <TIM_Base_SetConfig+0x12c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d108      	bne.n	8002804 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a12      	ldr	r2, [pc, #72]	; (8002874 <TIM_Base_SetConfig+0x11c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d013      	beq.n	8002858 <TIM_Base_SetConfig+0x100>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a13      	ldr	r2, [pc, #76]	; (8002880 <TIM_Base_SetConfig+0x128>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00f      	beq.n	8002858 <TIM_Base_SetConfig+0x100>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a13      	ldr	r2, [pc, #76]	; (8002888 <TIM_Base_SetConfig+0x130>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00b      	beq.n	8002858 <TIM_Base_SetConfig+0x100>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a12      	ldr	r2, [pc, #72]	; (800288c <TIM_Base_SetConfig+0x134>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d007      	beq.n	8002858 <TIM_Base_SetConfig+0x100>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a11      	ldr	r2, [pc, #68]	; (8002890 <TIM_Base_SetConfig+0x138>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d003      	beq.n	8002858 <TIM_Base_SetConfig+0x100>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a0c      	ldr	r2, [pc, #48]	; (8002884 <TIM_Base_SetConfig+0x12c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d103      	bne.n	8002860 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	615a      	str	r2, [r3, #20]
}
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40012c00 	.word	0x40012c00
 8002878:	40000400 	.word	0x40000400
 800287c:	40000800 	.word	0x40000800
 8002880:	40013400 	.word	0x40013400
 8002884:	40015000 	.word	0x40015000
 8002888:	40014000 	.word	0x40014000
 800288c:	40014400 	.word	0x40014400
 8002890:	40014800 	.word	0x40014800

08002894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	f023 0201 	bic.w	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0303 	bic.w	r3, r3, #3
 80028ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f023 0302 	bic.w	r3, r3, #2
 80028e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a30      	ldr	r2, [pc, #192]	; (80029b0 <TIM_OC1_SetConfig+0x11c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d013      	beq.n	800291c <TIM_OC1_SetConfig+0x88>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a2f      	ldr	r2, [pc, #188]	; (80029b4 <TIM_OC1_SetConfig+0x120>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00f      	beq.n	800291c <TIM_OC1_SetConfig+0x88>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a2e      	ldr	r2, [pc, #184]	; (80029b8 <TIM_OC1_SetConfig+0x124>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00b      	beq.n	800291c <TIM_OC1_SetConfig+0x88>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a2d      	ldr	r2, [pc, #180]	; (80029bc <TIM_OC1_SetConfig+0x128>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d007      	beq.n	800291c <TIM_OC1_SetConfig+0x88>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a2c      	ldr	r2, [pc, #176]	; (80029c0 <TIM_OC1_SetConfig+0x12c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d003      	beq.n	800291c <TIM_OC1_SetConfig+0x88>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a2b      	ldr	r2, [pc, #172]	; (80029c4 <TIM_OC1_SetConfig+0x130>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d10c      	bne.n	8002936 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f023 0308 	bic.w	r3, r3, #8
 8002922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f023 0304 	bic.w	r3, r3, #4
 8002934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a1d      	ldr	r2, [pc, #116]	; (80029b0 <TIM_OC1_SetConfig+0x11c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <TIM_OC1_SetConfig+0xd2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a1c      	ldr	r2, [pc, #112]	; (80029b4 <TIM_OC1_SetConfig+0x120>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00f      	beq.n	8002966 <TIM_OC1_SetConfig+0xd2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <TIM_OC1_SetConfig+0x124>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00b      	beq.n	8002966 <TIM_OC1_SetConfig+0xd2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a1a      	ldr	r2, [pc, #104]	; (80029bc <TIM_OC1_SetConfig+0x128>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <TIM_OC1_SetConfig+0xd2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <TIM_OC1_SetConfig+0x12c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d003      	beq.n	8002966 <TIM_OC1_SetConfig+0xd2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a18      	ldr	r2, [pc, #96]	; (80029c4 <TIM_OC1_SetConfig+0x130>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d111      	bne.n	800298a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800296c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	621a      	str	r2, [r3, #32]
}
 80029a4:	bf00      	nop
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40013400 	.word	0x40013400
 80029b8:	40014000 	.word	0x40014000
 80029bc:	40014400 	.word	0x40014400
 80029c0:	40014800 	.word	0x40014800
 80029c4:	40015000 	.word	0x40015000

080029c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	f023 0210 	bic.w	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f023 0320 	bic.w	r3, r3, #32
 8002a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a2c      	ldr	r2, [pc, #176]	; (8002ad8 <TIM_OC2_SetConfig+0x110>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d007      	beq.n	8002a3c <TIM_OC2_SetConfig+0x74>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a2b      	ldr	r2, [pc, #172]	; (8002adc <TIM_OC2_SetConfig+0x114>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d003      	beq.n	8002a3c <TIM_OC2_SetConfig+0x74>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a2a      	ldr	r2, [pc, #168]	; (8002ae0 <TIM_OC2_SetConfig+0x118>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d10d      	bne.n	8002a58 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <TIM_OC2_SetConfig+0x110>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d013      	beq.n	8002a88 <TIM_OC2_SetConfig+0xc0>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a1e      	ldr	r2, [pc, #120]	; (8002adc <TIM_OC2_SetConfig+0x114>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00f      	beq.n	8002a88 <TIM_OC2_SetConfig+0xc0>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <TIM_OC2_SetConfig+0x11c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00b      	beq.n	8002a88 <TIM_OC2_SetConfig+0xc0>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a1d      	ldr	r2, [pc, #116]	; (8002ae8 <TIM_OC2_SetConfig+0x120>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d007      	beq.n	8002a88 <TIM_OC2_SetConfig+0xc0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <TIM_OC2_SetConfig+0x124>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d003      	beq.n	8002a88 <TIM_OC2_SetConfig+0xc0>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a17      	ldr	r2, [pc, #92]	; (8002ae0 <TIM_OC2_SetConfig+0x118>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d113      	bne.n	8002ab0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a8e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a96:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	621a      	str	r2, [r3, #32]
}
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40012c00 	.word	0x40012c00
 8002adc:	40013400 	.word	0x40013400
 8002ae0:	40015000 	.word	0x40015000
 8002ae4:	40014000 	.word	0x40014000
 8002ae8:	40014400 	.word	0x40014400
 8002aec:	40014800 	.word	0x40014800

08002af0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0303 	bic.w	r3, r3, #3
 8002b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	021b      	lsls	r3, r3, #8
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a2b      	ldr	r2, [pc, #172]	; (8002bfc <TIM_OC3_SetConfig+0x10c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <TIM_OC3_SetConfig+0x72>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a2a      	ldr	r2, [pc, #168]	; (8002c00 <TIM_OC3_SetConfig+0x110>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d003      	beq.n	8002b62 <TIM_OC3_SetConfig+0x72>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a29      	ldr	r2, [pc, #164]	; (8002c04 <TIM_OC3_SetConfig+0x114>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d10d      	bne.n	8002b7e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b7c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a1e      	ldr	r2, [pc, #120]	; (8002bfc <TIM_OC3_SetConfig+0x10c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <TIM_OC3_SetConfig+0xbe>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1d      	ldr	r2, [pc, #116]	; (8002c00 <TIM_OC3_SetConfig+0x110>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00f      	beq.n	8002bae <TIM_OC3_SetConfig+0xbe>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a1d      	ldr	r2, [pc, #116]	; (8002c08 <TIM_OC3_SetConfig+0x118>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00b      	beq.n	8002bae <TIM_OC3_SetConfig+0xbe>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a1c      	ldr	r2, [pc, #112]	; (8002c0c <TIM_OC3_SetConfig+0x11c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d007      	beq.n	8002bae <TIM_OC3_SetConfig+0xbe>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a1b      	ldr	r2, [pc, #108]	; (8002c10 <TIM_OC3_SetConfig+0x120>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d003      	beq.n	8002bae <TIM_OC3_SetConfig+0xbe>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a16      	ldr	r2, [pc, #88]	; (8002c04 <TIM_OC3_SetConfig+0x114>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d113      	bne.n	8002bd6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	621a      	str	r2, [r3, #32]
}
 8002bf0:	bf00      	nop
 8002bf2:	371c      	adds	r7, #28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40013400 	.word	0x40013400
 8002c04:	40015000 	.word	0x40015000
 8002c08:	40014000 	.word	0x40014000
 8002c0c:	40014400 	.word	0x40014400
 8002c10:	40014800 	.word	0x40014800

08002c14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	031b      	lsls	r3, r3, #12
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a1a      	ldr	r2, [pc, #104]	; (8002cdc <TIM_OC4_SetConfig+0xc8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d013      	beq.n	8002ca0 <TIM_OC4_SetConfig+0x8c>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <TIM_OC4_SetConfig+0xcc>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00f      	beq.n	8002ca0 <TIM_OC4_SetConfig+0x8c>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a18      	ldr	r2, [pc, #96]	; (8002ce4 <TIM_OC4_SetConfig+0xd0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d00b      	beq.n	8002ca0 <TIM_OC4_SetConfig+0x8c>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a17      	ldr	r2, [pc, #92]	; (8002ce8 <TIM_OC4_SetConfig+0xd4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d007      	beq.n	8002ca0 <TIM_OC4_SetConfig+0x8c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a16      	ldr	r2, [pc, #88]	; (8002cec <TIM_OC4_SetConfig+0xd8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d003      	beq.n	8002ca0 <TIM_OC4_SetConfig+0x8c>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <TIM_OC4_SetConfig+0xdc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d109      	bne.n	8002cb4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	019b      	lsls	r3, r3, #6
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	621a      	str	r2, [r3, #32]
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40012c00 	.word	0x40012c00
 8002ce0:	40013400 	.word	0x40013400
 8002ce4:	40014000 	.word	0x40014000
 8002ce8:	40014400 	.word	0x40014400
 8002cec:	40014800 	.word	0x40014800
 8002cf0:	40015000 	.word	0x40015000

08002cf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002d38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	041b      	lsls	r3, r3, #16
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a19      	ldr	r2, [pc, #100]	; (8002db0 <TIM_OC5_SetConfig+0xbc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <TIM_OC5_SetConfig+0x82>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <TIM_OC5_SetConfig+0xc0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00f      	beq.n	8002d76 <TIM_OC5_SetConfig+0x82>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a17      	ldr	r2, [pc, #92]	; (8002db8 <TIM_OC5_SetConfig+0xc4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00b      	beq.n	8002d76 <TIM_OC5_SetConfig+0x82>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a16      	ldr	r2, [pc, #88]	; (8002dbc <TIM_OC5_SetConfig+0xc8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d007      	beq.n	8002d76 <TIM_OC5_SetConfig+0x82>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a15      	ldr	r2, [pc, #84]	; (8002dc0 <TIM_OC5_SetConfig+0xcc>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d003      	beq.n	8002d76 <TIM_OC5_SetConfig+0x82>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <TIM_OC5_SetConfig+0xd0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d109      	bne.n	8002d8a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	621a      	str	r2, [r3, #32]
}
 8002da4:	bf00      	nop
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	40012c00 	.word	0x40012c00
 8002db4:	40013400 	.word	0x40013400
 8002db8:	40014000 	.word	0x40014000
 8002dbc:	40014400 	.word	0x40014400
 8002dc0:	40014800 	.word	0x40014800
 8002dc4:	40015000 	.word	0x40015000

08002dc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	051b      	lsls	r3, r3, #20
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a1a      	ldr	r2, [pc, #104]	; (8002e88 <TIM_OC6_SetConfig+0xc0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d013      	beq.n	8002e4c <TIM_OC6_SetConfig+0x84>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a19      	ldr	r2, [pc, #100]	; (8002e8c <TIM_OC6_SetConfig+0xc4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00f      	beq.n	8002e4c <TIM_OC6_SetConfig+0x84>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a18      	ldr	r2, [pc, #96]	; (8002e90 <TIM_OC6_SetConfig+0xc8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00b      	beq.n	8002e4c <TIM_OC6_SetConfig+0x84>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a17      	ldr	r2, [pc, #92]	; (8002e94 <TIM_OC6_SetConfig+0xcc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d007      	beq.n	8002e4c <TIM_OC6_SetConfig+0x84>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a16      	ldr	r2, [pc, #88]	; (8002e98 <TIM_OC6_SetConfig+0xd0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d003      	beq.n	8002e4c <TIM_OC6_SetConfig+0x84>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a15      	ldr	r2, [pc, #84]	; (8002e9c <TIM_OC6_SetConfig+0xd4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d109      	bne.n	8002e60 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	029b      	lsls	r3, r3, #10
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	621a      	str	r2, [r3, #32]
}
 8002e7a:	bf00      	nop
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40012c00 	.word	0x40012c00
 8002e8c:	40013400 	.word	0x40013400
 8002e90:	40014000 	.word	0x40014000
 8002e94:	40014400 	.word	0x40014400
 8002e98:	40014800 	.word	0x40014800
 8002e9c:	40015000 	.word	0x40015000

08002ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f023 0201 	bic.w	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f023 030a 	bic.w	r3, r3, #10
 8002edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	621a      	str	r2, [r3, #32]
}
 8002ef2:	bf00      	nop
 8002ef4:	371c      	adds	r7, #28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b087      	sub	sp, #28
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	f023 0210 	bic.w	r2, r3, #16
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	031b      	lsls	r3, r3, #12
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	621a      	str	r2, [r3, #32]
}
 8002f52:	bf00      	nop
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f043 0307 	orr.w	r3, r3, #7
 8002f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	609a      	str	r2, [r3, #8]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	021a      	lsls	r2, r3, #8
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	609a      	str	r2, [r3, #8]
}
 8002fc8:	bf00      	nop
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a1a      	ldr	r2, [r3, #32]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a1a      	ldr	r2, [r3, #32]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	431a      	orrs	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	621a      	str	r2, [r3, #32]
}
 8003012:	bf00      	nop
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003034:	2302      	movs	r3, #2
 8003036:	e06d      	b.n	8003114 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a30      	ldr	r2, [pc, #192]	; (8003120 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a2f      	ldr	r2, [pc, #188]	; (8003124 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a2d      	ldr	r2, [pc, #180]	; (8003128 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d108      	bne.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800307c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4313      	orrs	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1e      	ldr	r2, [pc, #120]	; (8003120 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d01d      	beq.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b4:	d018      	beq.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1c      	ldr	r2, [pc, #112]	; (800312c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d013      	beq.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1a      	ldr	r2, [pc, #104]	; (8003130 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00e      	beq.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a15      	ldr	r2, [pc, #84]	; (8003124 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d009      	beq.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a16      	ldr	r2, [pc, #88]	; (8003134 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d004      	beq.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a11      	ldr	r2, [pc, #68]	; (8003128 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10c      	bne.n	8003102 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	40012c00 	.word	0x40012c00
 8003124:	40013400 	.word	0x40013400
 8003128:	40015000 	.word	0x40015000
 800312c:	40000400 	.word	0x40000400
 8003130:	40000800 	.word	0x40000800
 8003134:	40014000 	.word	0x40014000

08003138 <__libc_init_array>:
 8003138:	b570      	push	{r4, r5, r6, lr}
 800313a:	4e0d      	ldr	r6, [pc, #52]	; (8003170 <__libc_init_array+0x38>)
 800313c:	4c0d      	ldr	r4, [pc, #52]	; (8003174 <__libc_init_array+0x3c>)
 800313e:	1ba4      	subs	r4, r4, r6
 8003140:	10a4      	asrs	r4, r4, #2
 8003142:	2500      	movs	r5, #0
 8003144:	42a5      	cmp	r5, r4
 8003146:	d109      	bne.n	800315c <__libc_init_array+0x24>
 8003148:	4e0b      	ldr	r6, [pc, #44]	; (8003178 <__libc_init_array+0x40>)
 800314a:	4c0c      	ldr	r4, [pc, #48]	; (800317c <__libc_init_array+0x44>)
 800314c:	f000 f820 	bl	8003190 <_init>
 8003150:	1ba4      	subs	r4, r4, r6
 8003152:	10a4      	asrs	r4, r4, #2
 8003154:	2500      	movs	r5, #0
 8003156:	42a5      	cmp	r5, r4
 8003158:	d105      	bne.n	8003166 <__libc_init_array+0x2e>
 800315a:	bd70      	pop	{r4, r5, r6, pc}
 800315c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003160:	4798      	blx	r3
 8003162:	3501      	adds	r5, #1
 8003164:	e7ee      	b.n	8003144 <__libc_init_array+0xc>
 8003166:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800316a:	4798      	blx	r3
 800316c:	3501      	adds	r5, #1
 800316e:	e7f2      	b.n	8003156 <__libc_init_array+0x1e>
 8003170:	080031d8 	.word	0x080031d8
 8003174:	080031d8 	.word	0x080031d8
 8003178:	080031d8 	.word	0x080031d8
 800317c:	080031dc 	.word	0x080031dc

08003180 <memset>:
 8003180:	4402      	add	r2, r0
 8003182:	4603      	mov	r3, r0
 8003184:	4293      	cmp	r3, r2
 8003186:	d100      	bne.n	800318a <memset+0xa>
 8003188:	4770      	bx	lr
 800318a:	f803 1b01 	strb.w	r1, [r3], #1
 800318e:	e7f9      	b.n	8003184 <memset+0x4>

08003190 <_init>:
 8003190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003192:	bf00      	nop
 8003194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003196:	bc08      	pop	{r3}
 8003198:	469e      	mov	lr, r3
 800319a:	4770      	bx	lr

0800319c <_fini>:
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	bf00      	nop
 80031a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a2:	bc08      	pop	{r3}
 80031a4:	469e      	mov	lr, r3
 80031a6:	4770      	bx	lr
