
btvn_b8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031cc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003360  08003360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003398  08003398  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003398  08003398  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003398  08003398  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800339c  0800339c  0001339c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  080033ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  080033ac  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000886c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001741  00000000  00000000  000288a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000758  00000000  00000000  00029ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c0  00000000  00000000  0002a748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001eff8  00000000  00000000  0002ae08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000745d  00000000  00000000  00049e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bc2a2  00000000  00000000  0005125d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d4ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c84  00000000  00000000  0010d57c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003348 	.word	0x08003348

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003348 	.word	0x08003348

080001d4 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
//		}
//		for(uint8_t i=0;i<3;i++){
//			r[i]=0;
//		}
//	}
	r[0]=buff[12];
 80001dc:	4b13      	ldr	r3, [pc, #76]	; (800022c <HAL_UART_RxCpltCallback+0x58>)
 80001de:	7b1a      	ldrb	r2, [r3, #12]
 80001e0:	4b13      	ldr	r3, [pc, #76]	; (8000230 <HAL_UART_RxCpltCallback+0x5c>)
 80001e2:	701a      	strb	r2, [r3, #0]
	r[1]=buff[13];
 80001e4:	4b11      	ldr	r3, [pc, #68]	; (800022c <HAL_UART_RxCpltCallback+0x58>)
 80001e6:	7b5a      	ldrb	r2, [r3, #13]
 80001e8:	4b11      	ldr	r3, [pc, #68]	; (8000230 <HAL_UART_RxCpltCallback+0x5c>)
 80001ea:	705a      	strb	r2, [r3, #1]
	if(r[0]<53){
 80001ec:	4b10      	ldr	r3, [pc, #64]	; (8000230 <HAL_UART_RxCpltCallback+0x5c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	2b34      	cmp	r3, #52	; 0x34
 80001f2:	d806      	bhi.n	8000202 <HAL_UART_RxCpltCallback+0x2e>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, GPIO_PIN_SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	2120      	movs	r1, #32
 80001f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001fc:	f000 fd4a 	bl	8000c94 <HAL_GPIO_WritePin>
 8000200:	e005      	b.n	800020e <HAL_UART_RxCpltCallback+0x3a>
	}
	else{
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	2120      	movs	r1, #32
 8000206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800020a:	f000 fd43 	bl	8000c94 <HAL_GPIO_WritePin>
	}
	HAL_UART_Receive_IT(&huart2,buff,14);
 800020e:	220e      	movs	r2, #14
 8000210:	4906      	ldr	r1, [pc, #24]	; (800022c <HAL_UART_RxCpltCallback+0x58>)
 8000212:	4808      	ldr	r0, [pc, #32]	; (8000234 <HAL_UART_RxCpltCallback+0x60>)
 8000214:	f002 f90e 	bl	8002434 <HAL_UART_Receive_IT>
	current_time = HAL_GetTick();
 8000218:	f000 fa1e 	bl	8000658 <HAL_GetTick>
 800021c:	4602      	mov	r2, r0
 800021e:	4b06      	ldr	r3, [pc, #24]	; (8000238 <HAL_UART_RxCpltCallback+0x64>)
 8000220:	601a      	str	r2, [r3, #0]
}
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	20000028 	.word	0x20000028
 8000230:	20000038 	.word	0x20000038
 8000234:	20000040 	.word	0x20000040
 8000238:	2000003c 	.word	0x2000003c

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000240:	f000 f9b0 	bl	80005a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000244:	f000 f80e 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000248:	f000 f89a 	bl	8000380 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800024c:	f000 f868 	bl	8000320 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2,buff,14);
 8000250:	220e      	movs	r2, #14
 8000252:	4902      	ldr	r1, [pc, #8]	; (800025c <main+0x20>)
 8000254:	4802      	ldr	r0, [pc, #8]	; (8000260 <main+0x24>)
 8000256:	f002 f8ed 	bl	8002434 <HAL_UART_Receive_IT>
//  current_time = HAL_GetTick();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025a:	e7fe      	b.n	800025a <main+0x1e>
 800025c:	20000028 	.word	0x20000028
 8000260:	20000040 	.word	0x20000040

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b0a6      	sub	sp, #152	; 0x98
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800026e:	2228      	movs	r2, #40	; 0x28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f003 f860 	bl	8003338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
 8000286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2258      	movs	r2, #88	; 0x58
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f003 f852 	bl	8003338 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000294:	2302      	movs	r3, #2
 8000296:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000298:	2301      	movs	r3, #1
 800029a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029c:	2310      	movs	r3, #16
 800029e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	2302      	movs	r3, #2
 80002a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 fcfe 	bl	8000cc4 <HAL_RCC_OscConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ce:	f000 f887 	bl	80003e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	230f      	movs	r3, #15
 80002d4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d6:	2302      	movs	r3, #2
 80002d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002ec:	2102      	movs	r1, #2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 fbfe 	bl	8001af0 <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002fa:	f000 f871 	bl	80003e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002fe:	2302      	movs	r3, #2
 8000300:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000302:	2300      	movs	r3, #0
 8000304:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f001 fe27 	bl	8001f5c <HAL_RCCEx_PeriphCLKConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000314:	f000 f864 	bl	80003e0 <Error_Handler>
  }
}
 8000318:	bf00      	nop
 800031a:	3798      	adds	r7, #152	; 0x98
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000324:	4b14      	ldr	r3, [pc, #80]	; (8000378 <MX_USART2_UART_Init+0x58>)
 8000326:	4a15      	ldr	r2, [pc, #84]	; (800037c <MX_USART2_UART_Init+0x5c>)
 8000328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800032a:	4b13      	ldr	r3, [pc, #76]	; (8000378 <MX_USART2_UART_Init+0x58>)
 800032c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_USART2_UART_Init+0x58>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_USART2_UART_Init+0x58>)
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_USART2_UART_Init+0x58>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_USART2_UART_Init+0x58>)
 8000346:	220c      	movs	r2, #12
 8000348:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <MX_USART2_UART_Init+0x58>)
 800034c:	2200      	movs	r2, #0
 800034e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_USART2_UART_Init+0x58>)
 8000352:	2200      	movs	r2, #0
 8000354:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_USART2_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_USART2_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000362:	4805      	ldr	r0, [pc, #20]	; (8000378 <MX_USART2_UART_Init+0x58>)
 8000364:	f002 f818 	bl	8002398 <HAL_UART_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800036e:	f000 f837 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000040 	.word	0x20000040
 800037c:	40004400 	.word	0x40004400

08000380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
 8000392:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000394:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_GPIO_Init+0x5c>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	4a10      	ldr	r2, [pc, #64]	; (80003dc <MX_GPIO_Init+0x5c>)
 800039a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800039e:	6153      	str	r3, [r2, #20]
 80003a0:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MX_GPIO_Init+0x5c>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003a8:	603b      	str	r3, [r7, #0]
 80003aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2120      	movs	r1, #32
 80003b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b4:	f000 fc6e 	bl	8000c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003b8:	2320      	movs	r3, #32
 80003ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003bc:	2301      	movs	r3, #1
 80003be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c4:	2300      	movs	r3, #0
 80003c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	4619      	mov	r1, r3
 80003cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d0:	f000 fad6 	bl	8000980 <HAL_GPIO_Init>

}
 80003d4:	bf00      	nop
 80003d6:	3718      	adds	r7, #24
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40021000 	.word	0x40021000

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e6:	e7fe      	b.n	80003e6 <Error_Handler+0x6>

080003e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <HAL_MspInit+0x44>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a0e      	ldr	r2, [pc, #56]	; (800042c <HAL_MspInit+0x44>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <HAL_MspInit+0x44>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000406:	4b09      	ldr	r3, [pc, #36]	; (800042c <HAL_MspInit+0x44>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a08      	ldr	r2, [pc, #32]	; (800042c <HAL_MspInit+0x44>)
 800040c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <HAL_MspInit+0x44>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041a:	603b      	str	r3, [r7, #0]
 800041c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800041e:	2007      	movs	r0, #7
 8000420:	f000 f9f6 	bl	8000810 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40021000 	.word	0x40021000

08000430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	; 0x28
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000438:	f107 0314 	add.w	r3, r7, #20
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
 8000446:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a1b      	ldr	r2, [pc, #108]	; (80004bc <HAL_UART_MspInit+0x8c>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d130      	bne.n	80004b4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000452:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <HAL_UART_MspInit+0x90>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a1a      	ldr	r2, [pc, #104]	; (80004c0 <HAL_UART_MspInit+0x90>)
 8000458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <HAL_UART_MspInit+0x90>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000466:	613b      	str	r3, [r7, #16]
 8000468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800046a:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <HAL_UART_MspInit+0x90>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a14      	ldr	r2, [pc, #80]	; (80004c0 <HAL_UART_MspInit+0x90>)
 8000470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000474:	6153      	str	r3, [r2, #20]
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <HAL_UART_MspInit+0x90>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000482:	230c      	movs	r3, #12
 8000484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000486:	2302      	movs	r3, #2
 8000488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048e:	2300      	movs	r3, #0
 8000490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000492:	2307      	movs	r3, #7
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	4619      	mov	r1, r3
 800049c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a0:	f000 fa6e 	bl	8000980 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2100      	movs	r1, #0
 80004a8:	2026      	movs	r0, #38	; 0x26
 80004aa:	f000 f9bc 	bl	8000826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004ae:	2026      	movs	r0, #38	; 0x26
 80004b0:	f000 f9d5 	bl	800085e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004b4:	bf00      	nop
 80004b6:	3728      	adds	r7, #40	; 0x28
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40004400 	.word	0x40004400
 80004c0:	40021000 	.word	0x40021000

080004c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <NMI_Handler+0x4>

080004ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <HardFault_Handler+0x4>

080004d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <MemManage_Handler+0x4>

080004d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <BusFault_Handler+0x4>

080004dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <UsageFault_Handler+0x4>

080004e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000510:	f000 f88e 	bl	8000630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}

08000518 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <USART2_IRQHandler+0x10>)
 800051e:	f001 ffc7 	bl	80024b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000040 	.word	0x20000040

0800052c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <SystemInit+0x20>)
 8000532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000536:	4a05      	ldr	r2, [pc, #20]	; (800054c <SystemInit+0x20>)
 8000538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800053c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000588 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000554:	480d      	ldr	r0, [pc, #52]	; (800058c <LoopForever+0x6>)
  ldr r1, =_edata
 8000556:	490e      	ldr	r1, [pc, #56]	; (8000590 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000558:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <LoopForever+0xe>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800055c:	e002      	b.n	8000564 <LoopCopyDataInit>

0800055e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000562:	3304      	adds	r3, #4

08000564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000568:	d3f9      	bcc.n	800055e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056a:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <LoopForever+0x12>)
  ldr r4, =_ebss
 800056c:	4c0b      	ldr	r4, [pc, #44]	; (800059c <LoopForever+0x16>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000570:	e001      	b.n	8000576 <LoopFillZerobss>

08000572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000574:	3204      	adds	r2, #4

08000576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000578:	d3fb      	bcc.n	8000572 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800057a:	f7ff ffd7 	bl	800052c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800057e:	f002 feb7 	bl	80032f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000582:	f7ff fe5b 	bl	800023c <main>

08000586 <LoopForever>:

LoopForever:
    b LoopForever
 8000586:	e7fe      	b.n	8000586 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000588:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800058c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000590:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000594:	080033a0 	.word	0x080033a0
  ldr r2, =_sbss
 8000598:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800059c:	200000c8 	.word	0x200000c8

080005a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC1_2_IRQHandler>
	...

080005a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <HAL_Init+0x28>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <HAL_Init+0x28>)
 80005ae:	f043 0310 	orr.w	r3, r3, #16
 80005b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f92b 	bl	8000810 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 f808 	bl	80005d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c0:	f7ff ff12 	bl	80003e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40022000 	.word	0x40022000

080005d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <HAL_InitTick+0x54>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x58>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	4619      	mov	r1, r3
 80005e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f943 	bl	800087a <HAL_SYSTICK_Config>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fa:	2301      	movs	r3, #1
 80005fc:	e00e      	b.n	800061c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b0f      	cmp	r3, #15
 8000602:	d80a      	bhi.n	800061a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000604:	2200      	movs	r2, #0
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	f04f 30ff 	mov.w	r0, #4294967295
 800060c:	f000 f90b 	bl	8000826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000610:	4a06      	ldr	r2, [pc, #24]	; (800062c <HAL_InitTick+0x5c>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000616:	2300      	movs	r3, #0
 8000618:	e000      	b.n	800061c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	20000008 	.word	0x20000008
 800062c:	20000004 	.word	0x20000004

08000630 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_IncTick+0x20>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x24>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4413      	add	r3, r2
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <HAL_IncTick+0x24>)
 8000642:	6013      	str	r3, [r2, #0]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000008 	.word	0x20000008
 8000654:	200000c4 	.word	0x200000c4

08000658 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return uwTick;  
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <HAL_GetTick+0x14>)
 800065e:	681b      	ldr	r3, [r3, #0]
}
 8000660:	4618      	mov	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	200000c4 	.word	0x200000c4

08000670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800069c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a2:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	60d3      	str	r3, [r2, #12]
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <__NVIC_GetPriorityGrouping+0x18>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	0a1b      	lsrs	r3, r3, #8
 80006c2:	f003 0307 	and.w	r3, r3, #7
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db0b      	blt.n	80006fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f003 021f 	and.w	r2, r3, #31
 80006ec:	4907      	ldr	r1, [pc, #28]	; (800070c <__NVIC_EnableIRQ+0x38>)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	095b      	lsrs	r3, r3, #5
 80006f4:	2001      	movs	r0, #1
 80006f6:	fa00 f202 	lsl.w	r2, r0, r2
 80006fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000e100 	.word	0xe000e100

08000710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000720:	2b00      	cmp	r3, #0
 8000722:	db0a      	blt.n	800073a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	490c      	ldr	r1, [pc, #48]	; (800075c <__NVIC_SetPriority+0x4c>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	0112      	lsls	r2, r2, #4
 8000730:	b2d2      	uxtb	r2, r2
 8000732:	440b      	add	r3, r1
 8000734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000738:	e00a      	b.n	8000750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4908      	ldr	r1, [pc, #32]	; (8000760 <__NVIC_SetPriority+0x50>)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	f003 030f 	and.w	r3, r3, #15
 8000746:	3b04      	subs	r3, #4
 8000748:	0112      	lsls	r2, r2, #4
 800074a:	b2d2      	uxtb	r2, r2
 800074c:	440b      	add	r3, r1
 800074e:	761a      	strb	r2, [r3, #24]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000e100 	.word	0xe000e100
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000764:	b480      	push	{r7}
 8000766:	b089      	sub	sp, #36	; 0x24
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	f1c3 0307 	rsb	r3, r3, #7
 800077e:	2b04      	cmp	r3, #4
 8000780:	bf28      	it	cs
 8000782:	2304      	movcs	r3, #4
 8000784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3304      	adds	r3, #4
 800078a:	2b06      	cmp	r3, #6
 800078c:	d902      	bls.n	8000794 <NVIC_EncodePriority+0x30>
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3b03      	subs	r3, #3
 8000792:	e000      	b.n	8000796 <NVIC_EncodePriority+0x32>
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	f04f 32ff 	mov.w	r2, #4294967295
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	43da      	mvns	r2, r3
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	401a      	ands	r2, r3
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ac:	f04f 31ff 	mov.w	r1, #4294967295
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	fa01 f303 	lsl.w	r3, r1, r3
 80007b6:	43d9      	mvns	r1, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	4313      	orrs	r3, r2
         );
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3724      	adds	r7, #36	; 0x24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007dc:	d301      	bcc.n	80007e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007de:	2301      	movs	r3, #1
 80007e0:	e00f      	b.n	8000802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <SysTick_Config+0x40>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ea:	210f      	movs	r1, #15
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	f7ff ff8e 	bl	8000710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <SysTick_Config+0x40>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fa:	4b04      	ldr	r3, [pc, #16]	; (800080c <SysTick_Config+0x40>)
 80007fc:	2207      	movs	r2, #7
 80007fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	e000e010 	.word	0xe000e010

08000810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff29 	bl	8000670 <__NVIC_SetPriorityGrouping>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000838:	f7ff ff3e 	bl	80006b8 <__NVIC_GetPriorityGrouping>
 800083c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	68b9      	ldr	r1, [r7, #8]
 8000842:	6978      	ldr	r0, [r7, #20]
 8000844:	f7ff ff8e 	bl	8000764 <NVIC_EncodePriority>
 8000848:	4602      	mov	r2, r0
 800084a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff5d 	bl	8000710 <__NVIC_SetPriority>
}
 8000856:	bf00      	nop
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff31 	bl	80006d4 <__NVIC_EnableIRQ>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff ffa2 	bl	80007cc <SysTick_Config>
 8000888:	4603      	mov	r3, r0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d008      	beq.n	80008b6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2204      	movs	r2, #4
 80008a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e020      	b.n	80008f8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f022 020e 	bic.w	r2, r2, #14
 80008c4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f022 0201 	bic.w	r2, r2, #1
 80008d4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008de:	2101      	movs	r1, #1
 80008e0:	fa01 f202 	lsl.w	r2, r1, r2
 80008e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000916:	2b02      	cmp	r3, #2
 8000918:	d005      	beq.n	8000926 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2204      	movs	r2, #4
 800091e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000920:	2301      	movs	r3, #1
 8000922:	73fb      	strb	r3, [r7, #15]
 8000924:	e027      	b.n	8000976 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f022 020e 	bic.w	r2, r2, #14
 8000934:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f022 0201 	bic.w	r2, r2, #1
 8000944:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800094e:	2101      	movs	r1, #1
 8000950:	fa01 f202 	lsl.w	r2, r1, r2
 8000954:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2201      	movs	r2, #1
 800095a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	4798      	blx	r3
    } 
  }
  return status;
 8000976:	7bfb      	ldrb	r3, [r7, #15]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000980:	b480      	push	{r7}
 8000982:	b087      	sub	sp, #28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800098e:	e160      	b.n	8000c52 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	2101      	movs	r1, #1
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	fa01 f303 	lsl.w	r3, r1, r3
 800099c:	4013      	ands	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f000 8152 	beq.w	8000c4c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d00b      	beq.n	80009c8 <HAL_GPIO_Init+0x48>
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d007      	beq.n	80009c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009bc:	2b11      	cmp	r3, #17
 80009be:	d003      	beq.n	80009c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	2b12      	cmp	r3, #18
 80009c6:	d130      	bne.n	8000a2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	2203      	movs	r2, #3
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4013      	ands	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	68da      	ldr	r2, [r3, #12]
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009fe:	2201      	movs	r2, #1
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	091b      	lsrs	r3, r3, #4
 8000a14:	f003 0201 	and.w	r2, r3, #1
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	2203      	movs	r2, #3
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	689a      	ldr	r2, [r3, #8]
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d003      	beq.n	8000a6a <HAL_GPIO_Init+0xea>
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	2b12      	cmp	r3, #18
 8000a68:	d123      	bne.n	8000ab2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	08da      	lsrs	r2, r3, #3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3208      	adds	r2, #8
 8000a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	220f      	movs	r2, #15
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	691a      	ldr	r2, [r3, #16]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	f003 0307 	and.w	r3, r3, #7
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	08da      	lsrs	r2, r3, #3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3208      	adds	r2, #8
 8000aac:	6939      	ldr	r1, [r7, #16]
 8000aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	2203      	movs	r2, #3
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f003 0203 	and.w	r2, r3, #3
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 80ac 	beq.w	8000c4c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af4:	4b5e      	ldr	r3, [pc, #376]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a5d      	ldr	r2, [pc, #372]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b5b      	ldr	r3, [pc, #364]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b0c:	4a59      	ldr	r2, [pc, #356]	; (8000c74 <HAL_GPIO_Init+0x2f4>)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	089b      	lsrs	r3, r3, #2
 8000b12:	3302      	adds	r3, #2
 8000b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	f003 0303 	and.w	r3, r3, #3
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	220f      	movs	r2, #15
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b36:	d025      	beq.n	8000b84 <HAL_GPIO_Init+0x204>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a4f      	ldr	r2, [pc, #316]	; (8000c78 <HAL_GPIO_Init+0x2f8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d01f      	beq.n	8000b80 <HAL_GPIO_Init+0x200>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a4e      	ldr	r2, [pc, #312]	; (8000c7c <HAL_GPIO_Init+0x2fc>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d019      	beq.n	8000b7c <HAL_GPIO_Init+0x1fc>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a4d      	ldr	r2, [pc, #308]	; (8000c80 <HAL_GPIO_Init+0x300>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d013      	beq.n	8000b78 <HAL_GPIO_Init+0x1f8>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a4c      	ldr	r2, [pc, #304]	; (8000c84 <HAL_GPIO_Init+0x304>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d00d      	beq.n	8000b74 <HAL_GPIO_Init+0x1f4>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a4b      	ldr	r2, [pc, #300]	; (8000c88 <HAL_GPIO_Init+0x308>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d007      	beq.n	8000b70 <HAL_GPIO_Init+0x1f0>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a4a      	ldr	r2, [pc, #296]	; (8000c8c <HAL_GPIO_Init+0x30c>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d101      	bne.n	8000b6c <HAL_GPIO_Init+0x1ec>
 8000b68:	2306      	movs	r3, #6
 8000b6a:	e00c      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	e00a      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b70:	2305      	movs	r3, #5
 8000b72:	e008      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b74:	2304      	movs	r3, #4
 8000b76:	e006      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e004      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	e002      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e000      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b84:	2300      	movs	r3, #0
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	f002 0203 	and.w	r2, r2, #3
 8000b8c:	0092      	lsls	r2, r2, #2
 8000b8e:	4093      	lsls	r3, r2
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b96:	4937      	ldr	r1, [pc, #220]	; (8000c74 <HAL_GPIO_Init+0x2f4>)
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	3302      	adds	r3, #2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ba4:	4b3a      	ldr	r3, [pc, #232]	; (8000c90 <HAL_GPIO_Init+0x310>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bc8:	4a31      	ldr	r2, [pc, #196]	; (8000c90 <HAL_GPIO_Init+0x310>)
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bce:	4b30      	ldr	r3, [pc, #192]	; (8000c90 <HAL_GPIO_Init+0x310>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bf2:	4a27      	ldr	r2, [pc, #156]	; (8000c90 <HAL_GPIO_Init+0x310>)
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bf8:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <HAL_GPIO_Init+0x310>)
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d003      	beq.n	8000c1c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c1c:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <HAL_GPIO_Init+0x310>)
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c22:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <HAL_GPIO_Init+0x310>)
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <HAL_GPIO_Init+0x310>)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f47f ae97 	bne.w	8000990 <HAL_GPIO_Init+0x10>
  }
}
 8000c62:	bf00      	nop
 8000c64:	371c      	adds	r7, #28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010000 	.word	0x40010000
 8000c78:	48000400 	.word	0x48000400
 8000c7c:	48000800 	.word	0x48000800
 8000c80:	48000c00 	.word	0x48000c00
 8000c84:	48001000 	.word	0x48001000
 8000c88:	48001400 	.word	0x48001400
 8000c8c:	48001800 	.word	0x48001800
 8000c90:	40010400 	.word	0x40010400

08000c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	807b      	strh	r3, [r7, #2]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ca4:	787b      	ldrb	r3, [r7, #1]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000caa:	887a      	ldrh	r2, [r7, #2]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cb0:	e002      	b.n	8000cb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cb2:	887a      	ldrh	r2, [r7, #2]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	f000 bf01 	b.w	8001ae0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 8160 	beq.w	8000fae <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cee:	4bae      	ldr	r3, [pc, #696]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 030c 	and.w	r3, r3, #12
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d00c      	beq.n	8000d14 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cfa:	4bab      	ldr	r3, [pc, #684]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 030c 	and.w	r3, r3, #12
 8000d02:	2b08      	cmp	r3, #8
 8000d04:	d159      	bne.n	8000dba <HAL_RCC_OscConfig+0xf6>
 8000d06:	4ba8      	ldr	r3, [pc, #672]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d12:	d152      	bne.n	8000dba <HAL_RCC_OscConfig+0xf6>
 8000d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d18:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d20:	fa93 f3a3 	rbit	r3, r3
 8000d24:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d28:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d2c:	fab3 f383 	clz	r3, r3
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d102      	bne.n	8000d46 <HAL_RCC_OscConfig+0x82>
 8000d40:	4b99      	ldr	r3, [pc, #612]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	e015      	b.n	8000d72 <HAL_RCC_OscConfig+0xae>
 8000d46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d4a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000d52:	fa93 f3a3 	rbit	r3, r3
 8000d56:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d5e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d62:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000d66:	fa93 f3a3 	rbit	r3, r3
 8000d6a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d6e:	4b8e      	ldr	r3, [pc, #568]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d76:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000d7a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000d7e:	fa92 f2a2 	rbit	r2, r2
 8000d82:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000d86:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	f042 0220 	orr.w	r2, r2, #32
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	f002 021f 	and.w	r2, r2, #31
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000da0:	4013      	ands	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 8102 	beq.w	8000fac <HAL_RCC_OscConfig+0x2e8>
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f040 80fc 	bne.w	8000fac <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	f000 be93 	b.w	8001ae0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc4:	d106      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x110>
 8000dc6:	4b78      	ldr	r3, [pc, #480]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a77      	ldr	r2, [pc, #476]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	e030      	b.n	8000e36 <HAL_RCC_OscConfig+0x172>
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d10c      	bne.n	8000df8 <HAL_RCC_OscConfig+0x134>
 8000dde:	4b72      	ldr	r3, [pc, #456]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a71      	ldr	r2, [pc, #452]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	4b6f      	ldr	r3, [pc, #444]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a6e      	ldr	r2, [pc, #440]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	e01e      	b.n	8000e36 <HAL_RCC_OscConfig+0x172>
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e02:	d10c      	bne.n	8000e1e <HAL_RCC_OscConfig+0x15a>
 8000e04:	4b68      	ldr	r3, [pc, #416]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a67      	ldr	r2, [pc, #412]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000e0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	4b65      	ldr	r3, [pc, #404]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a64      	ldr	r2, [pc, #400]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	e00b      	b.n	8000e36 <HAL_RCC_OscConfig+0x172>
 8000e1e:	4b62      	ldr	r3, [pc, #392]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a61      	ldr	r2, [pc, #388]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	4b5f      	ldr	r3, [pc, #380]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a5e      	ldr	r2, [pc, #376]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e34:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d059      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e40:	f7ff fc0a 	bl	8000658 <HAL_GetTick>
 8000e44:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e48:	e00a      	b.n	8000e60 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e4a:	f7ff fc05 	bl	8000658 <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b64      	cmp	r3, #100	; 0x64
 8000e58:	d902      	bls.n	8000e60 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	f000 be40 	b.w	8001ae0 <HAL_RCC_OscConfig+0xe1c>
 8000e60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e64:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e68:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000e6c:	fa93 f3a3 	rbit	r3, r3
 8000e70:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000e74:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e78:	fab3 f383 	clz	r3, r3
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d102      	bne.n	8000e92 <HAL_RCC_OscConfig+0x1ce>
 8000e8c:	4b46      	ldr	r3, [pc, #280]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	e015      	b.n	8000ebe <HAL_RCC_OscConfig+0x1fa>
 8000e92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e96:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000e9e:	fa93 f3a3 	rbit	r3, r3
 8000ea2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000ea6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eaa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000eae:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000eb2:	fa93 f3a3 	rbit	r3, r3
 8000eb6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000eba:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ec2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000ec6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000eca:	fa92 f2a2 	rbit	r2, r2
 8000ece:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000ed2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ed6:	fab2 f282 	clz	r2, r2
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	f042 0220 	orr.w	r2, r2, #32
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	f002 021f 	and.w	r2, r2, #31
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eec:	4013      	ands	r3, r2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0ab      	beq.n	8000e4a <HAL_RCC_OscConfig+0x186>
 8000ef2:	e05c      	b.n	8000fae <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fbb0 	bl	8000658 <HAL_GetTick>
 8000ef8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000efc:	e00a      	b.n	8000f14 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000efe:	f7ff fbab 	bl	8000658 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b64      	cmp	r3, #100	; 0x64
 8000f0c:	d902      	bls.n	8000f14 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	f000 bde6 	b.w	8001ae0 <HAL_RCC_OscConfig+0xe1c>
 8000f14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f18:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f20:	fa93 f3a3 	rbit	r3, r3
 8000f24:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000f28:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2c:	fab3 f383 	clz	r3, r3
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d102      	bne.n	8000f46 <HAL_RCC_OscConfig+0x282>
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	e015      	b.n	8000f72 <HAL_RCC_OscConfig+0x2ae>
 8000f46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f4a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000f52:	fa93 f3a3 	rbit	r3, r3
 8000f56:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000f5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f5e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f62:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000f66:	fa93 f3a3 	rbit	r3, r3
 8000f6a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_RCC_OscConfig+0x2e4>)
 8000f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f76:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000f7a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000f7e:	fa92 f2a2 	rbit	r2, r2
 8000f82:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000f86:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f8a:	fab2 f282 	clz	r2, r2
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	f042 0220 	orr.w	r2, r2, #32
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	f002 021f 	and.w	r2, r2, #31
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1ab      	bne.n	8000efe <HAL_RCC_OscConfig+0x23a>
 8000fa6:	e002      	b.n	8000fae <HAL_RCC_OscConfig+0x2ea>
 8000fa8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 8170 	beq.w	800129e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fbe:	4bd0      	ldr	r3, [pc, #832]	; (8001300 <HAL_RCC_OscConfig+0x63c>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 030c 	and.w	r3, r3, #12
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00c      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fca:	4bcd      	ldr	r3, [pc, #820]	; (8001300 <HAL_RCC_OscConfig+0x63c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 030c 	and.w	r3, r3, #12
 8000fd2:	2b08      	cmp	r3, #8
 8000fd4:	d16d      	bne.n	80010b2 <HAL_RCC_OscConfig+0x3ee>
 8000fd6:	4bca      	ldr	r3, [pc, #808]	; (8001300 <HAL_RCC_OscConfig+0x63c>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000fe2:	d166      	bne.n	80010b2 <HAL_RCC_OscConfig+0x3ee>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fea:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000fee:	fa93 f3a3 	rbit	r3, r3
 8000ff2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000ff6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffa:	fab3 f383 	clz	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	095b      	lsrs	r3, r3, #5
 8001002:	b2db      	uxtb	r3, r3
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b01      	cmp	r3, #1
 800100c:	d102      	bne.n	8001014 <HAL_RCC_OscConfig+0x350>
 800100e:	4bbc      	ldr	r3, [pc, #752]	; (8001300 <HAL_RCC_OscConfig+0x63c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	e013      	b.n	800103c <HAL_RCC_OscConfig+0x378>
 8001014:	2302      	movs	r3, #2
 8001016:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800101e:	fa93 f3a3 	rbit	r3, r3
 8001022:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001026:	2302      	movs	r3, #2
 8001028:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800102c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001038:	4bb1      	ldr	r3, [pc, #708]	; (8001300 <HAL_RCC_OscConfig+0x63c>)
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	2202      	movs	r2, #2
 800103e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001042:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001046:	fa92 f2a2 	rbit	r2, r2
 800104a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800104e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001052:	fab2 f282 	clz	r2, r2
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	f042 0220 	orr.w	r2, r2, #32
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	f002 021f 	and.w	r2, r2, #31
 8001062:	2101      	movs	r1, #1
 8001064:	fa01 f202 	lsl.w	r2, r1, r2
 8001068:	4013      	ands	r3, r2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d007      	beq.n	800107e <HAL_RCC_OscConfig+0x3ba>
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d002      	beq.n	800107e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	f000 bd31 	b.w	8001ae0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107e:	4ba0      	ldr	r3, [pc, #640]	; (8001300 <HAL_RCC_OscConfig+0x63c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	21f8      	movs	r1, #248	; 0xf8
 800108e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001092:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001096:	fa91 f1a1 	rbit	r1, r1
 800109a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800109e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010a2:	fab1 f181 	clz	r1, r1
 80010a6:	b2c9      	uxtb	r1, r1
 80010a8:	408b      	lsls	r3, r1
 80010aa:	4995      	ldr	r1, [pc, #596]	; (8001300 <HAL_RCC_OscConfig+0x63c>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b0:	e0f5      	b.n	800129e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 8085 	beq.w	80011c8 <HAL_RCC_OscConfig+0x504>
 80010be:	2301      	movs	r3, #1
 80010c0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80010d0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d4:	fab3 f383 	clz	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	461a      	mov	r2, r3
 80010e6:	2301      	movs	r3, #1
 80010e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ea:	f7ff fab5 	bl	8000658 <HAL_GetTick>
 80010ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f2:	e00a      	b.n	800110a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f4:	f7ff fab0 	bl	8000658 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d902      	bls.n	800110a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	f000 bceb 	b.w	8001ae0 <HAL_RCC_OscConfig+0xe1c>
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001110:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001114:	fa93 f3a3 	rbit	r3, r3
 8001118:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800111c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001120:	fab3 f383 	clz	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b01      	cmp	r3, #1
 8001132:	d102      	bne.n	800113a <HAL_RCC_OscConfig+0x476>
 8001134:	4b72      	ldr	r3, [pc, #456]	; (8001300 <HAL_RCC_OscConfig+0x63c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	e013      	b.n	8001162 <HAL_RCC_OscConfig+0x49e>
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001140:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001144:	fa93 f3a3 	rbit	r3, r3
 8001148:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800114c:	2302      	movs	r3, #2
 800114e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001152:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001156:	fa93 f3a3 	rbit	r3, r3
 800115a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800115e:	4b68      	ldr	r3, [pc, #416]	; (8001300 <HAL_RCC_OscConfig+0x63c>)
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	2202      	movs	r2, #2
 8001164:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001168:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800116c:	fa92 f2a2 	rbit	r2, r2
 8001170:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001174:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001178:	fab2 f282 	clz	r2, r2
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	f042 0220 	orr.w	r2, r2, #32
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	f002 021f 	and.w	r2, r2, #31
 8001188:	2101      	movs	r1, #1
 800118a:	fa01 f202 	lsl.w	r2, r1, r2
 800118e:	4013      	ands	r3, r2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0af      	beq.n	80010f4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001194:	4b5a      	ldr	r3, [pc, #360]	; (8001300 <HAL_RCC_OscConfig+0x63c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	21f8      	movs	r1, #248	; 0xf8
 80011a4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80011ac:	fa91 f1a1 	rbit	r1, r1
 80011b0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80011b4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011b8:	fab1 f181 	clz	r1, r1
 80011bc:	b2c9      	uxtb	r1, r1
 80011be:	408b      	lsls	r3, r1
 80011c0:	494f      	ldr	r1, [pc, #316]	; (8001300 <HAL_RCC_OscConfig+0x63c>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]
 80011c6:	e06a      	b.n	800129e <HAL_RCC_OscConfig+0x5da>
 80011c8:	2301      	movs	r3, #1
 80011ca:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ce:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80011d2:	fa93 f3a3 	rbit	r3, r3
 80011d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80011da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011de:	fab3 f383 	clz	r3, r3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	461a      	mov	r2, r3
 80011f0:	2300      	movs	r3, #0
 80011f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fa30 	bl	8000658 <HAL_GetTick>
 80011f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fc:	e00a      	b.n	8001214 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011fe:	f7ff fa2b 	bl	8000658 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d902      	bls.n	8001214 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	f000 bc66 	b.w	8001ae0 <HAL_RCC_OscConfig+0xe1c>
 8001214:	2302      	movs	r3, #2
 8001216:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800121e:	fa93 f3a3 	rbit	r3, r3
 8001222:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001226:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122a:	fab3 f383 	clz	r3, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	095b      	lsrs	r3, r3, #5
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d102      	bne.n	8001244 <HAL_RCC_OscConfig+0x580>
 800123e:	4b30      	ldr	r3, [pc, #192]	; (8001300 <HAL_RCC_OscConfig+0x63c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	e013      	b.n	800126c <HAL_RCC_OscConfig+0x5a8>
 8001244:	2302      	movs	r3, #2
 8001246:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800124e:	fa93 f3a3 	rbit	r3, r3
 8001252:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001256:	2302      	movs	r3, #2
 8001258:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800125c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001260:	fa93 f3a3 	rbit	r3, r3
 8001264:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001268:	4b25      	ldr	r3, [pc, #148]	; (8001300 <HAL_RCC_OscConfig+0x63c>)
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	2202      	movs	r2, #2
 800126e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001272:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001276:	fa92 f2a2 	rbit	r2, r2
 800127a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800127e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001282:	fab2 f282 	clz	r2, r2
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	f042 0220 	orr.w	r2, r2, #32
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	f002 021f 	and.w	r2, r2, #31
 8001292:	2101      	movs	r1, #1
 8001294:	fa01 f202 	lsl.w	r2, r1, r2
 8001298:	4013      	ands	r3, r2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1af      	bne.n	80011fe <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80da 	beq.w	8001462 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d069      	beq.n	800138c <HAL_RCC_OscConfig+0x6c8>
 80012b8:	2301      	movs	r3, #1
 80012ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012c2:	fa93 f3a3 	rbit	r3, r3
 80012c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80012ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_RCC_OscConfig+0x640>)
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	461a      	mov	r2, r3
 80012de:	2301      	movs	r3, #1
 80012e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e2:	f7ff f9b9 	bl	8000658 <HAL_GetTick>
 80012e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ea:	e00d      	b.n	8001308 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ec:	f7ff f9b4 	bl	8000658 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d905      	bls.n	8001308 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e3ef      	b.n	8001ae0 <HAL_RCC_OscConfig+0xe1c>
 8001300:	40021000 	.word	0x40021000
 8001304:	10908120 	.word	0x10908120
 8001308:	2302      	movs	r3, #2
 800130a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001312:	fa93 f2a3 	rbit	r2, r3
 8001316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001320:	2202      	movs	r2, #2
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	fa93 f2a3 	rbit	r2, r3
 800132e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001338:	2202      	movs	r2, #2
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	fa93 f2a3 	rbit	r2, r3
 8001346:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800134a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134c:	4ba4      	ldr	r3, [pc, #656]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 800134e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001350:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001354:	2102      	movs	r1, #2
 8001356:	6019      	str	r1, [r3, #0]
 8001358:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	fa93 f1a3 	rbit	r1, r3
 8001362:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001366:	6019      	str	r1, [r3, #0]
  return result;
 8001368:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	fab3 f383 	clz	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	2101      	movs	r1, #1
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	4013      	ands	r3, r2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0b0      	beq.n	80012ec <HAL_RCC_OscConfig+0x628>
 800138a:	e06a      	b.n	8001462 <HAL_RCC_OscConfig+0x79e>
 800138c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001390:	2201      	movs	r2, #1
 8001392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001394:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	fa93 f2a3 	rbit	r2, r3
 800139e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013a2:	601a      	str	r2, [r3, #0]
  return result;
 80013a4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013a8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013aa:	fab3 f383 	clz	r3, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b8c      	ldr	r3, [pc, #560]	; (80015e4 <HAL_RCC_OscConfig+0x920>)
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	461a      	mov	r2, r3
 80013ba:	2300      	movs	r3, #0
 80013bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff f94b 	bl	8000658 <HAL_GetTick>
 80013c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c6:	e009      	b.n	80013dc <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff f946 	bl	8000658 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e381      	b.n	8001ae0 <HAL_RCC_OscConfig+0xe1c>
 80013dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013e0:	2202      	movs	r2, #2
 80013e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	fa93 f2a3 	rbit	r2, r3
 80013ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013f8:	2202      	movs	r2, #2
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	fa93 f2a3 	rbit	r2, r3
 8001406:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001410:	2202      	movs	r2, #2
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	fa93 f2a3 	rbit	r2, r3
 800141e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001422:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001424:	4b6e      	ldr	r3, [pc, #440]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 8001426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001428:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800142c:	2102      	movs	r1, #2
 800142e:	6019      	str	r1, [r3, #0]
 8001430:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	fa93 f1a3 	rbit	r1, r3
 800143a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800143e:	6019      	str	r1, [r3, #0]
  return result;
 8001440:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	fab3 f383 	clz	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	2101      	movs	r1, #1
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1b2      	bne.n	80013c8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 8157 	beq.w	8001720 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001478:	4b59      	ldr	r3, [pc, #356]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d112      	bne.n	80014aa <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001484:	4b56      	ldr	r3, [pc, #344]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	4a55      	ldr	r2, [pc, #340]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 800148a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148e:	61d3      	str	r3, [r2, #28]
 8001490:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	f107 030c 	add.w	r3, r7, #12
 80014a2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014a4:	2301      	movs	r3, #1
 80014a6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014aa:	4b4f      	ldr	r3, [pc, #316]	; (80015e8 <HAL_RCC_OscConfig+0x924>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d11a      	bne.n	80014ec <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014b6:	4b4c      	ldr	r3, [pc, #304]	; (80015e8 <HAL_RCC_OscConfig+0x924>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a4b      	ldr	r2, [pc, #300]	; (80015e8 <HAL_RCC_OscConfig+0x924>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c2:	f7ff f8c9 	bl	8000658 <HAL_GetTick>
 80014c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	e009      	b.n	80014e0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014cc:	f7ff f8c4 	bl	8000658 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b64      	cmp	r3, #100	; 0x64
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e2ff      	b.n	8001ae0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <HAL_RCC_OscConfig+0x924>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0ef      	beq.n	80014cc <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d106      	bne.n	8001504 <HAL_RCC_OscConfig+0x840>
 80014f6:	4b3a      	ldr	r3, [pc, #232]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	4a39      	ldr	r2, [pc, #228]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6213      	str	r3, [r2, #32]
 8001502:	e02f      	b.n	8001564 <HAL_RCC_OscConfig+0x8a0>
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0x864>
 800150e:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	4a33      	ldr	r2, [pc, #204]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	6213      	str	r3, [r2, #32]
 800151a:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	4a30      	ldr	r2, [pc, #192]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 8001520:	f023 0304 	bic.w	r3, r3, #4
 8001524:	6213      	str	r3, [r2, #32]
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0x8a0>
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b05      	cmp	r3, #5
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x888>
 8001532:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	4a2a      	ldr	r2, [pc, #168]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	6213      	str	r3, [r2, #32]
 800153e:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6213      	str	r3, [r2, #32]
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0x8a0>
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4a23      	ldr	r2, [pc, #140]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6213      	str	r3, [r2, #32]
 8001558:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	4a20      	ldr	r2, [pc, #128]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 800155e:	f023 0304 	bic.w	r3, r3, #4
 8001562:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d06a      	beq.n	8001644 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff f873 	bl	8000658 <HAL_GetTick>
 8001572:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001576:	e00b      	b.n	8001590 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001578:	f7ff f86e 	bl	8000658 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f241 3288 	movw	r2, #5000	; 0x1388
 8001588:	4293      	cmp	r3, r2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e2a7      	b.n	8001ae0 <HAL_RCC_OscConfig+0xe1c>
 8001590:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001594:	2202      	movs	r2, #2
 8001596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	fa93 f2a3 	rbit	r2, r3
 80015a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015ac:	2202      	movs	r2, #2
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	fa93 f2a3 	rbit	r2, r3
 80015ba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015be:	601a      	str	r2, [r3, #0]
  return result;
 80015c0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c6:	fab3 f383 	clz	r3, r3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	095b      	lsrs	r3, r3, #5
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d108      	bne.n	80015ec <HAL_RCC_OscConfig+0x928>
 80015da:	4b01      	ldr	r3, [pc, #4]	; (80015e0 <HAL_RCC_OscConfig+0x91c>)
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	e013      	b.n	8001608 <HAL_RCC_OscConfig+0x944>
 80015e0:	40021000 	.word	0x40021000
 80015e4:	10908120 	.word	0x10908120
 80015e8:	40007000 	.word	0x40007000
 80015ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015f0:	2202      	movs	r2, #2
 80015f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	fa93 f2a3 	rbit	r2, r3
 80015fe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	4bc0      	ldr	r3, [pc, #768]	; (8001908 <HAL_RCC_OscConfig+0xc44>)
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800160c:	2102      	movs	r1, #2
 800160e:	6011      	str	r1, [r2, #0]
 8001610:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	fa92 f1a2 	rbit	r1, r2
 800161a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800161e:	6011      	str	r1, [r2, #0]
  return result;
 8001620:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	fab2 f282 	clz	r2, r2
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	f002 021f 	and.w	r2, r2, #31
 8001636:	2101      	movs	r1, #1
 8001638:	fa01 f202 	lsl.w	r2, r1, r2
 800163c:	4013      	ands	r3, r2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d09a      	beq.n	8001578 <HAL_RCC_OscConfig+0x8b4>
 8001642:	e063      	b.n	800170c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001644:	f7ff f808 	bl	8000658 <HAL_GetTick>
 8001648:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164c:	e00b      	b.n	8001666 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff f803 	bl	8000658 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e23c      	b.n	8001ae0 <HAL_RCC_OscConfig+0xe1c>
 8001666:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800166a:	2202      	movs	r2, #2
 800166c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	fa93 f2a3 	rbit	r2, r3
 8001678:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001682:	2202      	movs	r2, #2
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	fa93 f2a3 	rbit	r2, r3
 8001690:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001694:	601a      	str	r2, [r3, #0]
  return result;
 8001696:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800169a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169c:	fab3 f383 	clz	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	f043 0302 	orr.w	r3, r3, #2
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d102      	bne.n	80016b6 <HAL_RCC_OscConfig+0x9f2>
 80016b0:	4b95      	ldr	r3, [pc, #596]	; (8001908 <HAL_RCC_OscConfig+0xc44>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	e00d      	b.n	80016d2 <HAL_RCC_OscConfig+0xa0e>
 80016b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016ba:	2202      	movs	r2, #2
 80016bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	fa93 f2a3 	rbit	r2, r3
 80016c8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	4b8e      	ldr	r3, [pc, #568]	; (8001908 <HAL_RCC_OscConfig+0xc44>)
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80016d6:	2102      	movs	r1, #2
 80016d8:	6011      	str	r1, [r2, #0]
 80016da:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	fa92 f1a2 	rbit	r1, r2
 80016e4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016e8:	6011      	str	r1, [r2, #0]
  return result;
 80016ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	fab2 f282 	clz	r2, r2
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	f002 021f 	and.w	r2, r2, #31
 8001700:	2101      	movs	r1, #1
 8001702:	fa01 f202 	lsl.w	r2, r1, r2
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1a0      	bne.n	800164e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800170c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001710:	2b01      	cmp	r3, #1
 8001712:	d105      	bne.n	8001720 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001714:	4b7c      	ldr	r3, [pc, #496]	; (8001908 <HAL_RCC_OscConfig+0xc44>)
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	4a7b      	ldr	r2, [pc, #492]	; (8001908 <HAL_RCC_OscConfig+0xc44>)
 800171a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800171e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 81d9 	beq.w	8001ade <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800172c:	4b76      	ldr	r3, [pc, #472]	; (8001908 <HAL_RCC_OscConfig+0xc44>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b08      	cmp	r3, #8
 8001736:	f000 81a6 	beq.w	8001a86 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	2b02      	cmp	r3, #2
 8001742:	f040 811e 	bne.w	8001982 <HAL_RCC_OscConfig+0xcbe>
 8001746:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800174a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800174e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	fa93 f2a3 	rbit	r2, r3
 800175a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800175e:	601a      	str	r2, [r3, #0]
  return result;
 8001760:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001764:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001766:	fab3 f383 	clz	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001770:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	461a      	mov	r2, r3
 8001778:	2300      	movs	r3, #0
 800177a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7fe ff6c 	bl	8000658 <HAL_GetTick>
 8001780:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001784:	e009      	b.n	800179a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001786:	f7fe ff67 	bl	8000658 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e1a2      	b.n	8001ae0 <HAL_RCC_OscConfig+0xe1c>
 800179a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800179e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	fa93 f2a3 	rbit	r2, r3
 80017ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017b2:	601a      	str	r2, [r3, #0]
  return result;
 80017b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ba:	fab3 f383 	clz	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	095b      	lsrs	r3, r3, #5
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d102      	bne.n	80017d4 <HAL_RCC_OscConfig+0xb10>
 80017ce:	4b4e      	ldr	r3, [pc, #312]	; (8001908 <HAL_RCC_OscConfig+0xc44>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	e01b      	b.n	800180c <HAL_RCC_OscConfig+0xb48>
 80017d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	fa93 f2a3 	rbit	r2, r3
 80017e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	fa93 f2a3 	rbit	r2, r3
 8001802:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <HAL_RCC_OscConfig+0xc44>)
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001810:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001814:	6011      	str	r1, [r2, #0]
 8001816:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	fa92 f1a2 	rbit	r1, r2
 8001820:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001824:	6011      	str	r1, [r2, #0]
  return result;
 8001826:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	fab2 f282 	clz	r2, r2
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	f042 0220 	orr.w	r2, r2, #32
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	f002 021f 	and.w	r2, r2, #31
 800183c:	2101      	movs	r1, #1
 800183e:	fa01 f202 	lsl.w	r2, r1, r2
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d19e      	bne.n	8001786 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001848:	4b2f      	ldr	r3, [pc, #188]	; (8001908 <HAL_RCC_OscConfig+0xc44>)
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	f023 020f 	bic.w	r2, r3, #15
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	492c      	ldr	r1, [pc, #176]	; (8001908 <HAL_RCC_OscConfig+0xc44>)
 8001858:	4313      	orrs	r3, r2
 800185a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_RCC_OscConfig+0xc44>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6a19      	ldr	r1, [r3, #32]
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	430b      	orrs	r3, r1
 8001872:	4925      	ldr	r1, [pc, #148]	; (8001908 <HAL_RCC_OscConfig+0xc44>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
 8001878:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800187c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	fa93 f2a3 	rbit	r2, r3
 800188c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001890:	601a      	str	r2, [r3, #0]
  return result;
 8001892:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001896:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001898:	fab3 f383 	clz	r3, r3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	461a      	mov	r2, r3
 80018aa:	2301      	movs	r3, #1
 80018ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7fe fed3 	bl	8000658 <HAL_GetTick>
 80018b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b6:	e009      	b.n	80018cc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b8:	f7fe fece 	bl	8000658 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e109      	b.n	8001ae0 <HAL_RCC_OscConfig+0xe1c>
 80018cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fa93 f2a3 	rbit	r2, r3
 80018e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018e4:	601a      	str	r2, [r3, #0]
  return result;
 80018e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ec:	fab3 f383 	clz	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d105      	bne.n	800190c <HAL_RCC_OscConfig+0xc48>
 8001900:	4b01      	ldr	r3, [pc, #4]	; (8001908 <HAL_RCC_OscConfig+0xc44>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	e01e      	b.n	8001944 <HAL_RCC_OscConfig+0xc80>
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000
 800190c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001910:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	fa93 f2a3 	rbit	r2, r3
 8001920:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800192a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	fa93 f2a3 	rbit	r2, r3
 800193a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	4b6a      	ldr	r3, [pc, #424]	; (8001aec <HAL_RCC_OscConfig+0xe28>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001948:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800194c:	6011      	str	r1, [r2, #0]
 800194e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	fa92 f1a2 	rbit	r1, r2
 8001958:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800195c:	6011      	str	r1, [r2, #0]
  return result;
 800195e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	fab2 f282 	clz	r2, r2
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	f042 0220 	orr.w	r2, r2, #32
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	f002 021f 	and.w	r2, r2, #31
 8001974:	2101      	movs	r1, #1
 8001976:	fa01 f202 	lsl.w	r2, r1, r2
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d09b      	beq.n	80018b8 <HAL_RCC_OscConfig+0xbf4>
 8001980:	e0ad      	b.n	8001ade <HAL_RCC_OscConfig+0xe1a>
 8001982:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001986:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800198a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	fa93 f2a3 	rbit	r2, r3
 8001996:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800199a:	601a      	str	r2, [r3, #0]
  return result;
 800199c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	fab3 f383 	clz	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	461a      	mov	r2, r3
 80019b4:	2300      	movs	r3, #0
 80019b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7fe fe4e 	bl	8000658 <HAL_GetTick>
 80019bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c0:	e009      	b.n	80019d6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c2:	f7fe fe49 	bl	8000658 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e084      	b.n	8001ae0 <HAL_RCC_OscConfig+0xe1c>
 80019d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	fa93 f2a3 	rbit	r2, r3
 80019ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ee:	601a      	str	r2, [r3, #0]
  return result;
 80019f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f6:	fab3 f383 	clz	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	095b      	lsrs	r3, r3, #5
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d102      	bne.n	8001a10 <HAL_RCC_OscConfig+0xd4c>
 8001a0a:	4b38      	ldr	r3, [pc, #224]	; (8001aec <HAL_RCC_OscConfig+0xe28>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	e01b      	b.n	8001a48 <HAL_RCC_OscConfig+0xd84>
 8001a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	fa93 f2a3 	rbit	r2, r3
 8001a24:	f107 0320 	add.w	r3, r7, #32
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	fa93 f2a3 	rbit	r2, r3
 8001a3e:	f107 0318 	add.w	r3, r7, #24
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	4b29      	ldr	r3, [pc, #164]	; (8001aec <HAL_RCC_OscConfig+0xe28>)
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	f107 0214 	add.w	r2, r7, #20
 8001a4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a50:	6011      	str	r1, [r2, #0]
 8001a52:	f107 0214 	add.w	r2, r7, #20
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	fa92 f1a2 	rbit	r1, r2
 8001a5c:	f107 0210 	add.w	r2, r7, #16
 8001a60:	6011      	str	r1, [r2, #0]
  return result;
 8001a62:	f107 0210 	add.w	r2, r7, #16
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	fab2 f282 	clz	r2, r2
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f042 0220 	orr.w	r2, r2, #32
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	f002 021f 	and.w	r2, r2, #31
 8001a78:	2101      	movs	r1, #1
 8001a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d19e      	bne.n	80019c2 <HAL_RCC_OscConfig+0xcfe>
 8001a84:	e02b      	b.n	8001ade <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e025      	b.n	8001ae0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_RCC_OscConfig+0xe28>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <HAL_RCC_OscConfig+0xe28>)
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001aa4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001aa8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d111      	bne.n	8001ada <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ab6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001aba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d108      	bne.n	8001ada <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001ac8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001acc:	f003 020f 	and.w	r2, r3, #15
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000

08001af0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b09e      	sub	sp, #120	; 0x78
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e162      	b.n	8001dce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b90      	ldr	r3, [pc, #576]	; (8001d4c <HAL_RCC_ClockConfig+0x25c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d910      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b8d      	ldr	r3, [pc, #564]	; (8001d4c <HAL_RCC_ClockConfig+0x25c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 0207 	bic.w	r2, r3, #7
 8001b1e:	498b      	ldr	r1, [pc, #556]	; (8001d4c <HAL_RCC_ClockConfig+0x25c>)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b89      	ldr	r3, [pc, #548]	; (8001d4c <HAL_RCC_ClockConfig+0x25c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e14a      	b.n	8001dce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b44:	4b82      	ldr	r3, [pc, #520]	; (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	497f      	ldr	r1, [pc, #508]	; (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 80dc 	beq.w	8001d1c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d13c      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xf6>
 8001b6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b70:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d102      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xa6>
 8001b90:	4b6f      	ldr	r3, [pc, #444]	; (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	e00f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0xc6>
 8001b96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ba4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba8:	663b      	str	r3, [r7, #96]	; 0x60
 8001baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bb2:	4b67      	ldr	r3, [pc, #412]	; (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bba:	65ba      	str	r2, [r7, #88]	; 0x58
 8001bbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001bbe:	fa92 f2a2 	rbit	r2, r2
 8001bc2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001bc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bc6:	fab2 f282 	clz	r2, r2
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	f042 0220 	orr.w	r2, r2, #32
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	f002 021f 	and.w	r2, r2, #31
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d17b      	bne.n	8001cda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0f3      	b.n	8001dce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d13c      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x178>
 8001bee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bf2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	095b      	lsrs	r3, r3, #5
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d102      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x128>
 8001c12:	4b4f      	ldr	r3, [pc, #316]	; (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	e00f      	b.n	8001c38 <HAL_RCC_ClockConfig+0x148>
 8001c18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	647b      	str	r3, [r7, #68]	; 0x44
 8001c26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8001c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c34:	4b46      	ldr	r3, [pc, #280]	; (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c40:	fa92 f2a2 	rbit	r2, r2
 8001c44:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c48:	fab2 f282 	clz	r2, r2
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	f042 0220 	orr.w	r2, r2, #32
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f002 021f 	and.w	r2, r2, #31
 8001c58:	2101      	movs	r1, #1
 8001c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d13a      	bne.n	8001cda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0b2      	b.n	8001dce <HAL_RCC_ClockConfig+0x2de>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c76:	fab3 f383 	clz	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	095b      	lsrs	r3, r3, #5
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d102      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x1a0>
 8001c8a:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	e00d      	b.n	8001cac <HAL_RCC_ClockConfig+0x1bc>
 8001c90:	2302      	movs	r3, #2
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	623b      	str	r3, [r7, #32]
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	2202      	movs	r2, #2
 8001cae:	61ba      	str	r2, [r7, #24]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	fa92 f2a2 	rbit	r2, r2
 8001cb6:	617a      	str	r2, [r7, #20]
  return result;
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	fab2 f282 	clz	r2, r2
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	f042 0220 	orr.w	r2, r2, #32
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	f002 021f 	and.w	r2, r2, #31
 8001cca:	2101      	movs	r1, #1
 8001ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e079      	b.n	8001dce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f023 0203 	bic.w	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	491a      	ldr	r1, [pc, #104]	; (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cec:	f7fe fcb4 	bl	8000658 <HAL_GetTick>
 8001cf0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf4:	f7fe fcb0 	bl	8000658 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e061      	b.n	8001dce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 020c 	and.w	r2, r3, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1eb      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_RCC_ClockConfig+0x25c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d214      	bcs.n	8001d54 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_RCC_ClockConfig+0x25c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 0207 	bic.w	r2, r3, #7
 8001d32:	4906      	ldr	r1, [pc, #24]	; (8001d4c <HAL_RCC_ClockConfig+0x25c>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <HAL_RCC_ClockConfig+0x25c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e040      	b.n	8001dce <HAL_RCC_ClockConfig+0x2de>
 8001d4c:	40022000 	.word	0x40022000
 8001d50:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_RCC_ClockConfig+0x2e8>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	491a      	ldr	r1, [pc, #104]	; (8001dd8 <HAL_RCC_ClockConfig+0x2e8>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_RCC_ClockConfig+0x2e8>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4912      	ldr	r1, [pc, #72]	; (8001dd8 <HAL_RCC_ClockConfig+0x2e8>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d92:	f000 f829 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8001d96:	4601      	mov	r1, r0
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <HAL_RCC_ClockConfig+0x2e8>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001da0:	22f0      	movs	r2, #240	; 0xf0
 8001da2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	fa92 f2a2 	rbit	r2, r2
 8001daa:	60fa      	str	r2, [r7, #12]
  return result;
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	fab2 f282 	clz	r2, r2
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	40d3      	lsrs	r3, r2
 8001db6:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x2ec>)
 8001db8:	5cd3      	ldrb	r3, [r2, r3]
 8001dba:	fa21 f303 	lsr.w	r3, r1, r3
 8001dbe:	4a08      	ldr	r2, [pc, #32]	; (8001de0 <HAL_RCC_ClockConfig+0x2f0>)
 8001dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001dc2:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <HAL_RCC_ClockConfig+0x2f4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fc02 	bl	80005d0 <HAL_InitTick>
  
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3778      	adds	r7, #120	; 0x78
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	08003360 	.word	0x08003360
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000004 	.word	0x20000004

08001de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b08b      	sub	sp, #44	; 0x2c
 8001dec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e02:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d002      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x30>
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d003      	beq.n	8001e1e <HAL_RCC_GetSysClockFreq+0x36>
 8001e16:	e03f      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e18:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e1a:	623b      	str	r3, [r7, #32]
      break;
 8001e1c:	e03f      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e24:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e28:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	fa92 f2a2 	rbit	r2, r2
 8001e30:	607a      	str	r2, [r7, #4]
  return result;
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	fab2 f282 	clz	r2, r2
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	40d3      	lsrs	r3, r2
 8001e3c:	4a1d      	ldr	r2, [pc, #116]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e3e:	5cd3      	ldrb	r3, [r2, r3]
 8001e40:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001e42:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	fa92 f2a2 	rbit	r2, r2
 8001e54:	60fa      	str	r2, [r7, #12]
  return result;
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	fab2 f282 	clz	r2, r2
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	40d3      	lsrs	r3, r2
 8001e60:	4a15      	ldr	r2, [pc, #84]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e62:	5cd3      	ldrb	r3, [r2, r3]
 8001e64:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e70:	4a0f      	ldr	r2, [pc, #60]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fb02 f303 	mul.w	r3, r2, r3
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e80:	e007      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e82:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	623b      	str	r3, [r7, #32]
      break;
 8001e96:	e002      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e9a:	623b      	str	r3, [r7, #32]
      break;
 8001e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	372c      	adds	r7, #44	; 0x2c
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	007a1200 	.word	0x007a1200
 8001eb4:	08003378 	.word	0x08003378
 8001eb8:	08003388 	.word	0x08003388

08001ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000000 	.word	0x20000000

08001ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001eda:	f7ff ffef 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001ede:	4601      	mov	r1, r0
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ee8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001eec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	fa92 f2a2 	rbit	r2, r2
 8001ef4:	603a      	str	r2, [r7, #0]
  return result;
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	fab2 f282 	clz	r2, r2
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	40d3      	lsrs	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	08003370 	.word	0x08003370

08001f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f1e:	f7ff ffcd 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001f22:	4601      	mov	r1, r0
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001f2c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001f30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	fa92 f2a2 	rbit	r2, r2
 8001f38:	603a      	str	r2, [r7, #0]
  return result;
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	fab2 f282 	clz	r2, r2
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	40d3      	lsrs	r3, r2
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40021000 	.word	0x40021000
 8001f58:	08003370 	.word	0x08003370

08001f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b092      	sub	sp, #72	; 0x48
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80d4 	beq.w	8002128 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f80:	4b4e      	ldr	r3, [pc, #312]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10e      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8c:	4b4b      	ldr	r3, [pc, #300]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	4a4a      	ldr	r2, [pc, #296]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f96:	61d3      	str	r3, [r2, #28]
 8001f98:	4b48      	ldr	r3, [pc, #288]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b45      	ldr	r3, [pc, #276]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d118      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb6:	4b42      	ldr	r3, [pc, #264]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a41      	ldr	r2, [pc, #260]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc2:	f7fe fb49 	bl	8000658 <HAL_GetTick>
 8001fc6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	e008      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fca:	f7fe fb45 	bl	8000658 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b64      	cmp	r3, #100	; 0x64
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e1d6      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	4b38      	ldr	r3, [pc, #224]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fe8:	4b34      	ldr	r3, [pc, #208]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 8084 	beq.w	8002102 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002002:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002004:	429a      	cmp	r2, r3
 8002006:	d07c      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002008:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002010:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002012:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	461a      	mov	r2, r3
 8002032:	2301      	movs	r3, #1
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800203a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	461a      	mov	r2, r3
 8002056:	2300      	movs	r3, #0
 8002058:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800205a:	4a18      	ldr	r2, [pc, #96]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800205e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d04b      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7fe faf5 	bl	8000658 <HAL_GetTick>
 800206e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7fe faf1 	bl	8000658 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e180      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002088:	2302      	movs	r3, #2
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
 8002094:	2302      	movs	r3, #2
 8002096:	623b      	str	r3, [r7, #32]
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	61fb      	str	r3, [r7, #28]
  return result;
 80020a0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	095b      	lsrs	r3, r3, #5
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d108      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80020b6:	4b01      	ldr	r3, [pc, #4]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	e00d      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40007000 	.word	0x40007000
 80020c4:	10908100 	.word	0x10908100
 80020c8:	2302      	movs	r3, #2
 80020ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	4ba0      	ldr	r3, [pc, #640]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	2202      	movs	r2, #2
 80020da:	613a      	str	r2, [r7, #16]
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	fa92 f2a2 	rbit	r2, r2
 80020e2:	60fa      	str	r2, [r7, #12]
  return result;
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	fab2 f282 	clz	r2, r2
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	f002 021f 	and.w	r2, r2, #31
 80020f6:	2101      	movs	r1, #1
 80020f8:	fa01 f202 	lsl.w	r2, r1, r2
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0b7      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002102:	4b95      	ldr	r3, [pc, #596]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4992      	ldr	r1, [pc, #584]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002110:	4313      	orrs	r3, r2
 8002112:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002114:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002118:	2b01      	cmp	r3, #1
 800211a:	d105      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211c:	4b8e      	ldr	r3, [pc, #568]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	4a8d      	ldr	r2, [pc, #564]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002126:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002134:	4b88      	ldr	r3, [pc, #544]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	f023 0203 	bic.w	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4985      	ldr	r1, [pc, #532]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d008      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002152:	4b81      	ldr	r3, [pc, #516]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	497e      	ldr	r1, [pc, #504]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002160:	4313      	orrs	r3, r2
 8002162:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002170:	4b79      	ldr	r3, [pc, #484]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	4976      	ldr	r1, [pc, #472]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800217e:	4313      	orrs	r3, r2
 8002180:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	d008      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800218e:	4b72      	ldr	r3, [pc, #456]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f023 0210 	bic.w	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	496f      	ldr	r1, [pc, #444]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800219c:	4313      	orrs	r3, r2
 800219e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80021ac:	4b6a      	ldr	r3, [pc, #424]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b8:	4967      	ldr	r1, [pc, #412]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021ca:	4b63      	ldr	r3, [pc, #396]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f023 0220 	bic.w	r2, r3, #32
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4960      	ldr	r1, [pc, #384]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021e8:	4b5b      	ldr	r3, [pc, #364]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	4958      	ldr	r1, [pc, #352]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002206:	4b54      	ldr	r3, [pc, #336]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	4951      	ldr	r1, [pc, #324]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002214:	4313      	orrs	r3, r2
 8002216:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002224:	4b4c      	ldr	r3, [pc, #304]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	4949      	ldr	r1, [pc, #292]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002232:	4313      	orrs	r3, r2
 8002234:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800223e:	2b00      	cmp	r3, #0
 8002240:	d008      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002242:	4b45      	ldr	r3, [pc, #276]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4942      	ldr	r1, [pc, #264]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002260:	4b3d      	ldr	r3, [pc, #244]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	493a      	ldr	r1, [pc, #232]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d008      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800227e:	4b36      	ldr	r3, [pc, #216]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	4933      	ldr	r1, [pc, #204]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800228c:	4313      	orrs	r3, r2
 800228e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800229c:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a8:	492b      	ldr	r1, [pc, #172]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80022ba:	4b27      	ldr	r3, [pc, #156]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	4924      	ldr	r1, [pc, #144]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80022d8:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e4:	491c      	ldr	r1, [pc, #112]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d008      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80022f6:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002302:	4915      	ldr	r1, [pc, #84]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002304:	4313      	orrs	r3, r2
 8002306:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002314:	4b10      	ldr	r3, [pc, #64]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002320:	490d      	ldr	r1, [pc, #52]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002322:	4313      	orrs	r3, r2
 8002324:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d008      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233e:	4906      	ldr	r1, [pc, #24]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002340:	4313      	orrs	r3, r2
 8002342:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00c      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002350:	4b01      	ldr	r3, [pc, #4]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	e002      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
 800235c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002364:	490b      	ldr	r1, [pc, #44]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002366:	4313      	orrs	r3, r2
 8002368:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002382:	4904      	ldr	r1, [pc, #16]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002384:	4313      	orrs	r3, r2
 8002386:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3748      	adds	r7, #72	; 0x48
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000

08002398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e040      	b.n	800242c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe f838 	bl	8000430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2224      	movs	r2, #36	; 0x24
 80023c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0201 	bic.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fa8a 	bl	80028f0 <UART_SetConfig>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e022      	b.n	800242c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fc52 	bl	8002c98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002412:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fcd9 	bl	8002ddc <UART_CheckIdleState>
 800242a:	4603      	mov	r3, r0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	4613      	mov	r3, r2
 8002440:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002446:	2b20      	cmp	r3, #32
 8002448:	d12c      	bne.n	80024a4 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_UART_Receive_IT+0x22>
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e025      	b.n	80024a6 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_UART_Receive_IT+0x34>
 8002464:	2302      	movs	r3, #2
 8002466:	e01e      	b.n	80024a6 <HAL_UART_Receive_IT+0x72>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d007      	beq.n	8002494 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002492:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	461a      	mov	r2, r3
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 fd64 	bl	8002f68 <UART_Start_Receive_IT>
 80024a0:	4603      	mov	r3, r0
 80024a2:	e000      	b.n	80024a6 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80024a4:	2302      	movs	r3, #2
  }
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80024d0:	69fa      	ldr	r2, [r7, #28]
 80024d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d113      	bne.n	8002508 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00e      	beq.n	8002508 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d009      	beq.n	8002508 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 81cd 	beq.w	8002898 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	4798      	blx	r3
      }
      return;
 8002506:	e1c7      	b.n	8002898 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 80e3 	beq.w	80026d6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d105      	bne.n	8002526 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4ba5      	ldr	r3, [pc, #660]	; (80027b4 <HAL_UART_IRQHandler+0x304>)
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80d8 	beq.w	80026d6 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d010      	beq.n	8002552 <HAL_UART_IRQHandler+0xa2>
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2201      	movs	r2, #1
 8002540:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002548:	f043 0201 	orr.w	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d010      	beq.n	800257e <HAL_UART_IRQHandler+0xce>
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2202      	movs	r2, #2
 800256c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002574:	f043 0204 	orr.w	r2, r3, #4
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d010      	beq.n	80025aa <HAL_UART_IRQHandler+0xfa>
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2204      	movs	r2, #4
 8002598:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a0:	f043 0202 	orr.w	r2, r3, #2
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d015      	beq.n	80025e0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d104      	bne.n	80025c8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00b      	beq.n	80025e0 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2208      	movs	r2, #8
 80025ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025d6:	f043 0208 	orr.w	r2, r3, #8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d011      	beq.n	800260e <HAL_UART_IRQHandler+0x15e>
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00c      	beq.n	800260e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002604:	f043 0220 	orr.w	r2, r3, #32
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 8141 	beq.w	800289c <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00c      	beq.n	800263e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002644:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002650:	2b40      	cmp	r3, #64	; 0x40
 8002652:	d004      	beq.n	800265e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800265a:	2b00      	cmp	r3, #0
 800265c:	d031      	beq.n	80026c2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fd0a 	bl	8003078 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266e:	2b40      	cmp	r3, #64	; 0x40
 8002670:	d123      	bne.n	80026ba <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002680:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002686:	2b00      	cmp	r3, #0
 8002688:	d013      	beq.n	80026b2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	4a4a      	ldr	r2, [pc, #296]	; (80027b8 <HAL_UART_IRQHandler+0x308>)
 8002690:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe f934 	bl	8000904 <HAL_DMA_Abort_IT>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d017      	beq.n	80026d2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80026ac:	4610      	mov	r0, r2
 80026ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b0:	e00f      	b.n	80026d2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f906 	bl	80028c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b8:	e00b      	b.n	80026d2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f902 	bl	80028c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c0:	e007      	b.n	80026d2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f8fe 	bl	80028c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80026d0:	e0e4      	b.n	800289c <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d2:	bf00      	nop
    return;
 80026d4:	e0e2      	b.n	800289c <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	2b01      	cmp	r3, #1
 80026dc:	f040 80a7 	bne.w	800282e <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 80a1 	beq.w	800282e <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 809b 	beq.w	800282e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2210      	movs	r2, #16
 80026fe:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b40      	cmp	r3, #64	; 0x40
 800270c:	d156      	bne.n	80027bc <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8002718:	893b      	ldrh	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80c0 	beq.w	80028a0 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002726:	893a      	ldrh	r2, [r7, #8]
 8002728:	429a      	cmp	r2, r3
 800272a:	f080 80b9 	bcs.w	80028a0 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	893a      	ldrh	r2, [r7, #8]
 8002732:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	2b20      	cmp	r3, #32
 800273e:	d02a      	beq.n	8002796 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800274e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800276e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2220      	movs	r2, #32
 8002774:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0210 	bic.w	r2, r2, #16
 800278a:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe f87e 	bl	8000892 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4619      	mov	r1, r3
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f894 	bl	80028d8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80027b0:	e076      	b.n	80028a0 <HAL_UART_IRQHandler+0x3f0>
 80027b2:	bf00      	nop
 80027b4:	04000120 	.word	0x04000120
 80027b8:	080030d7 	.word	0x080030d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d064      	beq.n	80028a4 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 80027da:	897b      	ldrh	r3, [r7, #10]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d061      	beq.n	80028a4 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027ee:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0210 	bic.w	r2, r2, #16
 8002820:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002822:	897b      	ldrh	r3, [r7, #10]
 8002824:	4619      	mov	r1, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f856 	bl	80028d8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800282c:	e03a      	b.n	80028a4 <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00d      	beq.n	8002854 <HAL_UART_IRQHandler+0x3a4>
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800284a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 fd45 	bl	80032dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002852:	e02a      	b.n	80028aa <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00d      	beq.n	800287a <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01b      	beq.n	80028a8 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	4798      	blx	r3
    }
    return;
 8002878:	e016      	b.n	80028a8 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d012      	beq.n	80028aa <HAL_UART_IRQHandler+0x3fa>
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fc37 	bl	8003102 <UART_EndTransmit_IT>
    return;
 8002894:	bf00      	nop
 8002896:	e008      	b.n	80028aa <HAL_UART_IRQHandler+0x3fa>
      return;
 8002898:	bf00      	nop
 800289a:	e006      	b.n	80028aa <HAL_UART_IRQHandler+0x3fa>
    return;
 800289c:	bf00      	nop
 800289e:	e004      	b.n	80028aa <HAL_UART_IRQHandler+0x3fa>
      return;
 80028a0:	bf00      	nop
 80028a2:	e002      	b.n	80028aa <HAL_UART_IRQHandler+0x3fa>
      return;
 80028a4:	bf00      	nop
 80028a6:	e000      	b.n	80028aa <HAL_UART_IRQHandler+0x3fa>
    return;
 80028a8:	bf00      	nop
  }

}
 80028aa:	3720      	adds	r7, #32
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4baa      	ldr	r3, [pc, #680]	; (8002bc4 <UART_SetConfig+0x2d4>)
 800291c:	4013      	ands	r3, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	6979      	ldr	r1, [r7, #20]
 8002924:	430b      	orrs	r3, r1
 8002926:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	4313      	orrs	r3, r2
 800294c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	430a      	orrs	r2, r1
 8002960:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a98      	ldr	r2, [pc, #608]	; (8002bc8 <UART_SetConfig+0x2d8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d121      	bne.n	80029b0 <UART_SetConfig+0xc0>
 800296c:	4b97      	ldr	r3, [pc, #604]	; (8002bcc <UART_SetConfig+0x2dc>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	2b03      	cmp	r3, #3
 8002976:	d817      	bhi.n	80029a8 <UART_SetConfig+0xb8>
 8002978:	a201      	add	r2, pc, #4	; (adr r2, 8002980 <UART_SetConfig+0x90>)
 800297a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297e:	bf00      	nop
 8002980:	08002991 	.word	0x08002991
 8002984:	0800299d 	.word	0x0800299d
 8002988:	080029a3 	.word	0x080029a3
 800298c:	08002997 	.word	0x08002997
 8002990:	2301      	movs	r3, #1
 8002992:	77fb      	strb	r3, [r7, #31]
 8002994:	e0b2      	b.n	8002afc <UART_SetConfig+0x20c>
 8002996:	2302      	movs	r3, #2
 8002998:	77fb      	strb	r3, [r7, #31]
 800299a:	e0af      	b.n	8002afc <UART_SetConfig+0x20c>
 800299c:	2304      	movs	r3, #4
 800299e:	77fb      	strb	r3, [r7, #31]
 80029a0:	e0ac      	b.n	8002afc <UART_SetConfig+0x20c>
 80029a2:	2308      	movs	r3, #8
 80029a4:	77fb      	strb	r3, [r7, #31]
 80029a6:	e0a9      	b.n	8002afc <UART_SetConfig+0x20c>
 80029a8:	2310      	movs	r3, #16
 80029aa:	77fb      	strb	r3, [r7, #31]
 80029ac:	bf00      	nop
 80029ae:	e0a5      	b.n	8002afc <UART_SetConfig+0x20c>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a86      	ldr	r2, [pc, #536]	; (8002bd0 <UART_SetConfig+0x2e0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d123      	bne.n	8002a02 <UART_SetConfig+0x112>
 80029ba:	4b84      	ldr	r3, [pc, #528]	; (8002bcc <UART_SetConfig+0x2dc>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c6:	d012      	beq.n	80029ee <UART_SetConfig+0xfe>
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029cc:	d802      	bhi.n	80029d4 <UART_SetConfig+0xe4>
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <UART_SetConfig+0xf2>
 80029d2:	e012      	b.n	80029fa <UART_SetConfig+0x10a>
 80029d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029d8:	d00c      	beq.n	80029f4 <UART_SetConfig+0x104>
 80029da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029de:	d003      	beq.n	80029e8 <UART_SetConfig+0xf8>
 80029e0:	e00b      	b.n	80029fa <UART_SetConfig+0x10a>
 80029e2:	2300      	movs	r3, #0
 80029e4:	77fb      	strb	r3, [r7, #31]
 80029e6:	e089      	b.n	8002afc <UART_SetConfig+0x20c>
 80029e8:	2302      	movs	r3, #2
 80029ea:	77fb      	strb	r3, [r7, #31]
 80029ec:	e086      	b.n	8002afc <UART_SetConfig+0x20c>
 80029ee:	2304      	movs	r3, #4
 80029f0:	77fb      	strb	r3, [r7, #31]
 80029f2:	e083      	b.n	8002afc <UART_SetConfig+0x20c>
 80029f4:	2308      	movs	r3, #8
 80029f6:	77fb      	strb	r3, [r7, #31]
 80029f8:	e080      	b.n	8002afc <UART_SetConfig+0x20c>
 80029fa:	2310      	movs	r3, #16
 80029fc:	77fb      	strb	r3, [r7, #31]
 80029fe:	bf00      	nop
 8002a00:	e07c      	b.n	8002afc <UART_SetConfig+0x20c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a73      	ldr	r2, [pc, #460]	; (8002bd4 <UART_SetConfig+0x2e4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d123      	bne.n	8002a54 <UART_SetConfig+0x164>
 8002a0c:	4b6f      	ldr	r3, [pc, #444]	; (8002bcc <UART_SetConfig+0x2dc>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002a14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a18:	d012      	beq.n	8002a40 <UART_SetConfig+0x150>
 8002a1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a1e:	d802      	bhi.n	8002a26 <UART_SetConfig+0x136>
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <UART_SetConfig+0x144>
 8002a24:	e012      	b.n	8002a4c <UART_SetConfig+0x15c>
 8002a26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a2a:	d00c      	beq.n	8002a46 <UART_SetConfig+0x156>
 8002a2c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a30:	d003      	beq.n	8002a3a <UART_SetConfig+0x14a>
 8002a32:	e00b      	b.n	8002a4c <UART_SetConfig+0x15c>
 8002a34:	2300      	movs	r3, #0
 8002a36:	77fb      	strb	r3, [r7, #31]
 8002a38:	e060      	b.n	8002afc <UART_SetConfig+0x20c>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	77fb      	strb	r3, [r7, #31]
 8002a3e:	e05d      	b.n	8002afc <UART_SetConfig+0x20c>
 8002a40:	2304      	movs	r3, #4
 8002a42:	77fb      	strb	r3, [r7, #31]
 8002a44:	e05a      	b.n	8002afc <UART_SetConfig+0x20c>
 8002a46:	2308      	movs	r3, #8
 8002a48:	77fb      	strb	r3, [r7, #31]
 8002a4a:	e057      	b.n	8002afc <UART_SetConfig+0x20c>
 8002a4c:	2310      	movs	r3, #16
 8002a4e:	77fb      	strb	r3, [r7, #31]
 8002a50:	bf00      	nop
 8002a52:	e053      	b.n	8002afc <UART_SetConfig+0x20c>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a5f      	ldr	r2, [pc, #380]	; (8002bd8 <UART_SetConfig+0x2e8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d123      	bne.n	8002aa6 <UART_SetConfig+0x1b6>
 8002a5e:	4b5b      	ldr	r3, [pc, #364]	; (8002bcc <UART_SetConfig+0x2dc>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a6a:	d012      	beq.n	8002a92 <UART_SetConfig+0x1a2>
 8002a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a70:	d802      	bhi.n	8002a78 <UART_SetConfig+0x188>
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <UART_SetConfig+0x196>
 8002a76:	e012      	b.n	8002a9e <UART_SetConfig+0x1ae>
 8002a78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a7c:	d00c      	beq.n	8002a98 <UART_SetConfig+0x1a8>
 8002a7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a82:	d003      	beq.n	8002a8c <UART_SetConfig+0x19c>
 8002a84:	e00b      	b.n	8002a9e <UART_SetConfig+0x1ae>
 8002a86:	2300      	movs	r3, #0
 8002a88:	77fb      	strb	r3, [r7, #31]
 8002a8a:	e037      	b.n	8002afc <UART_SetConfig+0x20c>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	77fb      	strb	r3, [r7, #31]
 8002a90:	e034      	b.n	8002afc <UART_SetConfig+0x20c>
 8002a92:	2304      	movs	r3, #4
 8002a94:	77fb      	strb	r3, [r7, #31]
 8002a96:	e031      	b.n	8002afc <UART_SetConfig+0x20c>
 8002a98:	2308      	movs	r3, #8
 8002a9a:	77fb      	strb	r3, [r7, #31]
 8002a9c:	e02e      	b.n	8002afc <UART_SetConfig+0x20c>
 8002a9e:	2310      	movs	r3, #16
 8002aa0:	77fb      	strb	r3, [r7, #31]
 8002aa2:	bf00      	nop
 8002aa4:	e02a      	b.n	8002afc <UART_SetConfig+0x20c>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a4c      	ldr	r2, [pc, #304]	; (8002bdc <UART_SetConfig+0x2ec>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d123      	bne.n	8002af8 <UART_SetConfig+0x208>
 8002ab0:	4b46      	ldr	r3, [pc, #280]	; (8002bcc <UART_SetConfig+0x2dc>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002abc:	d012      	beq.n	8002ae4 <UART_SetConfig+0x1f4>
 8002abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ac2:	d802      	bhi.n	8002aca <UART_SetConfig+0x1da>
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <UART_SetConfig+0x1e8>
 8002ac8:	e012      	b.n	8002af0 <UART_SetConfig+0x200>
 8002aca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ace:	d00c      	beq.n	8002aea <UART_SetConfig+0x1fa>
 8002ad0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ad4:	d003      	beq.n	8002ade <UART_SetConfig+0x1ee>
 8002ad6:	e00b      	b.n	8002af0 <UART_SetConfig+0x200>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	77fb      	strb	r3, [r7, #31]
 8002adc:	e00e      	b.n	8002afc <UART_SetConfig+0x20c>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	77fb      	strb	r3, [r7, #31]
 8002ae2:	e00b      	b.n	8002afc <UART_SetConfig+0x20c>
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	77fb      	strb	r3, [r7, #31]
 8002ae8:	e008      	b.n	8002afc <UART_SetConfig+0x20c>
 8002aea:	2308      	movs	r3, #8
 8002aec:	77fb      	strb	r3, [r7, #31]
 8002aee:	e005      	b.n	8002afc <UART_SetConfig+0x20c>
 8002af0:	2310      	movs	r3, #16
 8002af2:	77fb      	strb	r3, [r7, #31]
 8002af4:	bf00      	nop
 8002af6:	e001      	b.n	8002afc <UART_SetConfig+0x20c>
 8002af8:	2310      	movs	r3, #16
 8002afa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b04:	d16e      	bne.n	8002be4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002b06:	7ffb      	ldrb	r3, [r7, #31]
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d828      	bhi.n	8002b5e <UART_SetConfig+0x26e>
 8002b0c:	a201      	add	r2, pc, #4	; (adr r2, 8002b14 <UART_SetConfig+0x224>)
 8002b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b12:	bf00      	nop
 8002b14:	08002b39 	.word	0x08002b39
 8002b18:	08002b41 	.word	0x08002b41
 8002b1c:	08002b49 	.word	0x08002b49
 8002b20:	08002b5f 	.word	0x08002b5f
 8002b24:	08002b4f 	.word	0x08002b4f
 8002b28:	08002b5f 	.word	0x08002b5f
 8002b2c:	08002b5f 	.word	0x08002b5f
 8002b30:	08002b5f 	.word	0x08002b5f
 8002b34:	08002b57 	.word	0x08002b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b38:	f7ff f9cc 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8002b3c:	61b8      	str	r0, [r7, #24]
        break;
 8002b3e:	e013      	b.n	8002b68 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b40:	f7ff f9ea 	bl	8001f18 <HAL_RCC_GetPCLK2Freq>
 8002b44:	61b8      	str	r0, [r7, #24]
        break;
 8002b46:	e00f      	b.n	8002b68 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <UART_SetConfig+0x2f0>)
 8002b4a:	61bb      	str	r3, [r7, #24]
        break;
 8002b4c:	e00c      	b.n	8002b68 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b4e:	f7ff f94b 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8002b52:	61b8      	str	r0, [r7, #24]
        break;
 8002b54:	e008      	b.n	8002b68 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b5a:	61bb      	str	r3, [r7, #24]
        break;
 8002b5c:	e004      	b.n	8002b68 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	77bb      	strb	r3, [r7, #30]
        break;
 8002b66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 8086 	beq.w	8002c7c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	005a      	lsls	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	085b      	lsrs	r3, r3, #1
 8002b7a:	441a      	add	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b0f      	cmp	r3, #15
 8002b8c:	d916      	bls.n	8002bbc <UART_SetConfig+0x2cc>
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b94:	d212      	bcs.n	8002bbc <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f023 030f 	bic.w	r3, r3, #15
 8002b9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	085b      	lsrs	r3, r3, #1
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	89fb      	ldrh	r3, [r7, #14]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	89fa      	ldrh	r2, [r7, #14]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	e05f      	b.n	8002c7c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	77bb      	strb	r3, [r7, #30]
 8002bc0:	e05c      	b.n	8002c7c <UART_SetConfig+0x38c>
 8002bc2:	bf00      	nop
 8002bc4:	efff69f3 	.word	0xefff69f3
 8002bc8:	40013800 	.word	0x40013800
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40004400 	.word	0x40004400
 8002bd4:	40004800 	.word	0x40004800
 8002bd8:	40004c00 	.word	0x40004c00
 8002bdc:	40005000 	.word	0x40005000
 8002be0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002be4:	7ffb      	ldrb	r3, [r7, #31]
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d827      	bhi.n	8002c3a <UART_SetConfig+0x34a>
 8002bea:	a201      	add	r2, pc, #4	; (adr r2, 8002bf0 <UART_SetConfig+0x300>)
 8002bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf0:	08002c15 	.word	0x08002c15
 8002bf4:	08002c1d 	.word	0x08002c1d
 8002bf8:	08002c25 	.word	0x08002c25
 8002bfc:	08002c3b 	.word	0x08002c3b
 8002c00:	08002c2b 	.word	0x08002c2b
 8002c04:	08002c3b 	.word	0x08002c3b
 8002c08:	08002c3b 	.word	0x08002c3b
 8002c0c:	08002c3b 	.word	0x08002c3b
 8002c10:	08002c33 	.word	0x08002c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c14:	f7ff f95e 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8002c18:	61b8      	str	r0, [r7, #24]
        break;
 8002c1a:	e013      	b.n	8002c44 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c1c:	f7ff f97c 	bl	8001f18 <HAL_RCC_GetPCLK2Freq>
 8002c20:	61b8      	str	r0, [r7, #24]
        break;
 8002c22:	e00f      	b.n	8002c44 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c24:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <UART_SetConfig+0x3a4>)
 8002c26:	61bb      	str	r3, [r7, #24]
        break;
 8002c28:	e00c      	b.n	8002c44 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c2a:	f7ff f8dd 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8002c2e:	61b8      	str	r0, [r7, #24]
        break;
 8002c30:	e008      	b.n	8002c44 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c36:	61bb      	str	r3, [r7, #24]
        break;
 8002c38:	e004      	b.n	8002c44 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	77bb      	strb	r3, [r7, #30]
        break;
 8002c42:	bf00      	nop
    }

    if (pclk != 0U)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d018      	beq.n	8002c7c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	085a      	lsrs	r2, r3, #1
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	441a      	add	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	2b0f      	cmp	r3, #15
 8002c64:	d908      	bls.n	8002c78 <UART_SetConfig+0x388>
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6c:	d204      	bcs.n	8002c78 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	e001      	b.n	8002c7c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c88:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3720      	adds	r7, #32
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	007a1200 	.word	0x007a1200

08002c98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01a      	beq.n	8002dae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d96:	d10a      	bne.n	8002dae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	605a      	str	r2, [r3, #4]
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002dec:	f7fd fc34 	bl	8000658 <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d10e      	bne.n	8002e1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f82d 	bl	8002e6e <UART_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e023      	b.n	8002e66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d10e      	bne.n	8002e4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f817 	bl	8002e6e <UART_WaitOnFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e00d      	b.n	8002e66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2220      	movs	r2, #32
 8002e54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7e:	e05e      	b.n	8002f3e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d05a      	beq.n	8002f3e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e88:	f7fd fbe6 	bl	8000658 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d302      	bcc.n	8002e9e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d11b      	bne.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002eac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0201 	bic.w	r2, r2, #1
 8002ebc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e043      	b.n	8002f5e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d02c      	beq.n	8002f3e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ef2:	d124      	bne.n	8002f3e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002efc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f0c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e00f      	b.n	8002f5e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4013      	ands	r3, r2
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	bf0c      	ite	eq
 8002f4e:	2301      	moveq	r3, #1
 8002f50:	2300      	movne	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d091      	beq.n	8002e80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	88fa      	ldrh	r2, [r7, #6]
 8002f80:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	88fa      	ldrh	r2, [r7, #6]
 8002f88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9a:	d10e      	bne.n	8002fba <UART_Start_Receive_IT+0x52>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d105      	bne.n	8002fb0 <UART_Start_Receive_IT+0x48>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002faa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002fae:	e02d      	b.n	800300c <UART_Start_Receive_IT+0xa4>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	22ff      	movs	r2, #255	; 0xff
 8002fb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002fb8:	e028      	b.n	800300c <UART_Start_Receive_IT+0xa4>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10d      	bne.n	8002fde <UART_Start_Receive_IT+0x76>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d104      	bne.n	8002fd4 <UART_Start_Receive_IT+0x6c>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	22ff      	movs	r2, #255	; 0xff
 8002fce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002fd2:	e01b      	b.n	800300c <UART_Start_Receive_IT+0xa4>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	227f      	movs	r2, #127	; 0x7f
 8002fd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002fdc:	e016      	b.n	800300c <UART_Start_Receive_IT+0xa4>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fe6:	d10d      	bne.n	8003004 <UART_Start_Receive_IT+0x9c>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d104      	bne.n	8002ffa <UART_Start_Receive_IT+0x92>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	227f      	movs	r2, #127	; 0x7f
 8002ff4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ff8:	e008      	b.n	800300c <UART_Start_Receive_IT+0xa4>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	223f      	movs	r2, #63	; 0x3f
 8002ffe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003002:	e003      	b.n	800300c <UART_Start_Receive_IT+0xa4>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2222      	movs	r2, #34	; 0x22
 8003018:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0201 	orr.w	r2, r2, #1
 8003028:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003032:	d107      	bne.n	8003044 <UART_Start_Receive_IT+0xdc>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d103      	bne.n	8003044 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <UART_Start_Receive_IT+0x108>)
 8003040:	665a      	str	r2, [r3, #100]	; 0x64
 8003042:	e002      	b.n	800304a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a0b      	ldr	r2, [pc, #44]	; (8003074 <UART_Start_Receive_IT+0x10c>)
 8003048:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003060:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	08003209 	.word	0x08003209
 8003074:	08003135 	.word	0x08003135

08003078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800308e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0201 	bic.w	r2, r2, #1
 800309e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d107      	bne.n	80030b8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0210 	bic.w	r2, r2, #16
 80030b6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2220      	movs	r2, #32
 80030bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f7ff fbe5 	bl	80028c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003118:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff fbc2 	bl	80028b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800312c:	bf00      	nop
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003142:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003148:	2b22      	cmp	r3, #34	; 0x22
 800314a:	d151      	bne.n	80031f0 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003152:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003154:	89bb      	ldrh	r3, [r7, #12]
 8003156:	b2d9      	uxtb	r1, r3
 8003158:	89fb      	ldrh	r3, [r7, #14]
 800315a:	b2da      	uxtb	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003160:	400a      	ands	r2, r1
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d138      	bne.n	8003200 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800319c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d10f      	bne.n	80031e2 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0210 	bic.w	r2, r2, #16
 80031d0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031d8:	4619      	mov	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff fb7c 	bl	80028d8 <HAL_UARTEx_RxEventCallback>
 80031e0:	e002      	b.n	80031e8 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fc fff6 	bl	80001d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80031ee:	e007      	b.n	8003200 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0208 	orr.w	r2, r2, #8
 80031fe:	619a      	str	r2, [r3, #24]
}
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003216:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800321c:	2b22      	cmp	r3, #34	; 0x22
 800321e:	d151      	bne.n	80032c4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003226:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800322e:	89ba      	ldrh	r2, [r7, #12]
 8003230:	89fb      	ldrh	r3, [r7, #14]
 8003232:	4013      	ands	r3, r2
 8003234:	b29a      	uxth	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323e:	1c9a      	adds	r2, r3, #2
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d138      	bne.n	80032d4 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003270:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0201 	bic.w	r2, r2, #1
 8003280:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003292:	2b01      	cmp	r3, #1
 8003294:	d10f      	bne.n	80032b6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0210 	bic.w	r2, r2, #16
 80032a4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80032ac:	4619      	mov	r1, r3
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff fb12 	bl	80028d8 <HAL_UARTEx_RxEventCallback>
 80032b4:	e002      	b.n	80032bc <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fc ff8c 	bl	80001d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80032c2:	e007      	b.n	80032d4 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0208 	orr.w	r2, r2, #8
 80032d2:	619a      	str	r2, [r3, #24]
}
 80032d4:	bf00      	nop
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <__libc_init_array>:
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	4e0d      	ldr	r6, [pc, #52]	; (8003328 <__libc_init_array+0x38>)
 80032f4:	4c0d      	ldr	r4, [pc, #52]	; (800332c <__libc_init_array+0x3c>)
 80032f6:	1ba4      	subs	r4, r4, r6
 80032f8:	10a4      	asrs	r4, r4, #2
 80032fa:	2500      	movs	r5, #0
 80032fc:	42a5      	cmp	r5, r4
 80032fe:	d109      	bne.n	8003314 <__libc_init_array+0x24>
 8003300:	4e0b      	ldr	r6, [pc, #44]	; (8003330 <__libc_init_array+0x40>)
 8003302:	4c0c      	ldr	r4, [pc, #48]	; (8003334 <__libc_init_array+0x44>)
 8003304:	f000 f820 	bl	8003348 <_init>
 8003308:	1ba4      	subs	r4, r4, r6
 800330a:	10a4      	asrs	r4, r4, #2
 800330c:	2500      	movs	r5, #0
 800330e:	42a5      	cmp	r5, r4
 8003310:	d105      	bne.n	800331e <__libc_init_array+0x2e>
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003318:	4798      	blx	r3
 800331a:	3501      	adds	r5, #1
 800331c:	e7ee      	b.n	80032fc <__libc_init_array+0xc>
 800331e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003322:	4798      	blx	r3
 8003324:	3501      	adds	r5, #1
 8003326:	e7f2      	b.n	800330e <__libc_init_array+0x1e>
 8003328:	08003398 	.word	0x08003398
 800332c:	08003398 	.word	0x08003398
 8003330:	08003398 	.word	0x08003398
 8003334:	0800339c 	.word	0x0800339c

08003338 <memset>:
 8003338:	4402      	add	r2, r0
 800333a:	4603      	mov	r3, r0
 800333c:	4293      	cmp	r3, r2
 800333e:	d100      	bne.n	8003342 <memset+0xa>
 8003340:	4770      	bx	lr
 8003342:	f803 1b01 	strb.w	r1, [r3], #1
 8003346:	e7f9      	b.n	800333c <memset+0x4>

08003348 <_init>:
 8003348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334a:	bf00      	nop
 800334c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800334e:	bc08      	pop	{r3}
 8003350:	469e      	mov	lr, r3
 8003352:	4770      	bx	lr

08003354 <_fini>:
 8003354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003356:	bf00      	nop
 8003358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335a:	bc08      	pop	{r3}
 800335c:	469e      	mov	lr, r3
 800335e:	4770      	bx	lr
