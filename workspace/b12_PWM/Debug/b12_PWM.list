
b12_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031e8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800337c  0800337c  0001337c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033ac  080033ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080033ac  080033ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033ac  080033ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033b0  080033b0  000133b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  080033c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080033c0  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000965d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001537  00000000  00000000  00029699  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000990  00000000  00000000  0002abd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d8  00000000  00000000  0002b560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f2e5  00000000  00000000  0002be38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008f2d  00000000  00000000  0004b11d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c0f46  00000000  00000000  0005404a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00114f90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002794  00000000  00000000  0011500c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003364 	.word	0x08003364

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003364 	.word	0x08003364

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fa07 	bl	80005ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f843 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f90b 	bl	80003fc <MX_GPIO_Init>
  MX_TIM2_Init();
 80001e6:	f000 f893 	bl	8000310 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80001ea:	2100      	movs	r1, #0
 80001ec:	481c      	ldr	r0, [pc, #112]	; (8000260 <main+0x8c>)
 80001ee:	f002 f8c7 	bl	8002380 <HAL_TIM_PWM_Start>
  int8_t duty=0;
 80001f2:	2300      	movs	r3, #0
 80001f4:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(duty=0;duty<100;duty++){
 80001f6:	2300      	movs	r3, #0
 80001f8:	71fb      	strb	r3, [r7, #7]
 80001fa:	e012      	b.n	8000222 <main+0x4e>
		  TIM2 ->CCR1 = duty;
 80001fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000204:	6353      	str	r3, [r2, #52]	; 0x34
		  //sConfigOC.Pulse=duty;
		  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8000206:	2200      	movs	r2, #0
 8000208:	4916      	ldr	r1, [pc, #88]	; (8000264 <main+0x90>)
 800020a:	4815      	ldr	r0, [pc, #84]	; (8000260 <main+0x8c>)
 800020c:	f002 f9c4 	bl	8002598 <HAL_TIM_PWM_ConfigChannel>
		  HAL_Delay(20);
 8000210:	2014      	movs	r0, #20
 8000212:	f000 fa51 	bl	80006b8 <HAL_Delay>
	  for(duty=0;duty<100;duty++){
 8000216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021a:	b2db      	uxtb	r3, r3
 800021c:	3301      	adds	r3, #1
 800021e:	b2db      	uxtb	r3, r3
 8000220:	71fb      	strb	r3, [r7, #7]
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	2b63      	cmp	r3, #99	; 0x63
 8000228:	dde8      	ble.n	80001fc <main+0x28>
	  }
	  for(duty=99;duty>0;duty--){
 800022a:	2363      	movs	r3, #99	; 0x63
 800022c:	71fb      	strb	r3, [r7, #7]
 800022e:	e012      	b.n	8000256 <main+0x82>
		  TIM2 ->CCR1 = duty;
 8000230:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000238:	6353      	str	r3, [r2, #52]	; 0x34
		  //sConfigOC.Pulse=duty;
		  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 800023a:	2200      	movs	r2, #0
 800023c:	4909      	ldr	r1, [pc, #36]	; (8000264 <main+0x90>)
 800023e:	4808      	ldr	r0, [pc, #32]	; (8000260 <main+0x8c>)
 8000240:	f002 f9aa 	bl	8002598 <HAL_TIM_PWM_ConfigChannel>
		  HAL_Delay(20);
 8000244:	2014      	movs	r0, #20
 8000246:	f000 fa37 	bl	80006b8 <HAL_Delay>
	  for(duty=99;duty>0;duty--){
 800024a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024e:	b2db      	uxtb	r3, r3
 8000250:	3b01      	subs	r3, #1
 8000252:	b2db      	uxtb	r3, r3
 8000254:	71fb      	strb	r3, [r7, #7]
 8000256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025a:	2b00      	cmp	r3, #0
 800025c:	dce8      	bgt.n	8000230 <main+0x5c>
	  for(duty=0;duty<100;duty++){
 800025e:	e7ca      	b.n	80001f6 <main+0x22>
 8000260:	20000044 	.word	0x20000044
 8000264:	20000028 	.word	0x20000028

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b0a6      	sub	sp, #152	; 0x98
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000272:	2228      	movs	r2, #40	; 0x28
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f003 f86c 	bl	8003354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2258      	movs	r2, #88	; 0x58
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f003 f85e 	bl	8003354 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000298:	2302      	movs	r3, #2
 800029a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029c:	2301      	movs	r3, #1
 800029e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a0:	2310      	movs	r3, #16
 80002a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a6:	2300      	movs	r3, #0
 80002a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fc93 	bl	8000bdc <HAL_RCC_OscConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002bc:	f000 f8b6 	bl	800042c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	230f      	movs	r3, #15
 80002c2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c4:	2300      	movs	r3, #0
 80002c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fb94 	bl	8001a08 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002e6:	f000 f8a1 	bl	800042c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM2;
 80002ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80002f0:	2300      	movs	r3, #0
 80002f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 fd6c 	bl	8001dd4 <HAL_RCCEx_PeriphCLKConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000302:	f000 f893 	bl	800042c <Error_Handler>
  }
}
 8000306:	bf00      	nop
 8000308:	3798      	adds	r7, #152	; 0x98
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08e      	sub	sp, #56	; 0x38
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000324:	f107 031c 	add.w	r3, r7, #28
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	605a      	str	r2, [r3, #4]
 800032e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000330:	463b      	mov	r3, r7
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]
 800033e:	615a      	str	r2, [r3, #20]
 8000340:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000342:	4b2d      	ldr	r3, [pc, #180]	; (80003f8 <MX_TIM2_Init+0xe8>)
 8000344:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000348:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800034a:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <MX_TIM2_Init+0xe8>)
 800034c:	224f      	movs	r2, #79	; 0x4f
 800034e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000350:	4b29      	ldr	r3, [pc, #164]	; (80003f8 <MX_TIM2_Init+0xe8>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000356:	4b28      	ldr	r3, [pc, #160]	; (80003f8 <MX_TIM2_Init+0xe8>)
 8000358:	2263      	movs	r2, #99	; 0x63
 800035a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035c:	4b26      	ldr	r3, [pc, #152]	; (80003f8 <MX_TIM2_Init+0xe8>)
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000362:	4b25      	ldr	r3, [pc, #148]	; (80003f8 <MX_TIM2_Init+0xe8>)
 8000364:	2200      	movs	r2, #0
 8000366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000368:	4823      	ldr	r0, [pc, #140]	; (80003f8 <MX_TIM2_Init+0xe8>)
 800036a:	f001 ff51 	bl	8002210 <HAL_TIM_Base_Init>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000374:	f000 f85a 	bl	800042c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800037c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800037e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000382:	4619      	mov	r1, r3
 8000384:	481c      	ldr	r0, [pc, #112]	; (80003f8 <MX_TIM2_Init+0xe8>)
 8000386:	f002 fa17 	bl	80027b8 <HAL_TIM_ConfigClockSource>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000390:	f000 f84c 	bl	800042c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000394:	4818      	ldr	r0, [pc, #96]	; (80003f8 <MX_TIM2_Init+0xe8>)
 8000396:	f001 ff92 	bl	80022be <HAL_TIM_PWM_Init>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80003a0:	f000 f844 	bl	800042c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a4:	2300      	movs	r3, #0
 80003a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a8:	2300      	movs	r3, #0
 80003aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003ac:	f107 031c 	add.w	r3, r7, #28
 80003b0:	4619      	mov	r1, r3
 80003b2:	4811      	ldr	r0, [pc, #68]	; (80003f8 <MX_TIM2_Init+0xe8>)
 80003b4:	f002 ff1e 	bl	80031f4 <HAL_TIMEx_MasterConfigSynchronization>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80003be:	f000 f835 	bl	800042c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003c2:	2360      	movs	r3, #96	; 0x60
 80003c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 49;
 80003c6:	2331      	movs	r3, #49	; 0x31
 80003c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003ce:	2300      	movs	r3, #0
 80003d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003d2:	463b      	mov	r3, r7
 80003d4:	2200      	movs	r2, #0
 80003d6:	4619      	mov	r1, r3
 80003d8:	4807      	ldr	r0, [pc, #28]	; (80003f8 <MX_TIM2_Init+0xe8>)
 80003da:	f002 f8dd 	bl	8002598 <HAL_TIM_PWM_ConfigChannel>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80003e4:	f000 f822 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003e8:	4803      	ldr	r0, [pc, #12]	; (80003f8 <MX_TIM2_Init+0xe8>)
 80003ea:	f000 f865 	bl	80004b8 <HAL_TIM_MspPostInit>

}
 80003ee:	bf00      	nop
 80003f0:	3738      	adds	r7, #56	; 0x38
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000044 	.word	0x20000044

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_GPIO_Init+0x2c>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a08      	ldr	r2, [pc, #32]	; (8000428 <MX_GPIO_Init+0x2c>)
 8000408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_GPIO_Init+0x2c>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000

0800042c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000432:	e7fe      	b.n	8000432 <Error_Handler+0x6>

08000434 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <HAL_MspInit+0x44>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <HAL_MspInit+0x44>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <HAL_MspInit+0x44>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <HAL_MspInit+0x44>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a08      	ldr	r2, [pc, #32]	; (8000478 <HAL_MspInit+0x44>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <HAL_MspInit+0x44>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000

0800047c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800048c:	d10b      	bne.n	80004a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <HAL_TIM_Base_MspInit+0x38>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <HAL_TIM_Base_MspInit+0x38>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <HAL_TIM_Base_MspInit+0x38>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000

080004b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	f107 030c 	add.w	r3, r7, #12
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004d8:	d11c      	bne.n	8000514 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <HAL_TIM_MspPostInit+0x64>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a0f      	ldr	r2, [pc, #60]	; (800051c <HAL_TIM_MspPostInit+0x64>)
 80004e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b0d      	ldr	r3, [pc, #52]	; (800051c <HAL_TIM_MspPostInit+0x64>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004f2:	2320      	movs	r3, #32
 80004f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f6:	2302      	movs	r3, #2
 80004f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000502:	2301      	movs	r3, #1
 8000504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	4619      	mov	r1, r3
 800050c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000510:	f000 f9da 	bl	80008c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000514:	bf00      	nop
 8000516:	3720      	adds	r7, #32
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40021000 	.word	0x40021000

08000520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <NMI_Handler+0x4>

08000526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052a:	e7fe      	b.n	800052a <HardFault_Handler+0x4>

0800052c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <MemManage_Handler+0x4>

08000532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000536:	e7fe      	b.n	8000536 <BusFault_Handler+0x4>

08000538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800053c:	e7fe      	b.n	800053c <UsageFault_Handler+0x4>

0800053e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800056c:	f000 f884 	bl	8000678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}

08000574 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <SystemInit+0x20>)
 800057a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800057e:	4a05      	ldr	r2, [pc, #20]	; (8000594 <SystemInit+0x20>)
 8000580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800059c:	480d      	ldr	r0, [pc, #52]	; (80005d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800059e:	490e      	ldr	r1, [pc, #56]	; (80005d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a0:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <LoopForever+0xe>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a4:	e002      	b.n	80005ac <LoopCopyDataInit>

080005a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005aa:	3304      	adds	r3, #4

080005ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b0:	d3f9      	bcc.n	80005a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b2:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b4:	4c0b      	ldr	r4, [pc, #44]	; (80005e4 <LoopForever+0x16>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b8:	e001      	b.n	80005be <LoopFillZerobss>

080005ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005bc:	3204      	adds	r2, #4

080005be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c0:	d3fb      	bcc.n	80005ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005c2:	f7ff ffd7 	bl	8000574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005c6:	f002 fea1 	bl	800330c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ca:	f7ff fe03 	bl	80001d4 <main>

080005ce <LoopForever>:

LoopForever:
    b LoopForever
 80005ce:	e7fe      	b.n	80005ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005dc:	080033b4 	.word	0x080033b4
  ldr r2, =_sbss
 80005e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005e4:	20000094 	.word	0x20000094

080005e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005e8:	e7fe      	b.n	80005e8 <ADC1_2_IRQHandler>
	...

080005ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <HAL_Init+0x28>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <HAL_Init+0x28>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005fc:	2003      	movs	r0, #3
 80005fe:	f000 f92f 	bl	8000860 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000602:	2000      	movs	r0, #0
 8000604:	f000 f808 	bl	8000618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000608:	f7ff ff14 	bl	8000434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800060c:	2300      	movs	r3, #0
}
 800060e:	4618      	mov	r0, r3
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40022000 	.word	0x40022000

08000618 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_InitTick+0x54>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_InitTick+0x58>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000632:	fbb2 f3f3 	udiv	r3, r2, r3
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f939 	bl	80008ae <HAL_SYSTICK_Config>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	e00e      	b.n	8000664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	d80a      	bhi.n	8000662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800064c:	2200      	movs	r2, #0
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	f04f 30ff 	mov.w	r0, #4294967295
 8000654:	f000 f90f 	bl	8000876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000658:	4a06      	ldr	r2, [pc, #24]	; (8000674 <HAL_InitTick+0x5c>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800065e:	2300      	movs	r3, #0
 8000660:	e000      	b.n	8000664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000000 	.word	0x20000000
 8000670:	20000008 	.word	0x20000008
 8000674:	20000004 	.word	0x20000004

08000678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_IncTick+0x20>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_IncTick+0x24>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <HAL_IncTick+0x24>)
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000008 	.word	0x20000008
 800069c:	20000090 	.word	0x20000090

080006a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <HAL_GetTick+0x14>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000090 	.word	0x20000090

080006b8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006c0:	f7ff ffee 	bl	80006a0 <HAL_GetTick>
 80006c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d0:	d005      	beq.n	80006de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_Delay+0x40>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	461a      	mov	r2, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4413      	add	r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006de:	bf00      	nop
 80006e0:	f7ff ffde 	bl	80006a0 <HAL_GetTick>
 80006e4:	4602      	mov	r2, r0
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d8f7      	bhi.n	80006e0 <HAL_Delay+0x28>
  {
  }
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000008 	.word	0x20000008

080006fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <__NVIC_SetPriorityGrouping+0x44>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000718:	4013      	ands	r3, r2
 800071a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072e:	4a04      	ldr	r2, [pc, #16]	; (8000740 <__NVIC_SetPriorityGrouping+0x44>)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	60d3      	str	r3, [r2, #12]
}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <__NVIC_GetPriorityGrouping+0x18>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	0a1b      	lsrs	r3, r3, #8
 800074e:	f003 0307 	and.w	r3, r3, #7
}
 8000752:	4618      	mov	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	db0a      	blt.n	800078a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	490c      	ldr	r1, [pc, #48]	; (80007ac <__NVIC_SetPriority+0x4c>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	0112      	lsls	r2, r2, #4
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	440b      	add	r3, r1
 8000784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000788:	e00a      	b.n	80007a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4908      	ldr	r1, [pc, #32]	; (80007b0 <__NVIC_SetPriority+0x50>)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	3b04      	subs	r3, #4
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	440b      	add	r3, r1
 800079e:	761a      	strb	r2, [r3, #24]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43da      	mvns	r2, r3
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	401a      	ands	r2, r3
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43d9      	mvns	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	4313      	orrs	r3, r2
         );
}
 800080e:	4618      	mov	r0, r3
 8000810:	3724      	adds	r7, #36	; 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800082c:	d301      	bcc.n	8000832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082e:	2301      	movs	r3, #1
 8000830:	e00f      	b.n	8000852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <SysTick_Config+0x40>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3b01      	subs	r3, #1
 8000838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800083a:	210f      	movs	r1, #15
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f7ff ff8e 	bl	8000760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <SysTick_Config+0x40>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800084a:	4b04      	ldr	r3, [pc, #16]	; (800085c <SysTick_Config+0x40>)
 800084c:	2207      	movs	r2, #7
 800084e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	e000e010 	.word	0xe000e010

08000860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff ff47 	bl	80006fc <__NVIC_SetPriorityGrouping>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b086      	sub	sp, #24
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000888:	f7ff ff5c 	bl	8000744 <__NVIC_GetPriorityGrouping>
 800088c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	6978      	ldr	r0, [r7, #20]
 8000894:	f7ff ff8e 	bl	80007b4 <NVIC_EncodePriority>
 8000898:	4602      	mov	r2, r0
 800089a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089e:	4611      	mov	r1, r2
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff5d 	bl	8000760 <__NVIC_SetPriority>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff ffb0 	bl	800081c <SysTick_Config>
 80008bc:	4603      	mov	r3, r0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008d6:	e160      	b.n	8000b9a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	2101      	movs	r1, #1
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	fa01 f303 	lsl.w	r3, r1, r3
 80008e4:	4013      	ands	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	f000 8152 	beq.w	8000b94 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d00b      	beq.n	8000910 <HAL_GPIO_Init+0x48>
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d007      	beq.n	8000910 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000904:	2b11      	cmp	r3, #17
 8000906:	d003      	beq.n	8000910 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b12      	cmp	r3, #18
 800090e:	d130      	bne.n	8000972 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	2203      	movs	r2, #3
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68da      	ldr	r2, [r3, #12]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4313      	orrs	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000946:	2201      	movs	r2, #1
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4013      	ands	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	091b      	lsrs	r3, r3, #4
 800095c:	f003 0201 	and.w	r2, r3, #1
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4313      	orrs	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	2203      	movs	r2, #3
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4313      	orrs	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d003      	beq.n	80009b2 <HAL_GPIO_Init+0xea>
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	2b12      	cmp	r3, #18
 80009b0:	d123      	bne.n	80009fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	08da      	lsrs	r2, r3, #3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3208      	adds	r2, #8
 80009ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	220f      	movs	r2, #15
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	691a      	ldr	r2, [r3, #16]
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	f003 0307 	and.w	r3, r3, #7
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	08da      	lsrs	r2, r3, #3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3208      	adds	r2, #8
 80009f4:	6939      	ldr	r1, [r7, #16]
 80009f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	2203      	movs	r2, #3
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f003 0203 	and.w	r2, r3, #3
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f000 80ac 	beq.w	8000b94 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3c:	4b5e      	ldr	r3, [pc, #376]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a5d      	ldr	r2, [pc, #372]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b5b      	ldr	r3, [pc, #364]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a54:	4a59      	ldr	r2, [pc, #356]	; (8000bbc <HAL_GPIO_Init+0x2f4>)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	089b      	lsrs	r3, r3, #2
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f003 0303 	and.w	r3, r3, #3
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	220f      	movs	r2, #15
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a7e:	d025      	beq.n	8000acc <HAL_GPIO_Init+0x204>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a4f      	ldr	r2, [pc, #316]	; (8000bc0 <HAL_GPIO_Init+0x2f8>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d01f      	beq.n	8000ac8 <HAL_GPIO_Init+0x200>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a4e      	ldr	r2, [pc, #312]	; (8000bc4 <HAL_GPIO_Init+0x2fc>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d019      	beq.n	8000ac4 <HAL_GPIO_Init+0x1fc>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a4d      	ldr	r2, [pc, #308]	; (8000bc8 <HAL_GPIO_Init+0x300>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d013      	beq.n	8000ac0 <HAL_GPIO_Init+0x1f8>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a4c      	ldr	r2, [pc, #304]	; (8000bcc <HAL_GPIO_Init+0x304>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d00d      	beq.n	8000abc <HAL_GPIO_Init+0x1f4>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a4b      	ldr	r2, [pc, #300]	; (8000bd0 <HAL_GPIO_Init+0x308>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d007      	beq.n	8000ab8 <HAL_GPIO_Init+0x1f0>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a4a      	ldr	r2, [pc, #296]	; (8000bd4 <HAL_GPIO_Init+0x30c>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d101      	bne.n	8000ab4 <HAL_GPIO_Init+0x1ec>
 8000ab0:	2306      	movs	r3, #6
 8000ab2:	e00c      	b.n	8000ace <HAL_GPIO_Init+0x206>
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	e00a      	b.n	8000ace <HAL_GPIO_Init+0x206>
 8000ab8:	2305      	movs	r3, #5
 8000aba:	e008      	b.n	8000ace <HAL_GPIO_Init+0x206>
 8000abc:	2304      	movs	r3, #4
 8000abe:	e006      	b.n	8000ace <HAL_GPIO_Init+0x206>
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	e004      	b.n	8000ace <HAL_GPIO_Init+0x206>
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	e002      	b.n	8000ace <HAL_GPIO_Init+0x206>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e000      	b.n	8000ace <HAL_GPIO_Init+0x206>
 8000acc:	2300      	movs	r3, #0
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	f002 0203 	and.w	r2, r2, #3
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	4093      	lsls	r3, r2
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ade:	4937      	ldr	r1, [pc, #220]	; (8000bbc <HAL_GPIO_Init+0x2f4>)
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	3302      	adds	r3, #2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aec:	4b3a      	ldr	r3, [pc, #232]	; (8000bd8 <HAL_GPIO_Init+0x310>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	43db      	mvns	r3, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b10:	4a31      	ldr	r2, [pc, #196]	; (8000bd8 <HAL_GPIO_Init+0x310>)
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b16:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <HAL_GPIO_Init+0x310>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b3a:	4a27      	ldr	r2, [pc, #156]	; (8000bd8 <HAL_GPIO_Init+0x310>)
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b40:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <HAL_GPIO_Init+0x310>)
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d003      	beq.n	8000b64 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b64:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <HAL_GPIO_Init+0x310>)
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <HAL_GPIO_Init+0x310>)
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	43db      	mvns	r3, r3
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <HAL_GPIO_Init+0x310>)
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	3301      	adds	r3, #1
 8000b98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f47f ae97 	bne.w	80008d8 <HAL_GPIO_Init+0x10>
  }
}
 8000baa:	bf00      	nop
 8000bac:	371c      	adds	r7, #28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010000 	.word	0x40010000
 8000bc0:	48000400 	.word	0x48000400
 8000bc4:	48000800 	.word	0x48000800
 8000bc8:	48000c00 	.word	0x48000c00
 8000bcc:	48001000 	.word	0x48001000
 8000bd0:	48001400 	.word	0x48001400
 8000bd4:	48001800 	.word	0x48001800
 8000bd8:	40010400 	.word	0x40010400

08000bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	f000 bf01 	b.w	80019f8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f000 8160 	beq.w	8000ec6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c06:	4bae      	ldr	r3, [pc, #696]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 030c 	and.w	r3, r3, #12
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	d00c      	beq.n	8000c2c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c12:	4bab      	ldr	r3, [pc, #684]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 030c 	and.w	r3, r3, #12
 8000c1a:	2b08      	cmp	r3, #8
 8000c1c:	d159      	bne.n	8000cd2 <HAL_RCC_OscConfig+0xf6>
 8000c1e:	4ba8      	ldr	r3, [pc, #672]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c2a:	d152      	bne.n	8000cd2 <HAL_RCC_OscConfig+0xf6>
 8000c2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c30:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c34:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000c38:	fa93 f3a3 	rbit	r3, r3
 8000c3c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c40:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c44:	fab3 f383 	clz	r3, r3
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d102      	bne.n	8000c5e <HAL_RCC_OscConfig+0x82>
 8000c58:	4b99      	ldr	r3, [pc, #612]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	e015      	b.n	8000c8a <HAL_RCC_OscConfig+0xae>
 8000c5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c62:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c66:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000c6a:	fa93 f3a3 	rbit	r3, r3
 8000c6e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000c72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c76:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c7a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000c7e:	fa93 f3a3 	rbit	r3, r3
 8000c82:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c86:	4b8e      	ldr	r3, [pc, #568]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c8e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000c92:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000c96:	fa92 f2a2 	rbit	r2, r2
 8000c9a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000c9e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	f042 0220 	orr.w	r2, r2, #32
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	f002 021f 	and.w	r2, r2, #31
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb8:	4013      	ands	r3, r2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 8102 	beq.w	8000ec4 <HAL_RCC_OscConfig+0x2e8>
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 80fc 	bne.w	8000ec4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	f000 be93 	b.w	80019f8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cdc:	d106      	bne.n	8000cec <HAL_RCC_OscConfig+0x110>
 8000cde:	4b78      	ldr	r3, [pc, #480]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a77      	ldr	r2, [pc, #476]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	e030      	b.n	8000d4e <HAL_RCC_OscConfig+0x172>
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10c      	bne.n	8000d10 <HAL_RCC_OscConfig+0x134>
 8000cf6:	4b72      	ldr	r3, [pc, #456]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a71      	ldr	r2, [pc, #452]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	4b6f      	ldr	r3, [pc, #444]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a6e      	ldr	r2, [pc, #440]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	e01e      	b.n	8000d4e <HAL_RCC_OscConfig+0x172>
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d1a:	d10c      	bne.n	8000d36 <HAL_RCC_OscConfig+0x15a>
 8000d1c:	4b68      	ldr	r3, [pc, #416]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a67      	ldr	r2, [pc, #412]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000d22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	4b65      	ldr	r3, [pc, #404]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a64      	ldr	r2, [pc, #400]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	e00b      	b.n	8000d4e <HAL_RCC_OscConfig+0x172>
 8000d36:	4b62      	ldr	r3, [pc, #392]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a61      	ldr	r2, [pc, #388]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	4b5f      	ldr	r3, [pc, #380]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a5e      	ldr	r2, [pc, #376]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d059      	beq.n	8000e0c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d58:	f7ff fca2 	bl	80006a0 <HAL_GetTick>
 8000d5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d60:	e00a      	b.n	8000d78 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d62:	f7ff fc9d 	bl	80006a0 <HAL_GetTick>
 8000d66:	4602      	mov	r2, r0
 8000d68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b64      	cmp	r3, #100	; 0x64
 8000d70:	d902      	bls.n	8000d78 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	f000 be40 	b.w	80019f8 <HAL_RCC_OscConfig+0xe1c>
 8000d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d7c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d80:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000d84:	fa93 f3a3 	rbit	r3, r3
 8000d88:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000d8c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d90:	fab3 f383 	clz	r3, r3
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d102      	bne.n	8000daa <HAL_RCC_OscConfig+0x1ce>
 8000da4:	4b46      	ldr	r3, [pc, #280]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	e015      	b.n	8000dd6 <HAL_RCC_OscConfig+0x1fa>
 8000daa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000db6:	fa93 f3a3 	rbit	r3, r3
 8000dba:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000dc6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000dca:	fa93 f3a3 	rbit	r3, r3
 8000dce:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000dd2:	4b3b      	ldr	r3, [pc, #236]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dda:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000dde:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000de2:	fa92 f2a2 	rbit	r2, r2
 8000de6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000dea:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	f042 0220 	orr.w	r2, r2, #32
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	f002 021f 	and.w	r2, r2, #31
 8000dfe:	2101      	movs	r1, #1
 8000e00:	fa01 f202 	lsl.w	r2, r1, r2
 8000e04:	4013      	ands	r3, r2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0ab      	beq.n	8000d62 <HAL_RCC_OscConfig+0x186>
 8000e0a:	e05c      	b.n	8000ec6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fc48 	bl	80006a0 <HAL_GetTick>
 8000e10:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e14:	e00a      	b.n	8000e2c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e16:	f7ff fc43 	bl	80006a0 <HAL_GetTick>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b64      	cmp	r3, #100	; 0x64
 8000e24:	d902      	bls.n	8000e2c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	f000 bde6 	b.w	80019f8 <HAL_RCC_OscConfig+0xe1c>
 8000e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e30:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000e38:	fa93 f3a3 	rbit	r3, r3
 8000e3c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000e40:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e44:	fab3 f383 	clz	r3, r3
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d102      	bne.n	8000e5e <HAL_RCC_OscConfig+0x282>
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	e015      	b.n	8000e8a <HAL_RCC_OscConfig+0x2ae>
 8000e5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e62:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000e6a:	fa93 f3a3 	rbit	r3, r3
 8000e6e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e76:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e7a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000e7e:	fa93 f3a3 	rbit	r3, r3
 8000e82:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_RCC_OscConfig+0x2e4>)
 8000e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e8e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000e92:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000e96:	fa92 f2a2 	rbit	r2, r2
 8000e9a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000e9e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000ea2:	fab2 f282 	clz	r2, r2
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	f042 0220 	orr.w	r2, r2, #32
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	f002 021f 	and.w	r2, r2, #31
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1ab      	bne.n	8000e16 <HAL_RCC_OscConfig+0x23a>
 8000ebe:	e002      	b.n	8000ec6 <HAL_RCC_OscConfig+0x2ea>
 8000ec0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 8170 	beq.w	80011b6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ed6:	4bd0      	ldr	r3, [pc, #832]	; (8001218 <HAL_RCC_OscConfig+0x63c>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00c      	beq.n	8000efc <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ee2:	4bcd      	ldr	r3, [pc, #820]	; (8001218 <HAL_RCC_OscConfig+0x63c>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
 8000eea:	2b08      	cmp	r3, #8
 8000eec:	d16d      	bne.n	8000fca <HAL_RCC_OscConfig+0x3ee>
 8000eee:	4bca      	ldr	r3, [pc, #808]	; (8001218 <HAL_RCC_OscConfig+0x63c>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000efa:	d166      	bne.n	8000fca <HAL_RCC_OscConfig+0x3ee>
 8000efc:	2302      	movs	r3, #2
 8000efe:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f02:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000f06:	fa93 f3a3 	rbit	r3, r3
 8000f0a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000f0e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f12:	fab3 f383 	clz	r3, r3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	095b      	lsrs	r3, r3, #5
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d102      	bne.n	8000f2c <HAL_RCC_OscConfig+0x350>
 8000f26:	4bbc      	ldr	r3, [pc, #752]	; (8001218 <HAL_RCC_OscConfig+0x63c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	e013      	b.n	8000f54 <HAL_RCC_OscConfig+0x378>
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f32:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000f36:	fa93 f3a3 	rbit	r3, r3
 8000f3a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000f3e:	2302      	movs	r3, #2
 8000f40:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f44:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000f48:	fa93 f3a3 	rbit	r3, r3
 8000f4c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f50:	4bb1      	ldr	r3, [pc, #708]	; (8001218 <HAL_RCC_OscConfig+0x63c>)
 8000f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f54:	2202      	movs	r2, #2
 8000f56:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000f5a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000f5e:	fa92 f2a2 	rbit	r2, r2
 8000f62:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000f66:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f6a:	fab2 f282 	clz	r2, r2
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	f042 0220 	orr.w	r2, r2, #32
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	f002 021f 	and.w	r2, r2, #31
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f80:	4013      	ands	r3, r2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d007      	beq.n	8000f96 <HAL_RCC_OscConfig+0x3ba>
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d002      	beq.n	8000f96 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	f000 bd31 	b.w	80019f8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f96:	4ba0      	ldr	r3, [pc, #640]	; (8001218 <HAL_RCC_OscConfig+0x63c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	21f8      	movs	r1, #248	; 0xf8
 8000fa6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000faa:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000fae:	fa91 f1a1 	rbit	r1, r1
 8000fb2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000fb6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000fba:	fab1 f181 	clz	r1, r1
 8000fbe:	b2c9      	uxtb	r1, r1
 8000fc0:	408b      	lsls	r3, r1
 8000fc2:	4995      	ldr	r1, [pc, #596]	; (8001218 <HAL_RCC_OscConfig+0x63c>)
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc8:	e0f5      	b.n	80011b6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f000 8085 	beq.w	80010e0 <HAL_RCC_OscConfig+0x504>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fdc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000fe0:	fa93 f3a3 	rbit	r3, r3
 8000fe4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000fe8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fec:	fab3 f383 	clz	r3, r3
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ff6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	2301      	movs	r3, #1
 8001000:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001002:	f7ff fb4d 	bl	80006a0 <HAL_GetTick>
 8001006:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100a:	e00a      	b.n	8001022 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800100c:	f7ff fb48 	bl	80006a0 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d902      	bls.n	8001022 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	f000 bceb 	b.w	80019f8 <HAL_RCC_OscConfig+0xe1c>
 8001022:	2302      	movs	r3, #2
 8001024:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001028:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800102c:	fa93 f3a3 	rbit	r3, r3
 8001030:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001034:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001038:	fab3 f383 	clz	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	b2db      	uxtb	r3, r3
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d102      	bne.n	8001052 <HAL_RCC_OscConfig+0x476>
 800104c:	4b72      	ldr	r3, [pc, #456]	; (8001218 <HAL_RCC_OscConfig+0x63c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	e013      	b.n	800107a <HAL_RCC_OscConfig+0x49e>
 8001052:	2302      	movs	r3, #2
 8001054:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001058:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800105c:	fa93 f3a3 	rbit	r3, r3
 8001060:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001064:	2302      	movs	r3, #2
 8001066:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800106a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001076:	4b68      	ldr	r3, [pc, #416]	; (8001218 <HAL_RCC_OscConfig+0x63c>)
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	2202      	movs	r2, #2
 800107c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001080:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001084:	fa92 f2a2 	rbit	r2, r2
 8001088:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800108c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001090:	fab2 f282 	clz	r2, r2
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	f042 0220 	orr.w	r2, r2, #32
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	f002 021f 	and.w	r2, r2, #31
 80010a0:	2101      	movs	r1, #1
 80010a2:	fa01 f202 	lsl.w	r2, r1, r2
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0af      	beq.n	800100c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ac:	4b5a      	ldr	r3, [pc, #360]	; (8001218 <HAL_RCC_OscConfig+0x63c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	21f8      	movs	r1, #248	; 0xf8
 80010bc:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80010c4:	fa91 f1a1 	rbit	r1, r1
 80010c8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80010cc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80010d0:	fab1 f181 	clz	r1, r1
 80010d4:	b2c9      	uxtb	r1, r1
 80010d6:	408b      	lsls	r3, r1
 80010d8:	494f      	ldr	r1, [pc, #316]	; (8001218 <HAL_RCC_OscConfig+0x63c>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]
 80010de:	e06a      	b.n	80011b6 <HAL_RCC_OscConfig+0x5da>
 80010e0:	2301      	movs	r3, #1
 80010e2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80010f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001100:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	461a      	mov	r2, r3
 8001108:	2300      	movs	r3, #0
 800110a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fac8 	bl	80006a0 <HAL_GetTick>
 8001110:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001114:	e00a      	b.n	800112c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001116:	f7ff fac3 	bl	80006a0 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d902      	bls.n	800112c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	f000 bc66 	b.w	80019f8 <HAL_RCC_OscConfig+0xe1c>
 800112c:	2302      	movs	r3, #2
 800112e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001132:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800113e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001142:	fab3 f383 	clz	r3, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	095b      	lsrs	r3, r3, #5
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d102      	bne.n	800115c <HAL_RCC_OscConfig+0x580>
 8001156:	4b30      	ldr	r3, [pc, #192]	; (8001218 <HAL_RCC_OscConfig+0x63c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	e013      	b.n	8001184 <HAL_RCC_OscConfig+0x5a8>
 800115c:	2302      	movs	r3, #2
 800115e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001166:	fa93 f3a3 	rbit	r3, r3
 800116a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001174:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001178:	fa93 f3a3 	rbit	r3, r3
 800117c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <HAL_RCC_OscConfig+0x63c>)
 8001182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001184:	2202      	movs	r2, #2
 8001186:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800118a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800118e:	fa92 f2a2 	rbit	r2, r2
 8001192:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001196:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800119a:	fab2 f282 	clz	r2, r2
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	f042 0220 	orr.w	r2, r2, #32
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	f002 021f 	and.w	r2, r2, #31
 80011aa:	2101      	movs	r1, #1
 80011ac:	fa01 f202 	lsl.w	r2, r1, r2
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1af      	bne.n	8001116 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80da 	beq.w	800137a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d069      	beq.n	80012a4 <HAL_RCC_OscConfig+0x6c8>
 80011d0:	2301      	movs	r3, #1
 80011d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011da:	fa93 f3a3 	rbit	r3, r3
 80011de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80011e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e6:	fab3 f383 	clz	r3, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_RCC_OscConfig+0x640>)
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	461a      	mov	r2, r3
 80011f6:	2301      	movs	r3, #1
 80011f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fa51 	bl	80006a0 <HAL_GetTick>
 80011fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001202:	e00d      	b.n	8001220 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001204:	f7ff fa4c 	bl	80006a0 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d905      	bls.n	8001220 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e3ef      	b.n	80019f8 <HAL_RCC_OscConfig+0xe1c>
 8001218:	40021000 	.word	0x40021000
 800121c:	10908120 	.word	0x10908120
 8001220:	2302      	movs	r3, #2
 8001222:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800122a:	fa93 f2a3 	rbit	r2, r3
 800122e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001238:	2202      	movs	r2, #2
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	fa93 f2a3 	rbit	r2, r3
 8001246:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001250:	2202      	movs	r2, #2
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	fa93 f2a3 	rbit	r2, r3
 800125e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001262:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001264:	4ba4      	ldr	r3, [pc, #656]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 8001266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001268:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800126c:	2102      	movs	r1, #2
 800126e:	6019      	str	r1, [r3, #0]
 8001270:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	fa93 f1a3 	rbit	r1, r3
 800127a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800127e:	6019      	str	r1, [r3, #0]
  return result;
 8001280:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	fab3 f383 	clz	r3, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f003 031f 	and.w	r3, r3, #31
 8001296:	2101      	movs	r1, #1
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0b0      	beq.n	8001204 <HAL_RCC_OscConfig+0x628>
 80012a2:	e06a      	b.n	800137a <HAL_RCC_OscConfig+0x79e>
 80012a4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	fa93 f2a3 	rbit	r2, r3
 80012b6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80012ba:	601a      	str	r2, [r3, #0]
  return result;
 80012bc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80012c0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c2:	fab3 f383 	clz	r3, r3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b8c      	ldr	r3, [pc, #560]	; (80014fc <HAL_RCC_OscConfig+0x920>)
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	461a      	mov	r2, r3
 80012d2:	2300      	movs	r3, #0
 80012d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d6:	f7ff f9e3 	bl	80006a0 <HAL_GetTick>
 80012da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012de:	e009      	b.n	80012f4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e0:	f7ff f9de 	bl	80006a0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e381      	b.n	80019f8 <HAL_RCC_OscConfig+0xe1c>
 80012f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012f8:	2202      	movs	r2, #2
 80012fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	fa93 f2a3 	rbit	r2, r3
 8001306:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001310:	2202      	movs	r2, #2
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	fa93 f2a3 	rbit	r2, r3
 800131e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001328:	2202      	movs	r2, #2
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	fa93 f2a3 	rbit	r2, r3
 8001336:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800133a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133c:	4b6e      	ldr	r3, [pc, #440]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 800133e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001340:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001344:	2102      	movs	r1, #2
 8001346:	6019      	str	r1, [r3, #0]
 8001348:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	fa93 f1a3 	rbit	r1, r3
 8001352:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001356:	6019      	str	r1, [r3, #0]
  return result;
 8001358:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	fab3 f383 	clz	r3, r3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001368:	b2db      	uxtb	r3, r3
 800136a:	f003 031f 	and.w	r3, r3, #31
 800136e:	2101      	movs	r1, #1
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	4013      	ands	r3, r2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1b2      	bne.n	80012e0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 8157 	beq.w	8001638 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001390:	4b59      	ldr	r3, [pc, #356]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d112      	bne.n	80013c2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800139c:	4b56      	ldr	r3, [pc, #344]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	4a55      	ldr	r2, [pc, #340]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 80013a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a6:	61d3      	str	r3, [r2, #28]
 80013a8:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013bc:	2301      	movs	r3, #1
 80013be:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c2:	4b4f      	ldr	r3, [pc, #316]	; (8001500 <HAL_RCC_OscConfig+0x924>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d11a      	bne.n	8001404 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ce:	4b4c      	ldr	r3, [pc, #304]	; (8001500 <HAL_RCC_OscConfig+0x924>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a4b      	ldr	r2, [pc, #300]	; (8001500 <HAL_RCC_OscConfig+0x924>)
 80013d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013da:	f7ff f961 	bl	80006a0 <HAL_GetTick>
 80013de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e2:	e009      	b.n	80013f8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e4:	f7ff f95c 	bl	80006a0 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b64      	cmp	r3, #100	; 0x64
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e2ff      	b.n	80019f8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f8:	4b41      	ldr	r3, [pc, #260]	; (8001500 <HAL_RCC_OscConfig+0x924>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0ef      	beq.n	80013e4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d106      	bne.n	800141c <HAL_RCC_OscConfig+0x840>
 800140e:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	4a39      	ldr	r2, [pc, #228]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6213      	str	r3, [r2, #32]
 800141a:	e02f      	b.n	800147c <HAL_RCC_OscConfig+0x8a0>
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x864>
 8001426:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	4a33      	ldr	r2, [pc, #204]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6213      	str	r3, [r2, #32]
 8001432:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4a30      	ldr	r2, [pc, #192]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 8001438:	f023 0304 	bic.w	r3, r3, #4
 800143c:	6213      	str	r3, [r2, #32]
 800143e:	e01d      	b.n	800147c <HAL_RCC_OscConfig+0x8a0>
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b05      	cmp	r3, #5
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0x888>
 800144a:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	4a2a      	ldr	r2, [pc, #168]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6213      	str	r3, [r2, #32]
 8001456:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	4a27      	ldr	r2, [pc, #156]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6213      	str	r3, [r2, #32]
 8001462:	e00b      	b.n	800147c <HAL_RCC_OscConfig+0x8a0>
 8001464:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a23      	ldr	r2, [pc, #140]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	6213      	str	r3, [r2, #32]
 8001470:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4a20      	ldr	r2, [pc, #128]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 8001476:	f023 0304 	bic.w	r3, r3, #4
 800147a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d06a      	beq.n	800155c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001486:	f7ff f90b 	bl	80006a0 <HAL_GetTick>
 800148a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148e:	e00b      	b.n	80014a8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001490:	f7ff f906 	bl	80006a0 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e2a7      	b.n	80019f8 <HAL_RCC_OscConfig+0xe1c>
 80014a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014ac:	2202      	movs	r2, #2
 80014ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	fa93 f2a3 	rbit	r2, r3
 80014ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014c4:	2202      	movs	r2, #2
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	fa93 f2a3 	rbit	r2, r3
 80014d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014d6:	601a      	str	r2, [r3, #0]
  return result;
 80014d8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014dc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	095b      	lsrs	r3, r3, #5
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d108      	bne.n	8001504 <HAL_RCC_OscConfig+0x928>
 80014f2:	4b01      	ldr	r3, [pc, #4]	; (80014f8 <HAL_RCC_OscConfig+0x91c>)
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	e013      	b.n	8001520 <HAL_RCC_OscConfig+0x944>
 80014f8:	40021000 	.word	0x40021000
 80014fc:	10908120 	.word	0x10908120
 8001500:	40007000 	.word	0x40007000
 8001504:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001508:	2202      	movs	r2, #2
 800150a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	fa93 f2a3 	rbit	r2, r3
 8001516:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	4bc0      	ldr	r3, [pc, #768]	; (8001820 <HAL_RCC_OscConfig+0xc44>)
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001524:	2102      	movs	r1, #2
 8001526:	6011      	str	r1, [r2, #0]
 8001528:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	fa92 f1a2 	rbit	r1, r2
 8001532:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001536:	6011      	str	r1, [r2, #0]
  return result;
 8001538:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	fab2 f282 	clz	r2, r2
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	f002 021f 	and.w	r2, r2, #31
 800154e:	2101      	movs	r1, #1
 8001550:	fa01 f202 	lsl.w	r2, r1, r2
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d09a      	beq.n	8001490 <HAL_RCC_OscConfig+0x8b4>
 800155a:	e063      	b.n	8001624 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155c:	f7ff f8a0 	bl	80006a0 <HAL_GetTick>
 8001560:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001564:	e00b      	b.n	800157e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001566:	f7ff f89b 	bl	80006a0 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	; 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e23c      	b.n	80019f8 <HAL_RCC_OscConfig+0xe1c>
 800157e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001582:	2202      	movs	r2, #2
 8001584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	fa93 f2a3 	rbit	r2, r3
 8001590:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800159a:	2202      	movs	r2, #2
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	fa93 f2a3 	rbit	r2, r3
 80015a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015ac:	601a      	str	r2, [r3, #0]
  return result;
 80015ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b4:	fab3 f383 	clz	r3, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f043 0302 	orr.w	r3, r3, #2
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d102      	bne.n	80015ce <HAL_RCC_OscConfig+0x9f2>
 80015c8:	4b95      	ldr	r3, [pc, #596]	; (8001820 <HAL_RCC_OscConfig+0xc44>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	e00d      	b.n	80015ea <HAL_RCC_OscConfig+0xa0e>
 80015ce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015d2:	2202      	movs	r2, #2
 80015d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	fa93 f2a3 	rbit	r2, r3
 80015e0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	4b8e      	ldr	r3, [pc, #568]	; (8001820 <HAL_RCC_OscConfig+0xc44>)
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80015ee:	2102      	movs	r1, #2
 80015f0:	6011      	str	r1, [r2, #0]
 80015f2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	fa92 f1a2 	rbit	r1, r2
 80015fc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001600:	6011      	str	r1, [r2, #0]
  return result;
 8001602:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001606:	6812      	ldr	r2, [r2, #0]
 8001608:	fab2 f282 	clz	r2, r2
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	f002 021f 	and.w	r2, r2, #31
 8001618:	2101      	movs	r1, #1
 800161a:	fa01 f202 	lsl.w	r2, r1, r2
 800161e:	4013      	ands	r3, r2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1a0      	bne.n	8001566 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001624:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001628:	2b01      	cmp	r3, #1
 800162a:	d105      	bne.n	8001638 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162c:	4b7c      	ldr	r3, [pc, #496]	; (8001820 <HAL_RCC_OscConfig+0xc44>)
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	4a7b      	ldr	r2, [pc, #492]	; (8001820 <HAL_RCC_OscConfig+0xc44>)
 8001632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001636:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 81d9 	beq.w	80019f6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001644:	4b76      	ldr	r3, [pc, #472]	; (8001820 <HAL_RCC_OscConfig+0xc44>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b08      	cmp	r3, #8
 800164e:	f000 81a6 	beq.w	800199e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b02      	cmp	r3, #2
 800165a:	f040 811e 	bne.w	800189a <HAL_RCC_OscConfig+0xcbe>
 800165e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001662:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	fa93 f2a3 	rbit	r2, r3
 8001672:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001676:	601a      	str	r2, [r3, #0]
  return result;
 8001678:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800167c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167e:	fab3 f383 	clz	r3, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001688:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	461a      	mov	r2, r3
 8001690:	2300      	movs	r3, #0
 8001692:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff f804 	bl	80006a0 <HAL_GetTick>
 8001698:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169c:	e009      	b.n	80016b2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169e:	f7fe ffff 	bl	80006a0 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1a2      	b.n	80019f8 <HAL_RCC_OscConfig+0xe1c>
 80016b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	fa93 f2a3 	rbit	r2, r3
 80016c6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016ca:	601a      	str	r2, [r3, #0]
  return result;
 80016cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	095b      	lsrs	r3, r3, #5
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d102      	bne.n	80016ec <HAL_RCC_OscConfig+0xb10>
 80016e6:	4b4e      	ldr	r3, [pc, #312]	; (8001820 <HAL_RCC_OscConfig+0xc44>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	e01b      	b.n	8001724 <HAL_RCC_OscConfig+0xb48>
 80016ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	fa93 f2a3 	rbit	r2, r3
 8001700:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800170a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fa93 f2a3 	rbit	r2, r3
 800171a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <HAL_RCC_OscConfig+0xc44>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001728:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800172c:	6011      	str	r1, [r2, #0]
 800172e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	fa92 f1a2 	rbit	r1, r2
 8001738:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800173c:	6011      	str	r1, [r2, #0]
  return result;
 800173e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	fab2 f282 	clz	r2, r2
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	f042 0220 	orr.w	r2, r2, #32
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	f002 021f 	and.w	r2, r2, #31
 8001754:	2101      	movs	r1, #1
 8001756:	fa01 f202 	lsl.w	r2, r1, r2
 800175a:	4013      	ands	r3, r2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d19e      	bne.n	800169e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001760:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <HAL_RCC_OscConfig+0xc44>)
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	f023 020f 	bic.w	r2, r3, #15
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	492c      	ldr	r1, [pc, #176]	; (8001820 <HAL_RCC_OscConfig+0xc44>)
 8001770:	4313      	orrs	r3, r2
 8001772:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001774:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <HAL_RCC_OscConfig+0xc44>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6a19      	ldr	r1, [r3, #32]
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	430b      	orrs	r3, r1
 800178a:	4925      	ldr	r1, [pc, #148]	; (8001820 <HAL_RCC_OscConfig+0xc44>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
 8001790:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001794:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	fa93 f2a3 	rbit	r2, r3
 80017a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017a8:	601a      	str	r2, [r3, #0]
  return result;
 80017aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017ae:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b0:	fab3 f383 	clz	r3, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	461a      	mov	r2, r3
 80017c2:	2301      	movs	r3, #1
 80017c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7fe ff6b 	bl	80006a0 <HAL_GetTick>
 80017ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017ce:	e009      	b.n	80017e4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d0:	f7fe ff66 	bl	80006a0 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e109      	b.n	80019f8 <HAL_RCC_OscConfig+0xe1c>
 80017e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	fa93 f2a3 	rbit	r2, r3
 80017f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017fc:	601a      	str	r2, [r3, #0]
  return result;
 80017fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001802:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001804:	fab3 f383 	clz	r3, r3
 8001808:	b2db      	uxtb	r3, r3
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d105      	bne.n	8001824 <HAL_RCC_OscConfig+0xc48>
 8001818:	4b01      	ldr	r3, [pc, #4]	; (8001820 <HAL_RCC_OscConfig+0xc44>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	e01e      	b.n	800185c <HAL_RCC_OscConfig+0xc80>
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001828:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800182c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	fa93 f2a3 	rbit	r2, r3
 8001838:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001842:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	fa93 f2a3 	rbit	r2, r3
 8001852:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	4b6a      	ldr	r3, [pc, #424]	; (8001a04 <HAL_RCC_OscConfig+0xe28>)
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001860:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001864:	6011      	str	r1, [r2, #0]
 8001866:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	fa92 f1a2 	rbit	r1, r2
 8001870:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001874:	6011      	str	r1, [r2, #0]
  return result;
 8001876:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	fab2 f282 	clz	r2, r2
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	f042 0220 	orr.w	r2, r2, #32
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	f002 021f 	and.w	r2, r2, #31
 800188c:	2101      	movs	r1, #1
 800188e:	fa01 f202 	lsl.w	r2, r1, r2
 8001892:	4013      	ands	r3, r2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d09b      	beq.n	80017d0 <HAL_RCC_OscConfig+0xbf4>
 8001898:	e0ad      	b.n	80019f6 <HAL_RCC_OscConfig+0xe1a>
 800189a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800189e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	fa93 f2a3 	rbit	r2, r3
 80018ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b2:	601a      	str	r2, [r3, #0]
  return result;
 80018b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	461a      	mov	r2, r3
 80018cc:	2300      	movs	r3, #0
 80018ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7fe fee6 	bl	80006a0 <HAL_GetTick>
 80018d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d8:	e009      	b.n	80018ee <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018da:	f7fe fee1 	bl	80006a0 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e084      	b.n	80019f8 <HAL_RCC_OscConfig+0xe1c>
 80018ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	fa93 f2a3 	rbit	r2, r3
 8001902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001906:	601a      	str	r2, [r3, #0]
  return result;
 8001908:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	095b      	lsrs	r3, r3, #5
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d102      	bne.n	8001928 <HAL_RCC_OscConfig+0xd4c>
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_RCC_OscConfig+0xe28>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	e01b      	b.n	8001960 <HAL_RCC_OscConfig+0xd84>
 8001928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001930:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	fa93 f2a3 	rbit	r2, r3
 800193c:	f107 0320 	add.w	r3, r7, #32
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	fa93 f2a3 	rbit	r2, r3
 8001956:	f107 0318 	add.w	r3, r7, #24
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <HAL_RCC_OscConfig+0xe28>)
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	f107 0214 	add.w	r2, r7, #20
 8001964:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001968:	6011      	str	r1, [r2, #0]
 800196a:	f107 0214 	add.w	r2, r7, #20
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	fa92 f1a2 	rbit	r1, r2
 8001974:	f107 0210 	add.w	r2, r7, #16
 8001978:	6011      	str	r1, [r2, #0]
  return result;
 800197a:	f107 0210 	add.w	r2, r7, #16
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	fab2 f282 	clz	r2, r2
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	f042 0220 	orr.w	r2, r2, #32
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	f002 021f 	and.w	r2, r2, #31
 8001990:	2101      	movs	r1, #1
 8001992:	fa01 f202 	lsl.w	r2, r1, r2
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d19e      	bne.n	80018da <HAL_RCC_OscConfig+0xcfe>
 800199c:	e02b      	b.n	80019f6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e025      	b.n	80019f8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_RCC_OscConfig+0xe28>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <HAL_RCC_OscConfig+0xe28>)
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80019c0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d111      	bne.n	80019f2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80019ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80019d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019dc:	429a      	cmp	r2, r3
 80019de:	d108      	bne.n	80019f2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80019e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019e4:	f003 020f 	and.w	r2, r3, #15
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d001      	beq.n	80019f6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000

08001a08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b09e      	sub	sp, #120	; 0x78
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e162      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b90      	ldr	r3, [pc, #576]	; (8001c64 <HAL_RCC_ClockConfig+0x25c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d910      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b8d      	ldr	r3, [pc, #564]	; (8001c64 <HAL_RCC_ClockConfig+0x25c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 0207 	bic.w	r2, r3, #7
 8001a36:	498b      	ldr	r1, [pc, #556]	; (8001c64 <HAL_RCC_ClockConfig+0x25c>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b89      	ldr	r3, [pc, #548]	; (8001c64 <HAL_RCC_ClockConfig+0x25c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e14a      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a5c:	4b82      	ldr	r3, [pc, #520]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	497f      	ldr	r1, [pc, #508]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 80dc 	beq.w	8001c34 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d13c      	bne.n	8001afe <HAL_RCC_ClockConfig+0xf6>
 8001a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a88:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a8c:	fa93 f3a3 	rbit	r3, r3
 8001a90:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a94:	fab3 f383 	clz	r3, r3
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d102      	bne.n	8001aae <HAL_RCC_ClockConfig+0xa6>
 8001aa8:	4b6f      	ldr	r3, [pc, #444]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	e00f      	b.n	8001ace <HAL_RCC_ClockConfig+0xc6>
 8001aae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	667b      	str	r3, [r7, #100]	; 0x64
 8001abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ac0:	663b      	str	r3, [r7, #96]	; 0x60
 8001ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ac4:	fa93 f3a3 	rbit	r3, r3
 8001ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001aca:	4b67      	ldr	r3, [pc, #412]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ad2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ad4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ad6:	fa92 f2a2 	rbit	r2, r2
 8001ada:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001adc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ade:	fab2 f282 	clz	r2, r2
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	f042 0220 	orr.w	r2, r2, #32
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f002 021f 	and.w	r2, r2, #31
 8001aee:	2101      	movs	r1, #1
 8001af0:	fa01 f202 	lsl.w	r2, r1, r2
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d17b      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0f3      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d13c      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x178>
 8001b06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	095b      	lsrs	r3, r3, #5
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d102      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x128>
 8001b2a:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	e00f      	b.n	8001b50 <HAL_RCC_ClockConfig+0x148>
 8001b30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b38:	fa93 f3a3 	rbit	r3, r3
 8001b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8001b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b42:	643b      	str	r3, [r7, #64]	; 0x40
 8001b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b4c:	4b46      	ldr	r3, [pc, #280]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b54:	63ba      	str	r2, [r7, #56]	; 0x38
 8001b56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b58:	fa92 f2a2 	rbit	r2, r2
 8001b5c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b60:	fab2 f282 	clz	r2, r2
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	f042 0220 	orr.w	r2, r2, #32
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	f002 021f 	and.w	r2, r2, #31
 8001b70:	2101      	movs	r1, #1
 8001b72:	fa01 f202 	lsl.w	r2, r1, r2
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d13a      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0b2      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x2de>
 8001b80:	2302      	movs	r3, #2
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	095b      	lsrs	r3, r3, #5
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d102      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x1a0>
 8001ba2:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	e00d      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1bc>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	623b      	str	r3, [r7, #32]
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	61ba      	str	r2, [r7, #24]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	fa92 f2a2 	rbit	r2, r2
 8001bce:	617a      	str	r2, [r7, #20]
  return result;
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	fab2 f282 	clz	r2, r2
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	f042 0220 	orr.w	r2, r2, #32
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	f002 021f 	and.w	r2, r2, #31
 8001be2:	2101      	movs	r1, #1
 8001be4:	fa01 f202 	lsl.w	r2, r1, r2
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e079      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f023 0203 	bic.w	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	491a      	ldr	r1, [pc, #104]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c04:	f7fe fd4c 	bl	80006a0 <HAL_GetTick>
 8001c08:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0c:	f7fe fd48 	bl	80006a0 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e061      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 020c 	and.w	r2, r3, #12
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d1eb      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_RCC_ClockConfig+0x25c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d214      	bcs.n	8001c6c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_RCC_ClockConfig+0x25c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 0207 	bic.w	r2, r3, #7
 8001c4a:	4906      	ldr	r1, [pc, #24]	; (8001c64 <HAL_RCC_ClockConfig+0x25c>)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <HAL_RCC_ClockConfig+0x25c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e040      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x2de>
 8001c64:	40022000 	.word	0x40022000
 8001c68:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d008      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_RCC_ClockConfig+0x2e8>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	491a      	ldr	r1, [pc, #104]	; (8001cf0 <HAL_RCC_ClockConfig+0x2e8>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d009      	beq.n	8001caa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <HAL_RCC_ClockConfig+0x2e8>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4912      	ldr	r1, [pc, #72]	; (8001cf0 <HAL_RCC_ClockConfig+0x2e8>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001caa:	f000 f829 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001cae:	4601      	mov	r1, r0
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <HAL_RCC_ClockConfig+0x2e8>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb8:	22f0      	movs	r2, #240	; 0xf0
 8001cba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	fa92 f2a2 	rbit	r2, r2
 8001cc2:	60fa      	str	r2, [r7, #12]
  return result;
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	fab2 f282 	clz	r2, r2
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	40d3      	lsrs	r3, r2
 8001cce:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <HAL_RCC_ClockConfig+0x2ec>)
 8001cd0:	5cd3      	ldrb	r3, [r2, r3]
 8001cd2:	fa21 f303 	lsr.w	r3, r1, r3
 8001cd6:	4a08      	ldr	r2, [pc, #32]	; (8001cf8 <HAL_RCC_ClockConfig+0x2f0>)
 8001cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_RCC_ClockConfig+0x2f4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fc9a 	bl	8000618 <HAL_InitTick>
  
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3778      	adds	r7, #120	; 0x78
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	0800337c 	.word	0x0800337c
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000004 	.word	0x20000004

08001d00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b08b      	sub	sp, #44	; 0x2c
 8001d04:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d002      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x30>
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_GetSysClockFreq+0x36>
 8001d2e:	e03f      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d30:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d32:	623b      	str	r3, [r7, #32]
      break;
 8001d34:	e03f      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d3c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001d40:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	fa92 f2a2 	rbit	r2, r2
 8001d48:	607a      	str	r2, [r7, #4]
  return result;
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	fab2 f282 	clz	r2, r2
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	40d3      	lsrs	r3, r2
 8001d54:	4a1d      	ldr	r2, [pc, #116]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xcc>)
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	220f      	movs	r2, #15
 8001d64:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	fa92 f2a2 	rbit	r2, r2
 8001d6c:	60fa      	str	r2, [r7, #12]
  return result;
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	fab2 f282 	clz	r2, r2
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	40d3      	lsrs	r3, r2
 8001d78:	4a15      	ldr	r2, [pc, #84]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d7a:	5cd3      	ldrb	r3, [r2, r3]
 8001d7c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d88:	4a0f      	ldr	r2, [pc, #60]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
 8001d98:	e007      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	fb02 f303 	mul.w	r3, r2, r3
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	623b      	str	r3, [r7, #32]
      break;
 8001dae:	e002      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001db2:	623b      	str	r3, [r7, #32]
      break;
 8001db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001db6:	6a3b      	ldr	r3, [r7, #32]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	372c      	adds	r7, #44	; 0x2c
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	007a1200 	.word	0x007a1200
 8001dcc:	0800338c 	.word	0x0800338c
 8001dd0:	0800339c 	.word	0x0800339c

08001dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b092      	sub	sp, #72	; 0x48
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 80d4 	beq.w	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df8:	4b4e      	ldr	r3, [pc, #312]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10e      	bne.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	4b4b      	ldr	r3, [pc, #300]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	4a4a      	ldr	r2, [pc, #296]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	61d3      	str	r3, [r2, #28]
 8001e10:	4b48      	ldr	r3, [pc, #288]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e22:	4b45      	ldr	r3, [pc, #276]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d118      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2e:	4b42      	ldr	r3, [pc, #264]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a41      	ldr	r2, [pc, #260]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e38:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3a:	f7fe fc31 	bl	80006a0 <HAL_GetTick>
 8001e3e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	e008      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e42:	f7fe fc2d 	bl	80006a0 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b64      	cmp	r3, #100	; 0x64
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e1d6      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e60:	4b34      	ldr	r3, [pc, #208]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e68:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 8084 	beq.w	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d07c      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e80:	4b2c      	ldr	r3, [pc, #176]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2301      	movs	r3, #1
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2300      	movs	r3, #0
 8001ed0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ed2:	4a18      	ldr	r2, [pc, #96]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ed6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d04b      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7fe fbdd 	bl	80006a0 <HAL_GetTick>
 8001ee6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eea:	f7fe fbd9 	bl	80006a0 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e180      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8001f00:	2302      	movs	r3, #2
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	623b      	str	r3, [r7, #32]
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	61fb      	str	r3, [r7, #28]
  return result;
 8001f18:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	095b      	lsrs	r3, r3, #5
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d108      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001f2e:	4b01      	ldr	r3, [pc, #4]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	e00d      	b.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	10908100 	.word	0x10908100
 8001f40:	2302      	movs	r3, #2
 8001f42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	4ba0      	ldr	r3, [pc, #640]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	2202      	movs	r2, #2
 8001f52:	613a      	str	r2, [r7, #16]
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	fa92 f2a2 	rbit	r2, r2
 8001f5a:	60fa      	str	r2, [r7, #12]
  return result;
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	fab2 f282 	clz	r2, r2
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f002 021f 	and.w	r2, r2, #31
 8001f6e:	2101      	movs	r1, #1
 8001f70:	fa01 f202 	lsl.w	r2, r1, r2
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0b7      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001f7a:	4b95      	ldr	r3, [pc, #596]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4992      	ldr	r1, [pc, #584]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d105      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f94:	4b8e      	ldr	r3, [pc, #568]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	4a8d      	ldr	r2, [pc, #564]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fac:	4b88      	ldr	r3, [pc, #544]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	f023 0203 	bic.w	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4985      	ldr	r1, [pc, #532]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d008      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fca:	4b81      	ldr	r3, [pc, #516]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	497e      	ldr	r1, [pc, #504]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fe8:	4b79      	ldr	r3, [pc, #484]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	4976      	ldr	r1, [pc, #472]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b00      	cmp	r3, #0
 8002004:	d008      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002006:	4b72      	ldr	r3, [pc, #456]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f023 0210 	bic.w	r2, r3, #16
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	496f      	ldr	r1, [pc, #444]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002014:	4313      	orrs	r3, r2
 8002016:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002024:	4b6a      	ldr	r3, [pc, #424]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	4967      	ldr	r1, [pc, #412]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002032:	4313      	orrs	r3, r2
 8002034:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b00      	cmp	r3, #0
 8002040:	d008      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002042:	4b63      	ldr	r3, [pc, #396]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f023 0220 	bic.w	r2, r3, #32
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4960      	ldr	r1, [pc, #384]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002050:	4313      	orrs	r3, r2
 8002052:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002060:	4b5b      	ldr	r3, [pc, #364]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	4958      	ldr	r1, [pc, #352]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d008      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800207e:	4b54      	ldr	r3, [pc, #336]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	4951      	ldr	r1, [pc, #324]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800208c:	4313      	orrs	r3, r2
 800208e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800209c:	4b4c      	ldr	r3, [pc, #304]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4949      	ldr	r1, [pc, #292]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d008      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020ba:	4b45      	ldr	r3, [pc, #276]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4942      	ldr	r1, [pc, #264]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80020d8:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	493a      	ldr	r1, [pc, #232]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d008      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80020f6:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	4933      	ldr	r1, [pc, #204]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002104:	4313      	orrs	r3, r2
 8002106:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002114:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	492b      	ldr	r1, [pc, #172]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002122:	4313      	orrs	r3, r2
 8002124:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d008      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002132:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4924      	ldr	r1, [pc, #144]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002140:	4313      	orrs	r3, r2
 8002142:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215c:	491c      	ldr	r1, [pc, #112]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d008      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800216e:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217a:	4915      	ldr	r1, [pc, #84]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800217c:	4313      	orrs	r3, r2
 800217e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800218c:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	490d      	ldr	r1, [pc, #52]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800219a:	4313      	orrs	r3, r2
 800219c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d008      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b6:	4906      	ldr	r1, [pc, #24]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00c      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80021c8:	4b01      	ldr	r3, [pc, #4]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	e002      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021dc:	490b      	ldr	r1, [pc, #44]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021fa:	4904      	ldr	r1, [pc, #16]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3748      	adds	r7, #72	; 0x48
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000

08002210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e049      	b.n	80022b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe f920 	bl	800047c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3304      	adds	r3, #4
 800224c:	4619      	mov	r1, r3
 800224e:	4610      	mov	r0, r2
 8002250:	f000 fb6c 	bl	800292c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e049      	b.n	8002364 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d106      	bne.n	80022ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f841 	bl	800236c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2202      	movs	r2, #2
 80022ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3304      	adds	r3, #4
 80022fa:	4619      	mov	r1, r3
 80022fc:	4610      	mov	r0, r2
 80022fe:	f000 fb15 	bl	800292c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d109      	bne.n	80023a4 <HAL_TIM_PWM_Start+0x24>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b01      	cmp	r3, #1
 800239a:	bf14      	ite	ne
 800239c:	2301      	movne	r3, #1
 800239e:	2300      	moveq	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	e03c      	b.n	800241e <HAL_TIM_PWM_Start+0x9e>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d109      	bne.n	80023be <HAL_TIM_PWM_Start+0x3e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	bf14      	ite	ne
 80023b6:	2301      	movne	r3, #1
 80023b8:	2300      	moveq	r3, #0
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	e02f      	b.n	800241e <HAL_TIM_PWM_Start+0x9e>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d109      	bne.n	80023d8 <HAL_TIM_PWM_Start+0x58>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	bf14      	ite	ne
 80023d0:	2301      	movne	r3, #1
 80023d2:	2300      	moveq	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e022      	b.n	800241e <HAL_TIM_PWM_Start+0x9e>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d109      	bne.n	80023f2 <HAL_TIM_PWM_Start+0x72>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	bf14      	ite	ne
 80023ea:	2301      	movne	r3, #1
 80023ec:	2300      	moveq	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	e015      	b.n	800241e <HAL_TIM_PWM_Start+0x9e>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b10      	cmp	r3, #16
 80023f6:	d109      	bne.n	800240c <HAL_TIM_PWM_Start+0x8c>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b01      	cmp	r3, #1
 8002402:	bf14      	ite	ne
 8002404:	2301      	movne	r3, #1
 8002406:	2300      	moveq	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	e008      	b.n	800241e <HAL_TIM_PWM_Start+0x9e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b01      	cmp	r3, #1
 8002416:	bf14      	ite	ne
 8002418:	2301      	movne	r3, #1
 800241a:	2300      	moveq	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e0a1      	b.n	800256a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d104      	bne.n	8002436 <HAL_TIM_PWM_Start+0xb6>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002434:	e023      	b.n	800247e <HAL_TIM_PWM_Start+0xfe>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b04      	cmp	r3, #4
 800243a:	d104      	bne.n	8002446 <HAL_TIM_PWM_Start+0xc6>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002444:	e01b      	b.n	800247e <HAL_TIM_PWM_Start+0xfe>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b08      	cmp	r3, #8
 800244a:	d104      	bne.n	8002456 <HAL_TIM_PWM_Start+0xd6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002454:	e013      	b.n	800247e <HAL_TIM_PWM_Start+0xfe>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b0c      	cmp	r3, #12
 800245a:	d104      	bne.n	8002466 <HAL_TIM_PWM_Start+0xe6>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002464:	e00b      	b.n	800247e <HAL_TIM_PWM_Start+0xfe>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b10      	cmp	r3, #16
 800246a:	d104      	bne.n	8002476 <HAL_TIM_PWM_Start+0xf6>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002474:	e003      	b.n	800247e <HAL_TIM_PWM_Start+0xfe>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2202      	movs	r2, #2
 800247a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2201      	movs	r2, #1
 8002484:	6839      	ldr	r1, [r7, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fe8e 	bl	80031a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a38      	ldr	r2, [pc, #224]	; (8002574 <HAL_TIM_PWM_Start+0x1f4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d018      	beq.n	80024c8 <HAL_TIM_PWM_Start+0x148>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a37      	ldr	r2, [pc, #220]	; (8002578 <HAL_TIM_PWM_Start+0x1f8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d013      	beq.n	80024c8 <HAL_TIM_PWM_Start+0x148>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a35      	ldr	r2, [pc, #212]	; (800257c <HAL_TIM_PWM_Start+0x1fc>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00e      	beq.n	80024c8 <HAL_TIM_PWM_Start+0x148>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a34      	ldr	r2, [pc, #208]	; (8002580 <HAL_TIM_PWM_Start+0x200>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d009      	beq.n	80024c8 <HAL_TIM_PWM_Start+0x148>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a32      	ldr	r2, [pc, #200]	; (8002584 <HAL_TIM_PWM_Start+0x204>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d004      	beq.n	80024c8 <HAL_TIM_PWM_Start+0x148>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a31      	ldr	r2, [pc, #196]	; (8002588 <HAL_TIM_PWM_Start+0x208>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d101      	bne.n	80024cc <HAL_TIM_PWM_Start+0x14c>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <HAL_TIM_PWM_Start+0x14e>
 80024cc:	2300      	movs	r3, #0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a23      	ldr	r2, [pc, #140]	; (8002574 <HAL_TIM_PWM_Start+0x1f4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d01d      	beq.n	8002528 <HAL_TIM_PWM_Start+0x1a8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f4:	d018      	beq.n	8002528 <HAL_TIM_PWM_Start+0x1a8>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a24      	ldr	r2, [pc, #144]	; (800258c <HAL_TIM_PWM_Start+0x20c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d013      	beq.n	8002528 <HAL_TIM_PWM_Start+0x1a8>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a22      	ldr	r2, [pc, #136]	; (8002590 <HAL_TIM_PWM_Start+0x210>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00e      	beq.n	8002528 <HAL_TIM_PWM_Start+0x1a8>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1a      	ldr	r2, [pc, #104]	; (8002578 <HAL_TIM_PWM_Start+0x1f8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d009      	beq.n	8002528 <HAL_TIM_PWM_Start+0x1a8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a18      	ldr	r2, [pc, #96]	; (800257c <HAL_TIM_PWM_Start+0x1fc>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d004      	beq.n	8002528 <HAL_TIM_PWM_Start+0x1a8>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a19      	ldr	r2, [pc, #100]	; (8002588 <HAL_TIM_PWM_Start+0x208>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d115      	bne.n	8002554 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_TIM_PWM_Start+0x214>)
 8002530:	4013      	ands	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b06      	cmp	r3, #6
 8002538:	d015      	beq.n	8002566 <HAL_TIM_PWM_Start+0x1e6>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002540:	d011      	beq.n	8002566 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 0201 	orr.w	r2, r2, #1
 8002550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002552:	e008      	b.n	8002566 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	e000      	b.n	8002568 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002566:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40012c00 	.word	0x40012c00
 8002578:	40013400 	.word	0x40013400
 800257c:	40014000 	.word	0x40014000
 8002580:	40014400 	.word	0x40014400
 8002584:	40014800 	.word	0x40014800
 8002588:	40015000 	.word	0x40015000
 800258c:	40000400 	.word	0x40000400
 8002590:	40000800 	.word	0x40000800
 8002594:	00010007 	.word	0x00010007

08002598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e0fd      	b.n	80027ae <HAL_TIM_PWM_ConfigChannel+0x216>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b14      	cmp	r3, #20
 80025be:	f200 80f0 	bhi.w	80027a2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80025c2:	a201      	add	r2, pc, #4	; (adr r2, 80025c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80025c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c8:	0800261d 	.word	0x0800261d
 80025cc:	080027a3 	.word	0x080027a3
 80025d0:	080027a3 	.word	0x080027a3
 80025d4:	080027a3 	.word	0x080027a3
 80025d8:	0800265d 	.word	0x0800265d
 80025dc:	080027a3 	.word	0x080027a3
 80025e0:	080027a3 	.word	0x080027a3
 80025e4:	080027a3 	.word	0x080027a3
 80025e8:	0800269f 	.word	0x0800269f
 80025ec:	080027a3 	.word	0x080027a3
 80025f0:	080027a3 	.word	0x080027a3
 80025f4:	080027a3 	.word	0x080027a3
 80025f8:	080026df 	.word	0x080026df
 80025fc:	080027a3 	.word	0x080027a3
 8002600:	080027a3 	.word	0x080027a3
 8002604:	080027a3 	.word	0x080027a3
 8002608:	08002721 	.word	0x08002721
 800260c:	080027a3 	.word	0x080027a3
 8002610:	080027a3 	.word	0x080027a3
 8002614:	080027a3 	.word	0x080027a3
 8002618:	08002761 	.word	0x08002761
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fa20 	bl	8002a68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0208 	orr.w	r2, r2, #8
 8002636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0204 	bic.w	r2, r2, #4
 8002646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6999      	ldr	r1, [r3, #24]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	619a      	str	r2, [r3, #24]
      break;
 800265a:	e0a3      	b.n	80027a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fa9a 	bl	8002b9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699a      	ldr	r2, [r3, #24]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6999      	ldr	r1, [r3, #24]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	021a      	lsls	r2, r3, #8
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	619a      	str	r2, [r3, #24]
      break;
 800269c:	e082      	b.n	80027a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68b9      	ldr	r1, [r7, #8]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fb0d 	bl	8002cc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0208 	orr.w	r2, r2, #8
 80026b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0204 	bic.w	r2, r2, #4
 80026c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69d9      	ldr	r1, [r3, #28]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	61da      	str	r2, [r3, #28]
      break;
 80026dc:	e062      	b.n	80027a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fb7f 	bl	8002de8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69da      	ldr	r2, [r3, #28]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69d9      	ldr	r1, [r3, #28]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	021a      	lsls	r2, r3, #8
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	61da      	str	r2, [r3, #28]
      break;
 800271e:	e041      	b.n	80027a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fbce 	bl	8002ec8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0208 	orr.w	r2, r2, #8
 800273a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0204 	bic.w	r2, r2, #4
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800275e:	e021      	b.n	80027a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	4618      	mov	r0, r3
 8002768:	f000 fc18 	bl	8002f9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800277a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800278a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	021a      	lsls	r2, r3, #8
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80027a0:	e000      	b.n	80027a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80027a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop

080027b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_TIM_ConfigClockSource+0x18>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0a8      	b.n	8002922 <HAL_TIM_ConfigClockSource+0x16a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b40      	cmp	r3, #64	; 0x40
 800280a:	d067      	beq.n	80028dc <HAL_TIM_ConfigClockSource+0x124>
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	d80b      	bhi.n	8002828 <HAL_TIM_ConfigClockSource+0x70>
 8002810:	2b10      	cmp	r3, #16
 8002812:	d073      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0x144>
 8002814:	2b10      	cmp	r3, #16
 8002816:	d802      	bhi.n	800281e <HAL_TIM_ConfigClockSource+0x66>
 8002818:	2b00      	cmp	r3, #0
 800281a:	d06f      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800281c:	e078      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800281e:	2b20      	cmp	r3, #32
 8002820:	d06c      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0x144>
 8002822:	2b30      	cmp	r3, #48	; 0x30
 8002824:	d06a      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002826:	e073      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002828:	2b70      	cmp	r3, #112	; 0x70
 800282a:	d00d      	beq.n	8002848 <HAL_TIM_ConfigClockSource+0x90>
 800282c:	2b70      	cmp	r3, #112	; 0x70
 800282e:	d804      	bhi.n	800283a <HAL_TIM_ConfigClockSource+0x82>
 8002830:	2b50      	cmp	r3, #80	; 0x50
 8002832:	d033      	beq.n	800289c <HAL_TIM_ConfigClockSource+0xe4>
 8002834:	2b60      	cmp	r3, #96	; 0x60
 8002836:	d041      	beq.n	80028bc <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002838:	e06a      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800283a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283e:	d066      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x156>
 8002840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002844:	d017      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002846:	e063      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	6899      	ldr	r1, [r3, #8]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f000 fc86 	bl	8003168 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800286a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	609a      	str	r2, [r3, #8]
      break;
 8002874:	e04c      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6899      	ldr	r1, [r3, #8]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f000 fc6f 	bl	8003168 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002898:	609a      	str	r2, [r3, #8]
      break;
 800289a:	e039      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	461a      	mov	r2, r3
 80028aa:	f000 fbe3 	bl	8003074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2150      	movs	r1, #80	; 0x50
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fc3c 	bl	8003132 <TIM_ITRx_SetConfig>
      break;
 80028ba:	e029      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	461a      	mov	r2, r3
 80028ca:	f000 fc02 	bl	80030d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2160      	movs	r1, #96	; 0x60
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fc2c 	bl	8003132 <TIM_ITRx_SetConfig>
      break;
 80028da:	e019      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	461a      	mov	r2, r3
 80028ea:	f000 fbc3 	bl	8003074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2140      	movs	r1, #64	; 0x40
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 fc1c 	bl	8003132 <TIM_ITRx_SetConfig>
      break;
 80028fa:	e009      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	4610      	mov	r0, r2
 8002908:	f000 fc13 	bl	8003132 <TIM_ITRx_SetConfig>
        break;
 800290c:	e000      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800290e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a42      	ldr	r2, [pc, #264]	; (8002a48 <TIM_Base_SetConfig+0x11c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d013      	beq.n	800296c <TIM_Base_SetConfig+0x40>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294a:	d00f      	beq.n	800296c <TIM_Base_SetConfig+0x40>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a3f      	ldr	r2, [pc, #252]	; (8002a4c <TIM_Base_SetConfig+0x120>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00b      	beq.n	800296c <TIM_Base_SetConfig+0x40>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a3e      	ldr	r2, [pc, #248]	; (8002a50 <TIM_Base_SetConfig+0x124>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d007      	beq.n	800296c <TIM_Base_SetConfig+0x40>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a3d      	ldr	r2, [pc, #244]	; (8002a54 <TIM_Base_SetConfig+0x128>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d003      	beq.n	800296c <TIM_Base_SetConfig+0x40>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a3c      	ldr	r2, [pc, #240]	; (8002a58 <TIM_Base_SetConfig+0x12c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d108      	bne.n	800297e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a31      	ldr	r2, [pc, #196]	; (8002a48 <TIM_Base_SetConfig+0x11c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d01f      	beq.n	80029c6 <TIM_Base_SetConfig+0x9a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298c:	d01b      	beq.n	80029c6 <TIM_Base_SetConfig+0x9a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a2e      	ldr	r2, [pc, #184]	; (8002a4c <TIM_Base_SetConfig+0x120>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d017      	beq.n	80029c6 <TIM_Base_SetConfig+0x9a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a2d      	ldr	r2, [pc, #180]	; (8002a50 <TIM_Base_SetConfig+0x124>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <TIM_Base_SetConfig+0x9a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a2c      	ldr	r2, [pc, #176]	; (8002a54 <TIM_Base_SetConfig+0x128>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00f      	beq.n	80029c6 <TIM_Base_SetConfig+0x9a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a2c      	ldr	r2, [pc, #176]	; (8002a5c <TIM_Base_SetConfig+0x130>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00b      	beq.n	80029c6 <TIM_Base_SetConfig+0x9a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a2b      	ldr	r2, [pc, #172]	; (8002a60 <TIM_Base_SetConfig+0x134>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d007      	beq.n	80029c6 <TIM_Base_SetConfig+0x9a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a2a      	ldr	r2, [pc, #168]	; (8002a64 <TIM_Base_SetConfig+0x138>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d003      	beq.n	80029c6 <TIM_Base_SetConfig+0x9a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <TIM_Base_SetConfig+0x12c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d108      	bne.n	80029d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <TIM_Base_SetConfig+0x11c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d013      	beq.n	8002a2c <TIM_Base_SetConfig+0x100>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <TIM_Base_SetConfig+0x128>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00f      	beq.n	8002a2c <TIM_Base_SetConfig+0x100>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a13      	ldr	r2, [pc, #76]	; (8002a5c <TIM_Base_SetConfig+0x130>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d00b      	beq.n	8002a2c <TIM_Base_SetConfig+0x100>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <TIM_Base_SetConfig+0x134>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d007      	beq.n	8002a2c <TIM_Base_SetConfig+0x100>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <TIM_Base_SetConfig+0x138>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d003      	beq.n	8002a2c <TIM_Base_SetConfig+0x100>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a0c      	ldr	r2, [pc, #48]	; (8002a58 <TIM_Base_SetConfig+0x12c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d103      	bne.n	8002a34 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	615a      	str	r2, [r3, #20]
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40012c00 	.word	0x40012c00
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40000800 	.word	0x40000800
 8002a54:	40013400 	.word	0x40013400
 8002a58:	40015000 	.word	0x40015000
 8002a5c:	40014000 	.word	0x40014000
 8002a60:	40014400 	.word	0x40014400
 8002a64:	40014800 	.word	0x40014800

08002a68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	f023 0201 	bic.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0303 	bic.w	r3, r3, #3
 8002aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f023 0302 	bic.w	r3, r3, #2
 8002ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a30      	ldr	r2, [pc, #192]	; (8002b84 <TIM_OC1_SetConfig+0x11c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d013      	beq.n	8002af0 <TIM_OC1_SetConfig+0x88>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a2f      	ldr	r2, [pc, #188]	; (8002b88 <TIM_OC1_SetConfig+0x120>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00f      	beq.n	8002af0 <TIM_OC1_SetConfig+0x88>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a2e      	ldr	r2, [pc, #184]	; (8002b8c <TIM_OC1_SetConfig+0x124>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d00b      	beq.n	8002af0 <TIM_OC1_SetConfig+0x88>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a2d      	ldr	r2, [pc, #180]	; (8002b90 <TIM_OC1_SetConfig+0x128>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d007      	beq.n	8002af0 <TIM_OC1_SetConfig+0x88>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a2c      	ldr	r2, [pc, #176]	; (8002b94 <TIM_OC1_SetConfig+0x12c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d003      	beq.n	8002af0 <TIM_OC1_SetConfig+0x88>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a2b      	ldr	r2, [pc, #172]	; (8002b98 <TIM_OC1_SetConfig+0x130>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d10c      	bne.n	8002b0a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f023 0308 	bic.w	r3, r3, #8
 8002af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f023 0304 	bic.w	r3, r3, #4
 8002b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a1d      	ldr	r2, [pc, #116]	; (8002b84 <TIM_OC1_SetConfig+0x11c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d013      	beq.n	8002b3a <TIM_OC1_SetConfig+0xd2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a1c      	ldr	r2, [pc, #112]	; (8002b88 <TIM_OC1_SetConfig+0x120>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00f      	beq.n	8002b3a <TIM_OC1_SetConfig+0xd2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a1b      	ldr	r2, [pc, #108]	; (8002b8c <TIM_OC1_SetConfig+0x124>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00b      	beq.n	8002b3a <TIM_OC1_SetConfig+0xd2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a1a      	ldr	r2, [pc, #104]	; (8002b90 <TIM_OC1_SetConfig+0x128>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <TIM_OC1_SetConfig+0xd2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <TIM_OC1_SetConfig+0x12c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d003      	beq.n	8002b3a <TIM_OC1_SetConfig+0xd2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a18      	ldr	r2, [pc, #96]	; (8002b98 <TIM_OC1_SetConfig+0x130>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d111      	bne.n	8002b5e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	621a      	str	r2, [r3, #32]
}
 8002b78:	bf00      	nop
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40012c00 	.word	0x40012c00
 8002b88:	40013400 	.word	0x40013400
 8002b8c:	40014000 	.word	0x40014000
 8002b90:	40014400 	.word	0x40014400
 8002b94:	40014800 	.word	0x40014800
 8002b98:	40015000 	.word	0x40015000

08002b9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	f023 0210 	bic.w	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f023 0320 	bic.w	r3, r3, #32
 8002bea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a2c      	ldr	r2, [pc, #176]	; (8002cac <TIM_OC2_SetConfig+0x110>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d007      	beq.n	8002c10 <TIM_OC2_SetConfig+0x74>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a2b      	ldr	r2, [pc, #172]	; (8002cb0 <TIM_OC2_SetConfig+0x114>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d003      	beq.n	8002c10 <TIM_OC2_SetConfig+0x74>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a2a      	ldr	r2, [pc, #168]	; (8002cb4 <TIM_OC2_SetConfig+0x118>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d10d      	bne.n	8002c2c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a1f      	ldr	r2, [pc, #124]	; (8002cac <TIM_OC2_SetConfig+0x110>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d013      	beq.n	8002c5c <TIM_OC2_SetConfig+0xc0>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a1e      	ldr	r2, [pc, #120]	; (8002cb0 <TIM_OC2_SetConfig+0x114>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00f      	beq.n	8002c5c <TIM_OC2_SetConfig+0xc0>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a1e      	ldr	r2, [pc, #120]	; (8002cb8 <TIM_OC2_SetConfig+0x11c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d00b      	beq.n	8002c5c <TIM_OC2_SetConfig+0xc0>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <TIM_OC2_SetConfig+0x120>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d007      	beq.n	8002c5c <TIM_OC2_SetConfig+0xc0>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <TIM_OC2_SetConfig+0x124>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d003      	beq.n	8002c5c <TIM_OC2_SetConfig+0xc0>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <TIM_OC2_SetConfig+0x118>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d113      	bne.n	8002c84 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c62:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c6a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	621a      	str	r2, [r3, #32]
}
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40012c00 	.word	0x40012c00
 8002cb0:	40013400 	.word	0x40013400
 8002cb4:	40015000 	.word	0x40015000
 8002cb8:	40014000 	.word	0x40014000
 8002cbc:	40014400 	.word	0x40014400
 8002cc0:	40014800 	.word	0x40014800

08002cc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
 8002cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a2b      	ldr	r2, [pc, #172]	; (8002dd0 <TIM_OC3_SetConfig+0x10c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d007      	beq.n	8002d36 <TIM_OC3_SetConfig+0x72>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2a      	ldr	r2, [pc, #168]	; (8002dd4 <TIM_OC3_SetConfig+0x110>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d003      	beq.n	8002d36 <TIM_OC3_SetConfig+0x72>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a29      	ldr	r2, [pc, #164]	; (8002dd8 <TIM_OC3_SetConfig+0x114>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d10d      	bne.n	8002d52 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d50:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a1e      	ldr	r2, [pc, #120]	; (8002dd0 <TIM_OC3_SetConfig+0x10c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <TIM_OC3_SetConfig+0xbe>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a1d      	ldr	r2, [pc, #116]	; (8002dd4 <TIM_OC3_SetConfig+0x110>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00f      	beq.n	8002d82 <TIM_OC3_SetConfig+0xbe>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a1d      	ldr	r2, [pc, #116]	; (8002ddc <TIM_OC3_SetConfig+0x118>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00b      	beq.n	8002d82 <TIM_OC3_SetConfig+0xbe>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <TIM_OC3_SetConfig+0x11c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d007      	beq.n	8002d82 <TIM_OC3_SetConfig+0xbe>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a1b      	ldr	r2, [pc, #108]	; (8002de4 <TIM_OC3_SetConfig+0x120>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d003      	beq.n	8002d82 <TIM_OC3_SetConfig+0xbe>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a16      	ldr	r2, [pc, #88]	; (8002dd8 <TIM_OC3_SetConfig+0x114>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d113      	bne.n	8002daa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	621a      	str	r2, [r3, #32]
}
 8002dc4:	bf00      	nop
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40013400 	.word	0x40013400
 8002dd8:	40015000 	.word	0x40015000
 8002ddc:	40014000 	.word	0x40014000
 8002de0:	40014400 	.word	0x40014400
 8002de4:	40014800 	.word	0x40014800

08002de8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	021b      	lsls	r3, r3, #8
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	031b      	lsls	r3, r3, #12
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a1a      	ldr	r2, [pc, #104]	; (8002eb0 <TIM_OC4_SetConfig+0xc8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d013      	beq.n	8002e74 <TIM_OC4_SetConfig+0x8c>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <TIM_OC4_SetConfig+0xcc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d00f      	beq.n	8002e74 <TIM_OC4_SetConfig+0x8c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a18      	ldr	r2, [pc, #96]	; (8002eb8 <TIM_OC4_SetConfig+0xd0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00b      	beq.n	8002e74 <TIM_OC4_SetConfig+0x8c>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a17      	ldr	r2, [pc, #92]	; (8002ebc <TIM_OC4_SetConfig+0xd4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d007      	beq.n	8002e74 <TIM_OC4_SetConfig+0x8c>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <TIM_OC4_SetConfig+0xd8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <TIM_OC4_SetConfig+0x8c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <TIM_OC4_SetConfig+0xdc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d109      	bne.n	8002e88 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	019b      	lsls	r3, r3, #6
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40012c00 	.word	0x40012c00
 8002eb4:	40013400 	.word	0x40013400
 8002eb8:	40014000 	.word	0x40014000
 8002ebc:	40014400 	.word	0x40014400
 8002ec0:	40014800 	.word	0x40014800
 8002ec4:	40015000 	.word	0x40015000

08002ec8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	041b      	lsls	r3, r3, #16
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a19      	ldr	r2, [pc, #100]	; (8002f84 <TIM_OC5_SetConfig+0xbc>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <TIM_OC5_SetConfig+0x82>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a18      	ldr	r2, [pc, #96]	; (8002f88 <TIM_OC5_SetConfig+0xc0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00f      	beq.n	8002f4a <TIM_OC5_SetConfig+0x82>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <TIM_OC5_SetConfig+0xc4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00b      	beq.n	8002f4a <TIM_OC5_SetConfig+0x82>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a16      	ldr	r2, [pc, #88]	; (8002f90 <TIM_OC5_SetConfig+0xc8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <TIM_OC5_SetConfig+0x82>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a15      	ldr	r2, [pc, #84]	; (8002f94 <TIM_OC5_SetConfig+0xcc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d003      	beq.n	8002f4a <TIM_OC5_SetConfig+0x82>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <TIM_OC5_SetConfig+0xd0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d109      	bne.n	8002f5e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	621a      	str	r2, [r3, #32]
}
 8002f78:	bf00      	nop
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	40012c00 	.word	0x40012c00
 8002f88:	40013400 	.word	0x40013400
 8002f8c:	40014000 	.word	0x40014000
 8002f90:	40014400 	.word	0x40014400
 8002f94:	40014800 	.word	0x40014800
 8002f98:	40015000 	.word	0x40015000

08002f9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	051b      	lsls	r3, r3, #20
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a1a      	ldr	r2, [pc, #104]	; (800305c <TIM_OC6_SetConfig+0xc0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d013      	beq.n	8003020 <TIM_OC6_SetConfig+0x84>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a19      	ldr	r2, [pc, #100]	; (8003060 <TIM_OC6_SetConfig+0xc4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00f      	beq.n	8003020 <TIM_OC6_SetConfig+0x84>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a18      	ldr	r2, [pc, #96]	; (8003064 <TIM_OC6_SetConfig+0xc8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00b      	beq.n	8003020 <TIM_OC6_SetConfig+0x84>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a17      	ldr	r2, [pc, #92]	; (8003068 <TIM_OC6_SetConfig+0xcc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d007      	beq.n	8003020 <TIM_OC6_SetConfig+0x84>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a16      	ldr	r2, [pc, #88]	; (800306c <TIM_OC6_SetConfig+0xd0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d003      	beq.n	8003020 <TIM_OC6_SetConfig+0x84>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a15      	ldr	r2, [pc, #84]	; (8003070 <TIM_OC6_SetConfig+0xd4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d109      	bne.n	8003034 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003026:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	029b      	lsls	r3, r3, #10
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	621a      	str	r2, [r3, #32]
}
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40013400 	.word	0x40013400
 8003064:	40014000 	.word	0x40014000
 8003068:	40014400 	.word	0x40014400
 800306c:	40014800 	.word	0x40014800
 8003070:	40015000 	.word	0x40015000

08003074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f023 0201 	bic.w	r2, r3, #1
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800309e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f023 030a 	bic.w	r3, r3, #10
 80030b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	621a      	str	r2, [r3, #32]
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b087      	sub	sp, #28
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	f023 0210 	bic.w	r2, r3, #16
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	031b      	lsls	r3, r3, #12
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800310e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	621a      	str	r2, [r3, #32]
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003132:	b480      	push	{r7}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	f043 0307 	orr.w	r3, r3, #7
 8003154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	609a      	str	r2, [r3, #8]
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003182:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	021a      	lsls	r2, r3, #8
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	431a      	orrs	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4313      	orrs	r3, r2
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	609a      	str	r2, [r3, #8]
}
 800319c:	bf00      	nop
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	2201      	movs	r2, #1
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a1a      	ldr	r2, [r3, #32]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	401a      	ands	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a1a      	ldr	r2, [r3, #32]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	fa01 f303 	lsl.w	r3, r1, r3
 80031e0:	431a      	orrs	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	621a      	str	r2, [r3, #32]
}
 80031e6:	bf00      	nop
 80031e8:	371c      	adds	r7, #28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003208:	2302      	movs	r3, #2
 800320a:	e06d      	b.n	80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a30      	ldr	r2, [pc, #192]	; (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d009      	beq.n	800324a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2f      	ldr	r2, [pc, #188]	; (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d004      	beq.n	800324a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2d      	ldr	r2, [pc, #180]	; (80032fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d108      	bne.n	800325c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003250:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4313      	orrs	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d01d      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d018      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1c      	ldr	r2, [pc, #112]	; (8003300 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d013      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1a      	ldr	r2, [pc, #104]	; (8003304 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00e      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a15      	ldr	r2, [pc, #84]	; (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d009      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a16      	ldr	r2, [pc, #88]	; (8003308 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d004      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a11      	ldr	r2, [pc, #68]	; (80032fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d10c      	bne.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40012c00 	.word	0x40012c00
 80032f8:	40013400 	.word	0x40013400
 80032fc:	40015000 	.word	0x40015000
 8003300:	40000400 	.word	0x40000400
 8003304:	40000800 	.word	0x40000800
 8003308:	40014000 	.word	0x40014000

0800330c <__libc_init_array>:
 800330c:	b570      	push	{r4, r5, r6, lr}
 800330e:	4e0d      	ldr	r6, [pc, #52]	; (8003344 <__libc_init_array+0x38>)
 8003310:	4c0d      	ldr	r4, [pc, #52]	; (8003348 <__libc_init_array+0x3c>)
 8003312:	1ba4      	subs	r4, r4, r6
 8003314:	10a4      	asrs	r4, r4, #2
 8003316:	2500      	movs	r5, #0
 8003318:	42a5      	cmp	r5, r4
 800331a:	d109      	bne.n	8003330 <__libc_init_array+0x24>
 800331c:	4e0b      	ldr	r6, [pc, #44]	; (800334c <__libc_init_array+0x40>)
 800331e:	4c0c      	ldr	r4, [pc, #48]	; (8003350 <__libc_init_array+0x44>)
 8003320:	f000 f820 	bl	8003364 <_init>
 8003324:	1ba4      	subs	r4, r4, r6
 8003326:	10a4      	asrs	r4, r4, #2
 8003328:	2500      	movs	r5, #0
 800332a:	42a5      	cmp	r5, r4
 800332c:	d105      	bne.n	800333a <__libc_init_array+0x2e>
 800332e:	bd70      	pop	{r4, r5, r6, pc}
 8003330:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003334:	4798      	blx	r3
 8003336:	3501      	adds	r5, #1
 8003338:	e7ee      	b.n	8003318 <__libc_init_array+0xc>
 800333a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800333e:	4798      	blx	r3
 8003340:	3501      	adds	r5, #1
 8003342:	e7f2      	b.n	800332a <__libc_init_array+0x1e>
 8003344:	080033ac 	.word	0x080033ac
 8003348:	080033ac 	.word	0x080033ac
 800334c:	080033ac 	.word	0x080033ac
 8003350:	080033b0 	.word	0x080033b0

08003354 <memset>:
 8003354:	4402      	add	r2, r0
 8003356:	4603      	mov	r3, r0
 8003358:	4293      	cmp	r3, r2
 800335a:	d100      	bne.n	800335e <memset+0xa>
 800335c:	4770      	bx	lr
 800335e:	f803 1b01 	strb.w	r1, [r3], #1
 8003362:	e7f9      	b.n	8003358 <memset+0x4>

08003364 <_init>:
 8003364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003366:	bf00      	nop
 8003368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336a:	bc08      	pop	{r3}
 800336c:	469e      	mov	lr, r3
 800336e:	4770      	bx	lr

08003370 <_fini>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	bf00      	nop
 8003374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003376:	bc08      	pop	{r3}
 8003378:	469e      	mov	lr, r3
 800337a:	4770      	bx	lr
