
b13_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002360  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080024f4  080024f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002524  08002524  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002524  08002524  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002524  08002524  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002524  08002524  00012524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002528  08002528  00012528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800252c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002538  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002538  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000057e8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000106c  00000000  00000000  00025824  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004b8  00000000  00000000  00026890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000420  00000000  00000000  00026d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ec32  00000000  00000000  00027168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000540f  00000000  00000000  00045d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bc61f  00000000  00000000  0004b1a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001077c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000114c  00000000  00000000  00107844  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080024dc 	.word	0x080024dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080024dc 	.word	0x080024dc

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 f99a 	bl	8000510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f81a 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8ca 	bl	8000378 <MX_GPIO_Init>
  MX_RTC_Init();
 80001e4:	f000 f86e 	bl	80002c4 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_RTC_GetTime(&hrtc,&time, RTC_FORMAT_BIN);
 80001e8:	2200      	movs	r2, #0
 80001ea:	4907      	ldr	r1, [pc, #28]	; (8000208 <main+0x34>)
 80001ec:	4807      	ldr	r0, [pc, #28]	; (800020c <main+0x38>)
 80001ee:	f001 ff65 	bl	80020bc <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &day,RTC_FORMAT_BIN );
 80001f2:	2200      	movs	r2, #0
 80001f4:	4906      	ldr	r1, [pc, #24]	; (8000210 <main+0x3c>)
 80001f6:	4805      	ldr	r0, [pc, #20]	; (800020c <main+0x38>)
 80001f8:	f002 f865 	bl	80022c6 <HAL_RTC_GetDate>
	  HAL_Delay(1000);
 80001fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000200:	f000 f9ec 	bl	80005dc <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc,&time, RTC_FORMAT_BIN);
 8000204:	e7f0      	b.n	80001e8 <main+0x14>
 8000206:	bf00      	nop
 8000208:	20000048 	.word	0x20000048
 800020c:	20000028 	.word	0x20000028
 8000210:	2000005c 	.word	0x2000005c

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b0a6      	sub	sp, #152	; 0x98
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f002 f952 	bl	80024cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2258      	movs	r2, #88	; 0x58
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f002 f944 	bl	80024cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000244:	230a      	movs	r3, #10
 8000246:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000248:	2301      	movs	r3, #1
 800024a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024c:	2310      	movs	r3, #16
 800024e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000258:	2300      	movs	r3, #0
 800025a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fac2 	bl	80007ec <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800026e:	f000 f89b 	bl	80003a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000276:	2300      	movs	r3, #0
 8000278:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000286:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800028a:	2100      	movs	r1, #0
 800028c:	4618      	mov	r0, r3
 800028e:	f001 f9c3 	bl	8001618 <HAL_RCC_ClockConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000298:	f000 f886 	bl	80003a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800029c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002a6:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fb9a 	bl	80019e4 <HAL_RCCEx_PeriphCLKConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80002b6:	f000 f877 	bl	80003a8 <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3798      	adds	r7, #152	; 0x98
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80002d8:	2300      	movs	r3, #0
 80002da:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80002dc:	4b24      	ldr	r3, [pc, #144]	; (8000370 <MX_RTC_Init+0xac>)
 80002de:	4a25      	ldr	r2, [pc, #148]	; (8000374 <MX_RTC_Init+0xb0>)
 80002e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80002e2:	4b23      	ldr	r3, [pc, #140]	; (8000370 <MX_RTC_Init+0xac>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80002e8:	4b21      	ldr	r3, [pc, #132]	; (8000370 <MX_RTC_Init+0xac>)
 80002ea:	227f      	movs	r2, #127	; 0x7f
 80002ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80002ee:	4b20      	ldr	r3, [pc, #128]	; (8000370 <MX_RTC_Init+0xac>)
 80002f0:	22ff      	movs	r2, #255	; 0xff
 80002f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80002f4:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <MX_RTC_Init+0xac>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80002fa:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <MX_RTC_Init+0xac>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <MX_RTC_Init+0xac>)
 8000302:	2200      	movs	r2, #0
 8000304:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000306:	481a      	ldr	r0, [pc, #104]	; (8000370 <MX_RTC_Init+0xac>)
 8000308:	f001 fd8a 	bl	8001e20 <HAL_RTC_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000312:	f000 f849 	bl	80003a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 8000316:	2315      	movs	r3, #21
 8000318:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 58;
 800031a:	233a      	movs	r3, #58	; 0x3a
 800031c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800031e:	2300      	movs	r3, #0
 8000320:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000322:	2300      	movs	r3, #0
 8000324:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2200      	movs	r2, #0
 800032e:	4619      	mov	r1, r3
 8000330:	480f      	ldr	r0, [pc, #60]	; (8000370 <MX_RTC_Init+0xac>)
 8000332:	f001 fe06 	bl	8001f42 <HAL_RTC_SetTime>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800033c:	f000 f834 	bl	80003a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000340:	2303      	movs	r3, #3
 8000342:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000344:	2301      	movs	r3, #1
 8000346:	707b      	strb	r3, [r7, #1]
  sDate.Date = 27;
 8000348:	231b      	movs	r3, #27
 800034a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 21;
 800034c:	2315      	movs	r3, #21
 800034e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000350:	463b      	mov	r3, r7
 8000352:	2200      	movs	r2, #0
 8000354:	4619      	mov	r1, r3
 8000356:	4806      	ldr	r0, [pc, #24]	; (8000370 <MX_RTC_Init+0xac>)
 8000358:	f001 ff0e 	bl	8002178 <HAL_RTC_SetDate>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000362:	f000 f821 	bl	80003a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000366:	bf00      	nop
 8000368:	3718      	adds	r7, #24
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000028 	.word	0x20000028
 8000374:	40002800 	.word	0x40002800

08000378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_GPIO_Init+0x2c>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4a08      	ldr	r2, [pc, #32]	; (80003a4 <MX_GPIO_Init+0x2c>)
 8000384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000388:	6153      	str	r3, [r2, #20]
 800038a:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_GPIO_Init+0x2c>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]

}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000

080003a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ae:	e7fe      	b.n	80003ae <Error_Handler+0x6>

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <HAL_MspInit+0x44>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <HAL_MspInit+0x44>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <HAL_MspInit+0x44>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <HAL_MspInit+0x44>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a08      	ldr	r2, [pc, #32]	; (80003f4 <HAL_MspInit+0x44>)
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <HAL_MspInit+0x44>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e2:	603b      	str	r3, [r7, #0]
 80003e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000

080003f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a0d      	ldr	r2, [pc, #52]	; (800043c <HAL_RTC_MspInit+0x44>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d111      	bne.n	800042e <HAL_RTC_MspInit+0x36>
 800040a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800040e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	fa93 f3a3 	rbit	r3, r3
 8000416:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000418:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800041a:	fab3 f383 	clz	r3, r3
 800041e:	b2db      	uxtb	r3, r3
 8000420:	461a      	mov	r2, r3
 8000422:	4b07      	ldr	r3, [pc, #28]	; (8000440 <HAL_RTC_MspInit+0x48>)
 8000424:	4413      	add	r3, r2
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	461a      	mov	r2, r3
 800042a:	2301      	movs	r3, #1
 800042c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40002800 	.word	0x40002800
 8000440:	10908100 	.word	0x10908100

08000444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000448:	e7fe      	b.n	8000448 <NMI_Handler+0x4>

0800044a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800044e:	e7fe      	b.n	800044e <HardFault_Handler+0x4>

08000450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000454:	e7fe      	b.n	8000454 <MemManage_Handler+0x4>

08000456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800045a:	e7fe      	b.n	800045a <BusFault_Handler+0x4>

0800045c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000460:	e7fe      	b.n	8000460 <UsageFault_Handler+0x4>

08000462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr

0800047e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr

0800048c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000490:	f000 f884 	bl	800059c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}

08000498 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <SystemInit+0x20>)
 800049e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004a2:	4a05      	ldr	r2, [pc, #20]	; (80004b8 <SystemInit+0x20>)
 80004a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	e000ed00 	.word	0xe000ed00

080004bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c0:	480d      	ldr	r0, [pc, #52]	; (80004f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004c2:	490e      	ldr	r1, [pc, #56]	; (80004fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c4:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <LoopForever+0xe>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c8:	e002      	b.n	80004d0 <LoopCopyDataInit>

080004ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ce:	3304      	adds	r3, #4

080004d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d4:	d3f9      	bcc.n	80004ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d8:	4c0b      	ldr	r4, [pc, #44]	; (8000508 <LoopForever+0x16>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004dc:	e001      	b.n	80004e2 <LoopFillZerobss>

080004de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e0:	3204      	adds	r2, #4

080004e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e4:	d3fb      	bcc.n	80004de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004e6:	f7ff ffd7 	bl	8000498 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ea:	f001 ffcb 	bl	8002484 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004ee:	f7ff fe71 	bl	80001d4 <main>

080004f2 <LoopForever>:

LoopForever:
    b LoopForever
 80004f2:	e7fe      	b.n	80004f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80004f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000500:	0800252c 	.word	0x0800252c
  ldr r2, =_sbss
 8000504:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000508:	20000074 	.word	0x20000074

0800050c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800050c:	e7fe      	b.n	800050c <ADC1_2_IRQHandler>
	...

08000510 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <HAL_Init+0x28>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a07      	ldr	r2, [pc, #28]	; (8000538 <HAL_Init+0x28>)
 800051a:	f043 0310 	orr.w	r3, r3, #16
 800051e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000520:	2003      	movs	r0, #3
 8000522:	f000 f92f 	bl	8000784 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000526:	2000      	movs	r0, #0
 8000528:	f000 f808 	bl	800053c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800052c:	f7ff ff40 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000530:	2300      	movs	r3, #0
}
 8000532:	4618      	mov	r0, r3
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40022000 	.word	0x40022000

0800053c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <HAL_InitTick+0x54>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x58>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4619      	mov	r1, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	fbb3 f3f1 	udiv	r3, r3, r1
 8000556:	fbb2 f3f3 	udiv	r3, r2, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f939 	bl	80007d2 <HAL_SYSTICK_Config>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
 8000568:	e00e      	b.n	8000588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b0f      	cmp	r3, #15
 800056e:	d80a      	bhi.n	8000586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000570:	2200      	movs	r2, #0
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	f04f 30ff 	mov.w	r0, #4294967295
 8000578:	f000 f90f 	bl	800079a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <HAL_InitTick+0x5c>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	e000      	b.n	8000588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000000 	.word	0x20000000
 8000594:	20000008 	.word	0x20000008
 8000598:	20000004 	.word	0x20000004

0800059c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <HAL_IncTick+0x20>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x24>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4413      	add	r3, r2
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <HAL_IncTick+0x24>)
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000008 	.word	0x20000008
 80005c0:	20000070 	.word	0x20000070

080005c4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return uwTick;  
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <HAL_GetTick+0x14>)
 80005ca:	681b      	ldr	r3, [r3, #0]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000070 	.word	0x20000070

080005dc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e4:	f7ff ffee 	bl	80005c4 <HAL_GetTick>
 80005e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f4:	d005      	beq.n	8000602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <HAL_Delay+0x40>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	461a      	mov	r2, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4413      	add	r3, r2
 8000600:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000602:	bf00      	nop
 8000604:	f7ff ffde 	bl	80005c4 <HAL_GetTick>
 8000608:	4602      	mov	r2, r0
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	429a      	cmp	r2, r3
 8000612:	d8f7      	bhi.n	8000604 <HAL_Delay+0x28>
  {
  }
}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000008 	.word	0x20000008

08000620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <__NVIC_SetPriorityGrouping+0x44>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800063c:	4013      	ands	r3, r2
 800063e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800064c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000652:	4a04      	ldr	r2, [pc, #16]	; (8000664 <__NVIC_SetPriorityGrouping+0x44>)
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	60d3      	str	r3, [r2, #12]
}
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <__NVIC_GetPriorityGrouping+0x18>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	f003 0307 	and.w	r3, r3, #7
}
 8000676:	4618      	mov	r0, r3
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	6039      	str	r1, [r7, #0]
 800068e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000694:	2b00      	cmp	r3, #0
 8000696:	db0a      	blt.n	80006ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	b2da      	uxtb	r2, r3
 800069c:	490c      	ldr	r1, [pc, #48]	; (80006d0 <__NVIC_SetPriority+0x4c>)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	0112      	lsls	r2, r2, #4
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	440b      	add	r3, r1
 80006a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ac:	e00a      	b.n	80006c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4908      	ldr	r1, [pc, #32]	; (80006d4 <__NVIC_SetPriority+0x50>)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f003 030f 	and.w	r3, r3, #15
 80006ba:	3b04      	subs	r3, #4
 80006bc:	0112      	lsls	r2, r2, #4
 80006be:	b2d2      	uxtb	r2, r2
 80006c0:	440b      	add	r3, r1
 80006c2:	761a      	strb	r2, [r3, #24]
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000e100 	.word	0xe000e100
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b089      	sub	sp, #36	; 0x24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	f1c3 0307 	rsb	r3, r3, #7
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	bf28      	it	cs
 80006f6:	2304      	movcs	r3, #4
 80006f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3304      	adds	r3, #4
 80006fe:	2b06      	cmp	r3, #6
 8000700:	d902      	bls.n	8000708 <NVIC_EncodePriority+0x30>
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3b03      	subs	r3, #3
 8000706:	e000      	b.n	800070a <NVIC_EncodePriority+0x32>
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	f04f 32ff 	mov.w	r2, #4294967295
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	43da      	mvns	r2, r3
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	401a      	ands	r2, r3
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000720:	f04f 31ff 	mov.w	r1, #4294967295
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	43d9      	mvns	r1, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	4313      	orrs	r3, r2
         );
}
 8000732:	4618      	mov	r0, r3
 8000734:	3724      	adds	r7, #36	; 0x24
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000750:	d301      	bcc.n	8000756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000752:	2301      	movs	r3, #1
 8000754:	e00f      	b.n	8000776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <SysTick_Config+0x40>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075e:	210f      	movs	r1, #15
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	f7ff ff8e 	bl	8000684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <SysTick_Config+0x40>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <SysTick_Config+0x40>)
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	e000e010 	.word	0xe000e010

08000784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ff47 	bl	8000620 <__NVIC_SetPriorityGrouping>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b086      	sub	sp, #24
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ac:	f7ff ff5c 	bl	8000668 <__NVIC_GetPriorityGrouping>
 80007b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff ff8e 	bl	80006d8 <NVIC_EncodePriority>
 80007bc:	4602      	mov	r2, r0
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff5d 	bl	8000684 <__NVIC_SetPriority>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff ffb0 	bl	8000740 <SysTick_Config>
 80007e0:	4603      	mov	r3, r0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d102      	bne.n	8000806 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000800:	2301      	movs	r3, #1
 8000802:	f000 bf01 	b.w	8001608 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f003 0301 	and.w	r3, r3, #1
 8000810:	2b00      	cmp	r3, #0
 8000812:	f000 8160 	beq.w	8000ad6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000816:	4bae      	ldr	r3, [pc, #696]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	f003 030c 	and.w	r3, r3, #12
 800081e:	2b04      	cmp	r3, #4
 8000820:	d00c      	beq.n	800083c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000822:	4bab      	ldr	r3, [pc, #684]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f003 030c 	and.w	r3, r3, #12
 800082a:	2b08      	cmp	r3, #8
 800082c:	d159      	bne.n	80008e2 <HAL_RCC_OscConfig+0xf6>
 800082e:	4ba8      	ldr	r3, [pc, #672]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800083a:	d152      	bne.n	80008e2 <HAL_RCC_OscConfig+0xf6>
 800083c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000840:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000844:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000848:	fa93 f3a3 	rbit	r3, r3
 800084c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8000850:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000854:	fab3 f383 	clz	r3, r3
 8000858:	b2db      	uxtb	r3, r3
 800085a:	095b      	lsrs	r3, r3, #5
 800085c:	b2db      	uxtb	r3, r3
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b01      	cmp	r3, #1
 8000866:	d102      	bne.n	800086e <HAL_RCC_OscConfig+0x82>
 8000868:	4b99      	ldr	r3, [pc, #612]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	e015      	b.n	800089a <HAL_RCC_OscConfig+0xae>
 800086e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000872:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000876:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800087a:	fa93 f3a3 	rbit	r3, r3
 800087e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000882:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000886:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800088a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800088e:	fa93 f3a3 	rbit	r3, r3
 8000892:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000896:	4b8e      	ldr	r3, [pc, #568]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 8000898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800089e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80008a2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80008a6:	fa92 f2a2 	rbit	r2, r2
 80008aa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80008ae:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80008b2:	fab2 f282 	clz	r2, r2
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	f042 0220 	orr.w	r2, r2, #32
 80008bc:	b2d2      	uxtb	r2, r2
 80008be:	f002 021f 	and.w	r2, r2, #31
 80008c2:	2101      	movs	r1, #1
 80008c4:	fa01 f202 	lsl.w	r2, r1, r2
 80008c8:	4013      	ands	r3, r2
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	f000 8102 	beq.w	8000ad4 <HAL_RCC_OscConfig+0x2e8>
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	f040 80fc 	bne.w	8000ad4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	f000 be93 	b.w	8001608 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008ec:	d106      	bne.n	80008fc <HAL_RCC_OscConfig+0x110>
 80008ee:	4b78      	ldr	r3, [pc, #480]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a77      	ldr	r2, [pc, #476]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 80008f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	e030      	b.n	800095e <HAL_RCC_OscConfig+0x172>
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d10c      	bne.n	8000920 <HAL_RCC_OscConfig+0x134>
 8000906:	4b72      	ldr	r3, [pc, #456]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a71      	ldr	r2, [pc, #452]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 800090c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000910:	6013      	str	r3, [r2, #0]
 8000912:	4b6f      	ldr	r3, [pc, #444]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a6e      	ldr	r2, [pc, #440]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 8000918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800091c:	6013      	str	r3, [r2, #0]
 800091e:	e01e      	b.n	800095e <HAL_RCC_OscConfig+0x172>
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800092a:	d10c      	bne.n	8000946 <HAL_RCC_OscConfig+0x15a>
 800092c:	4b68      	ldr	r3, [pc, #416]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a67      	ldr	r2, [pc, #412]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 8000932:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	4b65      	ldr	r3, [pc, #404]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a64      	ldr	r2, [pc, #400]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 800093e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	e00b      	b.n	800095e <HAL_RCC_OscConfig+0x172>
 8000946:	4b62      	ldr	r3, [pc, #392]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a61      	ldr	r2, [pc, #388]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 800094c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000950:	6013      	str	r3, [r2, #0]
 8000952:	4b5f      	ldr	r3, [pc, #380]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a5e      	ldr	r2, [pc, #376]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 8000958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800095c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d059      	beq.n	8000a1c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000968:	f7ff fe2c 	bl	80005c4 <HAL_GetTick>
 800096c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000970:	e00a      	b.n	8000988 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000972:	f7ff fe27 	bl	80005c4 <HAL_GetTick>
 8000976:	4602      	mov	r2, r0
 8000978:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	2b64      	cmp	r3, #100	; 0x64
 8000980:	d902      	bls.n	8000988 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000982:	2303      	movs	r3, #3
 8000984:	f000 be40 	b.w	8001608 <HAL_RCC_OscConfig+0xe1c>
 8000988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800098c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000990:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000994:	fa93 f3a3 	rbit	r3, r3
 8000998:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800099c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009a0:	fab3 f383 	clz	r3, r3
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	095b      	lsrs	r3, r3, #5
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d102      	bne.n	80009ba <HAL_RCC_OscConfig+0x1ce>
 80009b4:	4b46      	ldr	r3, [pc, #280]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	e015      	b.n	80009e6 <HAL_RCC_OscConfig+0x1fa>
 80009ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80009c6:	fa93 f3a3 	rbit	r3, r3
 80009ca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80009ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009d2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80009d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80009da:	fa93 f3a3 	rbit	r3, r3
 80009de:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80009e2:	4b3b      	ldr	r3, [pc, #236]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 80009e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009ea:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80009ee:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80009f2:	fa92 f2a2 	rbit	r2, r2
 80009f6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80009fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80009fe:	fab2 f282 	clz	r2, r2
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	f042 0220 	orr.w	r2, r2, #32
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	f002 021f 	and.w	r2, r2, #31
 8000a0e:	2101      	movs	r1, #1
 8000a10:	fa01 f202 	lsl.w	r2, r1, r2
 8000a14:	4013      	ands	r3, r2
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d0ab      	beq.n	8000972 <HAL_RCC_OscConfig+0x186>
 8000a1a:	e05c      	b.n	8000ad6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a1c:	f7ff fdd2 	bl	80005c4 <HAL_GetTick>
 8000a20:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a24:	e00a      	b.n	8000a3c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a26:	f7ff fdcd 	bl	80005c4 <HAL_GetTick>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	2b64      	cmp	r3, #100	; 0x64
 8000a34:	d902      	bls.n	8000a3c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000a36:	2303      	movs	r3, #3
 8000a38:	f000 bde6 	b.w	8001608 <HAL_RCC_OscConfig+0xe1c>
 8000a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a40:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a44:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000a48:	fa93 f3a3 	rbit	r3, r3
 8000a4c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000a50:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a54:	fab3 f383 	clz	r3, r3
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	095b      	lsrs	r3, r3, #5
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d102      	bne.n	8000a6e <HAL_RCC_OscConfig+0x282>
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	e015      	b.n	8000a9a <HAL_RCC_OscConfig+0x2ae>
 8000a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a72:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000a7a:	fa93 f3a3 	rbit	r3, r3
 8000a7e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000a82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a86:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000a8a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000a8e:	fa93 f3a3 	rbit	r3, r3
 8000a92:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_RCC_OscConfig+0x2e4>)
 8000a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a9e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000aa2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000aa6:	fa92 f2a2 	rbit	r2, r2
 8000aaa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000aae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000ab2:	fab2 f282 	clz	r2, r2
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	f042 0220 	orr.w	r2, r2, #32
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	f002 021f 	and.w	r2, r2, #31
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac8:	4013      	ands	r3, r2
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1ab      	bne.n	8000a26 <HAL_RCC_OscConfig+0x23a>
 8000ace:	e002      	b.n	8000ad6 <HAL_RCC_OscConfig+0x2ea>
 8000ad0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f000 8170 	beq.w	8000dc6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ae6:	4bd0      	ldr	r3, [pc, #832]	; (8000e28 <HAL_RCC_OscConfig+0x63c>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 030c 	and.w	r3, r3, #12
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d00c      	beq.n	8000b0c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000af2:	4bcd      	ldr	r3, [pc, #820]	; (8000e28 <HAL_RCC_OscConfig+0x63c>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 030c 	and.w	r3, r3, #12
 8000afa:	2b08      	cmp	r3, #8
 8000afc:	d16d      	bne.n	8000bda <HAL_RCC_OscConfig+0x3ee>
 8000afe:	4bca      	ldr	r3, [pc, #808]	; (8000e28 <HAL_RCC_OscConfig+0x63c>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b0a:	d166      	bne.n	8000bda <HAL_RCC_OscConfig+0x3ee>
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b12:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000b16:	fa93 f3a3 	rbit	r3, r3
 8000b1a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000b1e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b22:	fab3 f383 	clz	r3, r3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	095b      	lsrs	r3, r3, #5
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d102      	bne.n	8000b3c <HAL_RCC_OscConfig+0x350>
 8000b36:	4bbc      	ldr	r3, [pc, #752]	; (8000e28 <HAL_RCC_OscConfig+0x63c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	e013      	b.n	8000b64 <HAL_RCC_OscConfig+0x378>
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b42:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000b46:	fa93 f3a3 	rbit	r3, r3
 8000b4a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000b54:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000b58:	fa93 f3a3 	rbit	r3, r3
 8000b5c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000b60:	4bb1      	ldr	r3, [pc, #708]	; (8000e28 <HAL_RCC_OscConfig+0x63c>)
 8000b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b64:	2202      	movs	r2, #2
 8000b66:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000b6a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000b6e:	fa92 f2a2 	rbit	r2, r2
 8000b72:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000b76:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000b7a:	fab2 f282 	clz	r2, r2
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	f042 0220 	orr.w	r2, r2, #32
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	f002 021f 	and.w	r2, r2, #31
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b90:	4013      	ands	r3, r2
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d007      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x3ba>
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d002      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	f000 bd31 	b.w	8001608 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ba6:	4ba0      	ldr	r3, [pc, #640]	; (8000e28 <HAL_RCC_OscConfig+0x63c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	21f8      	movs	r1, #248	; 0xf8
 8000bb6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bba:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000bbe:	fa91 f1a1 	rbit	r1, r1
 8000bc2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000bc6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000bca:	fab1 f181 	clz	r1, r1
 8000bce:	b2c9      	uxtb	r1, r1
 8000bd0:	408b      	lsls	r3, r1
 8000bd2:	4995      	ldr	r1, [pc, #596]	; (8000e28 <HAL_RCC_OscConfig+0x63c>)
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bd8:	e0f5      	b.n	8000dc6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	f000 8085 	beq.w	8000cf0 <HAL_RCC_OscConfig+0x504>
 8000be6:	2301      	movs	r3, #1
 8000be8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000bf0:	fa93 f3a3 	rbit	r3, r3
 8000bf4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000bf8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bfc:	fab3 f383 	clz	r3, r3
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2301      	movs	r3, #1
 8000c10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c12:	f7ff fcd7 	bl	80005c4 <HAL_GetTick>
 8000c16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c1a:	e00a      	b.n	8000c32 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c1c:	f7ff fcd2 	bl	80005c4 <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d902      	bls.n	8000c32 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	f000 bceb 	b.w	8001608 <HAL_RCC_OscConfig+0xe1c>
 8000c32:	2302      	movs	r3, #2
 8000c34:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c38:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000c3c:	fa93 f3a3 	rbit	r3, r3
 8000c40:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8000c44:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c48:	fab3 f383 	clz	r3, r3
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d102      	bne.n	8000c62 <HAL_RCC_OscConfig+0x476>
 8000c5c:	4b72      	ldr	r3, [pc, #456]	; (8000e28 <HAL_RCC_OscConfig+0x63c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	e013      	b.n	8000c8a <HAL_RCC_OscConfig+0x49e>
 8000c62:	2302      	movs	r3, #2
 8000c64:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c68:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000c6c:	fa93 f3a3 	rbit	r3, r3
 8000c70:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000c74:	2302      	movs	r3, #2
 8000c76:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000c7a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000c7e:	fa93 f3a3 	rbit	r3, r3
 8000c82:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000c86:	4b68      	ldr	r3, [pc, #416]	; (8000e28 <HAL_RCC_OscConfig+0x63c>)
 8000c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000c90:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000c94:	fa92 f2a2 	rbit	r2, r2
 8000c98:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8000c9c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	f042 0220 	orr.w	r2, r2, #32
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	f002 021f 	and.w	r2, r2, #31
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0af      	beq.n	8000c1c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cbc:	4b5a      	ldr	r3, [pc, #360]	; (8000e28 <HAL_RCC_OscConfig+0x63c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	21f8      	movs	r1, #248	; 0xf8
 8000ccc:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8000cd4:	fa91 f1a1 	rbit	r1, r1
 8000cd8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8000cdc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000ce0:	fab1 f181 	clz	r1, r1
 8000ce4:	b2c9      	uxtb	r1, r1
 8000ce6:	408b      	lsls	r3, r1
 8000ce8:	494f      	ldr	r1, [pc, #316]	; (8000e28 <HAL_RCC_OscConfig+0x63c>)
 8000cea:	4313      	orrs	r3, r2
 8000cec:	600b      	str	r3, [r1, #0]
 8000cee:	e06a      	b.n	8000dc6 <HAL_RCC_OscConfig+0x5da>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000cfa:	fa93 f3a3 	rbit	r3, r3
 8000cfe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8000d02:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d06:	fab3 f383 	clz	r3, r3
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	461a      	mov	r2, r3
 8000d18:	2300      	movs	r3, #0
 8000d1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fc52 	bl	80005c4 <HAL_GetTick>
 8000d20:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d24:	e00a      	b.n	8000d3c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d26:	f7ff fc4d 	bl	80005c4 <HAL_GetTick>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d902      	bls.n	8000d3c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8000d36:	2303      	movs	r3, #3
 8000d38:	f000 bc66 	b.w	8001608 <HAL_RCC_OscConfig+0xe1c>
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d46:	fa93 f3a3 	rbit	r3, r3
 8000d4a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8000d4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d52:	fab3 f383 	clz	r3, r3
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	095b      	lsrs	r3, r3, #5
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d102      	bne.n	8000d6c <HAL_RCC_OscConfig+0x580>
 8000d66:	4b30      	ldr	r3, [pc, #192]	; (8000e28 <HAL_RCC_OscConfig+0x63c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	e013      	b.n	8000d94 <HAL_RCC_OscConfig+0x5a8>
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d76:	fa93 f3a3 	rbit	r3, r3
 8000d7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000d84:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d88:	fa93 f3a3 	rbit	r3, r3
 8000d8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000d90:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <HAL_RCC_OscConfig+0x63c>)
 8000d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d94:	2202      	movs	r2, #2
 8000d96:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000d9a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000d9e:	fa92 f2a2 	rbit	r2, r2
 8000da2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8000da6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000daa:	fab2 f282 	clz	r2, r2
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	f042 0220 	orr.w	r2, r2, #32
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	f002 021f 	and.w	r2, r2, #31
 8000dba:	2101      	movs	r1, #1
 8000dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1af      	bne.n	8000d26 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0308 	and.w	r3, r3, #8
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f000 80da 	beq.w	8000f8a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d069      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x6c8>
 8000de0:	2301      	movs	r3, #1
 8000de2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000dea:	fa93 f3a3 	rbit	r3, r3
 8000dee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8000df2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000df6:	fab3 f383 	clz	r3, r3
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_RCC_OscConfig+0x640>)
 8000e00:	4413      	add	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	461a      	mov	r2, r3
 8000e06:	2301      	movs	r3, #1
 8000e08:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e0a:	f7ff fbdb 	bl	80005c4 <HAL_GetTick>
 8000e0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e12:	e00d      	b.n	8000e30 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e14:	f7ff fbd6 	bl	80005c4 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d905      	bls.n	8000e30 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8000e24:	2303      	movs	r3, #3
 8000e26:	e3ef      	b.n	8001608 <HAL_RCC_OscConfig+0xe1c>
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	10908120 	.word	0x10908120
 8000e30:	2302      	movs	r3, #2
 8000e32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e3a:	fa93 f2a3 	rbit	r2, r3
 8000e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000e48:	2202      	movs	r2, #2
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	fa93 f2a3 	rbit	r2, r3
 8000e56:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e60:	2202      	movs	r2, #2
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	fa93 f2a3 	rbit	r2, r3
 8000e6e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000e72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e74:	4ba4      	ldr	r3, [pc, #656]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 8000e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e78:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	6019      	str	r1, [r3, #0]
 8000e80:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	fa93 f1a3 	rbit	r1, r3
 8000e8a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e8e:	6019      	str	r1, [r3, #0]
  return result;
 8000e90:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	fab3 f383 	clz	r3, r3
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	f003 031f 	and.w	r3, r3, #31
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	4013      	ands	r3, r2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0b0      	beq.n	8000e14 <HAL_RCC_OscConfig+0x628>
 8000eb2:	e06a      	b.n	8000f8a <HAL_RCC_OscConfig+0x79e>
 8000eb4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000eb8:	2201      	movs	r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	fa93 f2a3 	rbit	r2, r3
 8000ec6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000eca:	601a      	str	r2, [r3, #0]
  return result;
 8000ecc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000ed0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ed2:	fab3 f383 	clz	r3, r3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b8c      	ldr	r3, [pc, #560]	; (800110c <HAL_RCC_OscConfig+0x920>)
 8000edc:	4413      	add	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee6:	f7ff fb6d 	bl	80005c4 <HAL_GetTick>
 8000eea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eee:	e009      	b.n	8000f04 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ef0:	f7ff fb68 	bl	80005c4 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e381      	b.n	8001608 <HAL_RCC_OscConfig+0xe1c>
 8000f04:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f08:	2202      	movs	r2, #2
 8000f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	fa93 f2a3 	rbit	r2, r3
 8000f16:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f20:	2202      	movs	r2, #2
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	fa93 f2a3 	rbit	r2, r3
 8000f2e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f38:	2202      	movs	r2, #2
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	fa93 f2a3 	rbit	r2, r3
 8000f46:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000f4a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f4c:	4b6e      	ldr	r3, [pc, #440]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 8000f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f54:	2102      	movs	r1, #2
 8000f56:	6019      	str	r1, [r3, #0]
 8000f58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	fa93 f1a3 	rbit	r1, r3
 8000f62:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f66:	6019      	str	r1, [r3, #0]
  return result;
 8000f68:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	fab3 f383 	clz	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f003 031f 	and.w	r3, r3, #31
 8000f7e:	2101      	movs	r1, #1
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	4013      	ands	r3, r2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1b2      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 8157 	beq.w	8001248 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fa0:	4b59      	ldr	r3, [pc, #356]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d112      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fac:	4b56      	ldr	r3, [pc, #344]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	4a55      	ldr	r2, [pc, #340]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 8000fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	61d3      	str	r3, [r2, #28]
 8000fb8:	4b53      	ldr	r3, [pc, #332]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd2:	4b4f      	ldr	r3, [pc, #316]	; (8001110 <HAL_RCC_OscConfig+0x924>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d11a      	bne.n	8001014 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fde:	4b4c      	ldr	r3, [pc, #304]	; (8001110 <HAL_RCC_OscConfig+0x924>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a4b      	ldr	r2, [pc, #300]	; (8001110 <HAL_RCC_OscConfig+0x924>)
 8000fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fea:	f7ff faeb 	bl	80005c4 <HAL_GetTick>
 8000fee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff2:	e009      	b.n	8001008 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ff4:	f7ff fae6 	bl	80005c4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b64      	cmp	r3, #100	; 0x64
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e2ff      	b.n	8001608 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001008:	4b41      	ldr	r3, [pc, #260]	; (8001110 <HAL_RCC_OscConfig+0x924>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0ef      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d106      	bne.n	800102c <HAL_RCC_OscConfig+0x840>
 800101e:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	4a39      	ldr	r2, [pc, #228]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6213      	str	r3, [r2, #32]
 800102a:	e02f      	b.n	800108c <HAL_RCC_OscConfig+0x8a0>
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10c      	bne.n	8001050 <HAL_RCC_OscConfig+0x864>
 8001036:	4b34      	ldr	r3, [pc, #208]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	4a33      	ldr	r2, [pc, #204]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 800103c:	f023 0301 	bic.w	r3, r3, #1
 8001040:	6213      	str	r3, [r2, #32]
 8001042:	4b31      	ldr	r3, [pc, #196]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	4a30      	ldr	r2, [pc, #192]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 8001048:	f023 0304 	bic.w	r3, r3, #4
 800104c:	6213      	str	r3, [r2, #32]
 800104e:	e01d      	b.n	800108c <HAL_RCC_OscConfig+0x8a0>
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	2b05      	cmp	r3, #5
 8001058:	d10c      	bne.n	8001074 <HAL_RCC_OscConfig+0x888>
 800105a:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	4a2a      	ldr	r2, [pc, #168]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	6213      	str	r3, [r2, #32]
 8001066:	4b28      	ldr	r3, [pc, #160]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	4a27      	ldr	r2, [pc, #156]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6213      	str	r3, [r2, #32]
 8001072:	e00b      	b.n	800108c <HAL_RCC_OscConfig+0x8a0>
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	4a23      	ldr	r2, [pc, #140]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 800107a:	f023 0301 	bic.w	r3, r3, #1
 800107e:	6213      	str	r3, [r2, #32]
 8001080:	4b21      	ldr	r3, [pc, #132]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	4a20      	ldr	r2, [pc, #128]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 8001086:	f023 0304 	bic.w	r3, r3, #4
 800108a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d06a      	beq.n	800116c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001096:	f7ff fa95 	bl	80005c4 <HAL_GetTick>
 800109a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800109e:	e00b      	b.n	80010b8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a0:	f7ff fa90 	bl	80005c4 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e2a7      	b.n	8001608 <HAL_RCC_OscConfig+0xe1c>
 80010b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010bc:	2202      	movs	r2, #2
 80010be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	fa93 f2a3 	rbit	r2, r3
 80010ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010d4:	2202      	movs	r2, #2
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	fa93 f2a3 	rbit	r2, r3
 80010e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010e6:	601a      	str	r2, [r3, #0]
  return result;
 80010e8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ee:	fab3 f383 	clz	r3, r3
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	095b      	lsrs	r3, r3, #5
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d108      	bne.n	8001114 <HAL_RCC_OscConfig+0x928>
 8001102:	4b01      	ldr	r3, [pc, #4]	; (8001108 <HAL_RCC_OscConfig+0x91c>)
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	e013      	b.n	8001130 <HAL_RCC_OscConfig+0x944>
 8001108:	40021000 	.word	0x40021000
 800110c:	10908120 	.word	0x10908120
 8001110:	40007000 	.word	0x40007000
 8001114:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001118:	2202      	movs	r2, #2
 800111a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	fa93 f2a3 	rbit	r2, r3
 8001126:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	4bc0      	ldr	r3, [pc, #768]	; (8001430 <HAL_RCC_OscConfig+0xc44>)
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001134:	2102      	movs	r1, #2
 8001136:	6011      	str	r1, [r2, #0]
 8001138:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	fa92 f1a2 	rbit	r1, r2
 8001142:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001146:	6011      	str	r1, [r2, #0]
  return result;
 8001148:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	fab2 f282 	clz	r2, r2
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	f002 021f 	and.w	r2, r2, #31
 800115e:	2101      	movs	r1, #1
 8001160:	fa01 f202 	lsl.w	r2, r1, r2
 8001164:	4013      	ands	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d09a      	beq.n	80010a0 <HAL_RCC_OscConfig+0x8b4>
 800116a:	e063      	b.n	8001234 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116c:	f7ff fa2a 	bl	80005c4 <HAL_GetTick>
 8001170:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001174:	e00b      	b.n	800118e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001176:	f7ff fa25 	bl	80005c4 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	f241 3288 	movw	r2, #5000	; 0x1388
 8001186:	4293      	cmp	r3, r2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e23c      	b.n	8001608 <HAL_RCC_OscConfig+0xe1c>
 800118e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001192:	2202      	movs	r2, #2
 8001194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001196:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	fa93 f2a3 	rbit	r2, r3
 80011a0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011aa:	2202      	movs	r2, #2
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	fa93 f2a3 	rbit	r2, r3
 80011b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011bc:	601a      	str	r2, [r3, #0]
  return result;
 80011be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c4:	fab3 f383 	clz	r3, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d102      	bne.n	80011de <HAL_RCC_OscConfig+0x9f2>
 80011d8:	4b95      	ldr	r3, [pc, #596]	; (8001430 <HAL_RCC_OscConfig+0xc44>)
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	e00d      	b.n	80011fa <HAL_RCC_OscConfig+0xa0e>
 80011de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011e2:	2202      	movs	r2, #2
 80011e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	fa93 f2a3 	rbit	r2, r3
 80011f0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	4b8e      	ldr	r3, [pc, #568]	; (8001430 <HAL_RCC_OscConfig+0xc44>)
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011fe:	2102      	movs	r1, #2
 8001200:	6011      	str	r1, [r2, #0]
 8001202:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001206:	6812      	ldr	r2, [r2, #0]
 8001208:	fa92 f1a2 	rbit	r1, r2
 800120c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001210:	6011      	str	r1, [r2, #0]
  return result;
 8001212:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	fab2 f282 	clz	r2, r2
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	f002 021f 	and.w	r2, r2, #31
 8001228:	2101      	movs	r1, #1
 800122a:	fa01 f202 	lsl.w	r2, r1, r2
 800122e:	4013      	ands	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1a0      	bne.n	8001176 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001234:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001238:	2b01      	cmp	r3, #1
 800123a:	d105      	bne.n	8001248 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800123c:	4b7c      	ldr	r3, [pc, #496]	; (8001430 <HAL_RCC_OscConfig+0xc44>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	4a7b      	ldr	r2, [pc, #492]	; (8001430 <HAL_RCC_OscConfig+0xc44>)
 8001242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001246:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 81d9 	beq.w	8001606 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001254:	4b76      	ldr	r3, [pc, #472]	; (8001430 <HAL_RCC_OscConfig+0xc44>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b08      	cmp	r3, #8
 800125e:	f000 81a6 	beq.w	80015ae <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	2b02      	cmp	r3, #2
 800126a:	f040 811e 	bne.w	80014aa <HAL_RCC_OscConfig+0xcbe>
 800126e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001272:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001276:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001278:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	fa93 f2a3 	rbit	r2, r3
 8001282:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001286:	601a      	str	r2, [r3, #0]
  return result;
 8001288:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800128c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800128e:	fab3 f383 	clz	r3, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001298:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	461a      	mov	r2, r3
 80012a0:	2300      	movs	r3, #0
 80012a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7ff f98e 	bl	80005c4 <HAL_GetTick>
 80012a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ac:	e009      	b.n	80012c2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ae:	f7ff f989 	bl	80005c4 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e1a2      	b.n	8001608 <HAL_RCC_OscConfig+0xe1c>
 80012c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	fa93 f2a3 	rbit	r2, r3
 80012d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012da:	601a      	str	r2, [r3, #0]
  return result;
 80012dc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e2:	fab3 f383 	clz	r3, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	095b      	lsrs	r3, r3, #5
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d102      	bne.n	80012fc <HAL_RCC_OscConfig+0xb10>
 80012f6:	4b4e      	ldr	r3, [pc, #312]	; (8001430 <HAL_RCC_OscConfig+0xc44>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	e01b      	b.n	8001334 <HAL_RCC_OscConfig+0xb48>
 80012fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001300:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	fa93 f2a3 	rbit	r2, r3
 8001310:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800131a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	fa93 f2a3 	rbit	r2, r3
 800132a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	4b3f      	ldr	r3, [pc, #252]	; (8001430 <HAL_RCC_OscConfig+0xc44>)
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001338:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800133c:	6011      	str	r1, [r2, #0]
 800133e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	fa92 f1a2 	rbit	r1, r2
 8001348:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800134c:	6011      	str	r1, [r2, #0]
  return result;
 800134e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	fab2 f282 	clz	r2, r2
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	f042 0220 	orr.w	r2, r2, #32
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	f002 021f 	and.w	r2, r2, #31
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f202 	lsl.w	r2, r1, r2
 800136a:	4013      	ands	r3, r2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d19e      	bne.n	80012ae <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001370:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <HAL_RCC_OscConfig+0xc44>)
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	f023 020f 	bic.w	r2, r3, #15
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	492c      	ldr	r1, [pc, #176]	; (8001430 <HAL_RCC_OscConfig+0xc44>)
 8001380:	4313      	orrs	r3, r2
 8001382:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001384:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <HAL_RCC_OscConfig+0xc44>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6a19      	ldr	r1, [r3, #32]
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	430b      	orrs	r3, r1
 800139a:	4925      	ldr	r1, [pc, #148]	; (8001430 <HAL_RCC_OscConfig+0xc44>)
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
 80013a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	fa93 f2a3 	rbit	r2, r3
 80013b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013b8:	601a      	str	r2, [r3, #0]
  return result;
 80013ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013be:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c0:	fab3 f383 	clz	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	461a      	mov	r2, r3
 80013d2:	2301      	movs	r3, #1
 80013d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff f8f5 	bl	80005c4 <HAL_GetTick>
 80013da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013de:	e009      	b.n	80013f4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff f8f0 	bl	80005c4 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e109      	b.n	8001608 <HAL_RCC_OscConfig+0xe1c>
 80013f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	fa93 f2a3 	rbit	r2, r3
 8001408:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800140c:	601a      	str	r2, [r3, #0]
  return result;
 800140e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001412:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001414:	fab3 f383 	clz	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b01      	cmp	r3, #1
 8001426:	d105      	bne.n	8001434 <HAL_RCC_OscConfig+0xc48>
 8001428:	4b01      	ldr	r3, [pc, #4]	; (8001430 <HAL_RCC_OscConfig+0xc44>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	e01e      	b.n	800146c <HAL_RCC_OscConfig+0xc80>
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800143c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	fa93 f2a3 	rbit	r2, r3
 8001448:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001452:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	fa93 f2a3 	rbit	r2, r3
 8001462:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	4b6a      	ldr	r3, [pc, #424]	; (8001614 <HAL_RCC_OscConfig+0xe28>)
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001470:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001474:	6011      	str	r1, [r2, #0]
 8001476:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	fa92 f1a2 	rbit	r1, r2
 8001480:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001484:	6011      	str	r1, [r2, #0]
  return result;
 8001486:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	fab2 f282 	clz	r2, r2
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	f042 0220 	orr.w	r2, r2, #32
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	f002 021f 	and.w	r2, r2, #31
 800149c:	2101      	movs	r1, #1
 800149e:	fa01 f202 	lsl.w	r2, r1, r2
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d09b      	beq.n	80013e0 <HAL_RCC_OscConfig+0xbf4>
 80014a8:	e0ad      	b.n	8001606 <HAL_RCC_OscConfig+0xe1a>
 80014aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	fa93 f2a3 	rbit	r2, r3
 80014be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c2:	601a      	str	r2, [r3, #0]
  return result;
 80014c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	461a      	mov	r2, r3
 80014dc:	2300      	movs	r3, #0
 80014de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff f870 	bl	80005c4 <HAL_GetTick>
 80014e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e8:	e009      	b.n	80014fe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ea:	f7ff f86b 	bl	80005c4 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e084      	b.n	8001608 <HAL_RCC_OscConfig+0xe1c>
 80014fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001502:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	fa93 f2a3 	rbit	r2, r3
 8001512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001516:	601a      	str	r2, [r3, #0]
  return result;
 8001518:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800151c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151e:	fab3 f383 	clz	r3, r3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	095b      	lsrs	r3, r3, #5
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b01      	cmp	r3, #1
 8001530:	d102      	bne.n	8001538 <HAL_RCC_OscConfig+0xd4c>
 8001532:	4b38      	ldr	r3, [pc, #224]	; (8001614 <HAL_RCC_OscConfig+0xe28>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	e01b      	b.n	8001570 <HAL_RCC_OscConfig+0xd84>
 8001538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	fa93 f2a3 	rbit	r2, r3
 800154c:	f107 0320 	add.w	r3, r7, #32
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	fa93 f2a3 	rbit	r2, r3
 8001566:	f107 0318 	add.w	r3, r7, #24
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	4b29      	ldr	r3, [pc, #164]	; (8001614 <HAL_RCC_OscConfig+0xe28>)
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	f107 0214 	add.w	r2, r7, #20
 8001574:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001578:	6011      	str	r1, [r2, #0]
 800157a:	f107 0214 	add.w	r2, r7, #20
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	fa92 f1a2 	rbit	r1, r2
 8001584:	f107 0210 	add.w	r2, r7, #16
 8001588:	6011      	str	r1, [r2, #0]
  return result;
 800158a:	f107 0210 	add.w	r2, r7, #16
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	fab2 f282 	clz	r2, r2
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	f042 0220 	orr.w	r2, r2, #32
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	f002 021f 	and.w	r2, r2, #31
 80015a0:	2101      	movs	r1, #1
 80015a2:	fa01 f202 	lsl.w	r2, r1, r2
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d19e      	bne.n	80014ea <HAL_RCC_OscConfig+0xcfe>
 80015ac:	e02b      	b.n	8001606 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e025      	b.n	8001608 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_RCC_OscConfig+0xe28>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_RCC_OscConfig+0xe28>)
 80015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80015cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80015d0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d111      	bne.n	8001602 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80015de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80015e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d108      	bne.n	8001602 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80015f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015f4:	f003 020f 	and.w	r2, r3, #15
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80015fe:	429a      	cmp	r2, r3
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40021000 	.word	0x40021000

08001618 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b09e      	sub	sp, #120	; 0x78
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e162      	b.n	80018f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001630:	4b90      	ldr	r3, [pc, #576]	; (8001874 <HAL_RCC_ClockConfig+0x25c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d910      	bls.n	8001660 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163e:	4b8d      	ldr	r3, [pc, #564]	; (8001874 <HAL_RCC_ClockConfig+0x25c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 0207 	bic.w	r2, r3, #7
 8001646:	498b      	ldr	r1, [pc, #556]	; (8001874 <HAL_RCC_ClockConfig+0x25c>)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	4313      	orrs	r3, r2
 800164c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800164e:	4b89      	ldr	r3, [pc, #548]	; (8001874 <HAL_RCC_ClockConfig+0x25c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d001      	beq.n	8001660 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e14a      	b.n	80018f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d008      	beq.n	800167e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800166c:	4b82      	ldr	r3, [pc, #520]	; (8001878 <HAL_RCC_ClockConfig+0x260>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	497f      	ldr	r1, [pc, #508]	; (8001878 <HAL_RCC_ClockConfig+0x260>)
 800167a:	4313      	orrs	r3, r2
 800167c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80dc 	beq.w	8001844 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d13c      	bne.n	800170e <HAL_RCC_ClockConfig+0xf6>
 8001694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001698:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800169c:	fa93 f3a3 	rbit	r3, r3
 80016a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80016a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a4:	fab3 f383 	clz	r3, r3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d102      	bne.n	80016be <HAL_RCC_ClockConfig+0xa6>
 80016b8:	4b6f      	ldr	r3, [pc, #444]	; (8001878 <HAL_RCC_ClockConfig+0x260>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	e00f      	b.n	80016de <HAL_RCC_ClockConfig+0xc6>
 80016be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016c6:	fa93 f3a3 	rbit	r3, r3
 80016ca:	667b      	str	r3, [r7, #100]	; 0x64
 80016cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d0:	663b      	str	r3, [r7, #96]	; 0x60
 80016d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016d4:	fa93 f3a3 	rbit	r3, r3
 80016d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80016da:	4b67      	ldr	r3, [pc, #412]	; (8001878 <HAL_RCC_ClockConfig+0x260>)
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80016e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016e6:	fa92 f2a2 	rbit	r2, r2
 80016ea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80016ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016ee:	fab2 f282 	clz	r2, r2
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	f042 0220 	orr.w	r2, r2, #32
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	f002 021f 	and.w	r2, r2, #31
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f202 	lsl.w	r2, r1, r2
 8001704:	4013      	ands	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d17b      	bne.n	8001802 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e0f3      	b.n	80018f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d13c      	bne.n	8001790 <HAL_RCC_ClockConfig+0x178>
 8001716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800171a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001726:	fab3 f383 	clz	r3, r3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	095b      	lsrs	r3, r3, #5
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b01      	cmp	r3, #1
 8001738:	d102      	bne.n	8001740 <HAL_RCC_ClockConfig+0x128>
 800173a:	4b4f      	ldr	r3, [pc, #316]	; (8001878 <HAL_RCC_ClockConfig+0x260>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	e00f      	b.n	8001760 <HAL_RCC_ClockConfig+0x148>
 8001740:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001744:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	647b      	str	r3, [r7, #68]	; 0x44
 800174e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001752:	643b      	str	r3, [r7, #64]	; 0x40
 8001754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001756:	fa93 f3a3 	rbit	r3, r3
 800175a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800175c:	4b46      	ldr	r3, [pc, #280]	; (8001878 <HAL_RCC_ClockConfig+0x260>)
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001764:	63ba      	str	r2, [r7, #56]	; 0x38
 8001766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001768:	fa92 f2a2 	rbit	r2, r2
 800176c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800176e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001770:	fab2 f282 	clz	r2, r2
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	f042 0220 	orr.w	r2, r2, #32
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	f002 021f 	and.w	r2, r2, #31
 8001780:	2101      	movs	r1, #1
 8001782:	fa01 f202 	lsl.w	r2, r1, r2
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d13a      	bne.n	8001802 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0b2      	b.n	80018f6 <HAL_RCC_ClockConfig+0x2de>
 8001790:	2302      	movs	r3, #2
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179e:	fab3 f383 	clz	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	095b      	lsrs	r3, r3, #5
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d102      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x1a0>
 80017b2:	4b31      	ldr	r3, [pc, #196]	; (8001878 <HAL_RCC_ClockConfig+0x260>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	e00d      	b.n	80017d4 <HAL_RCC_ClockConfig+0x1bc>
 80017b8:	2302      	movs	r3, #2
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
 80017c4:	2302      	movs	r3, #2
 80017c6:	623b      	str	r3, [r7, #32]
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	fa93 f3a3 	rbit	r3, r3
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	4b29      	ldr	r3, [pc, #164]	; (8001878 <HAL_RCC_ClockConfig+0x260>)
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	2202      	movs	r2, #2
 80017d6:	61ba      	str	r2, [r7, #24]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	fa92 f2a2 	rbit	r2, r2
 80017de:	617a      	str	r2, [r7, #20]
  return result;
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	fab2 f282 	clz	r2, r2
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	f042 0220 	orr.w	r2, r2, #32
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	f002 021f 	and.w	r2, r2, #31
 80017f2:	2101      	movs	r1, #1
 80017f4:	fa01 f202 	lsl.w	r2, r1, r2
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e079      	b.n	80018f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_RCC_ClockConfig+0x260>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f023 0203 	bic.w	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	491a      	ldr	r1, [pc, #104]	; (8001878 <HAL_RCC_ClockConfig+0x260>)
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001814:	f7fe fed6 	bl	80005c4 <HAL_GetTick>
 8001818:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	e00a      	b.n	8001832 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181c:	f7fe fed2 	bl	80005c4 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	; 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e061      	b.n	80018f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_RCC_ClockConfig+0x260>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 020c 	and.w	r2, r3, #12
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	429a      	cmp	r2, r3
 8001842:	d1eb      	bne.n	800181c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_RCC_ClockConfig+0x25c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d214      	bcs.n	800187c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_RCC_ClockConfig+0x25c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 0207 	bic.w	r2, r3, #7
 800185a:	4906      	ldr	r1, [pc, #24]	; (8001874 <HAL_RCC_ClockConfig+0x25c>)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <HAL_RCC_ClockConfig+0x25c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d005      	beq.n	800187c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e040      	b.n	80018f6 <HAL_RCC_ClockConfig+0x2de>
 8001874:	40022000 	.word	0x40022000
 8001878:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_RCC_ClockConfig+0x2e8>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	491a      	ldr	r1, [pc, #104]	; (8001900 <HAL_RCC_ClockConfig+0x2e8>)
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <HAL_RCC_ClockConfig+0x2e8>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4912      	ldr	r1, [pc, #72]	; (8001900 <HAL_RCC_ClockConfig+0x2e8>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018ba:	f000 f829 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 80018be:	4601      	mov	r1, r0
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_RCC_ClockConfig+0x2e8>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018c8:	22f0      	movs	r2, #240	; 0xf0
 80018ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	fa92 f2a2 	rbit	r2, r2
 80018d2:	60fa      	str	r2, [r7, #12]
  return result;
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	fab2 f282 	clz	r2, r2
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	40d3      	lsrs	r3, r2
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <HAL_RCC_ClockConfig+0x2ec>)
 80018e0:	5cd3      	ldrb	r3, [r2, r3]
 80018e2:	fa21 f303 	lsr.w	r3, r1, r3
 80018e6:	4a08      	ldr	r2, [pc, #32]	; (8001908 <HAL_RCC_ClockConfig+0x2f0>)
 80018e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <HAL_RCC_ClockConfig+0x2f4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fe24 	bl	800053c <HAL_InitTick>
  
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3778      	adds	r7, #120	; 0x78
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	080024f4 	.word	0x080024f4
 8001908:	20000000 	.word	0x20000000
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001910:	b480      	push	{r7}
 8001912:	b08b      	sub	sp, #44	; 0x2c
 8001914:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001926:	2300      	movs	r3, #0
 8001928:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800192a:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b04      	cmp	r3, #4
 8001938:	d002      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x30>
 800193a:	2b08      	cmp	r3, #8
 800193c:	d003      	beq.n	8001946 <HAL_RCC_GetSysClockFreq+0x36>
 800193e:	e03f      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001942:	623b      	str	r3, [r7, #32]
      break;
 8001944:	e03f      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800194c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001950:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	fa92 f2a2 	rbit	r2, r2
 8001958:	607a      	str	r2, [r7, #4]
  return result;
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	fab2 f282 	clz	r2, r2
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	40d3      	lsrs	r3, r2
 8001964:	4a1d      	ldr	r2, [pc, #116]	; (80019dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8001966:	5cd3      	ldrb	r3, [r2, r3]
 8001968:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	220f      	movs	r2, #15
 8001974:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	fa92 f2a2 	rbit	r2, r2
 800197c:	60fa      	str	r2, [r7, #12]
  return result;
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	fab2 f282 	clz	r2, r2
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	40d3      	lsrs	r3, r2
 8001988:	4a15      	ldr	r2, [pc, #84]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800198a:	5cd3      	ldrb	r3, [r2, r3]
 800198c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001998:	4a0f      	ldr	r2, [pc, #60]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	fbb2 f2f3 	udiv	r2, r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fb02 f303 	mul.w	r3, r2, r3
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
 80019a8:	e007      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	fb02 f303 	mul.w	r3, r2, r3
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	623b      	str	r3, [r7, #32]
      break;
 80019be:	e002      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019c2:	623b      	str	r3, [r7, #32]
      break;
 80019c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c6:	6a3b      	ldr	r3, [r7, #32]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	372c      	adds	r7, #44	; 0x2c
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	40021000 	.word	0x40021000
 80019d8:	007a1200 	.word	0x007a1200
 80019dc:	08002504 	.word	0x08002504
 80019e0:	08002514 	.word	0x08002514

080019e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b092      	sub	sp, #72	; 0x48
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 80d4 	beq.w	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a08:	4b4e      	ldr	r3, [pc, #312]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10e      	bne.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	4b4b      	ldr	r3, [pc, #300]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	4a4a      	ldr	r2, [pc, #296]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	61d3      	str	r3, [r2, #28]
 8001a20:	4b48      	ldr	r3, [pc, #288]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a32:	4b45      	ldr	r3, [pc, #276]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d118      	bne.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a3e:	4b42      	ldr	r3, [pc, #264]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a41      	ldr	r2, [pc, #260]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4a:	f7fe fdbb 	bl	80005c4 <HAL_GetTick>
 8001a4e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	e008      	b.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a52:	f7fe fdb7 	bl	80005c4 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b64      	cmp	r3, #100	; 0x64
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e1d6      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a70:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a78:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 8084 	beq.w	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d07c      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a90:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2301      	movs	r3, #1
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	461a      	mov	r2, r3
 8001ade:	2300      	movs	r3, #0
 8001ae0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ae2:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ae6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d04b      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af2:	f7fe fd67 	bl	80005c4 <HAL_GetTick>
 8001af6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af8:	e00a      	b.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afa:	f7fe fd63 	bl	80005c4 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e180      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8001b10:	2302      	movs	r3, #2
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b16:	fa93 f3a3 	rbit	r3, r3
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	623b      	str	r3, [r7, #32]
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	61fb      	str	r3, [r7, #28]
  return result;
 8001b28:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	095b      	lsrs	r3, r3, #5
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d108      	bne.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001b3e:	4b01      	ldr	r3, [pc, #4]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	e00d      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	10908100 	.word	0x10908100
 8001b50:	2302      	movs	r3, #2
 8001b52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa93 f3a3 	rbit	r3, r3
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	4ba0      	ldr	r3, [pc, #640]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	2202      	movs	r2, #2
 8001b62:	613a      	str	r2, [r7, #16]
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	fa92 f2a2 	rbit	r2, r2
 8001b6a:	60fa      	str	r2, [r7, #12]
  return result;
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	fab2 f282 	clz	r2, r2
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	f002 021f 	and.w	r2, r2, #31
 8001b7e:	2101      	movs	r1, #1
 8001b80:	fa01 f202 	lsl.w	r2, r1, r2
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0b7      	beq.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001b8a:	4b95      	ldr	r3, [pc, #596]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4992      	ldr	r1, [pc, #584]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d105      	bne.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba4:	4b8e      	ldr	r3, [pc, #568]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	4a8d      	ldr	r2, [pc, #564]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bbc:	4b88      	ldr	r3, [pc, #544]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	f023 0203 	bic.w	r2, r3, #3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4985      	ldr	r1, [pc, #532]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d008      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bda:	4b81      	ldr	r3, [pc, #516]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	497e      	ldr	r1, [pc, #504]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001bf8:	4b79      	ldr	r3, [pc, #484]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	4976      	ldr	r1, [pc, #472]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0320 	and.w	r3, r3, #32
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d008      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c16:	4b72      	ldr	r3, [pc, #456]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f023 0210 	bic.w	r2, r3, #16
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	496f      	ldr	r1, [pc, #444]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001c34:	4b6a      	ldr	r3, [pc, #424]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c40:	4967      	ldr	r1, [pc, #412]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d008      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c52:	4b63      	ldr	r3, [pc, #396]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f023 0220 	bic.w	r2, r3, #32
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4960      	ldr	r1, [pc, #384]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c70:	4b5b      	ldr	r3, [pc, #364]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	4958      	ldr	r1, [pc, #352]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c8e:	4b54      	ldr	r3, [pc, #336]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4951      	ldr	r1, [pc, #324]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0310 	and.w	r3, r3, #16
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001cac:	4b4c      	ldr	r3, [pc, #304]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	4949      	ldr	r1, [pc, #292]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001cca:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4942      	ldr	r1, [pc, #264]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001ce8:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	493a      	ldr	r1, [pc, #232]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d008      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001d06:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	4933      	ldr	r1, [pc, #204]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001d24:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d30:	492b      	ldr	r1, [pc, #172]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d008      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001d42:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4924      	ldr	r1, [pc, #144]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001d60:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6c:	491c      	ldr	r1, [pc, #112]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d008      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001d7e:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8a:	4915      	ldr	r1, [pc, #84]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001d9c:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	490d      	ldr	r1, [pc, #52]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d008      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc6:	4906      	ldr	r1, [pc, #24]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00c      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001dd8:	4b01      	ldr	r3, [pc, #4]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	e002      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dec:	490b      	ldr	r1, [pc, #44]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d008      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e0a:	4904      	ldr	r1, [pc, #16]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3748      	adds	r7, #72	; 0x48
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000

08001e20 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e083      	b.n	8001f3a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7f5b      	ldrb	r3, [r3, #29]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe fad8 	bl	80003f8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	22ca      	movs	r2, #202	; 0xca
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2253      	movs	r2, #83	; 0x53
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 faa8 	bl	80023b4 <RTC_EnterInitMode>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d008      	beq.n	8001e7c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	22ff      	movs	r2, #255	; 0xff
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2204      	movs	r2, #4
 8001e76:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e05e      	b.n	8001f3a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e8e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6899      	ldr	r1, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68d2      	ldr	r2, [r2, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6919      	ldr	r1, [r3, #16]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	041a      	lsls	r2, r3, #16
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eda:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 0320 	and.w	r3, r3, #32
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10e      	bne.n	8001f08 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 fa3a 	bl	8002364 <HAL_RTC_WaitForSynchro>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	22ff      	movs	r2, #255	; 0xff
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2204      	movs	r2, #4
 8001f02:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e018      	b.n	8001f3a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	22ff      	movs	r2, #255	; 0xff
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001f38:	2300      	movs	r3, #0
  }
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f42:	b590      	push	{r4, r7, lr}
 8001f44:	b087      	sub	sp, #28
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	7f1b      	ldrb	r3, [r3, #28]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_RTC_SetTime+0x1c>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e0aa      	b.n	80020b4 <HAL_RTC_SetTime+0x172>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2202      	movs	r2, #2
 8001f68:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d126      	bne.n	8001fbe <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2200      	movs	r2, #0
 8001f82:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 fa3f 	bl	800240c <RTC_ByteToBcd2>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	785b      	ldrb	r3, [r3, #1]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 fa38 	bl	800240c <RTC_ByteToBcd2>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fa0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	789b      	ldrb	r3, [r3, #2]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fa30 	bl	800240c <RTC_ByteToBcd2>
 8001fac:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001fae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	78db      	ldrb	r3, [r3, #3]
 8001fb6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	e018      	b.n	8001ff0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	785b      	ldrb	r3, [r3, #1]
 8001fdc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fde:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001fe4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	78db      	ldrb	r3, [r3, #3]
 8001fea:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	22ca      	movs	r2, #202	; 0xca
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2253      	movs	r2, #83	; 0x53
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f9d7 	bl	80023b4 <RTC_EnterInitMode>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00b      	beq.n	8002024 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	22ff      	movs	r2, #255	; 0xff
 8002012:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2204      	movs	r2, #4
 8002018:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e047      	b.n	80020b4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800202e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002032:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002042:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6899      	ldr	r1, [r3, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	431a      	orrs	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800206a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d111      	bne.n	800209e <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f972 	bl	8002364 <HAL_RTC_WaitForSynchro>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	22ff      	movs	r2, #255	; 0xff
 800208c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2204      	movs	r2, #4
 8002092:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e00a      	b.n	80020b4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	22ff      	movs	r2, #255	; 0xff
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80020b2:	2300      	movs	r3, #0
  }
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd90      	pop	{r4, r7, pc}

080020bc <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80020ee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80020f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	0c1b      	lsrs	r3, r3, #16
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800210e:	b2da      	uxtb	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800211c:	b2da      	uxtb	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	0c1b      	lsrs	r3, r3, #16
 8002126:	b2db      	uxtb	r3, r3
 8002128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212c:	b2da      	uxtb	r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d11a      	bne.n	800216e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f000 f983 	bl	8002448 <RTC_Bcd2ToByte>
 8002142:	4603      	mov	r3, r0
 8002144:	461a      	mov	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	785b      	ldrb	r3, [r3, #1]
 800214e:	4618      	mov	r0, r3
 8002150:	f000 f97a 	bl	8002448 <RTC_Bcd2ToByte>
 8002154:	4603      	mov	r3, r0
 8002156:	461a      	mov	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	789b      	ldrb	r3, [r3, #2]
 8002160:	4618      	mov	r0, r3
 8002162:	f000 f971 	bl	8002448 <RTC_Bcd2ToByte>
 8002166:	4603      	mov	r3, r0
 8002168:	461a      	mov	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	7f1b      	ldrb	r3, [r3, #28]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_RTC_SetDate+0x1c>
 8002190:	2302      	movs	r3, #2
 8002192:	e094      	b.n	80022be <HAL_RTC_SetDate+0x146>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2202      	movs	r2, #2
 800219e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10e      	bne.n	80021c4 <HAL_RTC_SetDate+0x4c>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	785b      	ldrb	r3, [r3, #1]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d008      	beq.n	80021c4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	785b      	ldrb	r3, [r3, #1]
 80021b6:	f023 0310 	bic.w	r3, r3, #16
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	330a      	adds	r3, #10
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d11c      	bne.n	8002204 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	78db      	ldrb	r3, [r3, #3]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 f91c 	bl	800240c <RTC_ByteToBcd2>
 80021d4:	4603      	mov	r3, r0
 80021d6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	785b      	ldrb	r3, [r3, #1]
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 f915 	bl	800240c <RTC_ByteToBcd2>
 80021e2:	4603      	mov	r3, r0
 80021e4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021e6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	789b      	ldrb	r3, [r3, #2]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f90d 	bl	800240c <RTC_ByteToBcd2>
 80021f2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80021f4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e00e      	b.n	8002222 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	78db      	ldrb	r3, [r3, #3]
 8002208:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	785b      	ldrb	r3, [r3, #1]
 800220e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002210:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002216:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800221e:	4313      	orrs	r3, r2
 8002220:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	22ca      	movs	r2, #202	; 0xca
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2253      	movs	r2, #83	; 0x53
 8002230:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f8be 	bl	80023b4 <RTC_EnterInitMode>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00b      	beq.n	8002256 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	22ff      	movs	r2, #255	; 0xff
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2204      	movs	r2, #4
 800224a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e033      	b.n	80022be <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002260:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002264:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002274:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d111      	bne.n	80022a8 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 f86d 	bl	8002364 <HAL_RTC_WaitForSynchro>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00b      	beq.n	80022a8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	22ff      	movs	r2, #255	; 0xff
 8002296:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2204      	movs	r2, #4
 800229c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e00a      	b.n	80022be <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	22ff      	movs	r2, #255	; 0xff
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80022bc:	2300      	movs	r3, #0
  }
}
 80022be:	4618      	mov	r0, r3
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd90      	pop	{r4, r7, pc}

080022c6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80022e4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002308:	b2da      	uxtb	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	0b5b      	lsrs	r3, r3, #13
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	b2da      	uxtb	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d11a      	bne.n	800235a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	78db      	ldrb	r3, [r3, #3]
 8002328:	4618      	mov	r0, r3
 800232a:	f000 f88d 	bl	8002448 <RTC_Bcd2ToByte>
 800232e:	4603      	mov	r3, r0
 8002330:	461a      	mov	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	785b      	ldrb	r3, [r3, #1]
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f884 	bl	8002448 <RTC_Bcd2ToByte>
 8002340:	4603      	mov	r3, r0
 8002342:	461a      	mov	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	789b      	ldrb	r3, [r3, #2]
 800234c:	4618      	mov	r0, r3
 800234e:	f000 f87b 	bl	8002448 <RTC_Bcd2ToByte>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800237e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002380:	f7fe f920 	bl	80005c4 <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002386:	e009      	b.n	800239c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002388:	f7fe f91c 	bl	80005c4 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002396:	d901      	bls.n	800239c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e007      	b.n	80023ac <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0ee      	beq.n	8002388 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d119      	bne.n	8002402 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f04f 32ff 	mov.w	r2, #4294967295
 80023d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80023d8:	f7fe f8f4 	bl	80005c4 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023de:	e009      	b.n	80023f4 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023e0:	f7fe f8f0 	bl	80005c4 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ee:	d901      	bls.n	80023f4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e007      	b.n	8002404 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0ee      	beq.n	80023e0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800241a:	e005      	b.n	8002428 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	3301      	adds	r3, #1
 8002420:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	3b0a      	subs	r3, #10
 8002426:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	2b09      	cmp	r3, #9
 800242c:	d8f6      	bhi.n	800241c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	b2da      	uxtb	r2, r3
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	4313      	orrs	r3, r2
 800243a:	b2db      	uxtb	r3, r3
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	b2db      	uxtb	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	b2da      	uxtb	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	4413      	add	r3, r2
 8002476:	b2db      	uxtb	r3, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <__libc_init_array>:
 8002484:	b570      	push	{r4, r5, r6, lr}
 8002486:	4e0d      	ldr	r6, [pc, #52]	; (80024bc <__libc_init_array+0x38>)
 8002488:	4c0d      	ldr	r4, [pc, #52]	; (80024c0 <__libc_init_array+0x3c>)
 800248a:	1ba4      	subs	r4, r4, r6
 800248c:	10a4      	asrs	r4, r4, #2
 800248e:	2500      	movs	r5, #0
 8002490:	42a5      	cmp	r5, r4
 8002492:	d109      	bne.n	80024a8 <__libc_init_array+0x24>
 8002494:	4e0b      	ldr	r6, [pc, #44]	; (80024c4 <__libc_init_array+0x40>)
 8002496:	4c0c      	ldr	r4, [pc, #48]	; (80024c8 <__libc_init_array+0x44>)
 8002498:	f000 f820 	bl	80024dc <_init>
 800249c:	1ba4      	subs	r4, r4, r6
 800249e:	10a4      	asrs	r4, r4, #2
 80024a0:	2500      	movs	r5, #0
 80024a2:	42a5      	cmp	r5, r4
 80024a4:	d105      	bne.n	80024b2 <__libc_init_array+0x2e>
 80024a6:	bd70      	pop	{r4, r5, r6, pc}
 80024a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024ac:	4798      	blx	r3
 80024ae:	3501      	adds	r5, #1
 80024b0:	e7ee      	b.n	8002490 <__libc_init_array+0xc>
 80024b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024b6:	4798      	blx	r3
 80024b8:	3501      	adds	r5, #1
 80024ba:	e7f2      	b.n	80024a2 <__libc_init_array+0x1e>
 80024bc:	08002524 	.word	0x08002524
 80024c0:	08002524 	.word	0x08002524
 80024c4:	08002524 	.word	0x08002524
 80024c8:	08002528 	.word	0x08002528

080024cc <memset>:
 80024cc:	4402      	add	r2, r0
 80024ce:	4603      	mov	r3, r0
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d100      	bne.n	80024d6 <memset+0xa>
 80024d4:	4770      	bx	lr
 80024d6:	f803 1b01 	strb.w	r1, [r3], #1
 80024da:	e7f9      	b.n	80024d0 <memset+0x4>

080024dc <_init>:
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	bf00      	nop
 80024e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e2:	bc08      	pop	{r3}
 80024e4:	469e      	mov	lr, r3
 80024e6:	4770      	bx	lr

080024e8 <_fini>:
 80024e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ea:	bf00      	nop
 80024ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ee:	bc08      	pop	{r3}
 80024f0:	469e      	mov	lr, r3
 80024f2:	4770      	bx	lr
