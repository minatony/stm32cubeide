
btvn_b12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b20  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004cb4  08004cb4  00014cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ce4  08004ce4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ce4  08004ce4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ce4  08004ce4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce8  08004ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08004cf8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08004cf8  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c76a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019ab  00000000  00000000  0002c7a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be8  00000000  00000000  0002e158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b10  00000000  00000000  0002ed40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020256  00000000  00000000  0002f850  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b49a  00000000  00000000  0004faa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca23e  00000000  00000000  0005af40  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012517e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003204  00000000  00000000  001251fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004c9c 	.word	0x08004c9c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004c9c 	.word	0x08004c9c

080001d4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	value_adc = HAL_ADC_GetValue(&hadc1);
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <HAL_ADC_ConvCpltCallback+0x20>)
 80001de:	f000 feb5 	bl	8000f4c <HAL_ADC_GetValue>
 80001e2:	4603      	mov	r3, r0
 80001e4:	b2da      	uxtb	r2, r3
 80001e6:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <HAL_ADC_ConvCpltCallback+0x24>)
 80001e8:	701a      	strb	r2, [r3, #0]
}
 80001ea:	bf00      	nop
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	20000078 	.word	0x20000078
 80001f8:	20000028 	.word	0x20000028

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 facd 	bl	80007a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f837 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f97d 	bl	8000508 <MX_GPIO_Init>
  MX_ADC1_Init();
 800020e:	f000 f895 	bl	800033c <MX_ADC1_Init>
  MX_TIM4_Init();
 8000212:	f000 f903 	bl	800041c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 8000216:	2100      	movs	r1, #0
 8000218:	4812      	ldr	r0, [pc, #72]	; (8000264 <main+0x68>)
 800021a:	f001 f9b1 	bl	8001580 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(50);
 800021e:	2032      	movs	r0, #50	; 0x32
 8000220:	f000 fb24 	bl	800086c <HAL_Delay>
  HAL_ADC_Start_IT(&hadc1);
 8000224:	480f      	ldr	r0, [pc, #60]	; (8000264 <main+0x68>)
 8000226:	f000 fd51 	bl	8000ccc <HAL_ADC_Start_IT>
  uint8_t duty = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	71fb      	strb	r3, [r7, #7]
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 800022e:	2100      	movs	r1, #0
 8000230:	480d      	ldr	r0, [pc, #52]	; (8000268 <main+0x6c>)
 8000232:	f003 fd41 	bl	8003cb8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  duty = (value_adc * 99)/63;
 8000236:	4b0d      	ldr	r3, [pc, #52]	; (800026c <main+0x70>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	461a      	mov	r2, r3
 800023c:	4613      	mov	r3, r2
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	4413      	add	r3, r2
 8000242:	015a      	lsls	r2, r3, #5
 8000244:	4413      	add	r3, r2
 8000246:	4a0a      	ldr	r2, [pc, #40]	; (8000270 <main+0x74>)
 8000248:	fb82 1203 	smull	r1, r2, r2, r3
 800024c:	441a      	add	r2, r3
 800024e:	1152      	asrs	r2, r2, #5
 8000250:	17db      	asrs	r3, r3, #31
 8000252:	1ad3      	subs	r3, r2, r3
 8000254:	71fb      	strb	r3, [r7, #7]
	  TIM4 ->CCR1 = duty;
 8000256:	4a07      	ldr	r2, [pc, #28]	; (8000274 <main+0x78>)
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	6353      	str	r3, [r2, #52]	; 0x34
	  HAL_Delay(20);
 800025c:	2014      	movs	r0, #20
 800025e:	f000 fb05 	bl	800086c <HAL_Delay>
	  duty = (value_adc * 99)/63;
 8000262:	e7e8      	b.n	8000236 <main+0x3a>
 8000264:	20000078 	.word	0x20000078
 8000268:	2000002c 	.word	0x2000002c
 800026c:	20000028 	.word	0x20000028
 8000270:	82082083 	.word	0x82082083
 8000274:	40000800 	.word	0x40000800

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b0a6      	sub	sp, #152	; 0x98
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f004 fd00 	bl	8004c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2258      	movs	r2, #88	; 0x58
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f004 fcf2 	bl	8004c8c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a8:	2302      	movs	r3, #2
 80002aa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b0:	2310      	movs	r3, #16
 80002b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b6:	2302      	movs	r3, #2
 80002b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002c4:	2300      	movs	r3, #0
 80002c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 f91d 	bl	8002514 <HAL_RCC_OscConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002e0:	f000 f92a 	bl	8000538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e4:	230f      	movs	r3, #15
 80002e6:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e8:	2300      	movs	r3, #0
 80002ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 f81e 	bl	8003340 <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800030a:	f000 f915 	bl	8000538 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM34;
 800030e:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <SystemClock_Config+0xc0>)
 8000310:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000316:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000318:	2300      	movs	r3, #0
 800031a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	4618      	mov	r0, r3
 8000320:	f003 f9f4 	bl	800370c <HAL_RCCEx_PeriphCLKConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800032a:	f000 f905 	bl	8000538 <Error_Handler>
  }
}
 800032e:	bf00      	nop
 8000330:	3798      	adds	r7, #152	; 0x98
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	00200080 	.word	0x00200080

0800033c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b08a      	sub	sp, #40	; 0x28
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000342:	f107 031c 	add.w	r3, r7, #28
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
 8000358:	60da      	str	r2, [r3, #12]
 800035a:	611a      	str	r2, [r3, #16]
 800035c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800035e:	4b2e      	ldr	r3, [pc, #184]	; (8000418 <MX_ADC1_Init+0xdc>)
 8000360:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000364:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000366:	4b2c      	ldr	r3, [pc, #176]	; (8000418 <MX_ADC1_Init+0xdc>)
 8000368:	2200      	movs	r2, #0
 800036a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 800036c:	4b2a      	ldr	r3, [pc, #168]	; (8000418 <MX_ADC1_Init+0xdc>)
 800036e:	2218      	movs	r2, #24
 8000370:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000372:	4b29      	ldr	r3, [pc, #164]	; (8000418 <MX_ADC1_Init+0xdc>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000378:	4b27      	ldr	r3, [pc, #156]	; (8000418 <MX_ADC1_Init+0xdc>)
 800037a:	2201      	movs	r2, #1
 800037c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800037e:	4b26      	ldr	r3, [pc, #152]	; (8000418 <MX_ADC1_Init+0xdc>)
 8000380:	2200      	movs	r2, #0
 8000382:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000386:	4b24      	ldr	r3, [pc, #144]	; (8000418 <MX_ADC1_Init+0xdc>)
 8000388:	2200      	movs	r2, #0
 800038a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800038c:	4b22      	ldr	r3, [pc, #136]	; (8000418 <MX_ADC1_Init+0xdc>)
 800038e:	2201      	movs	r2, #1
 8000390:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000392:	4b21      	ldr	r3, [pc, #132]	; (8000418 <MX_ADC1_Init+0xdc>)
 8000394:	2200      	movs	r2, #0
 8000396:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000398:	4b1f      	ldr	r3, [pc, #124]	; (8000418 <MX_ADC1_Init+0xdc>)
 800039a:	2201      	movs	r2, #1
 800039c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800039e:	4b1e      	ldr	r3, [pc, #120]	; (8000418 <MX_ADC1_Init+0xdc>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80003a6:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <MX_ADC1_Init+0xdc>)
 80003a8:	2208      	movs	r2, #8
 80003aa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003ac:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <MX_ADC1_Init+0xdc>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003b2:	4b19      	ldr	r3, [pc, #100]	; (8000418 <MX_ADC1_Init+0xdc>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003b8:	4817      	ldr	r0, [pc, #92]	; (8000418 <MX_ADC1_Init+0xdc>)
 80003ba:	f000 fa8d 	bl	80008d8 <HAL_ADC_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80003c4:	f000 f8b8 	bl	8000538 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003cc:	f107 031c 	add.w	r3, r7, #28
 80003d0:	4619      	mov	r1, r3
 80003d2:	4811      	ldr	r0, [pc, #68]	; (8000418 <MX_ADC1_Init+0xdc>)
 80003d4:	f001 fc52 	bl	8001c7c <HAL_ADCEx_MultiModeConfigChannel>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80003de:	f000 f8ab 	bl	8000538 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003e2:	2301      	movs	r3, #1
 80003e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e6:	2301      	movs	r3, #1
 80003e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003ea:	2300      	movs	r3, #0
 80003ec:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80003ee:	2307      	movs	r3, #7
 80003f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4619      	mov	r1, r3
 80003fe:	4806      	ldr	r0, [pc, #24]	; (8000418 <MX_ADC1_Init+0xdc>)
 8000400:	f001 f950 	bl	80016a4 <HAL_ADC_ConfigChannel>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800040a:	f000 f895 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	3728      	adds	r7, #40	; 0x28
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000078 	.word	0x20000078

0800041c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08e      	sub	sp, #56	; 0x38
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000430:	f107 031c 	add.w	r3, r7, #28
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800043c:	463b      	mov	r3, r7
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]
 800044a:	615a      	str	r2, [r3, #20]
 800044c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800044e:	4b2c      	ldr	r3, [pc, #176]	; (8000500 <MX_TIM4_Init+0xe4>)
 8000450:	4a2c      	ldr	r2, [pc, #176]	; (8000504 <MX_TIM4_Init+0xe8>)
 8000452:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8000454:	4b2a      	ldr	r3, [pc, #168]	; (8000500 <MX_TIM4_Init+0xe4>)
 8000456:	224f      	movs	r2, #79	; 0x4f
 8000458:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045a:	4b29      	ldr	r3, [pc, #164]	; (8000500 <MX_TIM4_Init+0xe4>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000460:	4b27      	ldr	r3, [pc, #156]	; (8000500 <MX_TIM4_Init+0xe4>)
 8000462:	2263      	movs	r2, #99	; 0x63
 8000464:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000466:	4b26      	ldr	r3, [pc, #152]	; (8000500 <MX_TIM4_Init+0xe4>)
 8000468:	2200      	movs	r2, #0
 800046a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800046c:	4b24      	ldr	r3, [pc, #144]	; (8000500 <MX_TIM4_Init+0xe4>)
 800046e:	2200      	movs	r2, #0
 8000470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000472:	4823      	ldr	r0, [pc, #140]	; (8000500 <MX_TIM4_Init+0xe4>)
 8000474:	f003 fb68 	bl	8003b48 <HAL_TIM_Base_Init>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800047e:	f000 f85b 	bl	8000538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000486:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000488:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800048c:	4619      	mov	r1, r3
 800048e:	481c      	ldr	r0, [pc, #112]	; (8000500 <MX_TIM4_Init+0xe4>)
 8000490:	f003 fe2e 	bl	80040f0 <HAL_TIM_ConfigClockSource>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800049a:	f000 f84d 	bl	8000538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800049e:	4818      	ldr	r0, [pc, #96]	; (8000500 <MX_TIM4_Init+0xe4>)
 80004a0:	f003 fba9 	bl	8003bf6 <HAL_TIM_PWM_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80004aa:	f000 f845 	bl	8000538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b2:	2300      	movs	r3, #0
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004b6:	f107 031c 	add.w	r3, r7, #28
 80004ba:	4619      	mov	r1, r3
 80004bc:	4810      	ldr	r0, [pc, #64]	; (8000500 <MX_TIM4_Init+0xe4>)
 80004be:	f004 fb35 	bl	8004b2c <HAL_TIMEx_MasterConfigSynchronization>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80004c8:	f000 f836 	bl	8000538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004cc:	2360      	movs	r3, #96	; 0x60
 80004ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004d8:	2300      	movs	r3, #0
 80004da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004dc:	463b      	mov	r3, r7
 80004de:	2200      	movs	r2, #0
 80004e0:	4619      	mov	r1, r3
 80004e2:	4807      	ldr	r0, [pc, #28]	; (8000500 <MX_TIM4_Init+0xe4>)
 80004e4:	f003 fcf4 	bl	8003ed0 <HAL_TIM_PWM_ConfigChannel>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80004ee:	f000 f823 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80004f2:	4803      	ldr	r0, [pc, #12]	; (8000500 <MX_TIM4_Init+0xe4>)
 80004f4:	f000 f8ac 	bl	8000650 <HAL_TIM_MspPostInit>

}
 80004f8:	bf00      	nop
 80004fa:	3738      	adds	r7, #56	; 0x38
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	2000002c 	.word	0x2000002c
 8000504:	40000800 	.word	0x40000800

08000508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MX_GPIO_Init+0x2c>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a08      	ldr	r2, [pc, #32]	; (8000534 <MX_GPIO_Init+0x2c>)
 8000514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000518:	6153      	str	r3, [r2, #20]
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <MX_GPIO_Init+0x2c>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]

}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053e:	e7fe      	b.n	800053e <Error_Handler+0x6>

08000540 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <HAL_MspInit+0x44>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <HAL_MspInit+0x44>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6193      	str	r3, [r2, #24]
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <HAL_MspInit+0x44>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <HAL_MspInit+0x44>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	4a08      	ldr	r2, [pc, #32]	; (8000584 <HAL_MspInit+0x44>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000568:	61d3      	str	r3, [r2, #28]
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <HAL_MspInit+0x44>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000

08000588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80005a8:	d12c      	bne.n	8000604 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <HAL_ADC_MspInit+0x84>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a17      	ldr	r2, [pc, #92]	; (800060c <HAL_ADC_MspInit+0x84>)
 80005b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_ADC_MspInit+0x84>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_ADC_MspInit+0x84>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a11      	ldr	r2, [pc, #68]	; (800060c <HAL_ADC_MspInit+0x84>)
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_ADC_MspInit+0x84>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005da:	2301      	movs	r3, #1
 80005dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005de:	2303      	movs	r3, #3
 80005e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f001 fe06 	bl	8002200 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2100      	movs	r1, #0
 80005f8:	2012      	movs	r0, #18
 80005fa:	f001 fdca 	bl	8002192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80005fe:	2012      	movs	r0, #18
 8000600:	f001 fde3 	bl	80021ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000604:	bf00      	nop
 8000606:	3728      	adds	r7, #40	; 0x28
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <HAL_TIM_Base_MspInit+0x38>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d10b      	bne.n	800063a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <HAL_TIM_Base_MspInit+0x3c>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	4a09      	ldr	r2, [pc, #36]	; (800064c <HAL_TIM_Base_MspInit+0x3c>)
 8000628:	f043 0304 	orr.w	r3, r3, #4
 800062c:	61d3      	str	r3, [r2, #28]
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <HAL_TIM_Base_MspInit+0x3c>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	f003 0304 	and.w	r3, r3, #4
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40000800 	.word	0x40000800
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <HAL_TIM_MspPostInit+0x68>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d11d      	bne.n	80006ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <HAL_TIM_MspPostInit+0x6c>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a11      	ldr	r2, [pc, #68]	; (80006bc <HAL_TIM_MspPostInit+0x6c>)
 8000678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067c:	6153      	str	r3, [r2, #20]
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <HAL_TIM_MspPostInit+0x6c>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800068a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800068e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800069c:	230a      	movs	r3, #10
 800069e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 fda9 	bl	8002200 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80006ae:	bf00      	nop
 80006b0:	3720      	adds	r7, #32
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40000800 	.word	0x40000800
 80006bc:	40021000 	.word	0x40021000

080006c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <NMI_Handler+0x4>

080006c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <HardFault_Handler+0x4>

080006cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <MemManage_Handler+0x4>

080006d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <BusFault_Handler+0x4>

080006d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <UsageFault_Handler+0x4>

080006de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070c:	f000 f88e 	bl	800082c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000718:	4802      	ldr	r0, [pc, #8]	; (8000724 <ADC1_2_IRQHandler+0x10>)
 800071a:	f000 fc25 	bl	8000f68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000078 	.word	0x20000078

08000728 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <SystemInit+0x20>)
 800072e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000732:	4a05      	ldr	r2, [pc, #20]	; (8000748 <SystemInit+0x20>)
 8000734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800074c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000784 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <LoopForever+0x6>)
  ldr r1, =_edata
 8000752:	490e      	ldr	r1, [pc, #56]	; (800078c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000754:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <LoopForever+0xe>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000768:	4c0b      	ldr	r4, [pc, #44]	; (8000798 <LoopForever+0x16>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000776:	f7ff ffd7 	bl	8000728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800077a:	f004 fa63 	bl	8004c44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800077e:	f7ff fd3d 	bl	80001fc <main>

08000782 <LoopForever>:

LoopForever:
    b LoopForever
 8000782:	e7fe      	b.n	8000782 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000784:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800078c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000790:	08004cec 	.word	0x08004cec
  ldr r2, =_sbss
 8000794:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000798:	200000cc 	.word	0x200000cc

0800079c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC3_IRQHandler>
	...

080007a0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <HAL_Init+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <HAL_Init+0x28>)
 80007aa:	f043 0310 	orr.w	r3, r3, #16
 80007ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f001 fce3 	bl	800217c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 f808 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007bc:	f7ff fec0 	bl	8000540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40022000 	.word	0x40022000

080007cc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x54>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_InitTick+0x58>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 fcfb 	bl	80021e6 <HAL_SYSTICK_Config>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00e      	b.n	8000818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b0f      	cmp	r3, #15
 80007fe:	d80a      	bhi.n	8000816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000800:	2200      	movs	r2, #0
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	f001 fcc3 	bl	8002192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <HAL_InitTick+0x5c>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
 8000814:	e000      	b.n	8000818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000000 	.word	0x20000000
 8000824:	20000008 	.word	0x20000008
 8000828:	20000004 	.word	0x20000004

0800082c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_IncTick+0x20>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x24>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4413      	add	r3, r2
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <HAL_IncTick+0x24>)
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000008 	.word	0x20000008
 8000850:	200000c8 	.word	0x200000c8

08000854 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;  
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <HAL_GetTick+0x14>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	200000c8 	.word	0x200000c8

0800086c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000874:	f7ff ffee 	bl	8000854 <HAL_GetTick>
 8000878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000884:	d005      	beq.n	8000892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_Delay+0x40>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	4413      	add	r3, r2
 8000890:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000892:	bf00      	nop
 8000894:	f7ff ffde 	bl	8000854 <HAL_GetTick>
 8000898:	4602      	mov	r2, r0
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d8f7      	bhi.n	8000894 <HAL_Delay+0x28>
  {
  }
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000008 	.word	0x20000008

080008b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b09a      	sub	sp, #104	; 0x68
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80008e6:	2300      	movs	r3, #0
 80008e8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d101      	bne.n	80008f8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	e1e3      	b.n	8000cc0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 0310 	and.w	r3, r3, #16
 8000906:	2b00      	cmp	r3, #0
 8000908:	d176      	bne.n	80009f8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	2b00      	cmp	r3, #0
 8000910:	d152      	bne.n	80009b8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff fe2b 	bl	8000588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093c:	2b00      	cmp	r3, #0
 800093e:	d13b      	bne.n	80009b8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f001 faeb 	bl	8001f1c <ADC_Disable>
 8000946:	4603      	mov	r3, r0
 8000948:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	2b00      	cmp	r3, #0
 8000956:	d12f      	bne.n	80009b8 <HAL_ADC_Init+0xe0>
 8000958:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800095c:	2b00      	cmp	r3, #0
 800095e:	d12b      	bne.n	80009b8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000968:	f023 0302 	bic.w	r3, r3, #2
 800096c:	f043 0202 	orr.w	r2, r3, #2
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	689a      	ldr	r2, [r3, #8]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000982:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000992:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000994:	4b92      	ldr	r3, [pc, #584]	; (8000be0 <HAL_ADC_Init+0x308>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a92      	ldr	r2, [pc, #584]	; (8000be4 <HAL_ADC_Init+0x30c>)
 800099a:	fba2 2303 	umull	r2, r3, r2, r3
 800099e:	0c9a      	lsrs	r2, r3, #18
 80009a0:	4613      	mov	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009aa:	e002      	b.n	80009b2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d1f9      	bne.n	80009ac <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d007      	beq.n	80009d6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80009d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009d4:	d110      	bne.n	80009f8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f023 0312 	bic.w	r3, r3, #18
 80009de:	f043 0210 	orr.w	r2, r3, #16
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f043 0201 	orr.w	r2, r3, #1
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	f003 0310 	and.w	r3, r3, #16
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	f040 8150 	bne.w	8000ca6 <HAL_ADC_Init+0x3ce>
 8000a06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f040 814b 	bne.w	8000ca6 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f040 8143 	bne.w	8000ca6 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000a28:	f043 0202 	orr.w	r2, r3, #2
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a38:	d004      	beq.n	8000a44 <HAL_ADC_Init+0x16c>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a6a      	ldr	r2, [pc, #424]	; (8000be8 <HAL_ADC_Init+0x310>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d101      	bne.n	8000a48 <HAL_ADC_Init+0x170>
 8000a44:	4b69      	ldr	r3, [pc, #420]	; (8000bec <HAL_ADC_Init+0x314>)
 8000a46:	e000      	b.n	8000a4a <HAL_ADC_Init+0x172>
 8000a48:	4b69      	ldr	r3, [pc, #420]	; (8000bf0 <HAL_ADC_Init+0x318>)
 8000a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a54:	d102      	bne.n	8000a5c <HAL_ADC_Init+0x184>
 8000a56:	4b64      	ldr	r3, [pc, #400]	; (8000be8 <HAL_ADC_Init+0x310>)
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	e01a      	b.n	8000a92 <HAL_ADC_Init+0x1ba>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a61      	ldr	r2, [pc, #388]	; (8000be8 <HAL_ADC_Init+0x310>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d103      	bne.n	8000a6e <HAL_ADC_Init+0x196>
 8000a66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	e011      	b.n	8000a92 <HAL_ADC_Init+0x1ba>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a60      	ldr	r2, [pc, #384]	; (8000bf4 <HAL_ADC_Init+0x31c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d102      	bne.n	8000a7e <HAL_ADC_Init+0x1a6>
 8000a78:	4b5f      	ldr	r3, [pc, #380]	; (8000bf8 <HAL_ADC_Init+0x320>)
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	e009      	b.n	8000a92 <HAL_ADC_Init+0x1ba>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a5d      	ldr	r2, [pc, #372]	; (8000bf8 <HAL_ADC_Init+0x320>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d102      	bne.n	8000a8e <HAL_ADC_Init+0x1b6>
 8000a88:	4b5a      	ldr	r3, [pc, #360]	; (8000bf4 <HAL_ADC_Init+0x31c>)
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	e001      	b.n	8000a92 <HAL_ADC_Init+0x1ba>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	f003 0303 	and.w	r3, r3, #3
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d108      	bne.n	8000ab2 <HAL_ADC_Init+0x1da>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d101      	bne.n	8000ab2 <HAL_ADC_Init+0x1da>
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e000      	b.n	8000ab4 <HAL_ADC_Init+0x1dc>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d11c      	bne.n	8000af2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d010      	beq.n	8000ae0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f003 0303 	and.w	r3, r3, #3
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d107      	bne.n	8000ada <HAL_ADC_Init+0x202>
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d101      	bne.n	8000ada <HAL_ADC_Init+0x202>
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e000      	b.n	8000adc <HAL_ADC_Init+0x204>
 8000ada:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d108      	bne.n	8000af2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	431a      	orrs	r2, r3
 8000aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000af0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	7e5b      	ldrb	r3, [r3, #25]
 8000af6:	035b      	lsls	r3, r3, #13
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000afc:	2a01      	cmp	r2, #1
 8000afe:	d002      	beq.n	8000b06 <HAL_ADC_Init+0x22e>
 8000b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b04:	e000      	b.n	8000b08 <HAL_ADC_Init+0x230>
 8000b06:	2200      	movs	r2, #0
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d11b      	bne.n	8000b5e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7e5b      	ldrb	r3, [r3, #25]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d109      	bne.n	8000b42 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b32:	3b01      	subs	r3, #1
 8000b34:	045a      	lsls	r2, r3, #17
 8000b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3e:	663b      	str	r3, [r7, #96]	; 0x60
 8000b40:	e00d      	b.n	8000b5e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000b4a:	f043 0220 	orr.w	r2, r3, #32
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	f043 0201 	orr.w	r2, r3, #1
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d054      	beq.n	8000c10 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a22      	ldr	r2, [pc, #136]	; (8000bf4 <HAL_ADC_Init+0x31c>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d004      	beq.n	8000b7a <HAL_ADC_Init+0x2a2>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a20      	ldr	r2, [pc, #128]	; (8000bf8 <HAL_ADC_Init+0x320>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d140      	bne.n	8000bfc <HAL_ADC_Init+0x324>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b7e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000b82:	d02a      	beq.n	8000bda <HAL_ADC_Init+0x302>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b8c:	d022      	beq.n	8000bd4 <HAL_ADC_Init+0x2fc>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b92:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000b96:	d01a      	beq.n	8000bce <HAL_ADC_Init+0x2f6>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000ba0:	d012      	beq.n	8000bc8 <HAL_ADC_Init+0x2f0>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba6:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000baa:	d00a      	beq.n	8000bc2 <HAL_ADC_Init+0x2ea>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb0:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000bb4:	d002      	beq.n	8000bbc <HAL_ADC_Init+0x2e4>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bba:	e023      	b.n	8000c04 <HAL_ADC_Init+0x32c>
 8000bbc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bc0:	e020      	b.n	8000c04 <HAL_ADC_Init+0x32c>
 8000bc2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000bc6:	e01d      	b.n	8000c04 <HAL_ADC_Init+0x32c>
 8000bc8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000bcc:	e01a      	b.n	8000c04 <HAL_ADC_Init+0x32c>
 8000bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd2:	e017      	b.n	8000c04 <HAL_ADC_Init+0x32c>
 8000bd4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000bd8:	e014      	b.n	8000c04 <HAL_ADC_Init+0x32c>
 8000bda:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000bde:	e011      	b.n	8000c04 <HAL_ADC_Init+0x32c>
 8000be0:	20000000 	.word	0x20000000
 8000be4:	431bde83 	.word	0x431bde83
 8000be8:	50000100 	.word	0x50000100
 8000bec:	50000300 	.word	0x50000300
 8000bf0:	50000700 	.word	0x50000700
 8000bf4:	50000400 	.word	0x50000400
 8000bf8:	50000500 	.word	0x50000500
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	f003 030c 	and.w	r3, r3, #12
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d114      	bne.n	8000c48 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	6812      	ldr	r2, [r2, #0]
 8000c28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c2c:	f023 0302 	bic.w	r3, r3, #2
 8000c30:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7e1b      	ldrb	r3, [r3, #24]
 8000c36:	039a      	lsls	r2, r3, #14
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4313      	orrs	r3, r2
 8000c42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c44:	4313      	orrs	r3, r2
 8000c46:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68da      	ldr	r2, [r3, #12]
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <HAL_ADC_Init+0x3f0>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	6812      	ldr	r2, [r2, #0]
 8000c56:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d10c      	bne.n	8000c7e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f023 010f 	bic.w	r1, r3, #15
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	1e5a      	subs	r2, r3, #1
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8000c7c:	e007      	b.n	8000c8e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f022 020f 	bic.w	r2, r2, #15
 8000c8c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f023 0303 	bic.w	r3, r3, #3
 8000c9c:	f043 0201 	orr.w	r2, r3, #1
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca4:	e00a      	b.n	8000cbc <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f023 0312 	bic.w	r3, r3, #18
 8000cae:	f043 0210 	orr.w	r2, r3, #16
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000cbc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3768      	adds	r7, #104	; 0x68
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	fff0c007 	.word	0xfff0c007

08000ccc <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8123 	bne.w	8000f2e <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d101      	bne.n	8000cf6 <HAL_ADC_Start_IT+0x2a>
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	e11e      	b.n	8000f34 <HAL_ADC_Start_IT+0x268>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f001 f8ae 	bl	8001e60 <ADC_Enable>
 8000d04:	4603      	mov	r3, r0
 8000d06:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f040 810a 	bne.w	8000f24 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d18:	f023 0301 	bic.w	r3, r3, #1
 8000d1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d2c:	d004      	beq.n	8000d38 <HAL_ADC_Start_IT+0x6c>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a82      	ldr	r2, [pc, #520]	; (8000f3c <HAL_ADC_Start_IT+0x270>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d106      	bne.n	8000d46 <HAL_ADC_Start_IT+0x7a>
 8000d38:	4b81      	ldr	r3, [pc, #516]	; (8000f40 <HAL_ADC_Start_IT+0x274>)
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f003 031f 	and.w	r3, r3, #31
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d010      	beq.n	8000d66 <HAL_ADC_Start_IT+0x9a>
 8000d44:	e005      	b.n	8000d52 <HAL_ADC_Start_IT+0x86>
 8000d46:	4b7f      	ldr	r3, [pc, #508]	; (8000f44 <HAL_ADC_Start_IT+0x278>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f003 031f 	and.w	r3, r3, #31
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d009      	beq.n	8000d66 <HAL_ADC_Start_IT+0x9a>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d5a:	d004      	beq.n	8000d66 <HAL_ADC_Start_IT+0x9a>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a79      	ldr	r2, [pc, #484]	; (8000f48 <HAL_ADC_Start_IT+0x27c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d115      	bne.n	8000d92 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d036      	beq.n	8000dee <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d90:	e02d      	b.n	8000dee <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000da6:	d004      	beq.n	8000db2 <HAL_ADC_Start_IT+0xe6>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a63      	ldr	r2, [pc, #396]	; (8000f3c <HAL_ADC_Start_IT+0x270>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d10a      	bne.n	8000dc8 <HAL_ADC_Start_IT+0xfc>
 8000db2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	bf14      	ite	ne
 8000dc0:	2301      	movne	r3, #1
 8000dc2:	2300      	moveq	r3, #0
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	e008      	b.n	8000dda <HAL_ADC_Start_IT+0x10e>
 8000dc8:	4b5f      	ldr	r3, [pc, #380]	; (8000f48 <HAL_ADC_Start_IT+0x27c>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf14      	ite	ne
 8000dd4:	2301      	movne	r3, #1
 8000dd6:	2300      	moveq	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d007      	beq.n	8000dee <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000de6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dfa:	d106      	bne.n	8000e0a <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e00:	f023 0206 	bic.w	r2, r3, #6
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	645a      	str	r2, [r3, #68]	; 0x44
 8000e08:	e002      	b.n	8000e10 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	221c      	movs	r2, #28
 8000e1e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	2b08      	cmp	r3, #8
 8000e26:	d110      	bne.n	8000e4a <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 0204 	bic.w	r2, r2, #4
 8000e36:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0208 	orr.w	r2, r2, #8
 8000e46:	605a      	str	r2, [r3, #4]
          break;
 8000e48:	e008      	b.n	8000e5c <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f042 020c 	orr.w	r2, r2, #12
 8000e58:	605a      	str	r2, [r3, #4]
          break;
 8000e5a:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d107      	bne.n	8000e74 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 0210 	bic.w	r2, r2, #16
 8000e72:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e7c:	d004      	beq.n	8000e88 <HAL_ADC_Start_IT+0x1bc>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a2e      	ldr	r2, [pc, #184]	; (8000f3c <HAL_ADC_Start_IT+0x270>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d106      	bne.n	8000e96 <HAL_ADC_Start_IT+0x1ca>
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <HAL_ADC_Start_IT+0x274>)
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f003 031f 	and.w	r3, r3, #31
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d03e      	beq.n	8000f12 <HAL_ADC_Start_IT+0x246>
 8000e94:	e005      	b.n	8000ea2 <HAL_ADC_Start_IT+0x1d6>
 8000e96:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <HAL_ADC_Start_IT+0x278>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 031f 	and.w	r3, r3, #31
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d037      	beq.n	8000f12 <HAL_ADC_Start_IT+0x246>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eaa:	d004      	beq.n	8000eb6 <HAL_ADC_Start_IT+0x1ea>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <HAL_ADC_Start_IT+0x270>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d106      	bne.n	8000ec4 <HAL_ADC_Start_IT+0x1f8>
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <HAL_ADC_Start_IT+0x274>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f003 031f 	and.w	r3, r3, #31
 8000ebe:	2b05      	cmp	r3, #5
 8000ec0:	d027      	beq.n	8000f12 <HAL_ADC_Start_IT+0x246>
 8000ec2:	e005      	b.n	8000ed0 <HAL_ADC_Start_IT+0x204>
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <HAL_ADC_Start_IT+0x278>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 031f 	and.w	r3, r3, #31
 8000ecc:	2b05      	cmp	r3, #5
 8000ece:	d020      	beq.n	8000f12 <HAL_ADC_Start_IT+0x246>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ed8:	d004      	beq.n	8000ee4 <HAL_ADC_Start_IT+0x218>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <HAL_ADC_Start_IT+0x270>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d106      	bne.n	8000ef2 <HAL_ADC_Start_IT+0x226>
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_ADC_Start_IT+0x274>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 031f 	and.w	r3, r3, #31
 8000eec:	2b09      	cmp	r3, #9
 8000eee:	d010      	beq.n	8000f12 <HAL_ADC_Start_IT+0x246>
 8000ef0:	e005      	b.n	8000efe <HAL_ADC_Start_IT+0x232>
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_ADC_Start_IT+0x278>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 031f 	and.w	r3, r3, #31
 8000efa:	2b09      	cmp	r3, #9
 8000efc:	d009      	beq.n	8000f12 <HAL_ADC_Start_IT+0x246>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f06:	d004      	beq.n	8000f12 <HAL_ADC_Start_IT+0x246>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <HAL_ADC_Start_IT+0x27c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d10f      	bne.n	8000f32 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f042 0204 	orr.w	r2, r2, #4
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	e006      	b.n	8000f32 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000f2c:	e001      	b.n	8000f32 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	50000100 	.word	0x50000100
 8000f40:	50000300 	.word	0x50000300
 8000f44:	50000700 	.word	0x50000700
 8000f48:	50000400 	.word	0x50000400

08000f4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d106      	bne.n	8000f98 <HAL_ADC_IRQHandler+0x30>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d00f      	beq.n	8000fb8 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	f040 80c0 	bne.w	8001128 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	f040 80b8 	bne.w	8001128 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	f003 0310 	and.w	r3, r3, #16
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d105      	bne.n	8000fd0 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fd8:	d004      	beq.n	8000fe4 <HAL_ADC_IRQHandler+0x7c>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a95      	ldr	r2, [pc, #596]	; (8001234 <HAL_ADC_IRQHandler+0x2cc>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d106      	bne.n	8000ff2 <HAL_ADC_IRQHandler+0x8a>
 8000fe4:	4b94      	ldr	r3, [pc, #592]	; (8001238 <HAL_ADC_IRQHandler+0x2d0>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f003 031f 	and.w	r3, r3, #31
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d03e      	beq.n	800106e <HAL_ADC_IRQHandler+0x106>
 8000ff0:	e005      	b.n	8000ffe <HAL_ADC_IRQHandler+0x96>
 8000ff2:	4b92      	ldr	r3, [pc, #584]	; (800123c <HAL_ADC_IRQHandler+0x2d4>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 031f 	and.w	r3, r3, #31
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d037      	beq.n	800106e <HAL_ADC_IRQHandler+0x106>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001006:	d004      	beq.n	8001012 <HAL_ADC_IRQHandler+0xaa>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a89      	ldr	r2, [pc, #548]	; (8001234 <HAL_ADC_IRQHandler+0x2cc>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d106      	bne.n	8001020 <HAL_ADC_IRQHandler+0xb8>
 8001012:	4b89      	ldr	r3, [pc, #548]	; (8001238 <HAL_ADC_IRQHandler+0x2d0>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f003 031f 	and.w	r3, r3, #31
 800101a:	2b05      	cmp	r3, #5
 800101c:	d027      	beq.n	800106e <HAL_ADC_IRQHandler+0x106>
 800101e:	e005      	b.n	800102c <HAL_ADC_IRQHandler+0xc4>
 8001020:	4b86      	ldr	r3, [pc, #536]	; (800123c <HAL_ADC_IRQHandler+0x2d4>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	2b05      	cmp	r3, #5
 800102a:	d020      	beq.n	800106e <HAL_ADC_IRQHandler+0x106>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001034:	d004      	beq.n	8001040 <HAL_ADC_IRQHandler+0xd8>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a7e      	ldr	r2, [pc, #504]	; (8001234 <HAL_ADC_IRQHandler+0x2cc>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d106      	bne.n	800104e <HAL_ADC_IRQHandler+0xe6>
 8001040:	4b7d      	ldr	r3, [pc, #500]	; (8001238 <HAL_ADC_IRQHandler+0x2d0>)
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f003 031f 	and.w	r3, r3, #31
 8001048:	2b09      	cmp	r3, #9
 800104a:	d010      	beq.n	800106e <HAL_ADC_IRQHandler+0x106>
 800104c:	e005      	b.n	800105a <HAL_ADC_IRQHandler+0xf2>
 800104e:	4b7b      	ldr	r3, [pc, #492]	; (800123c <HAL_ADC_IRQHandler+0x2d4>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 031f 	and.w	r3, r3, #31
 8001056:	2b09      	cmp	r3, #9
 8001058:	d009      	beq.n	800106e <HAL_ADC_IRQHandler+0x106>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001062:	d004      	beq.n	800106e <HAL_ADC_IRQHandler+0x106>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a75      	ldr	r2, [pc, #468]	; (8001240 <HAL_ADC_IRQHandler+0x2d8>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d104      	bne.n	8001078 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	e00f      	b.n	8001098 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001080:	d004      	beq.n	800108c <HAL_ADC_IRQHandler+0x124>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a6b      	ldr	r2, [pc, #428]	; (8001234 <HAL_ADC_IRQHandler+0x2cc>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d102      	bne.n	8001092 <HAL_ADC_IRQHandler+0x12a>
 800108c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001090:	e000      	b.n	8001094 <HAL_ADC_IRQHandler+0x12c>
 8001092:	4b6b      	ldr	r3, [pc, #428]	; (8001240 <HAL_ADC_IRQHandler+0x2d8>)
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d139      	bne.n	800111a <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d134      	bne.n	800111a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d12d      	bne.n	800111a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d11a      	bne.n	8001102 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 020c 	bic.w	r2, r2, #12
 80010da:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d112      	bne.n	800111a <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f043 0201 	orr.w	r2, r3, #1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001100:	e00b      	b.n	800111a <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f043 0210 	orr.w	r2, r3, #16
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f043 0201 	orr.w	r2, r3, #1
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff f85a 	bl	80001d4 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	220c      	movs	r2, #12
 8001126:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0320 	and.w	r3, r3, #32
 8001132:	2b20      	cmp	r3, #32
 8001134:	d106      	bne.n	8001144 <HAL_ADC_IRQHandler+0x1dc>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0320 	and.w	r3, r3, #32
 8001140:	2b20      	cmp	r3, #32
 8001142:	d00f      	beq.n	8001164 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800114e:	2b40      	cmp	r3, #64	; 0x40
 8001150:	f040 813c 	bne.w	80013cc <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800115e:	2b40      	cmp	r3, #64	; 0x40
 8001160:	f040 8134 	bne.w	80013cc <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001178:	d004      	beq.n	8001184 <HAL_ADC_IRQHandler+0x21c>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a2d      	ldr	r2, [pc, #180]	; (8001234 <HAL_ADC_IRQHandler+0x2cc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d106      	bne.n	8001192 <HAL_ADC_IRQHandler+0x22a>
 8001184:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <HAL_ADC_IRQHandler+0x2d0>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 031f 	and.w	r3, r3, #31
 800118c:	2b00      	cmp	r3, #0
 800118e:	d03e      	beq.n	800120e <HAL_ADC_IRQHandler+0x2a6>
 8001190:	e005      	b.n	800119e <HAL_ADC_IRQHandler+0x236>
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <HAL_ADC_IRQHandler+0x2d4>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	2b00      	cmp	r3, #0
 800119c:	d037      	beq.n	800120e <HAL_ADC_IRQHandler+0x2a6>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011a6:	d004      	beq.n	80011b2 <HAL_ADC_IRQHandler+0x24a>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a21      	ldr	r2, [pc, #132]	; (8001234 <HAL_ADC_IRQHandler+0x2cc>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d106      	bne.n	80011c0 <HAL_ADC_IRQHandler+0x258>
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <HAL_ADC_IRQHandler+0x2d0>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	2b05      	cmp	r3, #5
 80011bc:	d027      	beq.n	800120e <HAL_ADC_IRQHandler+0x2a6>
 80011be:	e005      	b.n	80011cc <HAL_ADC_IRQHandler+0x264>
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <HAL_ADC_IRQHandler+0x2d4>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d020      	beq.n	800120e <HAL_ADC_IRQHandler+0x2a6>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011d4:	d004      	beq.n	80011e0 <HAL_ADC_IRQHandler+0x278>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a16      	ldr	r2, [pc, #88]	; (8001234 <HAL_ADC_IRQHandler+0x2cc>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d106      	bne.n	80011ee <HAL_ADC_IRQHandler+0x286>
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_ADC_IRQHandler+0x2d0>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 031f 	and.w	r3, r3, #31
 80011e8:	2b09      	cmp	r3, #9
 80011ea:	d010      	beq.n	800120e <HAL_ADC_IRQHandler+0x2a6>
 80011ec:	e005      	b.n	80011fa <HAL_ADC_IRQHandler+0x292>
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_ADC_IRQHandler+0x2d4>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 031f 	and.w	r3, r3, #31
 80011f6:	2b09      	cmp	r3, #9
 80011f8:	d009      	beq.n	800120e <HAL_ADC_IRQHandler+0x2a6>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001202:	d004      	beq.n	800120e <HAL_ADC_IRQHandler+0x2a6>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <HAL_ADC_IRQHandler+0x2d8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d104      	bne.n	8001218 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	e018      	b.n	800124a <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001220:	d004      	beq.n	800122c <HAL_ADC_IRQHandler+0x2c4>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a03      	ldr	r2, [pc, #12]	; (8001234 <HAL_ADC_IRQHandler+0x2cc>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d10b      	bne.n	8001244 <HAL_ADC_IRQHandler+0x2dc>
 800122c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001230:	e009      	b.n	8001246 <HAL_ADC_IRQHandler+0x2de>
 8001232:	bf00      	nop
 8001234:	50000100 	.word	0x50000100
 8001238:	50000300 	.word	0x50000300
 800123c:	50000700 	.word	0x50000700
 8001240:	50000400 	.word	0x50000400
 8001244:	4b9d      	ldr	r3, [pc, #628]	; (80014bc <HAL_ADC_IRQHandler+0x554>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001254:	2b00      	cmp	r3, #0
 8001256:	f040 80b2 	bne.w	80013be <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00d      	beq.n	8001280 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800126e:	2b00      	cmp	r3, #0
 8001270:	f040 80a5 	bne.w	80013be <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800127a:	2b00      	cmp	r3, #0
 800127c:	f040 809f 	bne.w	80013be <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800128a:	2b40      	cmp	r3, #64	; 0x40
 800128c:	f040 8097 	bne.w	80013be <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001298:	d004      	beq.n	80012a4 <HAL_ADC_IRQHandler+0x33c>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a88      	ldr	r2, [pc, #544]	; (80014c0 <HAL_ADC_IRQHandler+0x558>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d106      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x34a>
 80012a4:	4b87      	ldr	r3, [pc, #540]	; (80014c4 <HAL_ADC_IRQHandler+0x55c>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d03e      	beq.n	800132e <HAL_ADC_IRQHandler+0x3c6>
 80012b0:	e005      	b.n	80012be <HAL_ADC_IRQHandler+0x356>
 80012b2:	4b85      	ldr	r3, [pc, #532]	; (80014c8 <HAL_ADC_IRQHandler+0x560>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d037      	beq.n	800132e <HAL_ADC_IRQHandler+0x3c6>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012c6:	d004      	beq.n	80012d2 <HAL_ADC_IRQHandler+0x36a>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a7c      	ldr	r2, [pc, #496]	; (80014c0 <HAL_ADC_IRQHandler+0x558>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d106      	bne.n	80012e0 <HAL_ADC_IRQHandler+0x378>
 80012d2:	4b7c      	ldr	r3, [pc, #496]	; (80014c4 <HAL_ADC_IRQHandler+0x55c>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 031f 	and.w	r3, r3, #31
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d027      	beq.n	800132e <HAL_ADC_IRQHandler+0x3c6>
 80012de:	e005      	b.n	80012ec <HAL_ADC_IRQHandler+0x384>
 80012e0:	4b79      	ldr	r3, [pc, #484]	; (80014c8 <HAL_ADC_IRQHandler+0x560>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	2b06      	cmp	r3, #6
 80012ea:	d020      	beq.n	800132e <HAL_ADC_IRQHandler+0x3c6>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012f4:	d004      	beq.n	8001300 <HAL_ADC_IRQHandler+0x398>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a71      	ldr	r2, [pc, #452]	; (80014c0 <HAL_ADC_IRQHandler+0x558>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d106      	bne.n	800130e <HAL_ADC_IRQHandler+0x3a6>
 8001300:	4b70      	ldr	r3, [pc, #448]	; (80014c4 <HAL_ADC_IRQHandler+0x55c>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 031f 	and.w	r3, r3, #31
 8001308:	2b07      	cmp	r3, #7
 800130a:	d010      	beq.n	800132e <HAL_ADC_IRQHandler+0x3c6>
 800130c:	e005      	b.n	800131a <HAL_ADC_IRQHandler+0x3b2>
 800130e:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <HAL_ADC_IRQHandler+0x560>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 031f 	and.w	r3, r3, #31
 8001316:	2b07      	cmp	r3, #7
 8001318:	d009      	beq.n	800132e <HAL_ADC_IRQHandler+0x3c6>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001322:	d004      	beq.n	800132e <HAL_ADC_IRQHandler+0x3c6>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a64      	ldr	r2, [pc, #400]	; (80014bc <HAL_ADC_IRQHandler+0x554>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d104      	bne.n	8001338 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	e00f      	b.n	8001358 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001340:	d004      	beq.n	800134c <HAL_ADC_IRQHandler+0x3e4>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a5e      	ldr	r2, [pc, #376]	; (80014c0 <HAL_ADC_IRQHandler+0x558>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d102      	bne.n	8001352 <HAL_ADC_IRQHandler+0x3ea>
 800134c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001350:	e000      	b.n	8001354 <HAL_ADC_IRQHandler+0x3ec>
 8001352:	4b5a      	ldr	r3, [pc, #360]	; (80014bc <HAL_ADC_IRQHandler+0x554>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d12d      	bne.n	80013be <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 0308 	and.w	r3, r3, #8
 800136c:	2b00      	cmp	r3, #0
 800136e:	d11a      	bne.n	80013a6 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800137e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001394:	2b00      	cmp	r3, #0
 8001396:	d112      	bne.n	80013be <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f043 0201 	orr.w	r2, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40
 80013a4:	e00b      	b.n	80013be <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f043 0210 	orr.w	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f948 	bl	8001654 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2260      	movs	r2, #96	; 0x60
 80013ca:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d6:	2b80      	cmp	r3, #128	; 0x80
 80013d8:	d113      	bne.n	8001402 <HAL_ADC_IRQHandler+0x49a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e4:	2b80      	cmp	r3, #128	; 0x80
 80013e6:	d10c      	bne.n	8001402 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fa5b 	bl	80008b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001410:	d115      	bne.n	800143e <HAL_ADC_IRQHandler+0x4d6>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001420:	d10d      	bne.n	800143e <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 f924 	bl	800167c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f44f 7280 	mov.w	r2, #256	; 0x100
 800143c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800144c:	d115      	bne.n	800147a <HAL_ADC_IRQHandler+0x512>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800145c:	d10d      	bne.n	800147a <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f910 	bl	8001690 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001478:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b10      	cmp	r3, #16
 8001486:	d151      	bne.n	800152c <HAL_ADC_IRQHandler+0x5c4>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	2b10      	cmp	r3, #16
 8001494:	d14a      	bne.n	800152c <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149a:	2b01      	cmp	r3, #1
 800149c:	d102      	bne.n	80014a4 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 800149e:	2301      	movs	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	e02d      	b.n	8001500 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ac:	d004      	beq.n	80014b8 <HAL_ADC_IRQHandler+0x550>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a03      	ldr	r2, [pc, #12]	; (80014c0 <HAL_ADC_IRQHandler+0x558>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d109      	bne.n	80014cc <HAL_ADC_IRQHandler+0x564>
 80014b8:	4b02      	ldr	r3, [pc, #8]	; (80014c4 <HAL_ADC_IRQHandler+0x55c>)
 80014ba:	e008      	b.n	80014ce <HAL_ADC_IRQHandler+0x566>
 80014bc:	50000400 	.word	0x50000400
 80014c0:	50000100 	.word	0x50000100
 80014c4:	50000300 	.word	0x50000300
 80014c8:	50000700 	.word	0x50000700
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_ADC_IRQHandler+0x614>)
 80014ce:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d109      	bne.n	80014f0 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d10a      	bne.n	8001500 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 80014ea:	2301      	movs	r3, #1
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e007      	b.n	8001500 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 80014fc:	2301      	movs	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d10e      	bne.n	8001524 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f043 0202 	orr.w	r2, r3, #2
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff f9d0 	bl	80008c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2210      	movs	r2, #16
 800152a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153a:	d11b      	bne.n	8001574 <HAL_ADC_IRQHandler+0x60c>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800154a:	d113      	bne.n	8001574 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155c:	f043 0208 	orr.w	r2, r3, #8
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800156c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f87a 	bl	8001668 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001574:	bf00      	nop
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	50000700 	.word	0x50000700

08001580 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_ADCEx_Calibration_Start+0x1c>
 8001598:	2302      	movs	r3, #2
 800159a:	e057      	b.n	800164c <HAL_ADCEx_Calibration_Start+0xcc>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 fcb9 	bl	8001f1c <ADC_Disable>
 80015aa:	4603      	mov	r3, r0
 80015ac:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d146      	bne.n	8001642 <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80015c8:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d107      	bne.n	80015e0 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015de:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015ee:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80015f0:	f7ff f930 	bl	8000854 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80015f6:	e014      	b.n	8001622 <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80015f8:	f7ff f92c 	bl	8000854 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b0a      	cmp	r3, #10
 8001604:	d90d      	bls.n	8001622 <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f023 0312 	bic.w	r3, r3, #18
 800160e:	f043 0210 	orr.w	r2, r3, #16
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e014      	b.n	800164c <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800162c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001630:	d0e2      	beq.n	80015f8 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f023 0303 	bic.w	r3, r3, #3
 800163a:	f043 0201 	orr.w	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b09b      	sub	sp, #108	; 0x6c
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x22>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e2cb      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x5ba>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f040 82af 	bne.w	8001c3c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d81c      	bhi.n	8001720 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4413      	add	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	461a      	mov	r2, r3
 80016fa:	231f      	movs	r3, #31
 80016fc:	4093      	lsls	r3, r2
 80016fe:	43db      	mvns	r3, r3
 8001700:	4019      	ands	r1, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	fa00 f203 	lsl.w	r2, r0, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	631a      	str	r2, [r3, #48]	; 0x30
 800171e:	e063      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b09      	cmp	r3, #9
 8001726:	d81e      	bhi.n	8001766 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	3b1e      	subs	r3, #30
 800173c:	221f      	movs	r2, #31
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	4019      	ands	r1, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	3b1e      	subs	r3, #30
 8001758:	fa00 f203 	lsl.w	r2, r0, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	635a      	str	r2, [r3, #52]	; 0x34
 8001764:	e040      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b0e      	cmp	r3, #14
 800176c:	d81e      	bhi.n	80017ac <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	3b3c      	subs	r3, #60	; 0x3c
 8001782:	221f      	movs	r2, #31
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	4019      	ands	r1, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	3b3c      	subs	r3, #60	; 0x3c
 800179e:	fa00 f203 	lsl.w	r2, r0, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	639a      	str	r2, [r3, #56]	; 0x38
 80017aa:	e01d      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	3b5a      	subs	r3, #90	; 0x5a
 80017c0:	221f      	movs	r2, #31
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	4019      	ands	r1, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	3b5a      	subs	r3, #90	; 0x5a
 80017dc:	fa00 f203 	lsl.w	r2, r0, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 80e5 	bne.w	80019c2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	d91c      	bls.n	800183a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6999      	ldr	r1, [r3, #24]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	3b1e      	subs	r3, #30
 8001812:	2207      	movs	r2, #7
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	4019      	ands	r1, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6898      	ldr	r0, [r3, #8]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	3b1e      	subs	r3, #30
 800182c:	fa00 f203 	lsl.w	r2, r0, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	619a      	str	r2, [r3, #24]
 8001838:	e019      	b.n	800186e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6959      	ldr	r1, [r3, #20]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	2207      	movs	r2, #7
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	4019      	ands	r1, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6898      	ldr	r0, [r3, #8]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	fa00 f203 	lsl.w	r2, r0, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	08db      	lsrs	r3, r3, #3
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	3b01      	subs	r3, #1
 800188c:	2b03      	cmp	r3, #3
 800188e:	d84f      	bhi.n	8001930 <HAL_ADC_ConfigChannel+0x28c>
 8001890:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <HAL_ADC_ConfigChannel+0x1f4>)
 8001892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001896:	bf00      	nop
 8001898:	080018a9 	.word	0x080018a9
 800189c:	080018cb 	.word	0x080018cb
 80018a0:	080018ed 	.word	0x080018ed
 80018a4:	0800190f 	.word	0x0800190f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018ae:	4b9f      	ldr	r3, [pc, #636]	; (8001b2c <HAL_ADC_ConfigChannel+0x488>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	0691      	lsls	r1, r2, #26
 80018b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018ba:	430a      	orrs	r2, r1
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018c6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018c8:	e07e      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018d0:	4b96      	ldr	r3, [pc, #600]	; (8001b2c <HAL_ADC_ConfigChannel+0x488>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	0691      	lsls	r1, r2, #26
 80018da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018dc:	430a      	orrs	r2, r1
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018e8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018ea:	e06d      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018f2:	4b8e      	ldr	r3, [pc, #568]	; (8001b2c <HAL_ADC_ConfigChannel+0x488>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	0691      	lsls	r1, r2, #26
 80018fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018fe:	430a      	orrs	r2, r1
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800190a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800190c:	e05c      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001914:	4b85      	ldr	r3, [pc, #532]	; (8001b2c <HAL_ADC_ConfigChannel+0x488>)
 8001916:	4013      	ands	r3, r2
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	0691      	lsls	r1, r2, #26
 800191e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001920:	430a      	orrs	r2, r1
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800192c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800192e:	e04b      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	069b      	lsls	r3, r3, #26
 8001940:	429a      	cmp	r2, r3
 8001942:	d107      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001952:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800195a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	069b      	lsls	r3, r3, #26
 8001964:	429a      	cmp	r2, r3
 8001966:	d107      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001976:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800197e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	069b      	lsls	r3, r3, #26
 8001988:	429a      	cmp	r2, r3
 800198a:	d107      	bne.n	800199c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800199a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	069b      	lsls	r3, r3, #26
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d10a      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019be:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80019c0:	e001      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80019c2:	bf00      	nop
 80019c4:	e000      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80019c6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d108      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x344>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x344>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_ADC_ConfigChannel+0x346>
 80019e8:	2300      	movs	r3, #0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f040 8131 	bne.w	8001c52 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d00f      	beq.n	8001a18 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2201      	movs	r2, #1
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	400a      	ands	r2, r1
 8001a12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a16:	e049      	b.n	8001aac <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2201      	movs	r2, #1
 8001a26:	409a      	lsls	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b09      	cmp	r3, #9
 8001a38:	d91c      	bls.n	8001a74 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6999      	ldr	r1, [r3, #24]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	3b1b      	subs	r3, #27
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	4019      	ands	r1, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	6898      	ldr	r0, [r3, #8]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	3b1b      	subs	r3, #27
 8001a66:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	619a      	str	r2, [r3, #24]
 8001a72:	e01b      	b.n	8001aac <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6959      	ldr	r1, [r3, #20]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	2207      	movs	r2, #7
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	4019      	ands	r1, r3
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6898      	ldr	r0, [r3, #8]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ab4:	d004      	beq.n	8001ac0 <HAL_ADC_ConfigChannel+0x41c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <HAL_ADC_ConfigChannel+0x48c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d101      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x420>
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <HAL_ADC_ConfigChannel+0x490>)
 8001ac2:	e000      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x422>
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <HAL_ADC_ConfigChannel+0x494>)
 8001ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b10      	cmp	r3, #16
 8001ace:	d105      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d015      	beq.n	8001b08 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ae0:	2b11      	cmp	r3, #17
 8001ae2:	d105      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00b      	beq.n	8001b08 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001af4:	2b12      	cmp	r3, #18
 8001af6:	f040 80ac 	bne.w	8001c52 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f040 80a5 	bne.w	8001c52 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b10:	d102      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x474>
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <HAL_ADC_ConfigChannel+0x48c>)
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	e023      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x4bc>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <HAL_ADC_ConfigChannel+0x48c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d10c      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x498>
 8001b22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	e01a      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x4bc>
 8001b2a:	bf00      	nop
 8001b2c:	83fff000 	.word	0x83fff000
 8001b30:	50000100 	.word	0x50000100
 8001b34:	50000300 	.word	0x50000300
 8001b38:	50000700 	.word	0x50000700
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a4a      	ldr	r2, [pc, #296]	; (8001c6c <HAL_ADC_ConfigChannel+0x5c8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d102      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x4a8>
 8001b46:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <HAL_ADC_ConfigChannel+0x5cc>)
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	e009      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x4bc>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a47      	ldr	r2, [pc, #284]	; (8001c70 <HAL_ADC_ConfigChannel+0x5cc>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d102      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x4b8>
 8001b56:	4b45      	ldr	r3, [pc, #276]	; (8001c6c <HAL_ADC_ConfigChannel+0x5c8>)
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	e001      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x4bc>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d108      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x4dc>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x4dc>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x4de>
 8001b80:	2300      	movs	r3, #0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d150      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b86:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d010      	beq.n	8001bae <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d107      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x504>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x504>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_ADC_ConfigChannel+0x506>
 8001ba8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d13c      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b10      	cmp	r3, #16
 8001bb4:	d11d      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x54e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bbe:	d118      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bca:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bcc:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <HAL_ADC_ConfigChannel+0x5d0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a29      	ldr	r2, [pc, #164]	; (8001c78 <HAL_ADC_ConfigChannel+0x5d4>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	0c9a      	lsrs	r2, r3, #18
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001be2:	e002      	b.n	8001bea <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f9      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bf0:	e02e      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b11      	cmp	r3, #17
 8001bf8:	d10b      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x56e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c02:	d106      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c0e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c10:	e01e      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b12      	cmp	r3, #18
 8001c18:	d11a      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c24:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c26:	e013      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f043 0220 	orr.w	r2, r3, #32
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c3a:	e00a      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f043 0220 	orr.w	r2, r3, #32
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c4e:	e000      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c50:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	376c      	adds	r7, #108	; 0x6c
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	50000400 	.word	0x50000400
 8001c70:	50000500 	.word	0x50000500
 8001c74:	20000000 	.word	0x20000000
 8001c78:	431bde83 	.word	0x431bde83

08001c7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b099      	sub	sp, #100	; 0x64
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c94:	d102      	bne.n	8001c9c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001c96:	4b6d      	ldr	r3, [pc, #436]	; (8001e4c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	e01a      	b.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a6a      	ldr	r2, [pc, #424]	; (8001e4c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d103      	bne.n	8001cae <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001ca6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	e011      	b.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a67      	ldr	r2, [pc, #412]	; (8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d102      	bne.n	8001cbe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001cb8:	4b66      	ldr	r3, [pc, #408]	; (8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	e009      	b.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a64      	ldr	r2, [pc, #400]	; (8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d102      	bne.n	8001cce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001cc8:	4b61      	ldr	r3, [pc, #388]	; (8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	e001      	b.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0b0      	b.n	8001e3e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e0a9      	b.n	8001e3e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f040 808d 	bne.w	8001e1c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 8086 	bne.w	8001e1c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d18:	d004      	beq.n	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a4b      	ldr	r2, [pc, #300]	; (8001e4c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d101      	bne.n	8001d28 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001d24:	4b4c      	ldr	r3, [pc, #304]	; (8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001d26:	e000      	b.n	8001d2a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001d28:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001d2a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d040      	beq.n	8001db6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d46:	035b      	lsls	r3, r3, #13
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d4e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d108      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001d70:	2300      	movs	r3, #0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d15c      	bne.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d107      	bne.n	8001d92 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001d92:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d14b      	bne.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001da0:	f023 030f 	bic.w	r3, r3, #15
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	6811      	ldr	r1, [r2, #0]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	6892      	ldr	r2, [r2, #8]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001db2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001db4:	e03c      	b.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001db6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dc0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d108      	bne.n	8001de2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001de2:	2300      	movs	r3, #0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d123      	bne.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d107      	bne.n	8001e04 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001e04:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d112      	bne.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001e0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e12:	f023 030f 	bic.w	r3, r3, #15
 8001e16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e18:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e1a:	e009      	b.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f043 0220 	orr.w	r2, r3, #32
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001e2e:	e000      	b.n	8001e32 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e30:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3764      	adds	r7, #100	; 0x64
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	50000100 	.word	0x50000100
 8001e50:	50000400 	.word	0x50000400
 8001e54:	50000500 	.word	0x50000500
 8001e58:	50000300 	.word	0x50000300
 8001e5c:	50000700 	.word	0x50000700

08001e60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d108      	bne.n	8001e8c <ADC_Enable+0x2c>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <ADC_Enable+0x2c>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <ADC_Enable+0x2e>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d13c      	bne.n	8001f0c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <ADC_Enable+0xb8>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00d      	beq.n	8001ebc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f043 0210 	orr.w	r2, r3, #16
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	f043 0201 	orr.w	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e028      	b.n	8001f0e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001ecc:	f7fe fcc2 	bl	8000854 <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ed2:	e014      	b.n	8001efe <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ed4:	f7fe fcbe 	bl	8000854 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d90d      	bls.n	8001efe <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f043 0210 	orr.w	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	f043 0201 	orr.w	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e007      	b.n	8001f0e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d1e3      	bne.n	8001ed4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	8000003f 	.word	0x8000003f

08001f1c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d108      	bne.n	8001f48 <ADC_Disable+0x2c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <ADC_Disable+0x2c>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <ADC_Disable+0x2e>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d040      	beq.n	8001fd0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 030d 	and.w	r3, r3, #13
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d10f      	bne.n	8001f7c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0202 	orr.w	r2, r2, #2
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2203      	movs	r2, #3
 8001f72:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001f74:	f7fe fc6e 	bl	8000854 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f7a:	e022      	b.n	8001fc2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f043 0210 	orr.w	r2, r3, #16
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8c:	f043 0201 	orr.w	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e01c      	b.n	8001fd2 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f98:	f7fe fc5c 	bl	8000854 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d90d      	bls.n	8001fc2 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f043 0210 	orr.w	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f043 0201 	orr.w	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e007      	b.n	8001fd2 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d0e3      	beq.n	8001f98 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200e:	4a04      	ldr	r2, [pc, #16]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	60d3      	str	r3, [r2, #12]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <__NVIC_GetPriorityGrouping+0x18>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 0307 	and.w	r3, r3, #7
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	2b00      	cmp	r3, #0
 8002050:	db0b      	blt.n	800206a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	4907      	ldr	r1, [pc, #28]	; (8002078 <__NVIC_EnableIRQ+0x38>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	2001      	movs	r0, #1
 8002062:	fa00 f202 	lsl.w	r2, r0, r2
 8002066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000e100 	.word	0xe000e100

0800207c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	2b00      	cmp	r3, #0
 800208e:	db0a      	blt.n	80020a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	490c      	ldr	r1, [pc, #48]	; (80020c8 <__NVIC_SetPriority+0x4c>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	0112      	lsls	r2, r2, #4
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	440b      	add	r3, r1
 80020a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a4:	e00a      	b.n	80020bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4908      	ldr	r1, [pc, #32]	; (80020cc <__NVIC_SetPriority+0x50>)
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	3b04      	subs	r3, #4
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	440b      	add	r3, r1
 80020ba:	761a      	strb	r2, [r3, #24]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000e100 	.word	0xe000e100
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f1c3 0307 	rsb	r3, r3, #7
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	bf28      	it	cs
 80020ee:	2304      	movcs	r3, #4
 80020f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3304      	adds	r3, #4
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d902      	bls.n	8002100 <NVIC_EncodePriority+0x30>
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3b03      	subs	r3, #3
 80020fe:	e000      	b.n	8002102 <NVIC_EncodePriority+0x32>
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	f04f 32ff 	mov.w	r2, #4294967295
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43da      	mvns	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	401a      	ands	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	43d9      	mvns	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	4313      	orrs	r3, r2
         );
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	; 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002148:	d301      	bcc.n	800214e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800214a:	2301      	movs	r3, #1
 800214c:	e00f      	b.n	800216e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800214e:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <SysTick_Config+0x40>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002156:	210f      	movs	r1, #15
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	f7ff ff8e 	bl	800207c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <SysTick_Config+0x40>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <SysTick_Config+0x40>)
 8002168:	2207      	movs	r2, #7
 800216a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	e000e010 	.word	0xe000e010

0800217c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff29 	bl	8001fdc <__NVIC_SetPriorityGrouping>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a4:	f7ff ff3e 	bl	8002024 <__NVIC_GetPriorityGrouping>
 80021a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	6978      	ldr	r0, [r7, #20]
 80021b0:	f7ff ff8e 	bl	80020d0 <NVIC_EncodePriority>
 80021b4:	4602      	mov	r2, r0
 80021b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff5d 	bl	800207c <__NVIC_SetPriority>
}
 80021c2:	bf00      	nop
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff31 	bl	8002040 <__NVIC_EnableIRQ>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ffa2 	bl	8002138 <SysTick_Config>
 80021f4:	4603      	mov	r3, r0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220e:	e160      	b.n	80024d2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	2101      	movs	r1, #1
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	4013      	ands	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8152 	beq.w	80024cc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d00b      	beq.n	8002248 <HAL_GPIO_Init+0x48>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d007      	beq.n	8002248 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800223c:	2b11      	cmp	r3, #17
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b12      	cmp	r3, #18
 8002246:	d130      	bne.n	80022aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800227e:	2201      	movs	r2, #1
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4013      	ands	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	f003 0201 	and.w	r2, r3, #1
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2203      	movs	r2, #3
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0xea>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b12      	cmp	r3, #18
 80022e8:	d123      	bne.n	8002332 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	08da      	lsrs	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3208      	adds	r2, #8
 80022f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	220f      	movs	r2, #15
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	08da      	lsrs	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3208      	adds	r2, #8
 800232c:	6939      	ldr	r1, [r7, #16]
 800232e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2203      	movs	r2, #3
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0203 	and.w	r2, r3, #3
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 80ac 	beq.w	80024cc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002374:	4b5e      	ldr	r3, [pc, #376]	; (80024f0 <HAL_GPIO_Init+0x2f0>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a5d      	ldr	r2, [pc, #372]	; (80024f0 <HAL_GPIO_Init+0x2f0>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b5b      	ldr	r3, [pc, #364]	; (80024f0 <HAL_GPIO_Init+0x2f0>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800238c:	4a59      	ldr	r2, [pc, #356]	; (80024f4 <HAL_GPIO_Init+0x2f4>)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	3302      	adds	r3, #2
 8002394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	220f      	movs	r2, #15
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023b6:	d025      	beq.n	8002404 <HAL_GPIO_Init+0x204>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a4f      	ldr	r2, [pc, #316]	; (80024f8 <HAL_GPIO_Init+0x2f8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d01f      	beq.n	8002400 <HAL_GPIO_Init+0x200>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a4e      	ldr	r2, [pc, #312]	; (80024fc <HAL_GPIO_Init+0x2fc>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d019      	beq.n	80023fc <HAL_GPIO_Init+0x1fc>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a4d      	ldr	r2, [pc, #308]	; (8002500 <HAL_GPIO_Init+0x300>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d013      	beq.n	80023f8 <HAL_GPIO_Init+0x1f8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a4c      	ldr	r2, [pc, #304]	; (8002504 <HAL_GPIO_Init+0x304>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d00d      	beq.n	80023f4 <HAL_GPIO_Init+0x1f4>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a4b      	ldr	r2, [pc, #300]	; (8002508 <HAL_GPIO_Init+0x308>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d007      	beq.n	80023f0 <HAL_GPIO_Init+0x1f0>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a4a      	ldr	r2, [pc, #296]	; (800250c <HAL_GPIO_Init+0x30c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d101      	bne.n	80023ec <HAL_GPIO_Init+0x1ec>
 80023e8:	2306      	movs	r3, #6
 80023ea:	e00c      	b.n	8002406 <HAL_GPIO_Init+0x206>
 80023ec:	2307      	movs	r3, #7
 80023ee:	e00a      	b.n	8002406 <HAL_GPIO_Init+0x206>
 80023f0:	2305      	movs	r3, #5
 80023f2:	e008      	b.n	8002406 <HAL_GPIO_Init+0x206>
 80023f4:	2304      	movs	r3, #4
 80023f6:	e006      	b.n	8002406 <HAL_GPIO_Init+0x206>
 80023f8:	2303      	movs	r3, #3
 80023fa:	e004      	b.n	8002406 <HAL_GPIO_Init+0x206>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e002      	b.n	8002406 <HAL_GPIO_Init+0x206>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_GPIO_Init+0x206>
 8002404:	2300      	movs	r3, #0
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	f002 0203 	and.w	r2, r2, #3
 800240c:	0092      	lsls	r2, r2, #2
 800240e:	4093      	lsls	r3, r2
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002416:	4937      	ldr	r1, [pc, #220]	; (80024f4 <HAL_GPIO_Init+0x2f4>)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	3302      	adds	r3, #2
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002424:	4b3a      	ldr	r3, [pc, #232]	; (8002510 <HAL_GPIO_Init+0x310>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	43db      	mvns	r3, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002448:	4a31      	ldr	r2, [pc, #196]	; (8002510 <HAL_GPIO_Init+0x310>)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800244e:	4b30      	ldr	r3, [pc, #192]	; (8002510 <HAL_GPIO_Init+0x310>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	43db      	mvns	r3, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002472:	4a27      	ldr	r2, [pc, #156]	; (8002510 <HAL_GPIO_Init+0x310>)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002478:	4b25      	ldr	r3, [pc, #148]	; (8002510 <HAL_GPIO_Init+0x310>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	43db      	mvns	r3, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800249c:	4a1c      	ldr	r2, [pc, #112]	; (8002510 <HAL_GPIO_Init+0x310>)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024a2:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <HAL_GPIO_Init+0x310>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <HAL_GPIO_Init+0x310>)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	3301      	adds	r3, #1
 80024d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f47f ae97 	bne.w	8002210 <HAL_GPIO_Init+0x10>
  }
}
 80024e2:	bf00      	nop
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40010000 	.word	0x40010000
 80024f8:	48000400 	.word	0x48000400
 80024fc:	48000800 	.word	0x48000800
 8002500:	48000c00 	.word	0x48000c00
 8002504:	48001000 	.word	0x48001000
 8002508:	48001400 	.word	0x48001400
 800250c:	48001800 	.word	0x48001800
 8002510:	40010400 	.word	0x40010400

08002514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800251a:	af00      	add	r7, sp, #0
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d102      	bne.n	800252e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	f000 bf01 	b.w	8003330 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 8160 	beq.w	80027fe <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800253e:	4bae      	ldr	r3, [pc, #696]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b04      	cmp	r3, #4
 8002548:	d00c      	beq.n	8002564 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800254a:	4bab      	ldr	r3, [pc, #684]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b08      	cmp	r3, #8
 8002554:	d159      	bne.n	800260a <HAL_RCC_OscConfig+0xf6>
 8002556:	4ba8      	ldr	r3, [pc, #672]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800255e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002562:	d152      	bne.n	800260a <HAL_RCC_OscConfig+0xf6>
 8002564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002568:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002578:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d102      	bne.n	8002596 <HAL_RCC_OscConfig+0x82>
 8002590:	4b99      	ldr	r3, [pc, #612]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	e015      	b.n	80025c2 <HAL_RCC_OscConfig+0xae>
 8002596:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800259a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80025aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ae:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80025b2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80025be:	4b8e      	ldr	r3, [pc, #568]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025c6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80025ca:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80025ce:	fa92 f2a2 	rbit	r2, r2
 80025d2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80025d6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80025da:	fab2 f282 	clz	r2, r2
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f042 0220 	orr.w	r2, r2, #32
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f002 021f 	and.w	r2, r2, #31
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f202 	lsl.w	r2, r1, r2
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8102 	beq.w	80027fc <HAL_RCC_OscConfig+0x2e8>
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 80fc 	bne.w	80027fc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	f000 be93 	b.w	8003330 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002614:	d106      	bne.n	8002624 <HAL_RCC_OscConfig+0x110>
 8002616:	4b78      	ldr	r3, [pc, #480]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a77      	ldr	r2, [pc, #476]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e030      	b.n	8002686 <HAL_RCC_OscConfig+0x172>
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0x134>
 800262e:	4b72      	ldr	r3, [pc, #456]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a71      	ldr	r2, [pc, #452]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 8002634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a6e      	ldr	r2, [pc, #440]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 8002640:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e01e      	b.n	8002686 <HAL_RCC_OscConfig+0x172>
 8002648:	1d3b      	adds	r3, r7, #4
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002652:	d10c      	bne.n	800266e <HAL_RCC_OscConfig+0x15a>
 8002654:	4b68      	ldr	r3, [pc, #416]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a67      	ldr	r2, [pc, #412]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 800265a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	4b65      	ldr	r3, [pc, #404]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a64      	ldr	r2, [pc, #400]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 8002666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	e00b      	b.n	8002686 <HAL_RCC_OscConfig+0x172>
 800266e:	4b62      	ldr	r3, [pc, #392]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a61      	ldr	r2, [pc, #388]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 8002674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4b5f      	ldr	r3, [pc, #380]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a5e      	ldr	r2, [pc, #376]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 8002680:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002684:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d059      	beq.n	8002744 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7fe f8e0 	bl	8000854 <HAL_GetTick>
 8002694:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800269a:	f7fe f8db 	bl	8000854 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d902      	bls.n	80026b0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	f000 be40 	b.w	8003330 <HAL_RCC_OscConfig+0xe1c>
 80026b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026b4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80026c4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d102      	bne.n	80026e2 <HAL_RCC_OscConfig+0x1ce>
 80026dc:	4b46      	ldr	r3, [pc, #280]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	e015      	b.n	800270e <HAL_RCC_OscConfig+0x1fa>
 80026e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80026f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026fa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80026fe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800270a:	4b3b      	ldr	r3, [pc, #236]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002712:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002716:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800271a:	fa92 f2a2 	rbit	r2, r2
 800271e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002722:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002726:	fab2 f282 	clz	r2, r2
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	f042 0220 	orr.w	r2, r2, #32
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	f002 021f 	and.w	r2, r2, #31
 8002736:	2101      	movs	r1, #1
 8002738:	fa01 f202 	lsl.w	r2, r1, r2
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0ab      	beq.n	800269a <HAL_RCC_OscConfig+0x186>
 8002742:	e05c      	b.n	80027fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe f886 	bl	8000854 <HAL_GetTick>
 8002748:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800274e:	f7fe f881 	bl	8000854 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d902      	bls.n	8002764 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	f000 bde6 	b.w	8003330 <HAL_RCC_OscConfig+0xe1c>
 8002764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002768:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002778:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d102      	bne.n	8002796 <HAL_RCC_OscConfig+0x282>
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	e015      	b.n	80027c2 <HAL_RCC_OscConfig+0x2ae>
 8002796:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800279a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80027aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80027b2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80027be:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <HAL_RCC_OscConfig+0x2e4>)
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027c6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80027ca:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80027ce:	fa92 f2a2 	rbit	r2, r2
 80027d2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80027d6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80027da:	fab2 f282 	clz	r2, r2
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	f042 0220 	orr.w	r2, r2, #32
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	f002 021f 	and.w	r2, r2, #31
 80027ea:	2101      	movs	r1, #1
 80027ec:	fa01 f202 	lsl.w	r2, r1, r2
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1ab      	bne.n	800274e <HAL_RCC_OscConfig+0x23a>
 80027f6:	e002      	b.n	80027fe <HAL_RCC_OscConfig+0x2ea>
 80027f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fe:	1d3b      	adds	r3, r7, #4
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 8170 	beq.w	8002aee <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800280e:	4bd0      	ldr	r3, [pc, #832]	; (8002b50 <HAL_RCC_OscConfig+0x63c>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00c      	beq.n	8002834 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800281a:	4bcd      	ldr	r3, [pc, #820]	; (8002b50 <HAL_RCC_OscConfig+0x63c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b08      	cmp	r3, #8
 8002824:	d16d      	bne.n	8002902 <HAL_RCC_OscConfig+0x3ee>
 8002826:	4bca      	ldr	r3, [pc, #808]	; (8002b50 <HAL_RCC_OscConfig+0x63c>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800282e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002832:	d166      	bne.n	8002902 <HAL_RCC_OscConfig+0x3ee>
 8002834:	2302      	movs	r3, #2
 8002836:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002846:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	095b      	lsrs	r3, r3, #5
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d102      	bne.n	8002864 <HAL_RCC_OscConfig+0x350>
 800285e:	4bbc      	ldr	r3, [pc, #752]	; (8002b50 <HAL_RCC_OscConfig+0x63c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	e013      	b.n	800288c <HAL_RCC_OscConfig+0x378>
 8002864:	2302      	movs	r3, #2
 8002866:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002876:	2302      	movs	r3, #2
 8002878:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800287c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002888:	4bb1      	ldr	r3, [pc, #708]	; (8002b50 <HAL_RCC_OscConfig+0x63c>)
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	2202      	movs	r2, #2
 800288e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002892:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002896:	fa92 f2a2 	rbit	r2, r2
 800289a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800289e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80028a2:	fab2 f282 	clz	r2, r2
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	f042 0220 	orr.w	r2, r2, #32
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	f002 021f 	and.w	r2, r2, #31
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <HAL_RCC_OscConfig+0x3ba>
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d002      	beq.n	80028ce <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	f000 bd31 	b.w	8003330 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ce:	4ba0      	ldr	r3, [pc, #640]	; (8002b50 <HAL_RCC_OscConfig+0x63c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	21f8      	movs	r1, #248	; 0xf8
 80028de:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80028e6:	fa91 f1a1 	rbit	r1, r1
 80028ea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80028ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80028f2:	fab1 f181 	clz	r1, r1
 80028f6:	b2c9      	uxtb	r1, r1
 80028f8:	408b      	lsls	r3, r1
 80028fa:	4995      	ldr	r1, [pc, #596]	; (8002b50 <HAL_RCC_OscConfig+0x63c>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002900:	e0f5      	b.n	8002aee <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002902:	1d3b      	adds	r3, r7, #4
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8085 	beq.w	8002a18 <HAL_RCC_OscConfig+0x504>
 800290e:	2301      	movs	r3, #1
 8002910:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002920:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800292e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	461a      	mov	r2, r3
 8002936:	2301      	movs	r3, #1
 8002938:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7fd ff8b 	bl	8000854 <HAL_GetTick>
 800293e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	e00a      	b.n	800295a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002944:	f7fd ff86 	bl	8000854 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d902      	bls.n	800295a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	f000 bceb 	b.w	8003330 <HAL_RCC_OscConfig+0xe1c>
 800295a:	2302      	movs	r3, #2
 800295c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800296c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d102      	bne.n	800298a <HAL_RCC_OscConfig+0x476>
 8002984:	4b72      	ldr	r3, [pc, #456]	; (8002b50 <HAL_RCC_OscConfig+0x63c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	e013      	b.n	80029b2 <HAL_RCC_OscConfig+0x49e>
 800298a:	2302      	movs	r3, #2
 800298c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800299c:	2302      	movs	r3, #2
 800299e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80029a2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80029ae:	4b68      	ldr	r3, [pc, #416]	; (8002b50 <HAL_RCC_OscConfig+0x63c>)
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	2202      	movs	r2, #2
 80029b4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80029b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80029bc:	fa92 f2a2 	rbit	r2, r2
 80029c0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80029c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80029c8:	fab2 f282 	clz	r2, r2
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	f042 0220 	orr.w	r2, r2, #32
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	f002 021f 	and.w	r2, r2, #31
 80029d8:	2101      	movs	r1, #1
 80029da:	fa01 f202 	lsl.w	r2, r1, r2
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0af      	beq.n	8002944 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e4:	4b5a      	ldr	r3, [pc, #360]	; (8002b50 <HAL_RCC_OscConfig+0x63c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	21f8      	movs	r1, #248	; 0xf8
 80029f4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80029fc:	fa91 f1a1 	rbit	r1, r1
 8002a00:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002a04:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a08:	fab1 f181 	clz	r1, r1
 8002a0c:	b2c9      	uxtb	r1, r1
 8002a0e:	408b      	lsls	r3, r1
 8002a10:	494f      	ldr	r1, [pc, #316]	; (8002b50 <HAL_RCC_OscConfig+0x63c>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]
 8002a16:	e06a      	b.n	8002aee <HAL_RCC_OscConfig+0x5da>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002a2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	461a      	mov	r2, r3
 8002a40:	2300      	movs	r3, #0
 8002a42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fd ff06 	bl	8000854 <HAL_GetTick>
 8002a48:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4c:	e00a      	b.n	8002a64 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a4e:	f7fd ff01 	bl	8000854 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d902      	bls.n	8002a64 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	f000 bc66 	b.w	8003330 <HAL_RCC_OscConfig+0xe1c>
 8002a64:	2302      	movs	r3, #2
 8002a66:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002a76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d102      	bne.n	8002a94 <HAL_RCC_OscConfig+0x580>
 8002a8e:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <HAL_RCC_OscConfig+0x63c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	e013      	b.n	8002abc <HAL_RCC_OscConfig+0x5a8>
 8002a94:	2302      	movs	r3, #2
 8002a96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002aac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ab8:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <HAL_RCC_OscConfig+0x63c>)
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	2202      	movs	r2, #2
 8002abe:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002ac2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002ac6:	fa92 f2a2 	rbit	r2, r2
 8002aca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002ace:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ad2:	fab2 f282 	clz	r2, r2
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	f042 0220 	orr.w	r2, r2, #32
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	f002 021f 	and.w	r2, r2, #31
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1af      	bne.n	8002a4e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80da 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d069      	beq.n	8002bdc <HAL_RCC_OscConfig+0x6c8>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002b1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_OscConfig+0x640>)
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2301      	movs	r3, #1
 8002b30:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b32:	f7fd fe8f 	bl	8000854 <HAL_GetTick>
 8002b36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3a:	e00d      	b.n	8002b58 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b3c:	f7fd fe8a 	bl	8000854 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d905      	bls.n	8002b58 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e3ef      	b.n	8003330 <HAL_RCC_OscConfig+0xe1c>
 8002b50:	40021000 	.word	0x40021000
 8002b54:	10908120 	.word	0x10908120
 8002b58:	2302      	movs	r3, #2
 8002b5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b62:	fa93 f2a3 	rbit	r2, r3
 8002b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002b70:	2202      	movs	r2, #2
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	fa93 f2a3 	rbit	r2, r3
 8002b7e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002b88:	2202      	movs	r2, #2
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	fa93 f2a3 	rbit	r2, r3
 8002b96:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002b9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9c:	4ba4      	ldr	r3, [pc, #656]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	6019      	str	r1, [r3, #0]
 8002ba8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	fa93 f1a3 	rbit	r1, r3
 8002bb2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002bb6:	6019      	str	r1, [r3, #0]
  return result;
 8002bb8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	2101      	movs	r1, #1
 8002bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0b0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x628>
 8002bda:	e06a      	b.n	8002cb2 <HAL_RCC_OscConfig+0x79e>
 8002bdc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002be0:	2201      	movs	r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	fa93 f2a3 	rbit	r2, r3
 8002bee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002bf2:	601a      	str	r2, [r3, #0]
  return result;
 8002bf4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002bf8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b8c      	ldr	r3, [pc, #560]	; (8002e34 <HAL_RCC_OscConfig+0x920>)
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0e:	f7fd fe21 	bl	8000854 <HAL_GetTick>
 8002c12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c16:	e009      	b.n	8002c2c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c18:	f7fd fe1c 	bl	8000854 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e381      	b.n	8003330 <HAL_RCC_OscConfig+0xe1c>
 8002c2c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c30:	2202      	movs	r2, #2
 8002c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	fa93 f2a3 	rbit	r2, r3
 8002c3e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c48:	2202      	movs	r2, #2
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	fa93 f2a3 	rbit	r2, r3
 8002c56:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c60:	2202      	movs	r2, #2
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	fa93 f2a3 	rbit	r2, r3
 8002c6e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002c72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c74:	4b6e      	ldr	r3, [pc, #440]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	6019      	str	r1, [r3, #0]
 8002c80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	fa93 f1a3 	rbit	r1, r3
 8002c8a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c8e:	6019      	str	r1, [r3, #0]
  return result;
 8002c90:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1b2      	bne.n	8002c18 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb2:	1d3b      	adds	r3, r7, #4
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 8157 	beq.w	8002f70 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc8:	4b59      	ldr	r3, [pc, #356]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d112      	bne.n	8002cfa <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd4:	4b56      	ldr	r3, [pc, #344]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	4a55      	ldr	r2, [pc, #340]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cde:	61d3      	str	r3, [r2, #28]
 8002ce0:	4b53      	ldr	r3, [pc, #332]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ce8:	f107 030c 	add.w	r3, r7, #12
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f107 030c 	add.w	r3, r7, #12
 8002cf2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfa:	4b4f      	ldr	r3, [pc, #316]	; (8002e38 <HAL_RCC_OscConfig+0x924>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d11a      	bne.n	8002d3c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d06:	4b4c      	ldr	r3, [pc, #304]	; (8002e38 <HAL_RCC_OscConfig+0x924>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a4b      	ldr	r2, [pc, #300]	; (8002e38 <HAL_RCC_OscConfig+0x924>)
 8002d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d12:	f7fd fd9f 	bl	8000854 <HAL_GetTick>
 8002d16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1a:	e009      	b.n	8002d30 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1c:	f7fd fd9a 	bl	8000854 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b64      	cmp	r3, #100	; 0x64
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e2ff      	b.n	8003330 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d30:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <HAL_RCC_OscConfig+0x924>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0ef      	beq.n	8002d1c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3c:	1d3b      	adds	r3, r7, #4
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d106      	bne.n	8002d54 <HAL_RCC_OscConfig+0x840>
 8002d46:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	4a39      	ldr	r2, [pc, #228]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6213      	str	r3, [r2, #32]
 8002d52:	e02f      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a0>
 8002d54:	1d3b      	adds	r3, r7, #4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x864>
 8002d5e:	4b34      	ldr	r3, [pc, #208]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4a33      	ldr	r2, [pc, #204]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6213      	str	r3, [r2, #32]
 8002d6a:	4b31      	ldr	r3, [pc, #196]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4a30      	ldr	r2, [pc, #192]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	6213      	str	r3, [r2, #32]
 8002d76:	e01d      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a0>
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b05      	cmp	r3, #5
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x888>
 8002d82:	4b2b      	ldr	r3, [pc, #172]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4a2a      	ldr	r2, [pc, #168]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002d88:	f043 0304 	orr.w	r3, r3, #4
 8002d8c:	6213      	str	r3, [r2, #32]
 8002d8e:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4a27      	ldr	r2, [pc, #156]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6213      	str	r3, [r2, #32]
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0x8a0>
 8002d9c:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	4a23      	ldr	r2, [pc, #140]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002da2:	f023 0301 	bic.w	r3, r3, #1
 8002da6:	6213      	str	r3, [r2, #32]
 8002da8:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4a20      	ldr	r2, [pc, #128]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002dae:	f023 0304 	bic.w	r3, r3, #4
 8002db2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d06a      	beq.n	8002e94 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbe:	f7fd fd49 	bl	8000854 <HAL_GetTick>
 8002dc2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc6:	e00b      	b.n	8002de0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7fd fd44 	bl	8000854 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e2a7      	b.n	8003330 <HAL_RCC_OscConfig+0xe1c>
 8002de0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002de4:	2202      	movs	r2, #2
 8002de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	fa93 f2a3 	rbit	r2, r3
 8002df2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	fa93 f2a3 	rbit	r2, r3
 8002e0a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e0e:	601a      	str	r2, [r3, #0]
  return result;
 8002e10:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e14:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d108      	bne.n	8002e3c <HAL_RCC_OscConfig+0x928>
 8002e2a:	4b01      	ldr	r3, [pc, #4]	; (8002e30 <HAL_RCC_OscConfig+0x91c>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	e013      	b.n	8002e58 <HAL_RCC_OscConfig+0x944>
 8002e30:	40021000 	.word	0x40021000
 8002e34:	10908120 	.word	0x10908120
 8002e38:	40007000 	.word	0x40007000
 8002e3c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e40:	2202      	movs	r2, #2
 8002e42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	fa93 f2a3 	rbit	r2, r3
 8002e4e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	4bc0      	ldr	r3, [pc, #768]	; (8003158 <HAL_RCC_OscConfig+0xc44>)
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	6011      	str	r1, [r2, #0]
 8002e60:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	fa92 f1a2 	rbit	r1, r2
 8002e6a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e6e:	6011      	str	r1, [r2, #0]
  return result;
 8002e70:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	fab2 f282 	clz	r2, r2
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	f002 021f 	and.w	r2, r2, #31
 8002e86:	2101      	movs	r1, #1
 8002e88:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d09a      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x8b4>
 8002e92:	e063      	b.n	8002f5c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e94:	f7fd fcde 	bl	8000854 <HAL_GetTick>
 8002e98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9c:	e00b      	b.n	8002eb6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e9e:	f7fd fcd9 	bl	8000854 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e23c      	b.n	8003330 <HAL_RCC_OscConfig+0xe1c>
 8002eb6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002eba:	2202      	movs	r2, #2
 8002ebc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	fa93 f2a3 	rbit	r2, r3
 8002ec8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	fa93 f2a3 	rbit	r2, r3
 8002ee0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ee4:	601a      	str	r2, [r3, #0]
  return result;
 8002ee6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002eea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eec:	fab3 f383 	clz	r3, r3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d102      	bne.n	8002f06 <HAL_RCC_OscConfig+0x9f2>
 8002f00:	4b95      	ldr	r3, [pc, #596]	; (8003158 <HAL_RCC_OscConfig+0xc44>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	e00d      	b.n	8002f22 <HAL_RCC_OscConfig+0xa0e>
 8002f06:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	fa93 f2a3 	rbit	r2, r3
 8002f18:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	4b8e      	ldr	r3, [pc, #568]	; (8003158 <HAL_RCC_OscConfig+0xc44>)
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002f26:	2102      	movs	r1, #2
 8002f28:	6011      	str	r1, [r2, #0]
 8002f2a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	fa92 f1a2 	rbit	r1, r2
 8002f34:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f38:	6011      	str	r1, [r2, #0]
  return result;
 8002f3a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	fab2 f282 	clz	r2, r2
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	f002 021f 	and.w	r2, r2, #31
 8002f50:	2101      	movs	r1, #1
 8002f52:	fa01 f202 	lsl.w	r2, r1, r2
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1a0      	bne.n	8002e9e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f5c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d105      	bne.n	8002f70 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f64:	4b7c      	ldr	r3, [pc, #496]	; (8003158 <HAL_RCC_OscConfig+0xc44>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	4a7b      	ldr	r2, [pc, #492]	; (8003158 <HAL_RCC_OscConfig+0xc44>)
 8002f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 81d9 	beq.w	800332e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f7c:	4b76      	ldr	r3, [pc, #472]	; (8003158 <HAL_RCC_OscConfig+0xc44>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	f000 81a6 	beq.w	80032d6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8a:	1d3b      	adds	r3, r7, #4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	f040 811e 	bne.w	80031d2 <HAL_RCC_OscConfig+0xcbe>
 8002f96:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002f9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	fa93 f2a3 	rbit	r2, r3
 8002faa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002fae:	601a      	str	r2, [r3, #0]
  return result;
 8002fb0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002fb4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2300      	movs	r3, #0
 8002fca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fd fc42 	bl	8000854 <HAL_GetTick>
 8002fd0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd4:	e009      	b.n	8002fea <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd6:	f7fd fc3d 	bl	8000854 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e1a2      	b.n	8003330 <HAL_RCC_OscConfig+0xe1c>
 8002fea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	fa93 f2a3 	rbit	r2, r3
 8002ffe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003002:	601a      	str	r2, [r3, #0]
  return result;
 8003004:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003008:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d102      	bne.n	8003024 <HAL_RCC_OscConfig+0xb10>
 800301e:	4b4e      	ldr	r3, [pc, #312]	; (8003158 <HAL_RCC_OscConfig+0xc44>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	e01b      	b.n	800305c <HAL_RCC_OscConfig+0xb48>
 8003024:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003028:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800302c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	fa93 f2a3 	rbit	r2, r3
 8003038:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003042:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	fa93 f2a3 	rbit	r2, r3
 8003052:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	4b3f      	ldr	r3, [pc, #252]	; (8003158 <HAL_RCC_OscConfig+0xc44>)
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003060:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003064:	6011      	str	r1, [r2, #0]
 8003066:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	fa92 f1a2 	rbit	r1, r2
 8003070:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003074:	6011      	str	r1, [r2, #0]
  return result;
 8003076:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	fab2 f282 	clz	r2, r2
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	f042 0220 	orr.w	r2, r2, #32
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	f002 021f 	and.w	r2, r2, #31
 800308c:	2101      	movs	r1, #1
 800308e:	fa01 f202 	lsl.w	r2, r1, r2
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d19e      	bne.n	8002fd6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003098:	4b2f      	ldr	r3, [pc, #188]	; (8003158 <HAL_RCC_OscConfig+0xc44>)
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	f023 020f 	bic.w	r2, r3, #15
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	492c      	ldr	r1, [pc, #176]	; (8003158 <HAL_RCC_OscConfig+0xc44>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	62cb      	str	r3, [r1, #44]	; 0x2c
 80030ac:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <HAL_RCC_OscConfig+0xc44>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80030b4:	1d3b      	adds	r3, r7, #4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6a19      	ldr	r1, [r3, #32]
 80030ba:	1d3b      	adds	r3, r7, #4
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	430b      	orrs	r3, r1
 80030c2:	4925      	ldr	r1, [pc, #148]	; (8003158 <HAL_RCC_OscConfig+0xc44>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	604b      	str	r3, [r1, #4]
 80030c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80030cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	fa93 f2a3 	rbit	r2, r3
 80030dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030e0:	601a      	str	r2, [r3, #0]
  return result;
 80030e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030e6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e8:	fab3 f383 	clz	r3, r3
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	461a      	mov	r2, r3
 80030fa:	2301      	movs	r3, #1
 80030fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fd fba9 	bl	8000854 <HAL_GetTick>
 8003102:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003106:	e009      	b.n	800311c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003108:	f7fd fba4 	bl	8000854 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e109      	b.n	8003330 <HAL_RCC_OscConfig+0xe1c>
 800311c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003120:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	fa93 f2a3 	rbit	r2, r3
 8003130:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003134:	601a      	str	r2, [r3, #0]
  return result;
 8003136:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800313a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	b2db      	uxtb	r3, r3
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	d105      	bne.n	800315c <HAL_RCC_OscConfig+0xc48>
 8003150:	4b01      	ldr	r3, [pc, #4]	; (8003158 <HAL_RCC_OscConfig+0xc44>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	e01e      	b.n	8003194 <HAL_RCC_OscConfig+0xc80>
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000
 800315c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003160:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003164:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	fa93 f2a3 	rbit	r2, r3
 8003170:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800317a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	fa93 f2a3 	rbit	r2, r3
 800318a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	4b6a      	ldr	r3, [pc, #424]	; (800333c <HAL_RCC_OscConfig+0xe28>)
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003198:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800319c:	6011      	str	r1, [r2, #0]
 800319e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	fa92 f1a2 	rbit	r1, r2
 80031a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031ac:	6011      	str	r1, [r2, #0]
  return result;
 80031ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	fab2 f282 	clz	r2, r2
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	f042 0220 	orr.w	r2, r2, #32
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	f002 021f 	and.w	r2, r2, #31
 80031c4:	2101      	movs	r1, #1
 80031c6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d09b      	beq.n	8003108 <HAL_RCC_OscConfig+0xbf4>
 80031d0:	e0ad      	b.n	800332e <HAL_RCC_OscConfig+0xe1a>
 80031d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	fa93 f2a3 	rbit	r2, r3
 80031e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031ea:	601a      	str	r2, [r3, #0]
  return result;
 80031ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031f0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	461a      	mov	r2, r3
 8003204:	2300      	movs	r3, #0
 8003206:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fd fb24 	bl	8000854 <HAL_GetTick>
 800320c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003210:	e009      	b.n	8003226 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003212:	f7fd fb1f 	bl	8000854 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e084      	b.n	8003330 <HAL_RCC_OscConfig+0xe1c>
 8003226:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800322a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800322e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	fa93 f2a3 	rbit	r2, r3
 800323a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800323e:	601a      	str	r2, [r3, #0]
  return result;
 8003240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003244:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003246:	fab3 f383 	clz	r3, r3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b01      	cmp	r3, #1
 8003258:	d102      	bne.n	8003260 <HAL_RCC_OscConfig+0xd4c>
 800325a:	4b38      	ldr	r3, [pc, #224]	; (800333c <HAL_RCC_OscConfig+0xe28>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	e01b      	b.n	8003298 <HAL_RCC_OscConfig+0xd84>
 8003260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003264:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	fa93 f2a3 	rbit	r2, r3
 8003274:	f107 0320 	add.w	r3, r7, #32
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	f107 031c 	add.w	r3, r7, #28
 800327e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	f107 031c 	add.w	r3, r7, #28
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	fa93 f2a3 	rbit	r2, r3
 800328e:	f107 0318 	add.w	r3, r7, #24
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	4b29      	ldr	r3, [pc, #164]	; (800333c <HAL_RCC_OscConfig+0xe28>)
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	f107 0214 	add.w	r2, r7, #20
 800329c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032a0:	6011      	str	r1, [r2, #0]
 80032a2:	f107 0214 	add.w	r2, r7, #20
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	fa92 f1a2 	rbit	r1, r2
 80032ac:	f107 0210 	add.w	r2, r7, #16
 80032b0:	6011      	str	r1, [r2, #0]
  return result;
 80032b2:	f107 0210 	add.w	r2, r7, #16
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	fab2 f282 	clz	r2, r2
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	f042 0220 	orr.w	r2, r2, #32
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	f002 021f 	and.w	r2, r2, #31
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f202 	lsl.w	r2, r1, r2
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d19e      	bne.n	8003212 <HAL_RCC_OscConfig+0xcfe>
 80032d4:	e02b      	b.n	800332e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d6:	1d3b      	adds	r3, r7, #4
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e025      	b.n	8003330 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032e4:	4b15      	ldr	r3, [pc, #84]	; (800333c <HAL_RCC_OscConfig+0xe28>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80032ec:	4b13      	ldr	r3, [pc, #76]	; (800333c <HAL_RCC_OscConfig+0xe28>)
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80032f8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	429a      	cmp	r2, r3
 8003304:	d111      	bne.n	800332a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003306:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800330a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800330e:	1d3b      	adds	r3, r7, #4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003314:	429a      	cmp	r2, r3
 8003316:	d108      	bne.n	800332a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003318:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800331c:	f003 020f 	and.w	r2, r3, #15
 8003320:	1d3b      	adds	r3, r7, #4
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003326:	429a      	cmp	r2, r3
 8003328:	d001      	beq.n	800332e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000

08003340 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b09e      	sub	sp, #120	; 0x78
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e162      	b.n	800361e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003358:	4b90      	ldr	r3, [pc, #576]	; (800359c <HAL_RCC_ClockConfig+0x25c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d910      	bls.n	8003388 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b8d      	ldr	r3, [pc, #564]	; (800359c <HAL_RCC_ClockConfig+0x25c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 0207 	bic.w	r2, r3, #7
 800336e:	498b      	ldr	r1, [pc, #556]	; (800359c <HAL_RCC_ClockConfig+0x25c>)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b89      	ldr	r3, [pc, #548]	; (800359c <HAL_RCC_ClockConfig+0x25c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e14a      	b.n	800361e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003394:	4b82      	ldr	r3, [pc, #520]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	497f      	ldr	r1, [pc, #508]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80dc 	beq.w	800356c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d13c      	bne.n	8003436 <HAL_RCC_ClockConfig+0xf6>
 80033bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033c4:	fa93 f3a3 	rbit	r3, r3
 80033c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80033ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d102      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xa6>
 80033e0:	4b6f      	ldr	r3, [pc, #444]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	e00f      	b.n	8003406 <HAL_RCC_ClockConfig+0xc6>
 80033e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	667b      	str	r3, [r7, #100]	; 0x64
 80033f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033f8:	663b      	str	r3, [r7, #96]	; 0x60
 80033fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033fc:	fa93 f3a3 	rbit	r3, r3
 8003400:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003402:	4b67      	ldr	r3, [pc, #412]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800340a:	65ba      	str	r2, [r7, #88]	; 0x58
 800340c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800340e:	fa92 f2a2 	rbit	r2, r2
 8003412:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003414:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003416:	fab2 f282 	clz	r2, r2
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	f042 0220 	orr.w	r2, r2, #32
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	f002 021f 	and.w	r2, r2, #31
 8003426:	2101      	movs	r1, #1
 8003428:	fa01 f202 	lsl.w	r2, r1, r2
 800342c:	4013      	ands	r3, r2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d17b      	bne.n	800352a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e0f3      	b.n	800361e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d13c      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x178>
 800343e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003442:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800344c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <HAL_RCC_ClockConfig+0x128>
 8003462:	4b4f      	ldr	r3, [pc, #316]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	e00f      	b.n	8003488 <HAL_RCC_ClockConfig+0x148>
 8003468:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800346c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003470:	fa93 f3a3 	rbit	r3, r3
 8003474:	647b      	str	r3, [r7, #68]	; 0x44
 8003476:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800347a:	643b      	str	r3, [r7, #64]	; 0x40
 800347c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800347e:	fa93 f3a3 	rbit	r3, r3
 8003482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003484:	4b46      	ldr	r3, [pc, #280]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800348c:	63ba      	str	r2, [r7, #56]	; 0x38
 800348e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003490:	fa92 f2a2 	rbit	r2, r2
 8003494:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003498:	fab2 f282 	clz	r2, r2
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	f042 0220 	orr.w	r2, r2, #32
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	f002 021f 	and.w	r2, r2, #31
 80034a8:	2101      	movs	r1, #1
 80034aa:	fa01 f202 	lsl.w	r2, r1, r2
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d13a      	bne.n	800352a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0b2      	b.n	800361e <HAL_RCC_ClockConfig+0x2de>
 80034b8:	2302      	movs	r3, #2
 80034ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d102      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x1a0>
 80034da:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	e00d      	b.n	80034fc <HAL_RCC_ClockConfig+0x1bc>
 80034e0:	2302      	movs	r3, #2
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
 80034ec:	2302      	movs	r3, #2
 80034ee:	623b      	str	r3, [r7, #32]
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	61fb      	str	r3, [r7, #28]
 80034f8:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	2202      	movs	r2, #2
 80034fe:	61ba      	str	r2, [r7, #24]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	fa92 f2a2 	rbit	r2, r2
 8003506:	617a      	str	r2, [r7, #20]
  return result;
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	fab2 f282 	clz	r2, r2
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	f042 0220 	orr.w	r2, r2, #32
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	f002 021f 	and.w	r2, r2, #31
 800351a:	2101      	movs	r1, #1
 800351c:	fa01 f202 	lsl.w	r2, r1, r2
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e079      	b.n	800361e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800352a:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f023 0203 	bic.w	r2, r3, #3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	491a      	ldr	r1, [pc, #104]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800353c:	f7fd f98a 	bl	8000854 <HAL_GetTick>
 8003540:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003542:	e00a      	b.n	800355a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003544:	f7fd f986 	bl	8000854 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d901      	bls.n	800355a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e061      	b.n	800361e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355a:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 020c 	and.w	r2, r3, #12
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	429a      	cmp	r2, r3
 800356a:	d1eb      	bne.n	8003544 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCC_ClockConfig+0x25c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d214      	bcs.n	80035a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357a:	4b08      	ldr	r3, [pc, #32]	; (800359c <HAL_RCC_ClockConfig+0x25c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 0207 	bic.w	r2, r3, #7
 8003582:	4906      	ldr	r1, [pc, #24]	; (800359c <HAL_RCC_ClockConfig+0x25c>)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800358a:	4b04      	ldr	r3, [pc, #16]	; (800359c <HAL_RCC_ClockConfig+0x25c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e040      	b.n	800361e <HAL_RCC_ClockConfig+0x2de>
 800359c:	40022000 	.word	0x40022000
 80035a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b0:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <HAL_RCC_ClockConfig+0x2e8>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	491a      	ldr	r1, [pc, #104]	; (8003628 <HAL_RCC_ClockConfig+0x2e8>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ce:	4b16      	ldr	r3, [pc, #88]	; (8003628 <HAL_RCC_ClockConfig+0x2e8>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4912      	ldr	r1, [pc, #72]	; (8003628 <HAL_RCC_ClockConfig+0x2e8>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035e2:	f000 f829 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 80035e6:	4601      	mov	r1, r0
 80035e8:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <HAL_RCC_ClockConfig+0x2e8>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035f0:	22f0      	movs	r2, #240	; 0xf0
 80035f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	fa92 f2a2 	rbit	r2, r2
 80035fa:	60fa      	str	r2, [r7, #12]
  return result;
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	fab2 f282 	clz	r2, r2
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	40d3      	lsrs	r3, r2
 8003606:	4a09      	ldr	r2, [pc, #36]	; (800362c <HAL_RCC_ClockConfig+0x2ec>)
 8003608:	5cd3      	ldrb	r3, [r2, r3]
 800360a:	fa21 f303 	lsr.w	r3, r1, r3
 800360e:	4a08      	ldr	r2, [pc, #32]	; (8003630 <HAL_RCC_ClockConfig+0x2f0>)
 8003610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003612:	4b08      	ldr	r3, [pc, #32]	; (8003634 <HAL_RCC_ClockConfig+0x2f4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fd f8d8 	bl	80007cc <HAL_InitTick>
  
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3778      	adds	r7, #120	; 0x78
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40021000 	.word	0x40021000
 800362c:	08004cb4 	.word	0x08004cb4
 8003630:	20000000 	.word	0x20000000
 8003634:	20000004 	.word	0x20000004

08003638 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003638:	b480      	push	{r7}
 800363a:	b08b      	sub	sp, #44	; 0x2c
 800363c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	2300      	movs	r3, #0
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003652:	4b2a      	ldr	r3, [pc, #168]	; (80036fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b04      	cmp	r3, #4
 8003660:	d002      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x30>
 8003662:	2b08      	cmp	r3, #8
 8003664:	d003      	beq.n	800366e <HAL_RCC_GetSysClockFreq+0x36>
 8003666:	e03f      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003668:	4b25      	ldr	r3, [pc, #148]	; (8003700 <HAL_RCC_GetSysClockFreq+0xc8>)
 800366a:	623b      	str	r3, [r7, #32]
      break;
 800366c:	e03f      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003674:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003678:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	fa92 f2a2 	rbit	r2, r2
 8003680:	607a      	str	r2, [r7, #4]
  return result;
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	fab2 f282 	clz	r2, r2
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	40d3      	lsrs	r3, r2
 800368c:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <HAL_RCC_GetSysClockFreq+0xcc>)
 800368e:	5cd3      	ldrb	r3, [r2, r3]
 8003690:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003692:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	220f      	movs	r2, #15
 800369c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	fa92 f2a2 	rbit	r2, r2
 80036a4:	60fa      	str	r2, [r7, #12]
  return result;
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	fab2 f282 	clz	r2, r2
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	40d3      	lsrs	r3, r2
 80036b0:	4a15      	ldr	r2, [pc, #84]	; (8003708 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036b2:	5cd3      	ldrb	r3, [r2, r3]
 80036b4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036c0:	4a0f      	ldr	r2, [pc, #60]	; (8003700 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
 80036d0:	e007      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036d2:	4a0b      	ldr	r2, [pc, #44]	; (8003700 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	fb02 f303 	mul.w	r3, r2, r3
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	623b      	str	r3, [r7, #32]
      break;
 80036e6:	e002      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036ea:	623b      	str	r3, [r7, #32]
      break;
 80036ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ee:	6a3b      	ldr	r3, [r7, #32]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	372c      	adds	r7, #44	; 0x2c
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	40021000 	.word	0x40021000
 8003700:	007a1200 	.word	0x007a1200
 8003704:	08004cc4 	.word	0x08004cc4
 8003708:	08004cd4 	.word	0x08004cd4

0800370c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b092      	sub	sp, #72	; 0x48
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800371c:	2300      	movs	r3, #0
 800371e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80d4 	beq.w	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003730:	4b4e      	ldr	r3, [pc, #312]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10e      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373c:	4b4b      	ldr	r3, [pc, #300]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	4a4a      	ldr	r2, [pc, #296]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003746:	61d3      	str	r3, [r2, #28]
 8003748:	4b48      	ldr	r3, [pc, #288]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003754:	2301      	movs	r3, #1
 8003756:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375a:	4b45      	ldr	r3, [pc, #276]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d118      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003766:	4b42      	ldr	r3, [pc, #264]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a41      	ldr	r2, [pc, #260]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800376c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003770:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003772:	f7fd f86f 	bl	8000854 <HAL_GetTick>
 8003776:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003778:	e008      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377a:	f7fd f86b 	bl	8000854 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b64      	cmp	r3, #100	; 0x64
 8003786:	d901      	bls.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e1d6      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378c:	4b38      	ldr	r3, [pc, #224]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003798:	4b34      	ldr	r3, [pc, #208]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8084 	beq.w	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d07c      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037b8:	4b2c      	ldr	r3, [pc, #176]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	fa93 f3a3 	rbit	r3, r3
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037d2:	fab3 f383 	clz	r3, r3
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	4b26      	ldr	r3, [pc, #152]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	461a      	mov	r2, r3
 80037e2:	2301      	movs	r3, #1
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80037f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	461a      	mov	r2, r3
 8003806:	2300      	movs	r3, #0
 8003808:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800380a:	4a18      	ldr	r2, [pc, #96]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800380e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d04b      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381a:	f7fd f81b 	bl	8000854 <HAL_GetTick>
 800381e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003820:	e00a      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003822:	f7fd f817 	bl	8000854 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e180      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003838:	2302      	movs	r3, #2
 800383a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
 8003844:	2302      	movs	r3, #2
 8003846:	623b      	str	r3, [r7, #32]
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	61fb      	str	r3, [r7, #28]
  return result;
 8003850:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003852:	fab3 f383 	clz	r3, r3
 8003856:	b2db      	uxtb	r3, r3
 8003858:	095b      	lsrs	r3, r3, #5
 800385a:	b2db      	uxtb	r3, r3
 800385c:	f043 0302 	orr.w	r3, r3, #2
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d108      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003866:	4b01      	ldr	r3, [pc, #4]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	e00d      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800386c:	40021000 	.word	0x40021000
 8003870:	40007000 	.word	0x40007000
 8003874:	10908100 	.word	0x10908100
 8003878:	2302      	movs	r3, #2
 800387a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	fa93 f3a3 	rbit	r3, r3
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	4ba0      	ldr	r3, [pc, #640]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	2202      	movs	r2, #2
 800388a:	613a      	str	r2, [r7, #16]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	fa92 f2a2 	rbit	r2, r2
 8003892:	60fa      	str	r2, [r7, #12]
  return result;
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	fab2 f282 	clz	r2, r2
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	f002 021f 	and.w	r2, r2, #31
 80038a6:	2101      	movs	r1, #1
 80038a8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0b7      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80038b2:	4b95      	ldr	r3, [pc, #596]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4992      	ldr	r1, [pc, #584]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d105      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038cc:	4b8e      	ldr	r3, [pc, #568]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	4a8d      	ldr	r2, [pc, #564]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038e4:	4b88      	ldr	r3, [pc, #544]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	f023 0203 	bic.w	r2, r3, #3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4985      	ldr	r1, [pc, #532]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003902:	4b81      	ldr	r3, [pc, #516]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	497e      	ldr	r1, [pc, #504]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003910:	4313      	orrs	r3, r2
 8003912:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003920:	4b79      	ldr	r3, [pc, #484]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	4976      	ldr	r1, [pc, #472]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d008      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800393e:	4b72      	ldr	r3, [pc, #456]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f023 0210 	bic.w	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	496f      	ldr	r1, [pc, #444]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800394c:	4313      	orrs	r3, r2
 800394e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800395c:	4b6a      	ldr	r3, [pc, #424]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003968:	4967      	ldr	r1, [pc, #412]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800397a:	4b63      	ldr	r3, [pc, #396]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	f023 0220 	bic.w	r2, r3, #32
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	4960      	ldr	r1, [pc, #384]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003988:	4313      	orrs	r3, r2
 800398a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003998:	4b5b      	ldr	r3, [pc, #364]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	4958      	ldr	r1, [pc, #352]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039b6:	4b54      	ldr	r3, [pc, #336]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	4951      	ldr	r1, [pc, #324]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039d4:	4b4c      	ldr	r3, [pc, #304]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	4949      	ldr	r1, [pc, #292]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039f2:	4b45      	ldr	r3, [pc, #276]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	4942      	ldr	r1, [pc, #264]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a10:	4b3d      	ldr	r3, [pc, #244]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1c:	493a      	ldr	r1, [pc, #232]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003a2e:	4b36      	ldr	r3, [pc, #216]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	4933      	ldr	r1, [pc, #204]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a4c:	4b2e      	ldr	r3, [pc, #184]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a58:	492b      	ldr	r1, [pc, #172]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003a6a:	4b27      	ldr	r3, [pc, #156]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	4924      	ldr	r1, [pc, #144]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003a88:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	491c      	ldr	r1, [pc, #112]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003aa6:	4b18      	ldr	r3, [pc, #96]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab2:	4915      	ldr	r1, [pc, #84]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003ac4:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	490d      	ldr	r1, [pc, #52]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003ae2:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aee:	4906      	ldr	r1, [pc, #24]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00c      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003b00:	4b01      	ldr	r3, [pc, #4]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	e002      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b14:	490b      	ldr	r1, [pc, #44]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d008      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003b26:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b32:	4904      	ldr	r1, [pc, #16]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3748      	adds	r7, #72	; 0x48
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000

08003b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e049      	b.n	8003bee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fc fd4e 	bl	8000610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3304      	adds	r3, #4
 8003b84:	4619      	mov	r1, r3
 8003b86:	4610      	mov	r0, r2
 8003b88:	f000 fb6c 	bl	8004264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e049      	b.n	8003c9c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f841 	bl	8003ca4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2202      	movs	r2, #2
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3304      	adds	r3, #4
 8003c32:	4619      	mov	r1, r3
 8003c34:	4610      	mov	r0, r2
 8003c36:	f000 fb15 	bl	8004264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <HAL_TIM_PWM_Start+0x24>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	bf14      	ite	ne
 8003cd4:	2301      	movne	r3, #1
 8003cd6:	2300      	moveq	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	e03c      	b.n	8003d56 <HAL_TIM_PWM_Start+0x9e>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d109      	bne.n	8003cf6 <HAL_TIM_PWM_Start+0x3e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	bf14      	ite	ne
 8003cee:	2301      	movne	r3, #1
 8003cf0:	2300      	moveq	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	e02f      	b.n	8003d56 <HAL_TIM_PWM_Start+0x9e>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d109      	bne.n	8003d10 <HAL_TIM_PWM_Start+0x58>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	bf14      	ite	ne
 8003d08:	2301      	movne	r3, #1
 8003d0a:	2300      	moveq	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	e022      	b.n	8003d56 <HAL_TIM_PWM_Start+0x9e>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b0c      	cmp	r3, #12
 8003d14:	d109      	bne.n	8003d2a <HAL_TIM_PWM_Start+0x72>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	bf14      	ite	ne
 8003d22:	2301      	movne	r3, #1
 8003d24:	2300      	moveq	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	e015      	b.n	8003d56 <HAL_TIM_PWM_Start+0x9e>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b10      	cmp	r3, #16
 8003d2e:	d109      	bne.n	8003d44 <HAL_TIM_PWM_Start+0x8c>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	bf14      	ite	ne
 8003d3c:	2301      	movne	r3, #1
 8003d3e:	2300      	moveq	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	e008      	b.n	8003d56 <HAL_TIM_PWM_Start+0x9e>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	bf14      	ite	ne
 8003d50:	2301      	movne	r3, #1
 8003d52:	2300      	moveq	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0a1      	b.n	8003ea2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d104      	bne.n	8003d6e <HAL_TIM_PWM_Start+0xb6>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d6c:	e023      	b.n	8003db6 <HAL_TIM_PWM_Start+0xfe>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_PWM_Start+0xc6>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d7c:	e01b      	b.n	8003db6 <HAL_TIM_PWM_Start+0xfe>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d104      	bne.n	8003d8e <HAL_TIM_PWM_Start+0xd6>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d8c:	e013      	b.n	8003db6 <HAL_TIM_PWM_Start+0xfe>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b0c      	cmp	r3, #12
 8003d92:	d104      	bne.n	8003d9e <HAL_TIM_PWM_Start+0xe6>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d9c:	e00b      	b.n	8003db6 <HAL_TIM_PWM_Start+0xfe>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d104      	bne.n	8003dae <HAL_TIM_PWM_Start+0xf6>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dac:	e003      	b.n	8003db6 <HAL_TIM_PWM_Start+0xfe>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2202      	movs	r2, #2
 8003db2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	6839      	ldr	r1, [r7, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fe8e 	bl	8004ae0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a38      	ldr	r2, [pc, #224]	; (8003eac <HAL_TIM_PWM_Start+0x1f4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d018      	beq.n	8003e00 <HAL_TIM_PWM_Start+0x148>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a37      	ldr	r2, [pc, #220]	; (8003eb0 <HAL_TIM_PWM_Start+0x1f8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d013      	beq.n	8003e00 <HAL_TIM_PWM_Start+0x148>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a35      	ldr	r2, [pc, #212]	; (8003eb4 <HAL_TIM_PWM_Start+0x1fc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00e      	beq.n	8003e00 <HAL_TIM_PWM_Start+0x148>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a34      	ldr	r2, [pc, #208]	; (8003eb8 <HAL_TIM_PWM_Start+0x200>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d009      	beq.n	8003e00 <HAL_TIM_PWM_Start+0x148>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a32      	ldr	r2, [pc, #200]	; (8003ebc <HAL_TIM_PWM_Start+0x204>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d004      	beq.n	8003e00 <HAL_TIM_PWM_Start+0x148>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a31      	ldr	r2, [pc, #196]	; (8003ec0 <HAL_TIM_PWM_Start+0x208>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d101      	bne.n	8003e04 <HAL_TIM_PWM_Start+0x14c>
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <HAL_TIM_PWM_Start+0x14e>
 8003e04:	2300      	movs	r3, #0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d007      	beq.n	8003e1a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a23      	ldr	r2, [pc, #140]	; (8003eac <HAL_TIM_PWM_Start+0x1f4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d01d      	beq.n	8003e60 <HAL_TIM_PWM_Start+0x1a8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2c:	d018      	beq.n	8003e60 <HAL_TIM_PWM_Start+0x1a8>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a24      	ldr	r2, [pc, #144]	; (8003ec4 <HAL_TIM_PWM_Start+0x20c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d013      	beq.n	8003e60 <HAL_TIM_PWM_Start+0x1a8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a22      	ldr	r2, [pc, #136]	; (8003ec8 <HAL_TIM_PWM_Start+0x210>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d00e      	beq.n	8003e60 <HAL_TIM_PWM_Start+0x1a8>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a1a      	ldr	r2, [pc, #104]	; (8003eb0 <HAL_TIM_PWM_Start+0x1f8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d009      	beq.n	8003e60 <HAL_TIM_PWM_Start+0x1a8>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <HAL_TIM_PWM_Start+0x1fc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <HAL_TIM_PWM_Start+0x1a8>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a19      	ldr	r2, [pc, #100]	; (8003ec0 <HAL_TIM_PWM_Start+0x208>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d115      	bne.n	8003e8c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	4b19      	ldr	r3, [pc, #100]	; (8003ecc <HAL_TIM_PWM_Start+0x214>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b06      	cmp	r3, #6
 8003e70:	d015      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x1e6>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e78:	d011      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0201 	orr.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8a:	e008      	b.n	8003e9e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e000      	b.n	8003ea0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40012c00 	.word	0x40012c00
 8003eb0:	40013400 	.word	0x40013400
 8003eb4:	40014000 	.word	0x40014000
 8003eb8:	40014400 	.word	0x40014400
 8003ebc:	40014800 	.word	0x40014800
 8003ec0:	40015000 	.word	0x40015000
 8003ec4:	40000400 	.word	0x40000400
 8003ec8:	40000800 	.word	0x40000800
 8003ecc:	00010007 	.word	0x00010007

08003ed0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e0fd      	b.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b14      	cmp	r3, #20
 8003ef6:	f200 80f0 	bhi.w	80040da <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003efa:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f55 	.word	0x08003f55
 8003f04:	080040db 	.word	0x080040db
 8003f08:	080040db 	.word	0x080040db
 8003f0c:	080040db 	.word	0x080040db
 8003f10:	08003f95 	.word	0x08003f95
 8003f14:	080040db 	.word	0x080040db
 8003f18:	080040db 	.word	0x080040db
 8003f1c:	080040db 	.word	0x080040db
 8003f20:	08003fd7 	.word	0x08003fd7
 8003f24:	080040db 	.word	0x080040db
 8003f28:	080040db 	.word	0x080040db
 8003f2c:	080040db 	.word	0x080040db
 8003f30:	08004017 	.word	0x08004017
 8003f34:	080040db 	.word	0x080040db
 8003f38:	080040db 	.word	0x080040db
 8003f3c:	080040db 	.word	0x080040db
 8003f40:	08004059 	.word	0x08004059
 8003f44:	080040db 	.word	0x080040db
 8003f48:	080040db 	.word	0x080040db
 8003f4c:	080040db 	.word	0x080040db
 8003f50:	08004099 	.word	0x08004099
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fa20 	bl	80043a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0208 	orr.w	r2, r2, #8
 8003f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0204 	bic.w	r2, r2, #4
 8003f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6999      	ldr	r1, [r3, #24]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	619a      	str	r2, [r3, #24]
      break;
 8003f92:	e0a3      	b.n	80040dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fa9a 	bl	80044d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6999      	ldr	r1, [r3, #24]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	021a      	lsls	r2, r3, #8
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	619a      	str	r2, [r3, #24]
      break;
 8003fd4:	e082      	b.n	80040dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fb0d 	bl	80045fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69da      	ldr	r2, [r3, #28]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0208 	orr.w	r2, r2, #8
 8003ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0204 	bic.w	r2, r2, #4
 8004000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69d9      	ldr	r1, [r3, #28]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	61da      	str	r2, [r3, #28]
      break;
 8004014:	e062      	b.n	80040dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fb7f 	bl	8004720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69d9      	ldr	r1, [r3, #28]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	021a      	lsls	r2, r3, #8
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	61da      	str	r2, [r3, #28]
      break;
 8004056:	e041      	b.n	80040dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fbce 	bl	8004800 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0208 	orr.w	r2, r2, #8
 8004072:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0204 	bic.w	r2, r2, #4
 8004082:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004096:	e021      	b.n	80040dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fc18 	bl	80048d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	021a      	lsls	r2, r3, #8
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040d8:	e000      	b.n	80040dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80040da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop

080040f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_TIM_ConfigClockSource+0x18>
 8004104:	2302      	movs	r3, #2
 8004106:	e0a8      	b.n	800425a <HAL_TIM_ConfigClockSource+0x16a>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004126:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800412a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004132:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b40      	cmp	r3, #64	; 0x40
 8004142:	d067      	beq.n	8004214 <HAL_TIM_ConfigClockSource+0x124>
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	d80b      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x70>
 8004148:	2b10      	cmp	r3, #16
 800414a:	d073      	beq.n	8004234 <HAL_TIM_ConfigClockSource+0x144>
 800414c:	2b10      	cmp	r3, #16
 800414e:	d802      	bhi.n	8004156 <HAL_TIM_ConfigClockSource+0x66>
 8004150:	2b00      	cmp	r3, #0
 8004152:	d06f      	beq.n	8004234 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004154:	e078      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004156:	2b20      	cmp	r3, #32
 8004158:	d06c      	beq.n	8004234 <HAL_TIM_ConfigClockSource+0x144>
 800415a:	2b30      	cmp	r3, #48	; 0x30
 800415c:	d06a      	beq.n	8004234 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800415e:	e073      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004160:	2b70      	cmp	r3, #112	; 0x70
 8004162:	d00d      	beq.n	8004180 <HAL_TIM_ConfigClockSource+0x90>
 8004164:	2b70      	cmp	r3, #112	; 0x70
 8004166:	d804      	bhi.n	8004172 <HAL_TIM_ConfigClockSource+0x82>
 8004168:	2b50      	cmp	r3, #80	; 0x50
 800416a:	d033      	beq.n	80041d4 <HAL_TIM_ConfigClockSource+0xe4>
 800416c:	2b60      	cmp	r3, #96	; 0x60
 800416e:	d041      	beq.n	80041f4 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004170:	e06a      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004176:	d066      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0x156>
 8004178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800417c:	d017      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800417e:	e063      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	6899      	ldr	r1, [r3, #8]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f000 fc86 	bl	8004aa0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	609a      	str	r2, [r3, #8]
      break;
 80041ac:	e04c      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6899      	ldr	r1, [r3, #8]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f000 fc6f 	bl	8004aa0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041d0:	609a      	str	r2, [r3, #8]
      break;
 80041d2:	e039      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	6859      	ldr	r1, [r3, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	461a      	mov	r2, r3
 80041e2:	f000 fbe3 	bl	80049ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2150      	movs	r1, #80	; 0x50
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fc3c 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 80041f2:	e029      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6818      	ldr	r0, [r3, #0]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	6859      	ldr	r1, [r3, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	461a      	mov	r2, r3
 8004202:	f000 fc02 	bl	8004a0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2160      	movs	r1, #96	; 0x60
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fc2c 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 8004212:	e019      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6818      	ldr	r0, [r3, #0]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	6859      	ldr	r1, [r3, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	461a      	mov	r2, r3
 8004222:	f000 fbc3 	bl	80049ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2140      	movs	r1, #64	; 0x40
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fc1c 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 8004232:	e009      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4619      	mov	r1, r3
 800423e:	4610      	mov	r0, r2
 8004240:	f000 fc13 	bl	8004a6a <TIM_ITRx_SetConfig>
        break;
 8004244:	e000      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004246:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a42      	ldr	r2, [pc, #264]	; (8004380 <TIM_Base_SetConfig+0x11c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d013      	beq.n	80042a4 <TIM_Base_SetConfig+0x40>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004282:	d00f      	beq.n	80042a4 <TIM_Base_SetConfig+0x40>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a3f      	ldr	r2, [pc, #252]	; (8004384 <TIM_Base_SetConfig+0x120>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00b      	beq.n	80042a4 <TIM_Base_SetConfig+0x40>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a3e      	ldr	r2, [pc, #248]	; (8004388 <TIM_Base_SetConfig+0x124>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d007      	beq.n	80042a4 <TIM_Base_SetConfig+0x40>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a3d      	ldr	r2, [pc, #244]	; (800438c <TIM_Base_SetConfig+0x128>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_Base_SetConfig+0x40>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a3c      	ldr	r2, [pc, #240]	; (8004390 <TIM_Base_SetConfig+0x12c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d108      	bne.n	80042b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a31      	ldr	r2, [pc, #196]	; (8004380 <TIM_Base_SetConfig+0x11c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d01f      	beq.n	80042fe <TIM_Base_SetConfig+0x9a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c4:	d01b      	beq.n	80042fe <TIM_Base_SetConfig+0x9a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a2e      	ldr	r2, [pc, #184]	; (8004384 <TIM_Base_SetConfig+0x120>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d017      	beq.n	80042fe <TIM_Base_SetConfig+0x9a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a2d      	ldr	r2, [pc, #180]	; (8004388 <TIM_Base_SetConfig+0x124>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d013      	beq.n	80042fe <TIM_Base_SetConfig+0x9a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a2c      	ldr	r2, [pc, #176]	; (800438c <TIM_Base_SetConfig+0x128>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00f      	beq.n	80042fe <TIM_Base_SetConfig+0x9a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a2c      	ldr	r2, [pc, #176]	; (8004394 <TIM_Base_SetConfig+0x130>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00b      	beq.n	80042fe <TIM_Base_SetConfig+0x9a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a2b      	ldr	r2, [pc, #172]	; (8004398 <TIM_Base_SetConfig+0x134>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d007      	beq.n	80042fe <TIM_Base_SetConfig+0x9a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a2a      	ldr	r2, [pc, #168]	; (800439c <TIM_Base_SetConfig+0x138>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d003      	beq.n	80042fe <TIM_Base_SetConfig+0x9a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a25      	ldr	r2, [pc, #148]	; (8004390 <TIM_Base_SetConfig+0x12c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d108      	bne.n	8004310 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	4313      	orrs	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a12      	ldr	r2, [pc, #72]	; (8004380 <TIM_Base_SetConfig+0x11c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d013      	beq.n	8004364 <TIM_Base_SetConfig+0x100>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a13      	ldr	r2, [pc, #76]	; (800438c <TIM_Base_SetConfig+0x128>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00f      	beq.n	8004364 <TIM_Base_SetConfig+0x100>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a13      	ldr	r2, [pc, #76]	; (8004394 <TIM_Base_SetConfig+0x130>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00b      	beq.n	8004364 <TIM_Base_SetConfig+0x100>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a12      	ldr	r2, [pc, #72]	; (8004398 <TIM_Base_SetConfig+0x134>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d007      	beq.n	8004364 <TIM_Base_SetConfig+0x100>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a11      	ldr	r2, [pc, #68]	; (800439c <TIM_Base_SetConfig+0x138>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d003      	beq.n	8004364 <TIM_Base_SetConfig+0x100>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a0c      	ldr	r2, [pc, #48]	; (8004390 <TIM_Base_SetConfig+0x12c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d103      	bne.n	800436c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	615a      	str	r2, [r3, #20]
}
 8004372:	bf00      	nop
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40012c00 	.word	0x40012c00
 8004384:	40000400 	.word	0x40000400
 8004388:	40000800 	.word	0x40000800
 800438c:	40013400 	.word	0x40013400
 8004390:	40015000 	.word	0x40015000
 8004394:	40014000 	.word	0x40014000
 8004398:	40014400 	.word	0x40014400
 800439c:	40014800 	.word	0x40014800

080043a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f023 0201 	bic.w	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0303 	bic.w	r3, r3, #3
 80043da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f023 0302 	bic.w	r3, r3, #2
 80043ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a30      	ldr	r2, [pc, #192]	; (80044bc <TIM_OC1_SetConfig+0x11c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d013      	beq.n	8004428 <TIM_OC1_SetConfig+0x88>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a2f      	ldr	r2, [pc, #188]	; (80044c0 <TIM_OC1_SetConfig+0x120>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00f      	beq.n	8004428 <TIM_OC1_SetConfig+0x88>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a2e      	ldr	r2, [pc, #184]	; (80044c4 <TIM_OC1_SetConfig+0x124>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00b      	beq.n	8004428 <TIM_OC1_SetConfig+0x88>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a2d      	ldr	r2, [pc, #180]	; (80044c8 <TIM_OC1_SetConfig+0x128>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d007      	beq.n	8004428 <TIM_OC1_SetConfig+0x88>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a2c      	ldr	r2, [pc, #176]	; (80044cc <TIM_OC1_SetConfig+0x12c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_OC1_SetConfig+0x88>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a2b      	ldr	r2, [pc, #172]	; (80044d0 <TIM_OC1_SetConfig+0x130>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d10c      	bne.n	8004442 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f023 0308 	bic.w	r3, r3, #8
 800442e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f023 0304 	bic.w	r3, r3, #4
 8004440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a1d      	ldr	r2, [pc, #116]	; (80044bc <TIM_OC1_SetConfig+0x11c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d013      	beq.n	8004472 <TIM_OC1_SetConfig+0xd2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1c      	ldr	r2, [pc, #112]	; (80044c0 <TIM_OC1_SetConfig+0x120>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00f      	beq.n	8004472 <TIM_OC1_SetConfig+0xd2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a1b      	ldr	r2, [pc, #108]	; (80044c4 <TIM_OC1_SetConfig+0x124>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00b      	beq.n	8004472 <TIM_OC1_SetConfig+0xd2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1a      	ldr	r2, [pc, #104]	; (80044c8 <TIM_OC1_SetConfig+0x128>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d007      	beq.n	8004472 <TIM_OC1_SetConfig+0xd2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a19      	ldr	r2, [pc, #100]	; (80044cc <TIM_OC1_SetConfig+0x12c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d003      	beq.n	8004472 <TIM_OC1_SetConfig+0xd2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a18      	ldr	r2, [pc, #96]	; (80044d0 <TIM_OC1_SetConfig+0x130>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d111      	bne.n	8004496 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	621a      	str	r2, [r3, #32]
}
 80044b0:	bf00      	nop
 80044b2:	371c      	adds	r7, #28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	40012c00 	.word	0x40012c00
 80044c0:	40013400 	.word	0x40013400
 80044c4:	40014000 	.word	0x40014000
 80044c8:	40014400 	.word	0x40014400
 80044cc:	40014800 	.word	0x40014800
 80044d0:	40015000 	.word	0x40015000

080044d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	f023 0210 	bic.w	r2, r3, #16
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	021b      	lsls	r3, r3, #8
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f023 0320 	bic.w	r3, r3, #32
 8004522:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a2c      	ldr	r2, [pc, #176]	; (80045e4 <TIM_OC2_SetConfig+0x110>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d007      	beq.n	8004548 <TIM_OC2_SetConfig+0x74>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a2b      	ldr	r2, [pc, #172]	; (80045e8 <TIM_OC2_SetConfig+0x114>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d003      	beq.n	8004548 <TIM_OC2_SetConfig+0x74>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a2a      	ldr	r2, [pc, #168]	; (80045ec <TIM_OC2_SetConfig+0x118>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d10d      	bne.n	8004564 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800454e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4313      	orrs	r3, r2
 800455a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004562:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a1f      	ldr	r2, [pc, #124]	; (80045e4 <TIM_OC2_SetConfig+0x110>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d013      	beq.n	8004594 <TIM_OC2_SetConfig+0xc0>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a1e      	ldr	r2, [pc, #120]	; (80045e8 <TIM_OC2_SetConfig+0x114>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d00f      	beq.n	8004594 <TIM_OC2_SetConfig+0xc0>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a1e      	ldr	r2, [pc, #120]	; (80045f0 <TIM_OC2_SetConfig+0x11c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00b      	beq.n	8004594 <TIM_OC2_SetConfig+0xc0>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <TIM_OC2_SetConfig+0x120>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d007      	beq.n	8004594 <TIM_OC2_SetConfig+0xc0>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a1c      	ldr	r2, [pc, #112]	; (80045f8 <TIM_OC2_SetConfig+0x124>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_OC2_SetConfig+0xc0>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a17      	ldr	r2, [pc, #92]	; (80045ec <TIM_OC2_SetConfig+0x118>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d113      	bne.n	80045bc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800459a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045a2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	621a      	str	r2, [r3, #32]
}
 80045d6:	bf00      	nop
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40012c00 	.word	0x40012c00
 80045e8:	40013400 	.word	0x40013400
 80045ec:	40015000 	.word	0x40015000
 80045f0:	40014000 	.word	0x40014000
 80045f4:	40014400 	.word	0x40014400
 80045f8:	40014800 	.word	0x40014800

080045fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800462a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 0303 	bic.w	r3, r3, #3
 8004636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a2b      	ldr	r2, [pc, #172]	; (8004708 <TIM_OC3_SetConfig+0x10c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d007      	beq.n	800466e <TIM_OC3_SetConfig+0x72>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a2a      	ldr	r2, [pc, #168]	; (800470c <TIM_OC3_SetConfig+0x110>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d003      	beq.n	800466e <TIM_OC3_SetConfig+0x72>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a29      	ldr	r2, [pc, #164]	; (8004710 <TIM_OC3_SetConfig+0x114>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d10d      	bne.n	800468a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004688:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a1e      	ldr	r2, [pc, #120]	; (8004708 <TIM_OC3_SetConfig+0x10c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <TIM_OC3_SetConfig+0xbe>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a1d      	ldr	r2, [pc, #116]	; (800470c <TIM_OC3_SetConfig+0x110>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00f      	beq.n	80046ba <TIM_OC3_SetConfig+0xbe>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a1d      	ldr	r2, [pc, #116]	; (8004714 <TIM_OC3_SetConfig+0x118>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00b      	beq.n	80046ba <TIM_OC3_SetConfig+0xbe>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a1c      	ldr	r2, [pc, #112]	; (8004718 <TIM_OC3_SetConfig+0x11c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d007      	beq.n	80046ba <TIM_OC3_SetConfig+0xbe>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a1b      	ldr	r2, [pc, #108]	; (800471c <TIM_OC3_SetConfig+0x120>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d003      	beq.n	80046ba <TIM_OC3_SetConfig+0xbe>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a16      	ldr	r2, [pc, #88]	; (8004710 <TIM_OC3_SetConfig+0x114>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d113      	bne.n	80046e2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	621a      	str	r2, [r3, #32]
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40013400 	.word	0x40013400
 8004710:	40015000 	.word	0x40015000
 8004714:	40014000 	.word	0x40014000
 8004718:	40014400 	.word	0x40014400
 800471c:	40014800 	.word	0x40014800

08004720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800474e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800476e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	031b      	lsls	r3, r3, #12
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a1a      	ldr	r2, [pc, #104]	; (80047e8 <TIM_OC4_SetConfig+0xc8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <TIM_OC4_SetConfig+0x8c>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a19      	ldr	r2, [pc, #100]	; (80047ec <TIM_OC4_SetConfig+0xcc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00f      	beq.n	80047ac <TIM_OC4_SetConfig+0x8c>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a18      	ldr	r2, [pc, #96]	; (80047f0 <TIM_OC4_SetConfig+0xd0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00b      	beq.n	80047ac <TIM_OC4_SetConfig+0x8c>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a17      	ldr	r2, [pc, #92]	; (80047f4 <TIM_OC4_SetConfig+0xd4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d007      	beq.n	80047ac <TIM_OC4_SetConfig+0x8c>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a16      	ldr	r2, [pc, #88]	; (80047f8 <TIM_OC4_SetConfig+0xd8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d003      	beq.n	80047ac <TIM_OC4_SetConfig+0x8c>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a15      	ldr	r2, [pc, #84]	; (80047fc <TIM_OC4_SetConfig+0xdc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d109      	bne.n	80047c0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	019b      	lsls	r3, r3, #6
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	621a      	str	r2, [r3, #32]
}
 80047da:	bf00      	nop
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40012c00 	.word	0x40012c00
 80047ec:	40013400 	.word	0x40013400
 80047f0:	40014000 	.word	0x40014000
 80047f4:	40014400 	.word	0x40014400
 80047f8:	40014800 	.word	0x40014800
 80047fc:	40015000 	.word	0x40015000

08004800 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800482e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004844:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a19      	ldr	r2, [pc, #100]	; (80048bc <TIM_OC5_SetConfig+0xbc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <TIM_OC5_SetConfig+0x82>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <TIM_OC5_SetConfig+0xc0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00f      	beq.n	8004882 <TIM_OC5_SetConfig+0x82>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a17      	ldr	r2, [pc, #92]	; (80048c4 <TIM_OC5_SetConfig+0xc4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00b      	beq.n	8004882 <TIM_OC5_SetConfig+0x82>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a16      	ldr	r2, [pc, #88]	; (80048c8 <TIM_OC5_SetConfig+0xc8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d007      	beq.n	8004882 <TIM_OC5_SetConfig+0x82>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a15      	ldr	r2, [pc, #84]	; (80048cc <TIM_OC5_SetConfig+0xcc>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d003      	beq.n	8004882 <TIM_OC5_SetConfig+0x82>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a14      	ldr	r2, [pc, #80]	; (80048d0 <TIM_OC5_SetConfig+0xd0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d109      	bne.n	8004896 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004888:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	621a      	str	r2, [r3, #32]
}
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	40012c00 	.word	0x40012c00
 80048c0:	40013400 	.word	0x40013400
 80048c4:	40014000 	.word	0x40014000
 80048c8:	40014400 	.word	0x40014400
 80048cc:	40014800 	.word	0x40014800
 80048d0:	40015000 	.word	0x40015000

080048d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	021b      	lsls	r3, r3, #8
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800491a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	051b      	lsls	r3, r3, #20
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a1a      	ldr	r2, [pc, #104]	; (8004994 <TIM_OC6_SetConfig+0xc0>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d013      	beq.n	8004958 <TIM_OC6_SetConfig+0x84>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a19      	ldr	r2, [pc, #100]	; (8004998 <TIM_OC6_SetConfig+0xc4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00f      	beq.n	8004958 <TIM_OC6_SetConfig+0x84>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a18      	ldr	r2, [pc, #96]	; (800499c <TIM_OC6_SetConfig+0xc8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00b      	beq.n	8004958 <TIM_OC6_SetConfig+0x84>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <TIM_OC6_SetConfig+0xcc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d007      	beq.n	8004958 <TIM_OC6_SetConfig+0x84>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a16      	ldr	r2, [pc, #88]	; (80049a4 <TIM_OC6_SetConfig+0xd0>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d003      	beq.n	8004958 <TIM_OC6_SetConfig+0x84>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a15      	ldr	r2, [pc, #84]	; (80049a8 <TIM_OC6_SetConfig+0xd4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d109      	bne.n	800496c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800495e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	029b      	lsls	r3, r3, #10
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	621a      	str	r2, [r3, #32]
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40012c00 	.word	0x40012c00
 8004998:	40013400 	.word	0x40013400
 800499c:	40014000 	.word	0x40014000
 80049a0:	40014400 	.word	0x40014400
 80049a4:	40014800 	.word	0x40014800
 80049a8:	40015000 	.word	0x40015000

080049ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	f023 0201 	bic.w	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f023 030a 	bic.w	r3, r3, #10
 80049e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	621a      	str	r2, [r3, #32]
}
 80049fe:	bf00      	nop
 8004a00:	371c      	adds	r7, #28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b087      	sub	sp, #28
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	f023 0210 	bic.w	r2, r3, #16
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	031b      	lsls	r3, r3, #12
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	621a      	str	r2, [r3, #32]
}
 8004a5e:	bf00      	nop
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f043 0307 	orr.w	r3, r3, #7
 8004a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	609a      	str	r2, [r3, #8]
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	021a      	lsls	r2, r3, #8
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	609a      	str	r2, [r3, #8]
}
 8004ad4:	bf00      	nop
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	2201      	movs	r2, #1
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a1a      	ldr	r2, [r3, #32]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	43db      	mvns	r3, r3
 8004b02:	401a      	ands	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a1a      	ldr	r2, [r3, #32]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	fa01 f303 	lsl.w	r3, r1, r3
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	621a      	str	r2, [r3, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
	...

08004b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e06d      	b.n	8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a30      	ldr	r2, [pc, #192]	; (8004c2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d009      	beq.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a2f      	ldr	r2, [pc, #188]	; (8004c30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d004      	beq.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a2d      	ldr	r2, [pc, #180]	; (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d108      	bne.n	8004b94 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a1e      	ldr	r2, [pc, #120]	; (8004c2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d01d      	beq.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc0:	d018      	beq.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1c      	ldr	r2, [pc, #112]	; (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d013      	beq.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1a      	ldr	r2, [pc, #104]	; (8004c3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00e      	beq.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d009      	beq.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d004      	beq.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a11      	ldr	r2, [pc, #68]	; (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d10c      	bne.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	40012c00 	.word	0x40012c00
 8004c30:	40013400 	.word	0x40013400
 8004c34:	40015000 	.word	0x40015000
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	40000800 	.word	0x40000800
 8004c40:	40014000 	.word	0x40014000

08004c44 <__libc_init_array>:
 8004c44:	b570      	push	{r4, r5, r6, lr}
 8004c46:	4e0d      	ldr	r6, [pc, #52]	; (8004c7c <__libc_init_array+0x38>)
 8004c48:	4c0d      	ldr	r4, [pc, #52]	; (8004c80 <__libc_init_array+0x3c>)
 8004c4a:	1ba4      	subs	r4, r4, r6
 8004c4c:	10a4      	asrs	r4, r4, #2
 8004c4e:	2500      	movs	r5, #0
 8004c50:	42a5      	cmp	r5, r4
 8004c52:	d109      	bne.n	8004c68 <__libc_init_array+0x24>
 8004c54:	4e0b      	ldr	r6, [pc, #44]	; (8004c84 <__libc_init_array+0x40>)
 8004c56:	4c0c      	ldr	r4, [pc, #48]	; (8004c88 <__libc_init_array+0x44>)
 8004c58:	f000 f820 	bl	8004c9c <_init>
 8004c5c:	1ba4      	subs	r4, r4, r6
 8004c5e:	10a4      	asrs	r4, r4, #2
 8004c60:	2500      	movs	r5, #0
 8004c62:	42a5      	cmp	r5, r4
 8004c64:	d105      	bne.n	8004c72 <__libc_init_array+0x2e>
 8004c66:	bd70      	pop	{r4, r5, r6, pc}
 8004c68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c6c:	4798      	blx	r3
 8004c6e:	3501      	adds	r5, #1
 8004c70:	e7ee      	b.n	8004c50 <__libc_init_array+0xc>
 8004c72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c76:	4798      	blx	r3
 8004c78:	3501      	adds	r5, #1
 8004c7a:	e7f2      	b.n	8004c62 <__libc_init_array+0x1e>
 8004c7c:	08004ce4 	.word	0x08004ce4
 8004c80:	08004ce4 	.word	0x08004ce4
 8004c84:	08004ce4 	.word	0x08004ce4
 8004c88:	08004ce8 	.word	0x08004ce8

08004c8c <memset>:
 8004c8c:	4402      	add	r2, r0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d100      	bne.n	8004c96 <memset+0xa>
 8004c94:	4770      	bx	lr
 8004c96:	f803 1b01 	strb.w	r1, [r3], #1
 8004c9a:	e7f9      	b.n	8004c90 <memset+0x4>

08004c9c <_init>:
 8004c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9e:	bf00      	nop
 8004ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca2:	bc08      	pop	{r3}
 8004ca4:	469e      	mov	lr, r3
 8004ca6:	4770      	bx	lr

08004ca8 <_fini>:
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004caa:	bf00      	nop
 8004cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cae:	bc08      	pop	{r3}
 8004cb0:	469e      	mov	lr, r3
 8004cb2:	4770      	bx	lr
