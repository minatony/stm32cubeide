
btvn2_b11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f24  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080040b8  080040b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041fc  080041fc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080041fc  080041fc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041fc  080041fc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041fc  080041fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004200  08004200  00014200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  200001dc  080043e0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080043e0  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da0f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c97  00000000  00000000  0002dc1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd8  00000000  00000000  0002f8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c20  00000000  00000000  00030590  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002070a  00000000  00000000  000311b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b879  00000000  00000000  000518ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c902b  00000000  00000000  0005d133  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012615e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000377c  00000000  00000000  001261dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001dc 	.word	0x200001dc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080040a0 	.word	0x080040a0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001e0 	.word	0x200001e0
 80001d0:	080040a0 	.word	0x080040a0

080001d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	count++;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	3301      	adds	r3, #1
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80001e6:	701a      	strb	r2, [r3, #0]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	200001f8 	.word	0x200001f8

080001f8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	buff[count1] = rx_data[0];
 8000200:	4b2b      	ldr	r3, [pc, #172]	; (80002b0 <HAL_UART_RxCpltCallback+0xb8>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	461a      	mov	r2, r3
 8000206:	4b2b      	ldr	r3, [pc, #172]	; (80002b4 <HAL_UART_RxCpltCallback+0xbc>)
 8000208:	7819      	ldrb	r1, [r3, #0]
 800020a:	4b2b      	ldr	r3, [pc, #172]	; (80002b8 <HAL_UART_RxCpltCallback+0xc0>)
 800020c:	5499      	strb	r1, [r3, r2]
	count1 ++;
 800020e:	4b28      	ldr	r3, [pc, #160]	; (80002b0 <HAL_UART_RxCpltCallback+0xb8>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	3301      	adds	r3, #1
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4b26      	ldr	r3, [pc, #152]	; (80002b0 <HAL_UART_RxCpltCallback+0xb8>)
 8000218:	701a      	strb	r2, [r3, #0]
	buff_red[0]= buff[0];
 800021a:	4b27      	ldr	r3, [pc, #156]	; (80002b8 <HAL_UART_RxCpltCallback+0xc0>)
 800021c:	781a      	ldrb	r2, [r3, #0]
 800021e:	4b27      	ldr	r3, [pc, #156]	; (80002bc <HAL_UART_RxCpltCallback+0xc4>)
 8000220:	701a      	strb	r2, [r3, #0]
	buff_red[1]= buff[1];
 8000222:	4b25      	ldr	r3, [pc, #148]	; (80002b8 <HAL_UART_RxCpltCallback+0xc0>)
 8000224:	785a      	ldrb	r2, [r3, #1]
 8000226:	4b25      	ldr	r3, [pc, #148]	; (80002bc <HAL_UART_RxCpltCallback+0xc4>)
 8000228:	705a      	strb	r2, [r3, #1]
	buff_yellow[0]= buff[2];
 800022a:	4b23      	ldr	r3, [pc, #140]	; (80002b8 <HAL_UART_RxCpltCallback+0xc0>)
 800022c:	789a      	ldrb	r2, [r3, #2]
 800022e:	4b24      	ldr	r3, [pc, #144]	; (80002c0 <HAL_UART_RxCpltCallback+0xc8>)
 8000230:	701a      	strb	r2, [r3, #0]
	buff_yellow[1]= buff[3];
 8000232:	4b21      	ldr	r3, [pc, #132]	; (80002b8 <HAL_UART_RxCpltCallback+0xc0>)
 8000234:	78da      	ldrb	r2, [r3, #3]
 8000236:	4b22      	ldr	r3, [pc, #136]	; (80002c0 <HAL_UART_RxCpltCallback+0xc8>)
 8000238:	705a      	strb	r2, [r3, #1]
	buff_green[0]= buff[4];
 800023a:	4b1f      	ldr	r3, [pc, #124]	; (80002b8 <HAL_UART_RxCpltCallback+0xc0>)
 800023c:	791a      	ldrb	r2, [r3, #4]
 800023e:	4b21      	ldr	r3, [pc, #132]	; (80002c4 <HAL_UART_RxCpltCallback+0xcc>)
 8000240:	701a      	strb	r2, [r3, #0]
	buff_green[1]= buff[5];
 8000242:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <HAL_UART_RxCpltCallback+0xc0>)
 8000244:	795a      	ldrb	r2, [r3, #5]
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <HAL_UART_RxCpltCallback+0xcc>)
 8000248:	705a      	strb	r2, [r3, #1]
	red = atoi(buff_red);
 800024a:	481c      	ldr	r0, [pc, #112]	; (80002bc <HAL_UART_RxCpltCallback+0xc4>)
 800024c:	f003 fe44 	bl	8003ed8 <atoi>
 8000250:	4603      	mov	r3, r0
 8000252:	b2da      	uxtb	r2, r3
 8000254:	4b1c      	ldr	r3, [pc, #112]	; (80002c8 <HAL_UART_RxCpltCallback+0xd0>)
 8000256:	701a      	strb	r2, [r3, #0]
	yellow = atoi(buff_yellow);
 8000258:	4819      	ldr	r0, [pc, #100]	; (80002c0 <HAL_UART_RxCpltCallback+0xc8>)
 800025a:	f003 fe3d 	bl	8003ed8 <atoi>
 800025e:	4603      	mov	r3, r0
 8000260:	b2da      	uxtb	r2, r3
 8000262:	4b1a      	ldr	r3, [pc, #104]	; (80002cc <HAL_UART_RxCpltCallback+0xd4>)
 8000264:	701a      	strb	r2, [r3, #0]
	green = atoi(buff_green);
 8000266:	4817      	ldr	r0, [pc, #92]	; (80002c4 <HAL_UART_RxCpltCallback+0xcc>)
 8000268:	f003 fe36 	bl	8003ed8 <atoi>
 800026c:	4603      	mov	r3, r0
 800026e:	b2da      	uxtb	r2, r3
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <HAL_UART_RxCpltCallback+0xd8>)
 8000272:	701a      	strb	r2, [r3, #0]
	if(rx_data[0] == '\r'){
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <HAL_UART_RxCpltCallback+0xbc>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b0d      	cmp	r3, #13
 800027a:	d10f      	bne.n	800029c <HAL_UART_RxCpltCallback+0xa4>
		for(uint8_t i= 0;i<10;i++){
 800027c:	2300      	movs	r3, #0
 800027e:	73fb      	strb	r3, [r7, #15]
 8000280:	e006      	b.n	8000290 <HAL_UART_RxCpltCallback+0x98>
			buff[i]=0;
 8000282:	7bfb      	ldrb	r3, [r7, #15]
 8000284:	4a0c      	ldr	r2, [pc, #48]	; (80002b8 <HAL_UART_RxCpltCallback+0xc0>)
 8000286:	2100      	movs	r1, #0
 8000288:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i= 0;i<10;i++){
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	3301      	adds	r3, #1
 800028e:	73fb      	strb	r3, [r7, #15]
 8000290:	7bfb      	ldrb	r3, [r7, #15]
 8000292:	2b09      	cmp	r3, #9
 8000294:	d9f5      	bls.n	8000282 <HAL_UART_RxCpltCallback+0x8a>
		}
		count1 =0;
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_UART_RxCpltCallback+0xb8>)
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2,rx_data,1);
 800029c:	2201      	movs	r2, #1
 800029e:	4905      	ldr	r1, [pc, #20]	; (80002b4 <HAL_UART_RxCpltCallback+0xbc>)
 80002a0:	480c      	ldr	r0, [pc, #48]	; (80002d4 <HAL_UART_RxCpltCallback+0xdc>)
 80002a2:	f002 febb 	bl	800301c <HAL_UART_Receive_IT>
}
 80002a6:	bf00      	nop
 80002a8:	3710      	adds	r7, #16
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	200001f9 	.word	0x200001f9
 80002b4:	20000208 	.word	0x20000208
 80002b8:	200001fc 	.word	0x200001fc
 80002bc:	2000020c 	.word	0x2000020c
 80002c0:	20000210 	.word	0x20000210
 80002c4:	20000214 	.word	0x20000214
 80002c8:	20000217 	.word	0x20000217
 80002cc:	20000219 	.word	0x20000219
 80002d0:	20000218 	.word	0x20000218
 80002d4:	20000268 	.word	0x20000268

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 faac 	bl	8000838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f878 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f956 	bl	8000594 <MX_GPIO_Init>
  MX_TIM4_Init();
 80002e8:	f000 f8d4 	bl	8000494 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80002ec:	f000 f922 	bl	8000534 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim4);
 80002f0:	4830      	ldr	r0, [pc, #192]	; (80003b4 <main+0xdc>)
 80002f2:	f002 f9f3 	bl	80026dc <HAL_TIM_Base_Start_IT>
HAL_UART_Receive_IT(&huart2,rx_data,1);
 80002f6:	2201      	movs	r2, #1
 80002f8:	492f      	ldr	r1, [pc, #188]	; (80003b8 <main+0xe0>)
 80002fa:	4830      	ldr	r0, [pc, #192]	; (80003bc <main+0xe4>)
 80002fc:	f002 fe8e 	bl	800301c <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(count <= (red - 1)){
 8000300:	4b2f      	ldr	r3, [pc, #188]	; (80003c0 <main+0xe8>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	461a      	mov	r2, r3
 8000306:	4b2f      	ldr	r3, [pc, #188]	; (80003c4 <main+0xec>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	3b01      	subs	r3, #1
 800030c:	429a      	cmp	r2, r3
 800030e:	dc10      	bgt.n	8000332 <main+0x5a>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_SET);
 8000310:	2201      	movs	r2, #1
 8000312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000316:	482c      	ldr	r0, [pc, #176]	; (80003c8 <main+0xf0>)
 8000318:	f000 fe06 	bl	8000f28 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2140      	movs	r1, #64	; 0x40
 8000320:	4829      	ldr	r0, [pc, #164]	; (80003c8 <main+0xf0>)
 8000322:	f000 fe01 	bl	8000f28 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	4827      	ldr	r0, [pc, #156]	; (80003c8 <main+0xf0>)
 800032c:	f000 fdfc 	bl	8000f28 <HAL_GPIO_WritePin>
 8000330:	e7e6      	b.n	8000300 <main+0x28>
	  }
	  else if(count <= (red + yellow -1)){
 8000332:	4b23      	ldr	r3, [pc, #140]	; (80003c0 <main+0xe8>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	461a      	mov	r2, r3
 8000338:	4b22      	ldr	r3, [pc, #136]	; (80003c4 <main+0xec>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	4619      	mov	r1, r3
 800033e:	4b23      	ldr	r3, [pc, #140]	; (80003cc <main+0xf4>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	440b      	add	r3, r1
 8000344:	3b01      	subs	r3, #1
 8000346:	429a      	cmp	r2, r3
 8000348:	dc10      	bgt.n	800036c <main+0x94>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000350:	481d      	ldr	r0, [pc, #116]	; (80003c8 <main+0xf0>)
 8000352:	f000 fde9 	bl	8000f28 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,GPIO_PIN_SET);
 8000356:	2201      	movs	r2, #1
 8000358:	2140      	movs	r1, #64	; 0x40
 800035a:	481b      	ldr	r0, [pc, #108]	; (80003c8 <main+0xf0>)
 800035c:	f000 fde4 	bl	8000f28 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2120      	movs	r1, #32
 8000364:	4818      	ldr	r0, [pc, #96]	; (80003c8 <main+0xf0>)
 8000366:	f000 fddf 	bl	8000f28 <HAL_GPIO_WritePin>
 800036a:	e7c9      	b.n	8000300 <main+0x28>
	  }
	  else if(count <= (red + yellow + green -1)){
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <main+0xe8>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	4619      	mov	r1, r3
 8000372:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <main+0xec>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	461a      	mov	r2, r3
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <main+0xf4>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	4413      	add	r3, r2
 800037e:	4a14      	ldr	r2, [pc, #80]	; (80003d0 <main+0xf8>)
 8000380:	7812      	ldrb	r2, [r2, #0]
 8000382:	4413      	add	r3, r2
 8000384:	3b01      	subs	r3, #1
 8000386:	4299      	cmp	r1, r3
 8000388:	dc10      	bgt.n	80003ac <main+0xd4>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000390:	480d      	ldr	r0, [pc, #52]	; (80003c8 <main+0xf0>)
 8000392:	f000 fdc9 	bl	8000f28 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	2140      	movs	r1, #64	; 0x40
 800039a:	480b      	ldr	r0, [pc, #44]	; (80003c8 <main+0xf0>)
 800039c:	f000 fdc4 	bl	8000f28 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,GPIO_PIN_SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2120      	movs	r1, #32
 80003a4:	4808      	ldr	r0, [pc, #32]	; (80003c8 <main+0xf0>)
 80003a6:	f000 fdbf 	bl	8000f28 <HAL_GPIO_WritePin>
 80003aa:	e7a9      	b.n	8000300 <main+0x28>
	  }
	  else{
	  	count = 0;
 80003ac:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <main+0xe8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
	  if(count <= (red - 1)){
 80003b2:	e7a5      	b.n	8000300 <main+0x28>
 80003b4:	2000021c 	.word	0x2000021c
 80003b8:	20000208 	.word	0x20000208
 80003bc:	20000268 	.word	0x20000268
 80003c0:	200001f8 	.word	0x200001f8
 80003c4:	20000217 	.word	0x20000217
 80003c8:	48000800 	.word	0x48000800
 80003cc:	20000219 	.word	0x20000219
 80003d0:	20000218 	.word	0x20000218

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b0a6      	sub	sp, #152	; 0x98
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003de:	2228      	movs	r2, #40	; 0x28
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f003 fda0 	bl	8003f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2258      	movs	r2, #88	; 0x58
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f003 fd92 	bl	8003f28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000404:	2302      	movs	r3, #2
 8000406:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000408:	2301      	movs	r3, #1
 800040a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800040c:	2310      	movs	r3, #16
 800040e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000412:	2302      	movs	r3, #2
 8000414:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800041c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000420:	2300      	movs	r3, #0
 8000422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000426:	2300      	movs	r3, #0
 8000428:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000430:	4618      	mov	r0, r3
 8000432:	f000 fd91 	bl	8000f58 <HAL_RCC_OscConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800043c:	f000 f8ea 	bl	8000614 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000440:	230f      	movs	r3, #15
 8000442:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000444:	2302      	movs	r3, #2
 8000446:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000454:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f001 fc92 	bl	8001d84 <HAL_RCC_ClockConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000466:	f000 f8d5 	bl	8000614 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM34;
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <SystemClock_Config+0xbc>)
 800046c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800046e:	2300      	movs	r3, #0
 8000470:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000472:	2300      	movs	r3, #0
 8000474:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4618      	mov	r0, r3
 800047a:	f001 feb9 	bl	80021f0 <HAL_RCCEx_PeriphCLKConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000484:	f000 f8c6 	bl	8000614 <Error_Handler>
  }
}
 8000488:	bf00      	nop
 800048a:	3798      	adds	r7, #152	; 0x98
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	00200002 	.word	0x00200002

08000494 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80004b2:	4b1e      	ldr	r3, [pc, #120]	; (800052c <MX_TIM4_Init+0x98>)
 80004b4:	4a1e      	ldr	r2, [pc, #120]	; (8000530 <MX_TIM4_Init+0x9c>)
 80004b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15999;
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <MX_TIM4_Init+0x98>)
 80004ba:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80004be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c0:	4b1a      	ldr	r3, [pc, #104]	; (800052c <MX_TIM4_Init+0x98>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80004c6:	4b19      	ldr	r3, [pc, #100]	; (800052c <MX_TIM4_Init+0x98>)
 80004c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ce:	4b17      	ldr	r3, [pc, #92]	; (800052c <MX_TIM4_Init+0x98>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004d4:	4b15      	ldr	r3, [pc, #84]	; (800052c <MX_TIM4_Init+0x98>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80004da:	4814      	ldr	r0, [pc, #80]	; (800052c <MX_TIM4_Init+0x98>)
 80004dc:	f002 f8a6 	bl	800262c <HAL_TIM_Base_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80004e6:	f000 f895 	bl	8000614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	4619      	mov	r1, r3
 80004f6:	480d      	ldr	r0, [pc, #52]	; (800052c <MX_TIM4_Init+0x98>)
 80004f8:	f002 fa7f 	bl	80029fa <HAL_TIM_ConfigClockSource>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000502:	f000 f887 	bl	8000614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	4619      	mov	r1, r3
 8000512:	4806      	ldr	r0, [pc, #24]	; (800052c <MX_TIM4_Init+0x98>)
 8000514:	f002 fc8a 	bl	8002e2c <HAL_TIMEx_MasterConfigSynchronization>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800051e:	f000 f879 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000522:	bf00      	nop
 8000524:	3720      	adds	r7, #32
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	2000021c 	.word	0x2000021c
 8000530:	40000800 	.word	0x40000800

08000534 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <MX_USART2_UART_Init+0x58>)
 800053a:	4a15      	ldr	r2, [pc, #84]	; (8000590 <MX_USART2_UART_Init+0x5c>)
 800053c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <MX_USART2_UART_Init+0x58>)
 8000540:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000544:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <MX_USART2_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <MX_USART2_UART_Init+0x58>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <MX_USART2_UART_Init+0x58>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <MX_USART2_UART_Init+0x58>)
 800055a:	220c      	movs	r2, #12
 800055c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <MX_USART2_UART_Init+0x58>)
 8000560:	2200      	movs	r2, #0
 8000562:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <MX_USART2_UART_Init+0x58>)
 8000566:	2200      	movs	r2, #0
 8000568:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800056a:	4b08      	ldr	r3, [pc, #32]	; (800058c <MX_USART2_UART_Init+0x58>)
 800056c:	2200      	movs	r2, #0
 800056e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <MX_USART2_UART_Init+0x58>)
 8000572:	2200      	movs	r2, #0
 8000574:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000576:	4805      	ldr	r0, [pc, #20]	; (800058c <MX_USART2_UART_Init+0x58>)
 8000578:	f002 fd02 	bl	8002f80 <HAL_UART_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000582:	f000 f847 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000268 	.word	0x20000268
 8000590:	40004400 	.word	0x40004400

08000594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <MX_GPIO_Init+0x78>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a17      	ldr	r2, [pc, #92]	; (800060c <MX_GPIO_Init+0x78>)
 80005b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <MX_GPIO_Init+0x78>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_GPIO_Init+0x78>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a11      	ldr	r2, [pc, #68]	; (800060c <MX_GPIO_Init+0x78>)
 80005c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_GPIO_Init+0x78>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <MX_GPIO_Init+0x7c>)
 80005e2:	f000 fca1 	bl	8000f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80005e6:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80005ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2301      	movs	r3, #1
 80005ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	4619      	mov	r1, r3
 80005fe:	4804      	ldr	r0, [pc, #16]	; (8000610 <MX_GPIO_Init+0x7c>)
 8000600:	f000 fb08 	bl	8000c14 <HAL_GPIO_Init>

}
 8000604:	bf00      	nop
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40021000 	.word	0x40021000
 8000610:	48000800 	.word	0x48000800

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061a:	e7fe      	b.n	800061a <Error_Handler+0x6>

0800061c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <HAL_MspInit+0x44>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <HAL_MspInit+0x44>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6193      	str	r3, [r2, #24]
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <HAL_MspInit+0x44>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <HAL_MspInit+0x44>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	4a08      	ldr	r2, [pc, #32]	; (8000660 <HAL_MspInit+0x44>)
 8000640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000644:	61d3      	str	r3, [r2, #28]
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <HAL_MspInit+0x44>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <HAL_TIM_Base_MspInit+0x44>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d113      	bne.n	800069e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <HAL_TIM_Base_MspInit+0x48>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <HAL_TIM_Base_MspInit+0x48>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <HAL_TIM_Base_MspInit+0x48>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	201e      	movs	r0, #30
 8000694:	f000 fa11 	bl	8000aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000698:	201e      	movs	r0, #30
 800069a:	f000 fa2a 	bl	8000af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40000800 	.word	0x40000800
 80006ac:	40021000 	.word	0x40021000

080006b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a1b      	ldr	r2, [pc, #108]	; (800073c <HAL_UART_MspInit+0x8c>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d130      	bne.n	8000734 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <HAL_UART_MspInit+0x90>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a1a      	ldr	r2, [pc, #104]	; (8000740 <HAL_UART_MspInit+0x90>)
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b18      	ldr	r3, [pc, #96]	; (8000740 <HAL_UART_MspInit+0x90>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <HAL_UART_MspInit+0x90>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a14      	ldr	r2, [pc, #80]	; (8000740 <HAL_UART_MspInit+0x90>)
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_UART_MspInit+0x90>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000702:	230c      	movs	r3, #12
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000712:	2307      	movs	r3, #7
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000720:	f000 fa78 	bl	8000c14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	2026      	movs	r0, #38	; 0x26
 800072a:	f000 f9c6 	bl	8000aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800072e:	2026      	movs	r0, #38	; 0x26
 8000730:	f000 f9df 	bl	8000af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	; 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40004400 	.word	0x40004400
 8000740:	40021000 	.word	0x40021000

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler+0x4>

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <MemManage_Handler+0x4>

08000756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <UsageFault_Handler+0x4>

08000762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f000 f898 	bl	80008c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <TIM4_IRQHandler+0x10>)
 800079e:	f002 f80d 	bl	80027bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000021c 	.word	0x2000021c

080007ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007b0:	4802      	ldr	r0, [pc, #8]	; (80007bc <USART2_IRQHandler+0x10>)
 80007b2:	f002 fc71 	bl	8003098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000268 	.word	0x20000268

080007c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <SystemInit+0x20>)
 80007c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ca:	4a05      	ldr	r2, [pc, #20]	; (80007e0 <SystemInit+0x20>)
 80007cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800081c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ea:	490e      	ldr	r1, [pc, #56]	; (8000824 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ec:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <LoopForever+0xe>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a0b      	ldr	r2, [pc, #44]	; (800082c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000800:	4c0b      	ldr	r4, [pc, #44]	; (8000830 <LoopForever+0x16>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800080e:	f7ff ffd7 	bl	80007c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000812:	f003 fb65 	bl	8003ee0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000816:	f7ff fd5f 	bl	80002d8 <main>

0800081a <LoopForever>:

LoopForever:
    b LoopForever
 800081a:	e7fe      	b.n	800081a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800081c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000824:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000828:	08004204 	.word	0x08004204
  ldr r2, =_sbss
 800082c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000830:	200002f0 	.word	0x200002f0

08000834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC1_2_IRQHandler>
	...

08000838 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_Init+0x28>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_Init+0x28>)
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000848:	2003      	movs	r0, #3
 800084a:	f000 f92b 	bl	8000aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084e:	2000      	movs	r0, #0
 8000850:	f000 f808 	bl	8000864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000854:	f7ff fee2 	bl	800061c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40022000 	.word	0x40022000

08000864 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_InitTick+0x54>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_InitTick+0x58>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	fbb3 f3f1 	udiv	r3, r3, r1
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f943 	bl	8000b0e <HAL_SYSTICK_Config>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e00e      	b.n	80008b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b0f      	cmp	r3, #15
 8000896:	d80a      	bhi.n	80008ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000898:	2200      	movs	r2, #0
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f000 f90b 	bl	8000aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a4:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <HAL_InitTick+0x5c>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e000      	b.n	80008b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000004 	.word	0x20000004

080008c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_IncTick+0x20>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_IncTick+0x24>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <HAL_IncTick+0x24>)
 80008d6:	6013      	str	r3, [r2, #0]
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000008 	.word	0x20000008
 80008e8:	200002ec 	.word	0x200002ec

080008ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80008f0:	4b03      	ldr	r3, [pc, #12]	; (8000900 <HAL_GetTick+0x14>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	200002ec 	.word	0x200002ec

08000904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000920:	4013      	ands	r3, r2
 8000922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800092c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000936:	4a04      	ldr	r2, [pc, #16]	; (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	60d3      	str	r3, [r2, #12]
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <__NVIC_GetPriorityGrouping+0x18>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	f003 0307 	and.w	r3, r3, #7
}
 800095a:	4618      	mov	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	2b00      	cmp	r3, #0
 8000978:	db0b      	blt.n	8000992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	f003 021f 	and.w	r2, r3, #31
 8000980:	4907      	ldr	r1, [pc, #28]	; (80009a0 <__NVIC_EnableIRQ+0x38>)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	095b      	lsrs	r3, r3, #5
 8000988:	2001      	movs	r0, #1
 800098a:	fa00 f202 	lsl.w	r2, r0, r2
 800098e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000e100 	.word	0xe000e100

080009a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	db0a      	blt.n	80009ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	490c      	ldr	r1, [pc, #48]	; (80009f0 <__NVIC_SetPriority+0x4c>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	0112      	lsls	r2, r2, #4
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	440b      	add	r3, r1
 80009c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009cc:	e00a      	b.n	80009e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4908      	ldr	r1, [pc, #32]	; (80009f4 <__NVIC_SetPriority+0x50>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	3b04      	subs	r3, #4
 80009dc:	0112      	lsls	r2, r2, #4
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	440b      	add	r3, r1
 80009e2:	761a      	strb	r2, [r3, #24]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000e100 	.word	0xe000e100
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b089      	sub	sp, #36	; 0x24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	f1c3 0307 	rsb	r3, r3, #7
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	bf28      	it	cs
 8000a16:	2304      	movcs	r3, #4
 8000a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	2b06      	cmp	r3, #6
 8000a20:	d902      	bls.n	8000a28 <NVIC_EncodePriority+0x30>
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3b03      	subs	r3, #3
 8000a26:	e000      	b.n	8000a2a <NVIC_EncodePriority+0x32>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43da      	mvns	r2, r3
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a40:	f04f 31ff 	mov.w	r1, #4294967295
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	43d9      	mvns	r1, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	4313      	orrs	r3, r2
         );
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3724      	adds	r7, #36	; 0x24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
	...

08000a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a70:	d301      	bcc.n	8000a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00f      	b.n	8000a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <SysTick_Config+0x40>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7e:	210f      	movs	r1, #15
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f7ff ff8e 	bl	80009a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SysTick_Config+0x40>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <SysTick_Config+0x40>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	e000e010 	.word	0xe000e010

08000aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ff29 	bl	8000904 <__NVIC_SetPriorityGrouping>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000acc:	f7ff ff3e 	bl	800094c <__NVIC_GetPriorityGrouping>
 8000ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	6978      	ldr	r0, [r7, #20]
 8000ad8:	f7ff ff8e 	bl	80009f8 <NVIC_EncodePriority>
 8000adc:	4602      	mov	r2, r0
 8000ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff5d 	bl	80009a4 <__NVIC_SetPriority>
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff31 	bl	8000968 <__NVIC_EnableIRQ>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffa2 	bl	8000a60 <SysTick_Config>
 8000b1c:	4603      	mov	r3, r0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d008      	beq.n	8000b4a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e020      	b.n	8000b8c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f022 020e 	bic.w	r2, r2, #14
 8000b58:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f022 0201 	bic.w	r2, r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b72:	2101      	movs	r1, #1
 8000b74:	fa01 f202 	lsl.w	r2, r1, r2
 8000b78:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d005      	beq.n	8000bba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
 8000bb8:	e027      	b.n	8000c0a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 020e 	bic.w	r2, r2, #14
 8000bc8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f022 0201 	bic.w	r2, r2, #1
 8000bd8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000be2:	2101      	movs	r1, #1
 8000be4:	fa01 f202 	lsl.w	r2, r1, r2
 8000be8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	4798      	blx	r3
    } 
  }
  return status;
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b087      	sub	sp, #28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c22:	e160      	b.n	8000ee6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	2101      	movs	r1, #1
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c30:	4013      	ands	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f000 8152 	beq.w	8000ee0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d00b      	beq.n	8000c5c <HAL_GPIO_Init+0x48>
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d007      	beq.n	8000c5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c50:	2b11      	cmp	r3, #17
 8000c52:	d003      	beq.n	8000c5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	2b12      	cmp	r3, #18
 8000c5a:	d130      	bne.n	8000cbe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	2203      	movs	r2, #3
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c92:	2201      	movs	r2, #1
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	091b      	lsrs	r3, r3, #4
 8000ca8:	f003 0201 	and.w	r2, r3, #1
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	2203      	movs	r2, #3
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_Init+0xea>
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b12      	cmp	r3, #18
 8000cfc:	d123      	bne.n	8000d46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	08da      	lsrs	r2, r3, #3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3208      	adds	r2, #8
 8000d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	220f      	movs	r2, #15
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	691a      	ldr	r2, [r3, #16]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	f003 0307 	and.w	r3, r3, #7
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	08da      	lsrs	r2, r3, #3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3208      	adds	r2, #8
 8000d40:	6939      	ldr	r1, [r7, #16]
 8000d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2203      	movs	r2, #3
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0203 	and.w	r2, r3, #3
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 80ac 	beq.w	8000ee0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d88:	4b5e      	ldr	r3, [pc, #376]	; (8000f04 <HAL_GPIO_Init+0x2f0>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a5d      	ldr	r2, [pc, #372]	; (8000f04 <HAL_GPIO_Init+0x2f0>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b5b      	ldr	r3, [pc, #364]	; (8000f04 <HAL_GPIO_Init+0x2f0>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000da0:	4a59      	ldr	r2, [pc, #356]	; (8000f08 <HAL_GPIO_Init+0x2f4>)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	089b      	lsrs	r3, r3, #2
 8000da6:	3302      	adds	r3, #2
 8000da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	220f      	movs	r2, #15
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dca:	d025      	beq.n	8000e18 <HAL_GPIO_Init+0x204>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a4f      	ldr	r2, [pc, #316]	; (8000f0c <HAL_GPIO_Init+0x2f8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d01f      	beq.n	8000e14 <HAL_GPIO_Init+0x200>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a4e      	ldr	r2, [pc, #312]	; (8000f10 <HAL_GPIO_Init+0x2fc>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d019      	beq.n	8000e10 <HAL_GPIO_Init+0x1fc>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a4d      	ldr	r2, [pc, #308]	; (8000f14 <HAL_GPIO_Init+0x300>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d013      	beq.n	8000e0c <HAL_GPIO_Init+0x1f8>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a4c      	ldr	r2, [pc, #304]	; (8000f18 <HAL_GPIO_Init+0x304>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d00d      	beq.n	8000e08 <HAL_GPIO_Init+0x1f4>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a4b      	ldr	r2, [pc, #300]	; (8000f1c <HAL_GPIO_Init+0x308>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d007      	beq.n	8000e04 <HAL_GPIO_Init+0x1f0>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a4a      	ldr	r2, [pc, #296]	; (8000f20 <HAL_GPIO_Init+0x30c>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d101      	bne.n	8000e00 <HAL_GPIO_Init+0x1ec>
 8000dfc:	2306      	movs	r3, #6
 8000dfe:	e00c      	b.n	8000e1a <HAL_GPIO_Init+0x206>
 8000e00:	2307      	movs	r3, #7
 8000e02:	e00a      	b.n	8000e1a <HAL_GPIO_Init+0x206>
 8000e04:	2305      	movs	r3, #5
 8000e06:	e008      	b.n	8000e1a <HAL_GPIO_Init+0x206>
 8000e08:	2304      	movs	r3, #4
 8000e0a:	e006      	b.n	8000e1a <HAL_GPIO_Init+0x206>
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e004      	b.n	8000e1a <HAL_GPIO_Init+0x206>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e002      	b.n	8000e1a <HAL_GPIO_Init+0x206>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <HAL_GPIO_Init+0x206>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	f002 0203 	and.w	r2, r2, #3
 8000e20:	0092      	lsls	r2, r2, #2
 8000e22:	4093      	lsls	r3, r2
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e2a:	4937      	ldr	r1, [pc, #220]	; (8000f08 <HAL_GPIO_Init+0x2f4>)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3302      	adds	r3, #2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e38:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e5c:	4a31      	ldr	r2, [pc, #196]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e62:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e86:	4a27      	ldr	r2, [pc, #156]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8c:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eb0:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f47f ae97 	bne.w	8000c24 <HAL_GPIO_Init+0x10>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	371c      	adds	r7, #28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010000 	.word	0x40010000
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	48000800 	.word	0x48000800
 8000f14:	48000c00 	.word	0x48000c00
 8000f18:	48001000 	.word	0x48001000
 8000f1c:	48001400 	.word	0x48001400
 8000f20:	48001800 	.word	0x48001800
 8000f24:	40010400 	.word	0x40010400

08000f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
 8000f34:	4613      	mov	r3, r2
 8000f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f38:	787b      	ldrb	r3, [r7, #1]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f3e:	887a      	ldrh	r2, [r7, #2]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f46:	887a      	ldrh	r2, [r7, #2]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	f000 bf01 	b.w	8001d74 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 8160 	beq.w	8001242 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f82:	4bae      	ldr	r3, [pc, #696]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d00c      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f8e:	4bab      	ldr	r3, [pc, #684]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	d159      	bne.n	800104e <HAL_RCC_OscConfig+0xf6>
 8000f9a:	4ba8      	ldr	r3, [pc, #672]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa6:	d152      	bne.n	800104e <HAL_RCC_OscConfig+0xf6>
 8000fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fac:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000fb4:	fa93 f3a3 	rbit	r3, r3
 8000fb8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fbc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc0:	fab3 f383 	clz	r3, r3
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d102      	bne.n	8000fda <HAL_RCC_OscConfig+0x82>
 8000fd4:	4b99      	ldr	r3, [pc, #612]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	e015      	b.n	8001006 <HAL_RCC_OscConfig+0xae>
 8000fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fde:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000fe6:	fa93 f3a3 	rbit	r3, r3
 8000fea:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000fee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ff6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000ffa:	fa93 f3a3 	rbit	r3, r3
 8000ffe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001002:	4b8e      	ldr	r3, [pc, #568]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001006:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800100a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800100e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001012:	fa92 f2a2 	rbit	r2, r2
 8001016:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800101a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800101e:	fab2 f282 	clz	r2, r2
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	f042 0220 	orr.w	r2, r2, #32
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	f002 021f 	and.w	r2, r2, #31
 800102e:	2101      	movs	r1, #1
 8001030:	fa01 f202 	lsl.w	r2, r1, r2
 8001034:	4013      	ands	r3, r2
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 8102 	beq.w	8001240 <HAL_RCC_OscConfig+0x2e8>
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f040 80fc 	bne.w	8001240 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	f000 be93 	b.w	8001d74 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001058:	d106      	bne.n	8001068 <HAL_RCC_OscConfig+0x110>
 800105a:	4b78      	ldr	r3, [pc, #480]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a77      	ldr	r2, [pc, #476]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 8001060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	e030      	b.n	80010ca <HAL_RCC_OscConfig+0x172>
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10c      	bne.n	800108c <HAL_RCC_OscConfig+0x134>
 8001072:	4b72      	ldr	r3, [pc, #456]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a71      	ldr	r2, [pc, #452]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 8001078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	4b6f      	ldr	r3, [pc, #444]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a6e      	ldr	r2, [pc, #440]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 8001084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e01e      	b.n	80010ca <HAL_RCC_OscConfig+0x172>
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001096:	d10c      	bne.n	80010b2 <HAL_RCC_OscConfig+0x15a>
 8001098:	4b68      	ldr	r3, [pc, #416]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a67      	ldr	r2, [pc, #412]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 800109e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b65      	ldr	r3, [pc, #404]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a64      	ldr	r2, [pc, #400]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 80010aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	e00b      	b.n	80010ca <HAL_RCC_OscConfig+0x172>
 80010b2:	4b62      	ldr	r3, [pc, #392]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a61      	ldr	r2, [pc, #388]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 80010b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	4b5f      	ldr	r3, [pc, #380]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a5e      	ldr	r2, [pc, #376]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 80010c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d059      	beq.n	8001188 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fc0a 	bl	80008ec <HAL_GetTick>
 80010d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010dc:	e00a      	b.n	80010f4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010de:	f7ff fc05 	bl	80008ec <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b64      	cmp	r3, #100	; 0x64
 80010ec:	d902      	bls.n	80010f4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	f000 be40 	b.w	8001d74 <HAL_RCC_OscConfig+0xe1c>
 80010f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001100:	fa93 f3a3 	rbit	r3, r3
 8001104:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001108:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110c:	fab3 f383 	clz	r3, r3
 8001110:	b2db      	uxtb	r3, r3
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	b2db      	uxtb	r3, r3
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b01      	cmp	r3, #1
 800111e:	d102      	bne.n	8001126 <HAL_RCC_OscConfig+0x1ce>
 8001120:	4b46      	ldr	r3, [pc, #280]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	e015      	b.n	8001152 <HAL_RCC_OscConfig+0x1fa>
 8001126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800112a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001132:	fa93 f3a3 	rbit	r3, r3
 8001136:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800113a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800113e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001142:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001146:	fa93 f3a3 	rbit	r3, r3
 800114a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800114e:	4b3b      	ldr	r3, [pc, #236]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001156:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800115a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800115e:	fa92 f2a2 	rbit	r2, r2
 8001162:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001166:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800116a:	fab2 f282 	clz	r2, r2
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	f042 0220 	orr.w	r2, r2, #32
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	f002 021f 	and.w	r2, r2, #31
 800117a:	2101      	movs	r1, #1
 800117c:	fa01 f202 	lsl.w	r2, r1, r2
 8001180:	4013      	ands	r3, r2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0ab      	beq.n	80010de <HAL_RCC_OscConfig+0x186>
 8001186:	e05c      	b.n	8001242 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fbb0 	bl	80008ec <HAL_GetTick>
 800118c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001190:	e00a      	b.n	80011a8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001192:	f7ff fbab 	bl	80008ec <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	; 0x64
 80011a0:	d902      	bls.n	80011a8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	f000 bde6 	b.w	8001d74 <HAL_RCC_OscConfig+0xe1c>
 80011a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ac:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80011b4:	fa93 f3a3 	rbit	r3, r3
 80011b8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80011bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c0:	fab3 f383 	clz	r3, r3
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d102      	bne.n	80011da <HAL_RCC_OscConfig+0x282>
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	e015      	b.n	8001206 <HAL_RCC_OscConfig+0x2ae>
 80011da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011de:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80011e6:	fa93 f3a3 	rbit	r3, r3
 80011ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80011ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80011fa:	fa93 f3a3 	rbit	r3, r3
 80011fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_RCC_OscConfig+0x2e4>)
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800120a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800120e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001212:	fa92 f2a2 	rbit	r2, r2
 8001216:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800121a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800121e:	fab2 f282 	clz	r2, r2
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	f042 0220 	orr.w	r2, r2, #32
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	f002 021f 	and.w	r2, r2, #31
 800122e:	2101      	movs	r1, #1
 8001230:	fa01 f202 	lsl.w	r2, r1, r2
 8001234:	4013      	ands	r3, r2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1ab      	bne.n	8001192 <HAL_RCC_OscConfig+0x23a>
 800123a:	e002      	b.n	8001242 <HAL_RCC_OscConfig+0x2ea>
 800123c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 8170 	beq.w	8001532 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001252:	4bd0      	ldr	r3, [pc, #832]	; (8001594 <HAL_RCC_OscConfig+0x63c>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00c      	beq.n	8001278 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800125e:	4bcd      	ldr	r3, [pc, #820]	; (8001594 <HAL_RCC_OscConfig+0x63c>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b08      	cmp	r3, #8
 8001268:	d16d      	bne.n	8001346 <HAL_RCC_OscConfig+0x3ee>
 800126a:	4bca      	ldr	r3, [pc, #808]	; (8001594 <HAL_RCC_OscConfig+0x63c>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001276:	d166      	bne.n	8001346 <HAL_RCC_OscConfig+0x3ee>
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001282:	fa93 f3a3 	rbit	r3, r3
 8001286:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800128a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128e:	fab3 f383 	clz	r3, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	095b      	lsrs	r3, r3, #5
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d102      	bne.n	80012a8 <HAL_RCC_OscConfig+0x350>
 80012a2:	4bbc      	ldr	r3, [pc, #752]	; (8001594 <HAL_RCC_OscConfig+0x63c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	e013      	b.n	80012d0 <HAL_RCC_OscConfig+0x378>
 80012a8:	2302      	movs	r3, #2
 80012aa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80012b2:	fa93 f3a3 	rbit	r3, r3
 80012b6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80012ba:	2302      	movs	r3, #2
 80012bc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012c0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80012c4:	fa93 f3a3 	rbit	r3, r3
 80012c8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80012cc:	4bb1      	ldr	r3, [pc, #708]	; (8001594 <HAL_RCC_OscConfig+0x63c>)
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	2202      	movs	r2, #2
 80012d2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80012d6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80012da:	fa92 f2a2 	rbit	r2, r2
 80012de:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80012e2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80012e6:	fab2 f282 	clz	r2, r2
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	f042 0220 	orr.w	r2, r2, #32
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	f002 021f 	and.w	r2, r2, #31
 80012f6:	2101      	movs	r1, #1
 80012f8:	fa01 f202 	lsl.w	r2, r1, r2
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <HAL_RCC_OscConfig+0x3ba>
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d002      	beq.n	8001312 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	f000 bd31 	b.w	8001d74 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001312:	4ba0      	ldr	r3, [pc, #640]	; (8001594 <HAL_RCC_OscConfig+0x63c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	21f8      	movs	r1, #248	; 0xf8
 8001322:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800132a:	fa91 f1a1 	rbit	r1, r1
 800132e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001332:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001336:	fab1 f181 	clz	r1, r1
 800133a:	b2c9      	uxtb	r1, r1
 800133c:	408b      	lsls	r3, r1
 800133e:	4995      	ldr	r1, [pc, #596]	; (8001594 <HAL_RCC_OscConfig+0x63c>)
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001344:	e0f5      	b.n	8001532 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8085 	beq.w	800145c <HAL_RCC_OscConfig+0x504>
 8001352:	2301      	movs	r3, #1
 8001354:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001358:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001364:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001368:	fab3 f383 	clz	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001372:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	461a      	mov	r2, r3
 800137a:	2301      	movs	r3, #1
 800137c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fab5 	bl	80008ec <HAL_GetTick>
 8001382:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001386:	e00a      	b.n	800139e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001388:	f7ff fab0 	bl	80008ec <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d902      	bls.n	800139e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	f000 bceb 	b.w	8001d74 <HAL_RCC_OscConfig+0xe1c>
 800139e:	2302      	movs	r3, #2
 80013a0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80013a8:	fa93 f3a3 	rbit	r3, r3
 80013ac:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80013b0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	fab3 f383 	clz	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d102      	bne.n	80013ce <HAL_RCC_OscConfig+0x476>
 80013c8:	4b72      	ldr	r3, [pc, #456]	; (8001594 <HAL_RCC_OscConfig+0x63c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	e013      	b.n	80013f6 <HAL_RCC_OscConfig+0x49e>
 80013ce:	2302      	movs	r3, #2
 80013d0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80013e0:	2302      	movs	r3, #2
 80013e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013e6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013ea:	fa93 f3a3 	rbit	r3, r3
 80013ee:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013f2:	4b68      	ldr	r3, [pc, #416]	; (8001594 <HAL_RCC_OscConfig+0x63c>)
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	2202      	movs	r2, #2
 80013f8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80013fc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001400:	fa92 f2a2 	rbit	r2, r2
 8001404:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001408:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800140c:	fab2 f282 	clz	r2, r2
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	f042 0220 	orr.w	r2, r2, #32
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	f002 021f 	and.w	r2, r2, #31
 800141c:	2101      	movs	r1, #1
 800141e:	fa01 f202 	lsl.w	r2, r1, r2
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0af      	beq.n	8001388 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4b5a      	ldr	r3, [pc, #360]	; (8001594 <HAL_RCC_OscConfig+0x63c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	21f8      	movs	r1, #248	; 0xf8
 8001438:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001440:	fa91 f1a1 	rbit	r1, r1
 8001444:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001448:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800144c:	fab1 f181 	clz	r1, r1
 8001450:	b2c9      	uxtb	r1, r1
 8001452:	408b      	lsls	r3, r1
 8001454:	494f      	ldr	r1, [pc, #316]	; (8001594 <HAL_RCC_OscConfig+0x63c>)
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
 800145a:	e06a      	b.n	8001532 <HAL_RCC_OscConfig+0x5da>
 800145c:	2301      	movs	r3, #1
 800145e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800146e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001472:	fab3 f383 	clz	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800147c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	461a      	mov	r2, r3
 8001484:	2300      	movs	r3, #0
 8001486:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fa30 	bl	80008ec <HAL_GetTick>
 800148c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001492:	f7ff fa2b 	bl	80008ec <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d902      	bls.n	80014a8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	f000 bc66 	b.w	8001d74 <HAL_RCC_OscConfig+0xe1c>
 80014a8:	2302      	movs	r3, #2
 80014aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80014ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014be:	fab3 f383 	clz	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	095b      	lsrs	r3, r3, #5
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d102      	bne.n	80014d8 <HAL_RCC_OscConfig+0x580>
 80014d2:	4b30      	ldr	r3, [pc, #192]	; (8001594 <HAL_RCC_OscConfig+0x63c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	e013      	b.n	8001500 <HAL_RCC_OscConfig+0x5a8>
 80014d8:	2302      	movs	r3, #2
 80014da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014e2:	fa93 f3a3 	rbit	r3, r3
 80014e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80014ea:	2302      	movs	r3, #2
 80014ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014f4:	fa93 f3a3 	rbit	r3, r3
 80014f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014fc:	4b25      	ldr	r3, [pc, #148]	; (8001594 <HAL_RCC_OscConfig+0x63c>)
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	2202      	movs	r2, #2
 8001502:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001506:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800150a:	fa92 f2a2 	rbit	r2, r2
 800150e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001512:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001516:	fab2 f282 	clz	r2, r2
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	f042 0220 	orr.w	r2, r2, #32
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	f002 021f 	and.w	r2, r2, #31
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f202 	lsl.w	r2, r1, r2
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1af      	bne.n	8001492 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 80da 	beq.w	80016f6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d069      	beq.n	8001620 <HAL_RCC_OscConfig+0x6c8>
 800154c:	2301      	movs	r3, #1
 800154e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001556:	fa93 f3a3 	rbit	r3, r3
 800155a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800155e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001562:	fab3 f383 	clz	r3, r3
 8001566:	b2db      	uxtb	r3, r3
 8001568:	461a      	mov	r2, r3
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_RCC_OscConfig+0x640>)
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	461a      	mov	r2, r3
 8001572:	2301      	movs	r3, #1
 8001574:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001576:	f7ff f9b9 	bl	80008ec <HAL_GetTick>
 800157a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157e:	e00d      	b.n	800159c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001580:	f7ff f9b4 	bl	80008ec <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d905      	bls.n	800159c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e3ef      	b.n	8001d74 <HAL_RCC_OscConfig+0xe1c>
 8001594:	40021000 	.word	0x40021000
 8001598:	10908120 	.word	0x10908120
 800159c:	2302      	movs	r3, #2
 800159e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015a6:	fa93 f2a3 	rbit	r2, r3
 80015aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80015b4:	2202      	movs	r2, #2
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	fa93 f2a3 	rbit	r2, r3
 80015c2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015cc:	2202      	movs	r2, #2
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	fa93 f2a3 	rbit	r2, r3
 80015da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e0:	4ba4      	ldr	r3, [pc, #656]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 80015e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80015e8:	2102      	movs	r1, #2
 80015ea:	6019      	str	r1, [r3, #0]
 80015ec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	fa93 f1a3 	rbit	r1, r3
 80015f6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80015fa:	6019      	str	r1, [r3, #0]
  return result;
 80015fc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	fab3 f383 	clz	r3, r3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800160c:	b2db      	uxtb	r3, r3
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	2101      	movs	r1, #1
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	4013      	ands	r3, r2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0b0      	beq.n	8001580 <HAL_RCC_OscConfig+0x628>
 800161e:	e06a      	b.n	80016f6 <HAL_RCC_OscConfig+0x79e>
 8001620:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001628:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	fa93 f2a3 	rbit	r2, r3
 8001632:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001636:	601a      	str	r2, [r3, #0]
  return result;
 8001638:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800163c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163e:	fab3 f383 	clz	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	461a      	mov	r2, r3
 8001646:	4b8c      	ldr	r3, [pc, #560]	; (8001878 <HAL_RCC_OscConfig+0x920>)
 8001648:	4413      	add	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	461a      	mov	r2, r3
 800164e:	2300      	movs	r3, #0
 8001650:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7ff f94b 	bl	80008ec <HAL_GetTick>
 8001656:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800165a:	e009      	b.n	8001670 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165c:	f7ff f946 	bl	80008ec <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e381      	b.n	8001d74 <HAL_RCC_OscConfig+0xe1c>
 8001670:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001674:	2202      	movs	r2, #2
 8001676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001678:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	fa93 f2a3 	rbit	r2, r3
 8001682:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800168c:	2202      	movs	r2, #2
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	fa93 f2a3 	rbit	r2, r3
 800169a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016a4:	2202      	movs	r2, #2
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	fa93 f2a3 	rbit	r2, r3
 80016b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016b6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b8:	4b6e      	ldr	r3, [pc, #440]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 80016ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016c0:	2102      	movs	r1, #2
 80016c2:	6019      	str	r1, [r3, #0]
 80016c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	fa93 f1a3 	rbit	r1, r3
 80016ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016d2:	6019      	str	r1, [r3, #0]
  return result;
 80016d4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	fab3 f383 	clz	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f003 031f 	and.w	r3, r3, #31
 80016ea:	2101      	movs	r1, #1
 80016ec:	fa01 f303 	lsl.w	r3, r1, r3
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1b2      	bne.n	800165c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 8157 	beq.w	80019b4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800170c:	4b59      	ldr	r3, [pc, #356]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d112      	bne.n	800173e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001718:	4b56      	ldr	r3, [pc, #344]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	4a55      	ldr	r2, [pc, #340]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 800171e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001722:	61d3      	str	r3, [r2, #28]
 8001724:	4b53      	ldr	r3, [pc, #332]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001738:	2301      	movs	r3, #1
 800173a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173e:	4b4f      	ldr	r3, [pc, #316]	; (800187c <HAL_RCC_OscConfig+0x924>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001746:	2b00      	cmp	r3, #0
 8001748:	d11a      	bne.n	8001780 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800174a:	4b4c      	ldr	r3, [pc, #304]	; (800187c <HAL_RCC_OscConfig+0x924>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a4b      	ldr	r2, [pc, #300]	; (800187c <HAL_RCC_OscConfig+0x924>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001754:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001756:	f7ff f8c9 	bl	80008ec <HAL_GetTick>
 800175a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175e:	e009      	b.n	8001774 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001760:	f7ff f8c4 	bl	80008ec <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b64      	cmp	r3, #100	; 0x64
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e2ff      	b.n	8001d74 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	4b41      	ldr	r3, [pc, #260]	; (800187c <HAL_RCC_OscConfig+0x924>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0ef      	beq.n	8001760 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d106      	bne.n	8001798 <HAL_RCC_OscConfig+0x840>
 800178a:	4b3a      	ldr	r3, [pc, #232]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a39      	ldr	r2, [pc, #228]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6213      	str	r3, [r2, #32]
 8001796:	e02f      	b.n	80017f8 <HAL_RCC_OscConfig+0x8a0>
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x864>
 80017a2:	4b34      	ldr	r3, [pc, #208]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	4a33      	ldr	r2, [pc, #204]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 80017a8:	f023 0301 	bic.w	r3, r3, #1
 80017ac:	6213      	str	r3, [r2, #32]
 80017ae:	4b31      	ldr	r3, [pc, #196]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	4a30      	ldr	r2, [pc, #192]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 80017b4:	f023 0304 	bic.w	r3, r3, #4
 80017b8:	6213      	str	r3, [r2, #32]
 80017ba:	e01d      	b.n	80017f8 <HAL_RCC_OscConfig+0x8a0>
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b05      	cmp	r3, #5
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x888>
 80017c6:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4a2a      	ldr	r2, [pc, #168]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	6213      	str	r3, [r2, #32]
 80017d2:	4b28      	ldr	r3, [pc, #160]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	4a27      	ldr	r2, [pc, #156]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6213      	str	r3, [r2, #32]
 80017de:	e00b      	b.n	80017f8 <HAL_RCC_OscConfig+0x8a0>
 80017e0:	4b24      	ldr	r3, [pc, #144]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	4a23      	ldr	r2, [pc, #140]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	6213      	str	r3, [r2, #32]
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4a20      	ldr	r2, [pc, #128]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 80017f2:	f023 0304 	bic.w	r3, r3, #4
 80017f6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d06a      	beq.n	80018d8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001802:	f7ff f873 	bl	80008ec <HAL_GetTick>
 8001806:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180a:	e00b      	b.n	8001824 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180c:	f7ff f86e 	bl	80008ec <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	; 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e2a7      	b.n	8001d74 <HAL_RCC_OscConfig+0xe1c>
 8001824:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001828:	2202      	movs	r2, #2
 800182a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	fa93 f2a3 	rbit	r2, r3
 8001836:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001840:	2202      	movs	r2, #2
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	fa93 f2a3 	rbit	r2, r3
 800184e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001852:	601a      	str	r2, [r3, #0]
  return result;
 8001854:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001858:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	095b      	lsrs	r3, r3, #5
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d108      	bne.n	8001880 <HAL_RCC_OscConfig+0x928>
 800186e:	4b01      	ldr	r3, [pc, #4]	; (8001874 <HAL_RCC_OscConfig+0x91c>)
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	e013      	b.n	800189c <HAL_RCC_OscConfig+0x944>
 8001874:	40021000 	.word	0x40021000
 8001878:	10908120 	.word	0x10908120
 800187c:	40007000 	.word	0x40007000
 8001880:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001884:	2202      	movs	r2, #2
 8001886:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	fa93 f2a3 	rbit	r2, r3
 8001892:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	4bc0      	ldr	r3, [pc, #768]	; (8001b9c <HAL_RCC_OscConfig+0xc44>)
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80018a0:	2102      	movs	r1, #2
 80018a2:	6011      	str	r1, [r2, #0]
 80018a4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	fa92 f1a2 	rbit	r1, r2
 80018ae:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80018b2:	6011      	str	r1, [r2, #0]
  return result;
 80018b4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	fab2 f282 	clz	r2, r2
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	f002 021f 	and.w	r2, r2, #31
 80018ca:	2101      	movs	r1, #1
 80018cc:	fa01 f202 	lsl.w	r2, r1, r2
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d09a      	beq.n	800180c <HAL_RCC_OscConfig+0x8b4>
 80018d6:	e063      	b.n	80019a0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d8:	f7ff f808 	bl	80008ec <HAL_GetTick>
 80018dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e0:	e00b      	b.n	80018fa <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7ff f803 	bl	80008ec <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e23c      	b.n	8001d74 <HAL_RCC_OscConfig+0xe1c>
 80018fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018fe:	2202      	movs	r2, #2
 8001900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001902:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	fa93 f2a3 	rbit	r2, r3
 800190c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001916:	2202      	movs	r2, #2
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	fa93 f2a3 	rbit	r2, r3
 8001924:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001928:	601a      	str	r2, [r3, #0]
  return result;
 800192a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800192e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001930:	fab3 f383 	clz	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f043 0302 	orr.w	r3, r3, #2
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d102      	bne.n	800194a <HAL_RCC_OscConfig+0x9f2>
 8001944:	4b95      	ldr	r3, [pc, #596]	; (8001b9c <HAL_RCC_OscConfig+0xc44>)
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	e00d      	b.n	8001966 <HAL_RCC_OscConfig+0xa0e>
 800194a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800194e:	2202      	movs	r2, #2
 8001950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	fa93 f2a3 	rbit	r2, r3
 800195c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	4b8e      	ldr	r3, [pc, #568]	; (8001b9c <HAL_RCC_OscConfig+0xc44>)
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800196a:	2102      	movs	r1, #2
 800196c:	6011      	str	r1, [r2, #0]
 800196e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	fa92 f1a2 	rbit	r1, r2
 8001978:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800197c:	6011      	str	r1, [r2, #0]
  return result;
 800197e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	fab2 f282 	clz	r2, r2
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	f002 021f 	and.w	r2, r2, #31
 8001994:	2101      	movs	r1, #1
 8001996:	fa01 f202 	lsl.w	r2, r1, r2
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1a0      	bne.n	80018e2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019a0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d105      	bne.n	80019b4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a8:	4b7c      	ldr	r3, [pc, #496]	; (8001b9c <HAL_RCC_OscConfig+0xc44>)
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	4a7b      	ldr	r2, [pc, #492]	; (8001b9c <HAL_RCC_OscConfig+0xc44>)
 80019ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 81d9 	beq.w	8001d72 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c0:	4b76      	ldr	r3, [pc, #472]	; (8001b9c <HAL_RCC_OscConfig+0xc44>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	f000 81a6 	beq.w	8001d1a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	f040 811e 	bne.w	8001c16 <HAL_RCC_OscConfig+0xcbe>
 80019da:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	fa93 f2a3 	rbit	r2, r3
 80019ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80019f2:	601a      	str	r2, [r3, #0]
  return result;
 80019f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80019f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fa:	fab3 f383 	clz	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7fe ff6c 	bl	80008ec <HAL_GetTick>
 8001a14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a18:	e009      	b.n	8001a2e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a1a:	f7fe ff67 	bl	80008ec <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e1a2      	b.n	8001d74 <HAL_RCC_OscConfig+0xe1c>
 8001a2e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	fa93 f2a3 	rbit	r2, r3
 8001a42:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a46:	601a      	str	r2, [r3, #0]
  return result;
 8001a48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	095b      	lsrs	r3, r3, #5
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d102      	bne.n	8001a68 <HAL_RCC_OscConfig+0xb10>
 8001a62:	4b4e      	ldr	r3, [pc, #312]	; (8001b9c <HAL_RCC_OscConfig+0xc44>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	e01b      	b.n	8001aa0 <HAL_RCC_OscConfig+0xb48>
 8001a68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	fa93 f2a3 	rbit	r2, r3
 8001a7c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	fa93 f2a3 	rbit	r2, r3
 8001a96:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	4b3f      	ldr	r3, [pc, #252]	; (8001b9c <HAL_RCC_OscConfig+0xc44>)
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001aa4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001aa8:	6011      	str	r1, [r2, #0]
 8001aaa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	fa92 f1a2 	rbit	r1, r2
 8001ab4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ab8:	6011      	str	r1, [r2, #0]
  return result;
 8001aba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	fab2 f282 	clz	r2, r2
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	f042 0220 	orr.w	r2, r2, #32
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	f002 021f 	and.w	r2, r2, #31
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d19e      	bne.n	8001a1a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001adc:	4b2f      	ldr	r3, [pc, #188]	; (8001b9c <HAL_RCC_OscConfig+0xc44>)
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	f023 020f 	bic.w	r2, r3, #15
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	492c      	ldr	r1, [pc, #176]	; (8001b9c <HAL_RCC_OscConfig+0xc44>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001af0:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <HAL_RCC_OscConfig+0xc44>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6a19      	ldr	r1, [r3, #32]
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	430b      	orrs	r3, r1
 8001b06:	4925      	ldr	r1, [pc, #148]	; (8001b9c <HAL_RCC_OscConfig+0xc44>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
 8001b0c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	fa93 f2a3 	rbit	r2, r3
 8001b20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b24:	601a      	str	r2, [r3, #0]
  return result;
 8001b26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b2a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2301      	movs	r3, #1
 8001b40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7fe fed3 	bl	80008ec <HAL_GetTick>
 8001b46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b4a:	e009      	b.n	8001b60 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7fe fece 	bl	80008ec <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e109      	b.n	8001d74 <HAL_RCC_OscConfig+0xe1c>
 8001b60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	fa93 f2a3 	rbit	r2, r3
 8001b74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b78:	601a      	str	r2, [r3, #0]
  return result;
 8001b7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <HAL_RCC_OscConfig+0xc48>
 8001b94:	4b01      	ldr	r3, [pc, #4]	; (8001b9c <HAL_RCC_OscConfig+0xc44>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	e01e      	b.n	8001bd8 <HAL_RCC_OscConfig+0xc80>
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ba4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fa93 f2a3 	rbit	r2, r3
 8001bb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	fa93 f2a3 	rbit	r2, r3
 8001bce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	4b6a      	ldr	r3, [pc, #424]	; (8001d80 <HAL_RCC_OscConfig+0xe28>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001bdc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001be0:	6011      	str	r1, [r2, #0]
 8001be2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	fa92 f1a2 	rbit	r1, r2
 8001bec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001bf0:	6011      	str	r1, [r2, #0]
  return result;
 8001bf2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	fab2 f282 	clz	r2, r2
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	f042 0220 	orr.w	r2, r2, #32
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	f002 021f 	and.w	r2, r2, #31
 8001c08:	2101      	movs	r1, #1
 8001c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d09b      	beq.n	8001b4c <HAL_RCC_OscConfig+0xbf4>
 8001c14:	e0ad      	b.n	8001d72 <HAL_RCC_OscConfig+0xe1a>
 8001c16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	fa93 f2a3 	rbit	r2, r3
 8001c2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c2e:	601a      	str	r2, [r3, #0]
  return result;
 8001c30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c34:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	461a      	mov	r2, r3
 8001c48:	2300      	movs	r3, #0
 8001c4a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7fe fe4e 	bl	80008ec <HAL_GetTick>
 8001c50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c54:	e009      	b.n	8001c6a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c56:	f7fe fe49 	bl	80008ec <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e084      	b.n	8001d74 <HAL_RCC_OscConfig+0xe1c>
 8001c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	fa93 f2a3 	rbit	r2, r3
 8001c7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c82:	601a      	str	r2, [r3, #0]
  return result;
 8001c84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	095b      	lsrs	r3, r3, #5
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d102      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xd4c>
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <HAL_RCC_OscConfig+0xe28>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	e01b      	b.n	8001cdc <HAL_RCC_OscConfig+0xd84>
 8001ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	fa93 f2a3 	rbit	r2, r3
 8001cb8:	f107 0320 	add.w	r3, r7, #32
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f107 0318 	add.w	r3, r7, #24
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <HAL_RCC_OscConfig+0xe28>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	f107 0214 	add.w	r2, r7, #20
 8001ce0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ce4:	6011      	str	r1, [r2, #0]
 8001ce6:	f107 0214 	add.w	r2, r7, #20
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	fa92 f1a2 	rbit	r1, r2
 8001cf0:	f107 0210 	add.w	r2, r7, #16
 8001cf4:	6011      	str	r1, [r2, #0]
  return result;
 8001cf6:	f107 0210 	add.w	r2, r7, #16
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	fab2 f282 	clz	r2, r2
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f042 0220 	orr.w	r2, r2, #32
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	f002 021f 	and.w	r2, r2, #31
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d19e      	bne.n	8001c56 <HAL_RCC_OscConfig+0xcfe>
 8001d18:	e02b      	b.n	8001d72 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e025      	b.n	8001d74 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_RCC_OscConfig+0xe28>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_RCC_OscConfig+0xe28>)
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d3c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d111      	bne.n	8001d6e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d4a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d108      	bne.n	8001d6e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d60:	f003 020f 	and.w	r2, r3, #15
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000

08001d84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b09e      	sub	sp, #120	; 0x78
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e162      	b.n	8002062 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b90      	ldr	r3, [pc, #576]	; (8001fe0 <HAL_RCC_ClockConfig+0x25c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d910      	bls.n	8001dcc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b8d      	ldr	r3, [pc, #564]	; (8001fe0 <HAL_RCC_ClockConfig+0x25c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 0207 	bic.w	r2, r3, #7
 8001db2:	498b      	ldr	r1, [pc, #556]	; (8001fe0 <HAL_RCC_ClockConfig+0x25c>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b89      	ldr	r3, [pc, #548]	; (8001fe0 <HAL_RCC_ClockConfig+0x25c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e14a      	b.n	8002062 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd8:	4b82      	ldr	r3, [pc, #520]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	497f      	ldr	r1, [pc, #508]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 80dc 	beq.w	8001fb0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d13c      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xf6>
 8001e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e04:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d102      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xa6>
 8001e24:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	e00f      	b.n	8001e4a <HAL_RCC_ClockConfig+0xc6>
 8001e2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	667b      	str	r3, [r7, #100]	; 0x64
 8001e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8001e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e46:	4b67      	ldr	r3, [pc, #412]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e52:	fa92 f2a2 	rbit	r2, r2
 8001e56:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e5a:	fab2 f282 	clz	r2, r2
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	f042 0220 	orr.w	r2, r2, #32
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	f002 021f 	and.w	r2, r2, #31
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d17b      	bne.n	8001f6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e0f3      	b.n	8002062 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d13c      	bne.n	8001efc <HAL_RCC_ClockConfig+0x178>
 8001e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	095b      	lsrs	r3, r3, #5
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d102      	bne.n	8001eac <HAL_RCC_ClockConfig+0x128>
 8001ea6:	4b4f      	ldr	r3, [pc, #316]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	e00f      	b.n	8001ecc <HAL_RCC_ClockConfig+0x148>
 8001eac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8001eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8001ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ec8:	4b46      	ldr	r3, [pc, #280]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ed4:	fa92 f2a2 	rbit	r2, r2
 8001ed8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001eda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001edc:	fab2 f282 	clz	r2, r2
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	f042 0220 	orr.w	r2, r2, #32
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	f002 021f 	and.w	r2, r2, #31
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d13a      	bne.n	8001f6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0b2      	b.n	8002062 <HAL_RCC_ClockConfig+0x2de>
 8001efc:	2302      	movs	r3, #2
 8001efe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	095b      	lsrs	r3, r3, #5
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d102      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x1a0>
 8001f1e:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	e00d      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1bc>
 8001f24:	2302      	movs	r3, #2
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f30:	2302      	movs	r3, #2
 8001f32:	623b      	str	r3, [r7, #32]
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	4b29      	ldr	r3, [pc, #164]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	2202      	movs	r2, #2
 8001f42:	61ba      	str	r2, [r7, #24]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	fa92 f2a2 	rbit	r2, r2
 8001f4a:	617a      	str	r2, [r7, #20]
  return result;
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	fab2 f282 	clz	r2, r2
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	f042 0220 	orr.w	r2, r2, #32
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	f002 021f 	and.w	r2, r2, #31
 8001f5e:	2101      	movs	r1, #1
 8001f60:	fa01 f202 	lsl.w	r2, r1, r2
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e079      	b.n	8002062 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f023 0203 	bic.w	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	491a      	ldr	r1, [pc, #104]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f80:	f7fe fcb4 	bl	80008ec <HAL_GetTick>
 8001f84:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f88:	f7fe fcb0 	bl	80008ec <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e061      	b.n	8002062 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 020c 	and.w	r2, r3, #12
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d1eb      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_ClockConfig+0x25c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d214      	bcs.n	8001fe8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_RCC_ClockConfig+0x25c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 0207 	bic.w	r2, r3, #7
 8001fc6:	4906      	ldr	r1, [pc, #24]	; (8001fe0 <HAL_RCC_ClockConfig+0x25c>)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <HAL_RCC_ClockConfig+0x25c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e040      	b.n	8002062 <HAL_RCC_ClockConfig+0x2de>
 8001fe0:	40022000 	.word	0x40022000
 8001fe4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_RCC_ClockConfig+0x2e8>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	491a      	ldr	r1, [pc, #104]	; (800206c <HAL_RCC_ClockConfig+0x2e8>)
 8002002:	4313      	orrs	r3, r2
 8002004:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_RCC_ClockConfig+0x2e8>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4912      	ldr	r1, [pc, #72]	; (800206c <HAL_RCC_ClockConfig+0x2e8>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002026:	f000 f829 	bl	800207c <HAL_RCC_GetSysClockFreq>
 800202a:	4601      	mov	r1, r0
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_RCC_ClockConfig+0x2e8>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002034:	22f0      	movs	r2, #240	; 0xf0
 8002036:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	fa92 f2a2 	rbit	r2, r2
 800203e:	60fa      	str	r2, [r7, #12]
  return result;
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	fab2 f282 	clz	r2, r2
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	40d3      	lsrs	r3, r2
 800204a:	4a09      	ldr	r2, [pc, #36]	; (8002070 <HAL_RCC_ClockConfig+0x2ec>)
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	fa21 f303 	lsr.w	r3, r1, r3
 8002052:	4a08      	ldr	r2, [pc, #32]	; (8002074 <HAL_RCC_ClockConfig+0x2f0>)
 8002054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_RCC_ClockConfig+0x2f4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fc02 	bl	8000864 <HAL_InitTick>
  
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3778      	adds	r7, #120	; 0x78
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	080040b8 	.word	0x080040b8
 8002074:	20000000 	.word	0x20000000
 8002078:	20000004 	.word	0x20000004

0800207c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800207c:	b480      	push	{r7}
 800207e:	b08b      	sub	sp, #44	; 0x2c
 8002080:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002096:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d002      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x30>
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d003      	beq.n	80020b2 <HAL_RCC_GetSysClockFreq+0x36>
 80020aa:	e03f      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020ac:	4b25      	ldr	r3, [pc, #148]	; (8002144 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020ae:	623b      	str	r3, [r7, #32]
      break;
 80020b0:	e03f      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020b8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020bc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	fa92 f2a2 	rbit	r2, r2
 80020c4:	607a      	str	r2, [r7, #4]
  return result;
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	fab2 f282 	clz	r2, r2
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	40d3      	lsrs	r3, r2
 80020d0:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020d6:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	220f      	movs	r2, #15
 80020e0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	fa92 f2a2 	rbit	r2, r2
 80020e8:	60fa      	str	r2, [r7, #12]
  return result;
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	fab2 f282 	clz	r2, r2
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	40d3      	lsrs	r3, r2
 80020f4:	4a15      	ldr	r2, [pc, #84]	; (800214c <HAL_RCC_GetSysClockFreq+0xd0>)
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002104:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	fbb2 f2f3 	udiv	r2, r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
 8002114:	e007      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002116:	4a0b      	ldr	r2, [pc, #44]	; (8002144 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	fbb2 f2f3 	udiv	r2, r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	fb02 f303 	mul.w	r3, r2, r3
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	623b      	str	r3, [r7, #32]
      break;
 800212a:	e002      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_RCC_GetSysClockFreq+0xc8>)
 800212e:	623b      	str	r3, [r7, #32]
      break;
 8002130:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002132:	6a3b      	ldr	r3, [r7, #32]
}
 8002134:	4618      	mov	r0, r3
 8002136:	372c      	adds	r7, #44	; 0x2c
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40021000 	.word	0x40021000
 8002144:	007a1200 	.word	0x007a1200
 8002148:	080040d0 	.word	0x080040d0
 800214c:	080040e0 	.word	0x080040e0

08002150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <HAL_RCC_GetHCLKFreq+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000000 	.word	0x20000000

08002168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800216e:	f7ff ffef 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 8002172:	4601      	mov	r1, r0
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800217c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002180:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	fa92 f2a2 	rbit	r2, r2
 8002188:	603a      	str	r2, [r7, #0]
  return result;
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	fab2 f282 	clz	r2, r2
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	40d3      	lsrs	r3, r2
 8002194:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002196:	5cd3      	ldrb	r3, [r2, r3]
 8002198:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	080040c8 	.word	0x080040c8

080021ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021b2:	f7ff ffcd 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 80021b6:	4601      	mov	r1, r0
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	fa92 f2a2 	rbit	r2, r2
 80021cc:	603a      	str	r2, [r7, #0]
  return result;
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	fab2 f282 	clz	r2, r2
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	40d3      	lsrs	r3, r2
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_RCC_GetPCLK2Freq+0x40>)
 80021da:	5cd3      	ldrb	r3, [r2, r3]
 80021dc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	080040c8 	.word	0x080040c8

080021f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b092      	sub	sp, #72	; 0x48
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002200:	2300      	movs	r3, #0
 8002202:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80d4 	beq.w	80023bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002214:	4b4e      	ldr	r3, [pc, #312]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10e      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002220:	4b4b      	ldr	r3, [pc, #300]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	4a4a      	ldr	r2, [pc, #296]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222a:	61d3      	str	r3, [r2, #28]
 800222c:	4b48      	ldr	r3, [pc, #288]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002238:	2301      	movs	r3, #1
 800223a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223e:	4b45      	ldr	r3, [pc, #276]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d118      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800224a:	4b42      	ldr	r3, [pc, #264]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a41      	ldr	r2, [pc, #260]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002254:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002256:	f7fe fb49 	bl	80008ec <HAL_GetTick>
 800225a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	e008      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225e:	f7fe fb45 	bl	80008ec <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b64      	cmp	r3, #100	; 0x64
 800226a:	d901      	bls.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e1d6      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002270:	4b38      	ldr	r3, [pc, #224]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800227c:	4b34      	ldr	r3, [pc, #208]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002284:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8084 	beq.w	8002396 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002296:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002298:	429a      	cmp	r2, r3
 800229a:	d07c      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800229c:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	461a      	mov	r2, r3
 80022be:	4b26      	ldr	r3, [pc, #152]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	461a      	mov	r2, r3
 80022c6:	2301      	movs	r3, #1
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022da:	fab3 f383 	clz	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	461a      	mov	r2, r3
 80022ea:	2300      	movs	r3, #0
 80022ec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022ee:	4a18      	ldr	r2, [pc, #96]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022f2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d04b      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fe:	f7fe faf5 	bl	80008ec <HAL_GetTick>
 8002302:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002304:	e00a      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe faf1 	bl	80008ec <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e180      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800231c:	2302      	movs	r3, #2
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
 8002328:	2302      	movs	r3, #2
 800232a:	623b      	str	r3, [r7, #32]
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	61fb      	str	r3, [r7, #28]
  return result;
 8002334:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d108      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800234a:	4b01      	ldr	r3, [pc, #4]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	e00d      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002350:	40021000 	.word	0x40021000
 8002354:	40007000 	.word	0x40007000
 8002358:	10908100 	.word	0x10908100
 800235c:	2302      	movs	r3, #2
 800235e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	4ba0      	ldr	r3, [pc, #640]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	2202      	movs	r2, #2
 800236e:	613a      	str	r2, [r7, #16]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	fa92 f2a2 	rbit	r2, r2
 8002376:	60fa      	str	r2, [r7, #12]
  return result;
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	fab2 f282 	clz	r2, r2
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	f002 021f 	and.w	r2, r2, #31
 800238a:	2101      	movs	r1, #1
 800238c:	fa01 f202 	lsl.w	r2, r1, r2
 8002390:	4013      	ands	r3, r2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0b7      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002396:	4b95      	ldr	r3, [pc, #596]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4992      	ldr	r1, [pc, #584]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b0:	4b8e      	ldr	r3, [pc, #568]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	4a8d      	ldr	r2, [pc, #564]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023c8:	4b88      	ldr	r3, [pc, #544]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	f023 0203 	bic.w	r2, r3, #3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4985      	ldr	r1, [pc, #532]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d008      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023e6:	4b81      	ldr	r3, [pc, #516]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	497e      	ldr	r1, [pc, #504]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002404:	4b79      	ldr	r3, [pc, #484]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	4976      	ldr	r1, [pc, #472]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0320 	and.w	r3, r3, #32
 800241e:	2b00      	cmp	r3, #0
 8002420:	d008      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002422:	4b72      	ldr	r3, [pc, #456]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f023 0210 	bic.w	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	496f      	ldr	r1, [pc, #444]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002430:	4313      	orrs	r3, r2
 8002432:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002440:	4b6a      	ldr	r3, [pc, #424]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244c:	4967      	ldr	r1, [pc, #412]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d008      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800245e:	4b63      	ldr	r3, [pc, #396]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f023 0220 	bic.w	r2, r3, #32
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4960      	ldr	r1, [pc, #384]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800246c:	4313      	orrs	r3, r2
 800246e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800247c:	4b5b      	ldr	r3, [pc, #364]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	4958      	ldr	r1, [pc, #352]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800248a:	4313      	orrs	r3, r2
 800248c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d008      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800249a:	4b54      	ldr	r3, [pc, #336]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	4951      	ldr	r1, [pc, #324]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024b8:	4b4c      	ldr	r3, [pc, #304]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4949      	ldr	r1, [pc, #292]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024d6:	4b45      	ldr	r3, [pc, #276]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4942      	ldr	r1, [pc, #264]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024f4:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	493a      	ldr	r1, [pc, #232]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002502:	4313      	orrs	r3, r2
 8002504:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002512:	4b36      	ldr	r3, [pc, #216]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	4933      	ldr	r1, [pc, #204]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002520:	4313      	orrs	r3, r2
 8002522:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002530:	4b2e      	ldr	r3, [pc, #184]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253c:	492b      	ldr	r1, [pc, #172]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800253e:	4313      	orrs	r3, r2
 8002540:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800254e:	4b27      	ldr	r3, [pc, #156]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4924      	ldr	r1, [pc, #144]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800255c:	4313      	orrs	r3, r2
 800255e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800256c:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	491c      	ldr	r1, [pc, #112]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800257a:	4313      	orrs	r3, r2
 800257c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800258a:	4b18      	ldr	r3, [pc, #96]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	4915      	ldr	r1, [pc, #84]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002598:	4313      	orrs	r3, r2
 800259a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80025a8:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	490d      	ldr	r1, [pc, #52]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d2:	4906      	ldr	r1, [pc, #24]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00c      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80025e4:	4b01      	ldr	r3, [pc, #4]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	e002      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f8:	490b      	ldr	r1, [pc, #44]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002616:	4904      	ldr	r1, [pc, #16]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002618:	4313      	orrs	r3, r2
 800261a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3748      	adds	r7, #72	; 0x48
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000

0800262c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e049      	b.n	80026d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe f806 	bl	8000664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3304      	adds	r3, #4
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f000 faa6 	bl	8002bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d001      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e04f      	b.n	8002794 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a23      	ldr	r2, [pc, #140]	; (80027a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01d      	beq.n	8002752 <HAL_TIM_Base_Start_IT+0x76>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271e:	d018      	beq.n	8002752 <HAL_TIM_Base_Start_IT+0x76>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <HAL_TIM_Base_Start_IT+0x76>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1e      	ldr	r2, [pc, #120]	; (80027a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00e      	beq.n	8002752 <HAL_TIM_Base_Start_IT+0x76>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <HAL_TIM_Base_Start_IT+0xd0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d009      	beq.n	8002752 <HAL_TIM_Base_Start_IT+0x76>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1b      	ldr	r2, [pc, #108]	; (80027b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d004      	beq.n	8002752 <HAL_TIM_Base_Start_IT+0x76>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d115      	bne.n	800277e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800275a:	4013      	ands	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b06      	cmp	r3, #6
 8002762:	d015      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0xb4>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276a:	d011      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277c:	e008      	b.n	8002790 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0201 	orr.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	e000      	b.n	8002792 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002790:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	40012c00 	.word	0x40012c00
 80027a4:	40000400 	.word	0x40000400
 80027a8:	40000800 	.word	0x40000800
 80027ac:	40013400 	.word	0x40013400
 80027b0:	40014000 	.word	0x40014000
 80027b4:	40015000 	.word	0x40015000
 80027b8:	00010007 	.word	0x00010007

080027bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d122      	bne.n	8002818 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d11b      	bne.n	8002818 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0202 	mvn.w	r2, #2
 80027e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f9be 	bl	8002b80 <HAL_TIM_IC_CaptureCallback>
 8002804:	e005      	b.n	8002812 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f9b0 	bl	8002b6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f9c1 	bl	8002b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b04      	cmp	r3, #4
 8002824:	d122      	bne.n	800286c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b04      	cmp	r3, #4
 8002832:	d11b      	bne.n	800286c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0204 	mvn.w	r2, #4
 800283c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2202      	movs	r2, #2
 8002842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f994 	bl	8002b80 <HAL_TIM_IC_CaptureCallback>
 8002858:	e005      	b.n	8002866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f986 	bl	8002b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f997 	bl	8002b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b08      	cmp	r3, #8
 8002878:	d122      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b08      	cmp	r3, #8
 8002886:	d11b      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0208 	mvn.w	r2, #8
 8002890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2204      	movs	r2, #4
 8002896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f96a 	bl	8002b80 <HAL_TIM_IC_CaptureCallback>
 80028ac:	e005      	b.n	80028ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f95c 	bl	8002b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f96d 	bl	8002b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b10      	cmp	r3, #16
 80028cc:	d122      	bne.n	8002914 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d11b      	bne.n	8002914 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0210 	mvn.w	r2, #16
 80028e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2208      	movs	r2, #8
 80028ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f940 	bl	8002b80 <HAL_TIM_IC_CaptureCallback>
 8002900:	e005      	b.n	800290e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f932 	bl	8002b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f943 	bl	8002b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d10e      	bne.n	8002940 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b01      	cmp	r3, #1
 800292e:	d107      	bne.n	8002940 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0201 	mvn.w	r2, #1
 8002938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fd fc4a 	bl	80001d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294a:	2b80      	cmp	r3, #128	; 0x80
 800294c:	d10e      	bne.n	800296c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002958:	2b80      	cmp	r3, #128	; 0x80
 800295a:	d107      	bne.n	800296c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 faf6 	bl	8002f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800297a:	d10e      	bne.n	800299a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002986:	2b80      	cmp	r3, #128	; 0x80
 8002988:	d107      	bne.n	800299a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fae9 	bl	8002f6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a4:	2b40      	cmp	r3, #64	; 0x40
 80029a6:	d10e      	bne.n	80029c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b40      	cmp	r3, #64	; 0x40
 80029b4:	d107      	bne.n	80029c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f8f1 	bl	8002ba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d10e      	bne.n	80029f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f003 0320 	and.w	r3, r3, #32
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d107      	bne.n	80029f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f06f 0220 	mvn.w	r2, #32
 80029ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 faa9 	bl	8002f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_TIM_ConfigClockSource+0x18>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e0a8      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x16a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a30:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a34:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a3c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b40      	cmp	r3, #64	; 0x40
 8002a4c:	d067      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0x124>
 8002a4e:	2b40      	cmp	r3, #64	; 0x40
 8002a50:	d80b      	bhi.n	8002a6a <HAL_TIM_ConfigClockSource+0x70>
 8002a52:	2b10      	cmp	r3, #16
 8002a54:	d073      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x144>
 8002a56:	2b10      	cmp	r3, #16
 8002a58:	d802      	bhi.n	8002a60 <HAL_TIM_ConfigClockSource+0x66>
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d06f      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a5e:	e078      	b.n	8002b52 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d06c      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x144>
 8002a64:	2b30      	cmp	r3, #48	; 0x30
 8002a66:	d06a      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002a68:	e073      	b.n	8002b52 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002a6a:	2b70      	cmp	r3, #112	; 0x70
 8002a6c:	d00d      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x90>
 8002a6e:	2b70      	cmp	r3, #112	; 0x70
 8002a70:	d804      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x82>
 8002a72:	2b50      	cmp	r3, #80	; 0x50
 8002a74:	d033      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0xe4>
 8002a76:	2b60      	cmp	r3, #96	; 0x60
 8002a78:	d041      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002a7a:	e06a      	b.n	8002b52 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a80:	d066      	beq.n	8002b50 <HAL_TIM_ConfigClockSource+0x156>
 8002a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a86:	d017      	beq.n	8002ab8 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002a88:	e063      	b.n	8002b52 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6899      	ldr	r1, [r3, #8]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f000 f9a7 	bl	8002dec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002aac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	609a      	str	r2, [r3, #8]
      break;
 8002ab6:	e04c      	b.n	8002b52 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	6899      	ldr	r1, [r3, #8]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f000 f990 	bl	8002dec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ada:	609a      	str	r2, [r3, #8]
      break;
 8002adc:	e039      	b.n	8002b52 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6859      	ldr	r1, [r3, #4]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	461a      	mov	r2, r3
 8002aec:	f000 f904 	bl	8002cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2150      	movs	r1, #80	; 0x50
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f95d 	bl	8002db6 <TIM_ITRx_SetConfig>
      break;
 8002afc:	e029      	b.n	8002b52 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f000 f923 	bl	8002d56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2160      	movs	r1, #96	; 0x60
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f94d 	bl	8002db6 <TIM_ITRx_SetConfig>
      break;
 8002b1c:	e019      	b.n	8002b52 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6859      	ldr	r1, [r3, #4]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f000 f8e4 	bl	8002cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2140      	movs	r1, #64	; 0x40
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f93d 	bl	8002db6 <TIM_ITRx_SetConfig>
      break;
 8002b3c:	e009      	b.n	8002b52 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4619      	mov	r1, r3
 8002b48:	4610      	mov	r0, r2
 8002b4a:	f000 f934 	bl	8002db6 <TIM_ITRx_SetConfig>
        break;
 8002b4e:	e000      	b.n	8002b52 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002b50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a42      	ldr	r2, [pc, #264]	; (8002cd8 <TIM_Base_SetConfig+0x11c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d013      	beq.n	8002bfc <TIM_Base_SetConfig+0x40>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bda:	d00f      	beq.n	8002bfc <TIM_Base_SetConfig+0x40>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a3f      	ldr	r2, [pc, #252]	; (8002cdc <TIM_Base_SetConfig+0x120>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00b      	beq.n	8002bfc <TIM_Base_SetConfig+0x40>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a3e      	ldr	r2, [pc, #248]	; (8002ce0 <TIM_Base_SetConfig+0x124>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d007      	beq.n	8002bfc <TIM_Base_SetConfig+0x40>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a3d      	ldr	r2, [pc, #244]	; (8002ce4 <TIM_Base_SetConfig+0x128>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d003      	beq.n	8002bfc <TIM_Base_SetConfig+0x40>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a3c      	ldr	r2, [pc, #240]	; (8002ce8 <TIM_Base_SetConfig+0x12c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d108      	bne.n	8002c0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a31      	ldr	r2, [pc, #196]	; (8002cd8 <TIM_Base_SetConfig+0x11c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d01f      	beq.n	8002c56 <TIM_Base_SetConfig+0x9a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1c:	d01b      	beq.n	8002c56 <TIM_Base_SetConfig+0x9a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a2e      	ldr	r2, [pc, #184]	; (8002cdc <TIM_Base_SetConfig+0x120>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d017      	beq.n	8002c56 <TIM_Base_SetConfig+0x9a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a2d      	ldr	r2, [pc, #180]	; (8002ce0 <TIM_Base_SetConfig+0x124>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d013      	beq.n	8002c56 <TIM_Base_SetConfig+0x9a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a2c      	ldr	r2, [pc, #176]	; (8002ce4 <TIM_Base_SetConfig+0x128>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00f      	beq.n	8002c56 <TIM_Base_SetConfig+0x9a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a2c      	ldr	r2, [pc, #176]	; (8002cec <TIM_Base_SetConfig+0x130>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00b      	beq.n	8002c56 <TIM_Base_SetConfig+0x9a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a2b      	ldr	r2, [pc, #172]	; (8002cf0 <TIM_Base_SetConfig+0x134>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <TIM_Base_SetConfig+0x9a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a2a      	ldr	r2, [pc, #168]	; (8002cf4 <TIM_Base_SetConfig+0x138>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <TIM_Base_SetConfig+0x9a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a25      	ldr	r2, [pc, #148]	; (8002ce8 <TIM_Base_SetConfig+0x12c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d108      	bne.n	8002c68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a12      	ldr	r2, [pc, #72]	; (8002cd8 <TIM_Base_SetConfig+0x11c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d013      	beq.n	8002cbc <TIM_Base_SetConfig+0x100>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a13      	ldr	r2, [pc, #76]	; (8002ce4 <TIM_Base_SetConfig+0x128>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00f      	beq.n	8002cbc <TIM_Base_SetConfig+0x100>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a13      	ldr	r2, [pc, #76]	; (8002cec <TIM_Base_SetConfig+0x130>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00b      	beq.n	8002cbc <TIM_Base_SetConfig+0x100>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a12      	ldr	r2, [pc, #72]	; (8002cf0 <TIM_Base_SetConfig+0x134>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d007      	beq.n	8002cbc <TIM_Base_SetConfig+0x100>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a11      	ldr	r2, [pc, #68]	; (8002cf4 <TIM_Base_SetConfig+0x138>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <TIM_Base_SetConfig+0x100>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <TIM_Base_SetConfig+0x12c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d103      	bne.n	8002cc4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	615a      	str	r2, [r3, #20]
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40012c00 	.word	0x40012c00
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	40000800 	.word	0x40000800
 8002ce4:	40013400 	.word	0x40013400
 8002ce8:	40015000 	.word	0x40015000
 8002cec:	40014000 	.word	0x40014000
 8002cf0:	40014400 	.word	0x40014400
 8002cf4:	40014800 	.word	0x40014800

08002cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	f023 0201 	bic.w	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f023 030a 	bic.w	r3, r3, #10
 8002d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	621a      	str	r2, [r3, #32]
}
 8002d4a:	bf00      	nop
 8002d4c:	371c      	adds	r7, #28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b087      	sub	sp, #28
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	f023 0210 	bic.w	r2, r3, #16
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	031b      	lsls	r3, r3, #12
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	621a      	str	r2, [r3, #32]
}
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f043 0307 	orr.w	r3, r3, #7
 8002dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	609a      	str	r2, [r3, #8]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	021a      	lsls	r2, r3, #8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	609a      	str	r2, [r3, #8]
}
 8002e20:	bf00      	nop
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e06d      	b.n	8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a30      	ldr	r2, [pc, #192]	; (8002f2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a2f      	ldr	r2, [pc, #188]	; (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d004      	beq.n	8002e82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a2d      	ldr	r2, [pc, #180]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d108      	bne.n	8002e94 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1e      	ldr	r2, [pc, #120]	; (8002f2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d01d      	beq.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec0:	d018      	beq.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1c      	ldr	r2, [pc, #112]	; (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d013      	beq.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1a      	ldr	r2, [pc, #104]	; (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00e      	beq.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d009      	beq.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a16      	ldr	r2, [pc, #88]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a11      	ldr	r2, [pc, #68]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d10c      	bne.n	8002f0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002efa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	40012c00 	.word	0x40012c00
 8002f30:	40013400 	.word	0x40013400
 8002f34:	40015000 	.word	0x40015000
 8002f38:	40000400 	.word	0x40000400
 8002f3c:	40000800 	.word	0x40000800
 8002f40:	40014000 	.word	0x40014000

08002f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e040      	b.n	8003014 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fd fb84 	bl	80006b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2224      	movs	r2, #36	; 0x24
 8002fac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fa8a 	bl	80034d8 <UART_SetConfig>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e022      	b.n	8003014 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fc52 	bl	8003880 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ffa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fcd9 	bl	80039c4 <UART_CheckIdleState>
 8003012:	4603      	mov	r3, r0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	4613      	mov	r3, r2
 8003028:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800302e:	2b20      	cmp	r3, #32
 8003030:	d12c      	bne.n	800308c <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_UART_Receive_IT+0x22>
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e025      	b.n	800308e <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_UART_Receive_IT+0x34>
 800304c:	2302      	movs	r3, #2
 800304e:	e01e      	b.n	800308e <HAL_UART_Receive_IT+0x72>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d007      	beq.n	800307c <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800307a:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	461a      	mov	r2, r3
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 fd64 	bl	8003b50 <UART_Start_Receive_IT>
 8003088:	4603      	mov	r3, r0
 800308a:	e000      	b.n	800308e <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 800308c:	2302      	movs	r3, #2
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030b8:	69fa      	ldr	r2, [r7, #28]
 80030ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80030be:	4013      	ands	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d113      	bne.n	80030f0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00e      	beq.n	80030f0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d009      	beq.n	80030f0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 81cd 	beq.w	8003480 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	4798      	blx	r3
      }
      return;
 80030ee:	e1c7      	b.n	8003480 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80e3 	beq.w	80032be <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d105      	bne.n	800310e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4ba5      	ldr	r3, [pc, #660]	; (800339c <HAL_UART_IRQHandler+0x304>)
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80d8 	beq.w	80032be <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <HAL_UART_IRQHandler+0xa2>
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2201      	movs	r2, #1
 8003128:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003130:	f043 0201 	orr.w	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d010      	beq.n	8003166 <HAL_UART_IRQHandler+0xce>
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00b      	beq.n	8003166 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2202      	movs	r2, #2
 8003154:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800315c:	f043 0204 	orr.w	r2, r3, #4
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d010      	beq.n	8003192 <HAL_UART_IRQHandler+0xfa>
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2204      	movs	r2, #4
 8003180:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003188:	f043 0202 	orr.w	r2, r3, #2
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d015      	beq.n	80031c8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d104      	bne.n	80031b0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2208      	movs	r2, #8
 80031b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031be:	f043 0208 	orr.w	r2, r3, #8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d011      	beq.n	80031f6 <HAL_UART_IRQHandler+0x15e>
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00c      	beq.n	80031f6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ec:	f043 0220 	orr.w	r2, r3, #32
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8141 	beq.w	8003484 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00c      	beq.n	8003226 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800322c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003238:	2b40      	cmp	r3, #64	; 0x40
 800323a:	d004      	beq.n	8003246 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003242:	2b00      	cmp	r3, #0
 8003244:	d031      	beq.n	80032aa <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fd0a 	bl	8003c60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d123      	bne.n	80032a2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003268:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	2b00      	cmp	r3, #0
 8003270:	d013      	beq.n	800329a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003276:	4a4a      	ldr	r2, [pc, #296]	; (80033a0 <HAL_UART_IRQHandler+0x308>)
 8003278:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd fc8a 	bl	8000b98 <HAL_DMA_Abort_IT>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d017      	beq.n	80032ba <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003294:	4610      	mov	r0, r2
 8003296:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003298:	e00f      	b.n	80032ba <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f906 	bl	80034ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a0:	e00b      	b.n	80032ba <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f902 	bl	80034ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a8:	e007      	b.n	80032ba <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8fe 	bl	80034ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80032b8:	e0e4      	b.n	8003484 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ba:	bf00      	nop
    return;
 80032bc:	e0e2      	b.n	8003484 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	f040 80a7 	bne.w	8003416 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80a1 	beq.w	8003416 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 809b 	beq.w	8003416 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2210      	movs	r2, #16
 80032e6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f2:	2b40      	cmp	r3, #64	; 0x40
 80032f4:	d156      	bne.n	80033a4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003300:	893b      	ldrh	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 80c0 	beq.w	8003488 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800330e:	893a      	ldrh	r2, [r7, #8]
 8003310:	429a      	cmp	r2, r3
 8003312:	f080 80b9 	bcs.w	8003488 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	893a      	ldrh	r2, [r7, #8]
 800331a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b20      	cmp	r3, #32
 8003326:	d02a      	beq.n	800337e <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003336:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003356:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0210 	bic.w	r2, r2, #16
 8003372:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd fbd4 	bl	8000b26 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800338a:	b29b      	uxth	r3, r3
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	b29b      	uxth	r3, r3
 8003390:	4619      	mov	r1, r3
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f894 	bl	80034c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003398:	e076      	b.n	8003488 <HAL_UART_IRQHandler+0x3f0>
 800339a:	bf00      	nop
 800339c:	04000120 	.word	0x04000120
 80033a0:	08003cbf 	.word	0x08003cbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d064      	beq.n	800348c <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 80033c2:	897b      	ldrh	r3, [r7, #10]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d061      	beq.n	800348c <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033d6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0201 	bic.w	r2, r2, #1
 80033e6:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0210 	bic.w	r2, r2, #16
 8003408:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800340a:	897b      	ldrh	r3, [r7, #10]
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f856 	bl	80034c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003414:	e03a      	b.n	800348c <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00d      	beq.n	800343c <HAL_UART_IRQHandler+0x3a4>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003432:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fd45 	bl	8003ec4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800343a:	e02a      	b.n	8003492 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00d      	beq.n	8003462 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01b      	beq.n	8003490 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
    }
    return;
 8003460:	e016      	b.n	8003490 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d012      	beq.n	8003492 <HAL_UART_IRQHandler+0x3fa>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00d      	beq.n	8003492 <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fc37 	bl	8003cea <UART_EndTransmit_IT>
    return;
 800347c:	bf00      	nop
 800347e:	e008      	b.n	8003492 <HAL_UART_IRQHandler+0x3fa>
      return;
 8003480:	bf00      	nop
 8003482:	e006      	b.n	8003492 <HAL_UART_IRQHandler+0x3fa>
    return;
 8003484:	bf00      	nop
 8003486:	e004      	b.n	8003492 <HAL_UART_IRQHandler+0x3fa>
      return;
 8003488:	bf00      	nop
 800348a:	e002      	b.n	8003492 <HAL_UART_IRQHandler+0x3fa>
      return;
 800348c:	bf00      	nop
 800348e:	e000      	b.n	8003492 <HAL_UART_IRQHandler+0x3fa>
    return;
 8003490:	bf00      	nop
  }

}
 8003492:	3720      	adds	r7, #32
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	4baa      	ldr	r3, [pc, #680]	; (80037ac <UART_SetConfig+0x2d4>)
 8003504:	4013      	ands	r3, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	6979      	ldr	r1, [r7, #20]
 800350c:	430b      	orrs	r3, r1
 800350e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a98      	ldr	r2, [pc, #608]	; (80037b0 <UART_SetConfig+0x2d8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d121      	bne.n	8003598 <UART_SetConfig+0xc0>
 8003554:	4b97      	ldr	r3, [pc, #604]	; (80037b4 <UART_SetConfig+0x2dc>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	2b03      	cmp	r3, #3
 800355e:	d817      	bhi.n	8003590 <UART_SetConfig+0xb8>
 8003560:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <UART_SetConfig+0x90>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	08003579 	.word	0x08003579
 800356c:	08003585 	.word	0x08003585
 8003570:	0800358b 	.word	0x0800358b
 8003574:	0800357f 	.word	0x0800357f
 8003578:	2301      	movs	r3, #1
 800357a:	77fb      	strb	r3, [r7, #31]
 800357c:	e0b2      	b.n	80036e4 <UART_SetConfig+0x20c>
 800357e:	2302      	movs	r3, #2
 8003580:	77fb      	strb	r3, [r7, #31]
 8003582:	e0af      	b.n	80036e4 <UART_SetConfig+0x20c>
 8003584:	2304      	movs	r3, #4
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	e0ac      	b.n	80036e4 <UART_SetConfig+0x20c>
 800358a:	2308      	movs	r3, #8
 800358c:	77fb      	strb	r3, [r7, #31]
 800358e:	e0a9      	b.n	80036e4 <UART_SetConfig+0x20c>
 8003590:	2310      	movs	r3, #16
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	bf00      	nop
 8003596:	e0a5      	b.n	80036e4 <UART_SetConfig+0x20c>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a86      	ldr	r2, [pc, #536]	; (80037b8 <UART_SetConfig+0x2e0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d123      	bne.n	80035ea <UART_SetConfig+0x112>
 80035a2:	4b84      	ldr	r3, [pc, #528]	; (80037b4 <UART_SetConfig+0x2dc>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ae:	d012      	beq.n	80035d6 <UART_SetConfig+0xfe>
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b4:	d802      	bhi.n	80035bc <UART_SetConfig+0xe4>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d007      	beq.n	80035ca <UART_SetConfig+0xf2>
 80035ba:	e012      	b.n	80035e2 <UART_SetConfig+0x10a>
 80035bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035c0:	d00c      	beq.n	80035dc <UART_SetConfig+0x104>
 80035c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035c6:	d003      	beq.n	80035d0 <UART_SetConfig+0xf8>
 80035c8:	e00b      	b.n	80035e2 <UART_SetConfig+0x10a>
 80035ca:	2300      	movs	r3, #0
 80035cc:	77fb      	strb	r3, [r7, #31]
 80035ce:	e089      	b.n	80036e4 <UART_SetConfig+0x20c>
 80035d0:	2302      	movs	r3, #2
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	e086      	b.n	80036e4 <UART_SetConfig+0x20c>
 80035d6:	2304      	movs	r3, #4
 80035d8:	77fb      	strb	r3, [r7, #31]
 80035da:	e083      	b.n	80036e4 <UART_SetConfig+0x20c>
 80035dc:	2308      	movs	r3, #8
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e080      	b.n	80036e4 <UART_SetConfig+0x20c>
 80035e2:	2310      	movs	r3, #16
 80035e4:	77fb      	strb	r3, [r7, #31]
 80035e6:	bf00      	nop
 80035e8:	e07c      	b.n	80036e4 <UART_SetConfig+0x20c>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a73      	ldr	r2, [pc, #460]	; (80037bc <UART_SetConfig+0x2e4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d123      	bne.n	800363c <UART_SetConfig+0x164>
 80035f4:	4b6f      	ldr	r3, [pc, #444]	; (80037b4 <UART_SetConfig+0x2dc>)
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80035fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003600:	d012      	beq.n	8003628 <UART_SetConfig+0x150>
 8003602:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003606:	d802      	bhi.n	800360e <UART_SetConfig+0x136>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <UART_SetConfig+0x144>
 800360c:	e012      	b.n	8003634 <UART_SetConfig+0x15c>
 800360e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003612:	d00c      	beq.n	800362e <UART_SetConfig+0x156>
 8003614:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003618:	d003      	beq.n	8003622 <UART_SetConfig+0x14a>
 800361a:	e00b      	b.n	8003634 <UART_SetConfig+0x15c>
 800361c:	2300      	movs	r3, #0
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e060      	b.n	80036e4 <UART_SetConfig+0x20c>
 8003622:	2302      	movs	r3, #2
 8003624:	77fb      	strb	r3, [r7, #31]
 8003626:	e05d      	b.n	80036e4 <UART_SetConfig+0x20c>
 8003628:	2304      	movs	r3, #4
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e05a      	b.n	80036e4 <UART_SetConfig+0x20c>
 800362e:	2308      	movs	r3, #8
 8003630:	77fb      	strb	r3, [r7, #31]
 8003632:	e057      	b.n	80036e4 <UART_SetConfig+0x20c>
 8003634:	2310      	movs	r3, #16
 8003636:	77fb      	strb	r3, [r7, #31]
 8003638:	bf00      	nop
 800363a:	e053      	b.n	80036e4 <UART_SetConfig+0x20c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a5f      	ldr	r2, [pc, #380]	; (80037c0 <UART_SetConfig+0x2e8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d123      	bne.n	800368e <UART_SetConfig+0x1b6>
 8003646:	4b5b      	ldr	r3, [pc, #364]	; (80037b4 <UART_SetConfig+0x2dc>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800364e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003652:	d012      	beq.n	800367a <UART_SetConfig+0x1a2>
 8003654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003658:	d802      	bhi.n	8003660 <UART_SetConfig+0x188>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <UART_SetConfig+0x196>
 800365e:	e012      	b.n	8003686 <UART_SetConfig+0x1ae>
 8003660:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003664:	d00c      	beq.n	8003680 <UART_SetConfig+0x1a8>
 8003666:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800366a:	d003      	beq.n	8003674 <UART_SetConfig+0x19c>
 800366c:	e00b      	b.n	8003686 <UART_SetConfig+0x1ae>
 800366e:	2300      	movs	r3, #0
 8003670:	77fb      	strb	r3, [r7, #31]
 8003672:	e037      	b.n	80036e4 <UART_SetConfig+0x20c>
 8003674:	2302      	movs	r3, #2
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	e034      	b.n	80036e4 <UART_SetConfig+0x20c>
 800367a:	2304      	movs	r3, #4
 800367c:	77fb      	strb	r3, [r7, #31]
 800367e:	e031      	b.n	80036e4 <UART_SetConfig+0x20c>
 8003680:	2308      	movs	r3, #8
 8003682:	77fb      	strb	r3, [r7, #31]
 8003684:	e02e      	b.n	80036e4 <UART_SetConfig+0x20c>
 8003686:	2310      	movs	r3, #16
 8003688:	77fb      	strb	r3, [r7, #31]
 800368a:	bf00      	nop
 800368c:	e02a      	b.n	80036e4 <UART_SetConfig+0x20c>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a4c      	ldr	r2, [pc, #304]	; (80037c4 <UART_SetConfig+0x2ec>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d123      	bne.n	80036e0 <UART_SetConfig+0x208>
 8003698:	4b46      	ldr	r3, [pc, #280]	; (80037b4 <UART_SetConfig+0x2dc>)
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80036a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a4:	d012      	beq.n	80036cc <UART_SetConfig+0x1f4>
 80036a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036aa:	d802      	bhi.n	80036b2 <UART_SetConfig+0x1da>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <UART_SetConfig+0x1e8>
 80036b0:	e012      	b.n	80036d8 <UART_SetConfig+0x200>
 80036b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036b6:	d00c      	beq.n	80036d2 <UART_SetConfig+0x1fa>
 80036b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036bc:	d003      	beq.n	80036c6 <UART_SetConfig+0x1ee>
 80036be:	e00b      	b.n	80036d8 <UART_SetConfig+0x200>
 80036c0:	2300      	movs	r3, #0
 80036c2:	77fb      	strb	r3, [r7, #31]
 80036c4:	e00e      	b.n	80036e4 <UART_SetConfig+0x20c>
 80036c6:	2302      	movs	r3, #2
 80036c8:	77fb      	strb	r3, [r7, #31]
 80036ca:	e00b      	b.n	80036e4 <UART_SetConfig+0x20c>
 80036cc:	2304      	movs	r3, #4
 80036ce:	77fb      	strb	r3, [r7, #31]
 80036d0:	e008      	b.n	80036e4 <UART_SetConfig+0x20c>
 80036d2:	2308      	movs	r3, #8
 80036d4:	77fb      	strb	r3, [r7, #31]
 80036d6:	e005      	b.n	80036e4 <UART_SetConfig+0x20c>
 80036d8:	2310      	movs	r3, #16
 80036da:	77fb      	strb	r3, [r7, #31]
 80036dc:	bf00      	nop
 80036de:	e001      	b.n	80036e4 <UART_SetConfig+0x20c>
 80036e0:	2310      	movs	r3, #16
 80036e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ec:	d16e      	bne.n	80037cc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80036ee:	7ffb      	ldrb	r3, [r7, #31]
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d828      	bhi.n	8003746 <UART_SetConfig+0x26e>
 80036f4:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <UART_SetConfig+0x224>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	08003721 	.word	0x08003721
 8003700:	08003729 	.word	0x08003729
 8003704:	08003731 	.word	0x08003731
 8003708:	08003747 	.word	0x08003747
 800370c:	08003737 	.word	0x08003737
 8003710:	08003747 	.word	0x08003747
 8003714:	08003747 	.word	0x08003747
 8003718:	08003747 	.word	0x08003747
 800371c:	0800373f 	.word	0x0800373f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003720:	f7fe fd22 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8003724:	61b8      	str	r0, [r7, #24]
        break;
 8003726:	e013      	b.n	8003750 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003728:	f7fe fd40 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 800372c:	61b8      	str	r0, [r7, #24]
        break;
 800372e:	e00f      	b.n	8003750 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003730:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <UART_SetConfig+0x2f0>)
 8003732:	61bb      	str	r3, [r7, #24]
        break;
 8003734:	e00c      	b.n	8003750 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003736:	f7fe fca1 	bl	800207c <HAL_RCC_GetSysClockFreq>
 800373a:	61b8      	str	r0, [r7, #24]
        break;
 800373c:	e008      	b.n	8003750 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800373e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003742:	61bb      	str	r3, [r7, #24]
        break;
 8003744:	e004      	b.n	8003750 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	77bb      	strb	r3, [r7, #30]
        break;
 800374e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 8086 	beq.w	8003864 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	005a      	lsls	r2, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	441a      	add	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	fbb2 f3f3 	udiv	r3, r2, r3
 800376c:	b29b      	uxth	r3, r3
 800376e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b0f      	cmp	r3, #15
 8003774:	d916      	bls.n	80037a4 <UART_SetConfig+0x2cc>
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377c:	d212      	bcs.n	80037a4 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f023 030f 	bic.w	r3, r3, #15
 8003786:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	085b      	lsrs	r3, r3, #1
 800378c:	b29b      	uxth	r3, r3
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	b29a      	uxth	r2, r3
 8003794:	89fb      	ldrh	r3, [r7, #14]
 8003796:	4313      	orrs	r3, r2
 8003798:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	89fa      	ldrh	r2, [r7, #14]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	e05f      	b.n	8003864 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	77bb      	strb	r3, [r7, #30]
 80037a8:	e05c      	b.n	8003864 <UART_SetConfig+0x38c>
 80037aa:	bf00      	nop
 80037ac:	efff69f3 	.word	0xefff69f3
 80037b0:	40013800 	.word	0x40013800
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40004400 	.word	0x40004400
 80037bc:	40004800 	.word	0x40004800
 80037c0:	40004c00 	.word	0x40004c00
 80037c4:	40005000 	.word	0x40005000
 80037c8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80037cc:	7ffb      	ldrb	r3, [r7, #31]
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d827      	bhi.n	8003822 <UART_SetConfig+0x34a>
 80037d2:	a201      	add	r2, pc, #4	; (adr r2, 80037d8 <UART_SetConfig+0x300>)
 80037d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d8:	080037fd 	.word	0x080037fd
 80037dc:	08003805 	.word	0x08003805
 80037e0:	0800380d 	.word	0x0800380d
 80037e4:	08003823 	.word	0x08003823
 80037e8:	08003813 	.word	0x08003813
 80037ec:	08003823 	.word	0x08003823
 80037f0:	08003823 	.word	0x08003823
 80037f4:	08003823 	.word	0x08003823
 80037f8:	0800381b 	.word	0x0800381b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037fc:	f7fe fcb4 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8003800:	61b8      	str	r0, [r7, #24]
        break;
 8003802:	e013      	b.n	800382c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003804:	f7fe fcd2 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8003808:	61b8      	str	r0, [r7, #24]
        break;
 800380a:	e00f      	b.n	800382c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800380c:	4b1b      	ldr	r3, [pc, #108]	; (800387c <UART_SetConfig+0x3a4>)
 800380e:	61bb      	str	r3, [r7, #24]
        break;
 8003810:	e00c      	b.n	800382c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003812:	f7fe fc33 	bl	800207c <HAL_RCC_GetSysClockFreq>
 8003816:	61b8      	str	r0, [r7, #24]
        break;
 8003818:	e008      	b.n	800382c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800381a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381e:	61bb      	str	r3, [r7, #24]
        break;
 8003820:	e004      	b.n	800382c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	77bb      	strb	r3, [r7, #30]
        break;
 800382a:	bf00      	nop
    }

    if (pclk != 0U)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d018      	beq.n	8003864 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	085a      	lsrs	r2, r3, #1
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	441a      	add	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	fbb2 f3f3 	udiv	r3, r2, r3
 8003844:	b29b      	uxth	r3, r3
 8003846:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2b0f      	cmp	r3, #15
 800384c:	d908      	bls.n	8003860 <UART_SetConfig+0x388>
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003854:	d204      	bcs.n	8003860 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	e001      	b.n	8003864 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003870:	7fbb      	ldrb	r3, [r7, #30]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3720      	adds	r7, #32
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	007a1200 	.word	0x007a1200

08003880 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01a      	beq.n	8003996 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800397e:	d10a      	bne.n	8003996 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	605a      	str	r2, [r3, #4]
  }
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039d4:	f7fc ff8a 	bl	80008ec <HAL_GetTick>
 80039d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d10e      	bne.n	8003a06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f82d 	bl	8003a56 <UART_WaitOnFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e023      	b.n	8003a4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d10e      	bne.n	8003a32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f817 	bl	8003a56 <UART_WaitOnFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e00d      	b.n	8003a4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	4613      	mov	r3, r2
 8003a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a66:	e05e      	b.n	8003b26 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6e:	d05a      	beq.n	8003b26 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a70:	f7fc ff3c 	bl	80008ec <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d302      	bcc.n	8003a86 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d11b      	bne.n	8003abe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a94:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0201 	bic.w	r2, r2, #1
 8003aa4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e043      	b.n	8003b46 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d02c      	beq.n	8003b26 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ada:	d124      	bne.n	8003b26 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ae4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003af4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e00f      	b.n	8003b46 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	bf0c      	ite	eq
 8003b36:	2301      	moveq	r3, #1
 8003b38:	2300      	movne	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d091      	beq.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	88fa      	ldrh	r2, [r7, #6]
 8003b68:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	88fa      	ldrh	r2, [r7, #6]
 8003b70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b82:	d10e      	bne.n	8003ba2 <UART_Start_Receive_IT+0x52>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d105      	bne.n	8003b98 <UART_Start_Receive_IT+0x48>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b96:	e02d      	b.n	8003bf4 <UART_Start_Receive_IT+0xa4>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	22ff      	movs	r2, #255	; 0xff
 8003b9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ba0:	e028      	b.n	8003bf4 <UART_Start_Receive_IT+0xa4>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10d      	bne.n	8003bc6 <UART_Start_Receive_IT+0x76>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d104      	bne.n	8003bbc <UART_Start_Receive_IT+0x6c>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	22ff      	movs	r2, #255	; 0xff
 8003bb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bba:	e01b      	b.n	8003bf4 <UART_Start_Receive_IT+0xa4>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	227f      	movs	r2, #127	; 0x7f
 8003bc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bc4:	e016      	b.n	8003bf4 <UART_Start_Receive_IT+0xa4>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bce:	d10d      	bne.n	8003bec <UART_Start_Receive_IT+0x9c>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d104      	bne.n	8003be2 <UART_Start_Receive_IT+0x92>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	227f      	movs	r2, #127	; 0x7f
 8003bdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003be0:	e008      	b.n	8003bf4 <UART_Start_Receive_IT+0xa4>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	223f      	movs	r2, #63	; 0x3f
 8003be6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bea:	e003      	b.n	8003bf4 <UART_Start_Receive_IT+0xa4>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2222      	movs	r2, #34	; 0x22
 8003c00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0201 	orr.w	r2, r2, #1
 8003c10:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c1a:	d107      	bne.n	8003c2c <UART_Start_Receive_IT+0xdc>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d103      	bne.n	8003c2c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4a0c      	ldr	r2, [pc, #48]	; (8003c58 <UART_Start_Receive_IT+0x108>)
 8003c28:	665a      	str	r2, [r3, #100]	; 0x64
 8003c2a:	e002      	b.n	8003c32 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a0b      	ldr	r2, [pc, #44]	; (8003c5c <UART_Start_Receive_IT+0x10c>)
 8003c30:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003c48:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	08003df1 	.word	0x08003df1
 8003c5c:	08003d1d 	.word	0x08003d1d

08003c60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c76:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0201 	bic.w	r2, r2, #1
 8003c86:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d107      	bne.n	8003ca0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0210 	bic.w	r2, r2, #16
 8003c9e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f7ff fbe5 	bl	80034ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ce2:	bf00      	nop
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d00:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff fbc2 	bl	8003498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d2a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d30:	2b22      	cmp	r3, #34	; 0x22
 8003d32:	d151      	bne.n	8003dd8 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d3a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d3c:	89bb      	ldrh	r3, [r7, #12]
 8003d3e:	b2d9      	uxtb	r1, r3
 8003d40:	89fb      	ldrh	r3, [r7, #14]
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d48:	400a      	ands	r2, r1
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d138      	bne.n	8003de8 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d84:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0201 	bic.w	r2, r2, #1
 8003d94:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d10f      	bne.n	8003dca <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0210 	bic.w	r2, r2, #16
 8003db8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff fb7c 	bl	80034c0 <HAL_UARTEx_RxEventCallback>
 8003dc8:	e002      	b.n	8003dd0 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fc fa14 	bl	80001f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dd6:	e007      	b.n	8003de8 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0208 	orr.w	r2, r2, #8
 8003de6:	619a      	str	r2, [r3, #24]
}
 8003de8:	bf00      	nop
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003dfe:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e04:	2b22      	cmp	r3, #34	; 0x22
 8003e06:	d151      	bne.n	8003eac <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e0e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e14:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e16:	89ba      	ldrh	r2, [r7, #12]
 8003e18:	89fb      	ldrh	r3, [r7, #14]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e26:	1c9a      	adds	r2, r3, #2
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d138      	bne.n	8003ebc <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e58:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0201 	bic.w	r2, r2, #1
 8003e68:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d10f      	bne.n	8003e9e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0210 	bic.w	r2, r2, #16
 8003e8c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e94:	4619      	mov	r1, r3
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff fb12 	bl	80034c0 <HAL_UARTEx_RxEventCallback>
 8003e9c:	e002      	b.n	8003ea4 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fc f9aa 	bl	80001f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003eaa:	e007      	b.n	8003ebc <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0208 	orr.w	r2, r2, #8
 8003eba:	619a      	str	r2, [r3, #24]
}
 8003ebc:	bf00      	nop
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <atoi>:
 8003ed8:	220a      	movs	r2, #10
 8003eda:	2100      	movs	r1, #0
 8003edc:	f000 b8a8 	b.w	8004030 <strtol>

08003ee0 <__libc_init_array>:
 8003ee0:	b570      	push	{r4, r5, r6, lr}
 8003ee2:	4e0d      	ldr	r6, [pc, #52]	; (8003f18 <__libc_init_array+0x38>)
 8003ee4:	4c0d      	ldr	r4, [pc, #52]	; (8003f1c <__libc_init_array+0x3c>)
 8003ee6:	1ba4      	subs	r4, r4, r6
 8003ee8:	10a4      	asrs	r4, r4, #2
 8003eea:	2500      	movs	r5, #0
 8003eec:	42a5      	cmp	r5, r4
 8003eee:	d109      	bne.n	8003f04 <__libc_init_array+0x24>
 8003ef0:	4e0b      	ldr	r6, [pc, #44]	; (8003f20 <__libc_init_array+0x40>)
 8003ef2:	4c0c      	ldr	r4, [pc, #48]	; (8003f24 <__libc_init_array+0x44>)
 8003ef4:	f000 f8d4 	bl	80040a0 <_init>
 8003ef8:	1ba4      	subs	r4, r4, r6
 8003efa:	10a4      	asrs	r4, r4, #2
 8003efc:	2500      	movs	r5, #0
 8003efe:	42a5      	cmp	r5, r4
 8003f00:	d105      	bne.n	8003f0e <__libc_init_array+0x2e>
 8003f02:	bd70      	pop	{r4, r5, r6, pc}
 8003f04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f08:	4798      	blx	r3
 8003f0a:	3501      	adds	r5, #1
 8003f0c:	e7ee      	b.n	8003eec <__libc_init_array+0xc>
 8003f0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f12:	4798      	blx	r3
 8003f14:	3501      	adds	r5, #1
 8003f16:	e7f2      	b.n	8003efe <__libc_init_array+0x1e>
 8003f18:	080041fc 	.word	0x080041fc
 8003f1c:	080041fc 	.word	0x080041fc
 8003f20:	080041fc 	.word	0x080041fc
 8003f24:	08004200 	.word	0x08004200

08003f28 <memset>:
 8003f28:	4402      	add	r2, r0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d100      	bne.n	8003f32 <memset+0xa>
 8003f30:	4770      	bx	lr
 8003f32:	f803 1b01 	strb.w	r1, [r3], #1
 8003f36:	e7f9      	b.n	8003f2c <memset+0x4>

08003f38 <_strtol_l.isra.0>:
 8003f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f3c:	4680      	mov	r8, r0
 8003f3e:	4689      	mov	r9, r1
 8003f40:	4692      	mov	sl, r2
 8003f42:	461e      	mov	r6, r3
 8003f44:	460f      	mov	r7, r1
 8003f46:	463d      	mov	r5, r7
 8003f48:	9808      	ldr	r0, [sp, #32]
 8003f4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f4e:	f000 f885 	bl	800405c <__locale_ctype_ptr_l>
 8003f52:	4420      	add	r0, r4
 8003f54:	7843      	ldrb	r3, [r0, #1]
 8003f56:	f013 0308 	ands.w	r3, r3, #8
 8003f5a:	d132      	bne.n	8003fc2 <_strtol_l.isra.0+0x8a>
 8003f5c:	2c2d      	cmp	r4, #45	; 0x2d
 8003f5e:	d132      	bne.n	8003fc6 <_strtol_l.isra.0+0x8e>
 8003f60:	787c      	ldrb	r4, [r7, #1]
 8003f62:	1cbd      	adds	r5, r7, #2
 8003f64:	2201      	movs	r2, #1
 8003f66:	2e00      	cmp	r6, #0
 8003f68:	d05d      	beq.n	8004026 <_strtol_l.isra.0+0xee>
 8003f6a:	2e10      	cmp	r6, #16
 8003f6c:	d109      	bne.n	8003f82 <_strtol_l.isra.0+0x4a>
 8003f6e:	2c30      	cmp	r4, #48	; 0x30
 8003f70:	d107      	bne.n	8003f82 <_strtol_l.isra.0+0x4a>
 8003f72:	782b      	ldrb	r3, [r5, #0]
 8003f74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003f78:	2b58      	cmp	r3, #88	; 0x58
 8003f7a:	d14f      	bne.n	800401c <_strtol_l.isra.0+0xe4>
 8003f7c:	786c      	ldrb	r4, [r5, #1]
 8003f7e:	2610      	movs	r6, #16
 8003f80:	3502      	adds	r5, #2
 8003f82:	2a00      	cmp	r2, #0
 8003f84:	bf14      	ite	ne
 8003f86:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003f8a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003f8e:	2700      	movs	r7, #0
 8003f90:	fbb1 fcf6 	udiv	ip, r1, r6
 8003f94:	4638      	mov	r0, r7
 8003f96:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003f9a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003f9e:	2b09      	cmp	r3, #9
 8003fa0:	d817      	bhi.n	8003fd2 <_strtol_l.isra.0+0x9a>
 8003fa2:	461c      	mov	r4, r3
 8003fa4:	42a6      	cmp	r6, r4
 8003fa6:	dd23      	ble.n	8003ff0 <_strtol_l.isra.0+0xb8>
 8003fa8:	1c7b      	adds	r3, r7, #1
 8003faa:	d007      	beq.n	8003fbc <_strtol_l.isra.0+0x84>
 8003fac:	4584      	cmp	ip, r0
 8003fae:	d31c      	bcc.n	8003fea <_strtol_l.isra.0+0xb2>
 8003fb0:	d101      	bne.n	8003fb6 <_strtol_l.isra.0+0x7e>
 8003fb2:	45a6      	cmp	lr, r4
 8003fb4:	db19      	blt.n	8003fea <_strtol_l.isra.0+0xb2>
 8003fb6:	fb00 4006 	mla	r0, r0, r6, r4
 8003fba:	2701      	movs	r7, #1
 8003fbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003fc0:	e7eb      	b.n	8003f9a <_strtol_l.isra.0+0x62>
 8003fc2:	462f      	mov	r7, r5
 8003fc4:	e7bf      	b.n	8003f46 <_strtol_l.isra.0+0xe>
 8003fc6:	2c2b      	cmp	r4, #43	; 0x2b
 8003fc8:	bf04      	itt	eq
 8003fca:	1cbd      	addeq	r5, r7, #2
 8003fcc:	787c      	ldrbeq	r4, [r7, #1]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	e7c9      	b.n	8003f66 <_strtol_l.isra.0+0x2e>
 8003fd2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003fd6:	2b19      	cmp	r3, #25
 8003fd8:	d801      	bhi.n	8003fde <_strtol_l.isra.0+0xa6>
 8003fda:	3c37      	subs	r4, #55	; 0x37
 8003fdc:	e7e2      	b.n	8003fa4 <_strtol_l.isra.0+0x6c>
 8003fde:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003fe2:	2b19      	cmp	r3, #25
 8003fe4:	d804      	bhi.n	8003ff0 <_strtol_l.isra.0+0xb8>
 8003fe6:	3c57      	subs	r4, #87	; 0x57
 8003fe8:	e7dc      	b.n	8003fa4 <_strtol_l.isra.0+0x6c>
 8003fea:	f04f 37ff 	mov.w	r7, #4294967295
 8003fee:	e7e5      	b.n	8003fbc <_strtol_l.isra.0+0x84>
 8003ff0:	1c7b      	adds	r3, r7, #1
 8003ff2:	d108      	bne.n	8004006 <_strtol_l.isra.0+0xce>
 8003ff4:	2322      	movs	r3, #34	; 0x22
 8003ff6:	f8c8 3000 	str.w	r3, [r8]
 8003ffa:	4608      	mov	r0, r1
 8003ffc:	f1ba 0f00 	cmp.w	sl, #0
 8004000:	d107      	bne.n	8004012 <_strtol_l.isra.0+0xda>
 8004002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004006:	b102      	cbz	r2, 800400a <_strtol_l.isra.0+0xd2>
 8004008:	4240      	negs	r0, r0
 800400a:	f1ba 0f00 	cmp.w	sl, #0
 800400e:	d0f8      	beq.n	8004002 <_strtol_l.isra.0+0xca>
 8004010:	b10f      	cbz	r7, 8004016 <_strtol_l.isra.0+0xde>
 8004012:	f105 39ff 	add.w	r9, r5, #4294967295
 8004016:	f8ca 9000 	str.w	r9, [sl]
 800401a:	e7f2      	b.n	8004002 <_strtol_l.isra.0+0xca>
 800401c:	2430      	movs	r4, #48	; 0x30
 800401e:	2e00      	cmp	r6, #0
 8004020:	d1af      	bne.n	8003f82 <_strtol_l.isra.0+0x4a>
 8004022:	2608      	movs	r6, #8
 8004024:	e7ad      	b.n	8003f82 <_strtol_l.isra.0+0x4a>
 8004026:	2c30      	cmp	r4, #48	; 0x30
 8004028:	d0a3      	beq.n	8003f72 <_strtol_l.isra.0+0x3a>
 800402a:	260a      	movs	r6, #10
 800402c:	e7a9      	b.n	8003f82 <_strtol_l.isra.0+0x4a>
	...

08004030 <strtol>:
 8004030:	4b08      	ldr	r3, [pc, #32]	; (8004054 <strtol+0x24>)
 8004032:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004034:	681c      	ldr	r4, [r3, #0]
 8004036:	4d08      	ldr	r5, [pc, #32]	; (8004058 <strtol+0x28>)
 8004038:	6a23      	ldr	r3, [r4, #32]
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf08      	it	eq
 800403e:	462b      	moveq	r3, r5
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	4613      	mov	r3, r2
 8004044:	460a      	mov	r2, r1
 8004046:	4601      	mov	r1, r0
 8004048:	4620      	mov	r0, r4
 800404a:	f7ff ff75 	bl	8003f38 <_strtol_l.isra.0>
 800404e:	b003      	add	sp, #12
 8004050:	bd30      	pop	{r4, r5, pc}
 8004052:	bf00      	nop
 8004054:	2000000c 	.word	0x2000000c
 8004058:	20000070 	.word	0x20000070

0800405c <__locale_ctype_ptr_l>:
 800405c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004060:	4770      	bx	lr

08004062 <__ascii_mbtowc>:
 8004062:	b082      	sub	sp, #8
 8004064:	b901      	cbnz	r1, 8004068 <__ascii_mbtowc+0x6>
 8004066:	a901      	add	r1, sp, #4
 8004068:	b142      	cbz	r2, 800407c <__ascii_mbtowc+0x1a>
 800406a:	b14b      	cbz	r3, 8004080 <__ascii_mbtowc+0x1e>
 800406c:	7813      	ldrb	r3, [r2, #0]
 800406e:	600b      	str	r3, [r1, #0]
 8004070:	7812      	ldrb	r2, [r2, #0]
 8004072:	1c10      	adds	r0, r2, #0
 8004074:	bf18      	it	ne
 8004076:	2001      	movne	r0, #1
 8004078:	b002      	add	sp, #8
 800407a:	4770      	bx	lr
 800407c:	4610      	mov	r0, r2
 800407e:	e7fb      	b.n	8004078 <__ascii_mbtowc+0x16>
 8004080:	f06f 0001 	mvn.w	r0, #1
 8004084:	e7f8      	b.n	8004078 <__ascii_mbtowc+0x16>

08004086 <__ascii_wctomb>:
 8004086:	b149      	cbz	r1, 800409c <__ascii_wctomb+0x16>
 8004088:	2aff      	cmp	r2, #255	; 0xff
 800408a:	bf85      	ittet	hi
 800408c:	238a      	movhi	r3, #138	; 0x8a
 800408e:	6003      	strhi	r3, [r0, #0]
 8004090:	700a      	strbls	r2, [r1, #0]
 8004092:	f04f 30ff 	movhi.w	r0, #4294967295
 8004096:	bf98      	it	ls
 8004098:	2001      	movls	r0, #1
 800409a:	4770      	bx	lr
 800409c:	4608      	mov	r0, r1
 800409e:	4770      	bx	lr

080040a0 <_init>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	bf00      	nop
 80040a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a6:	bc08      	pop	{r3}
 80040a8:	469e      	mov	lr, r3
 80040aa:	4770      	bx	lr

080040ac <_fini>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	bf00      	nop
 80040b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b2:	bc08      	pop	{r3}
 80040b4:	469e      	mov	lr, r3
 80040b6:	4770      	bx	lr
