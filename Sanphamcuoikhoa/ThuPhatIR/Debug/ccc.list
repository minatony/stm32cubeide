
ccc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a68  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008c00  08008c00  00018c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c1c  08008c1c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08008c1c  08008c1c  00018c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c24  08008c24  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c24  08008c24  00018c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c28  08008c28  00018c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011fc  20000094  08008cc0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001290  08008cc0  00021290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd22  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003aee  00000000  00000000  0003cde6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001660  00000000  00000000  000408d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014e0  00000000  00000000  00041f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019db0  00000000  00000000  00043418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013dcb  00000000  00000000  0005d1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095af3  00000000  00000000  00070f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00106a86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006010  00000000  00000000  00106b04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000094 	.word	0x20000094
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008be8 	.word	0x08008be8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000098 	.word	0x20000098
 80001d4:	08008be8 	.word	0x08008be8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(led_blue_GPIO_Port, led_blue_Pin);
 80004e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e4:	484b      	ldr	r0, [pc, #300]	; (8000614 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80004e6:	f001 fa0c 	bl	8001902 <HAL_GPIO_TogglePin>
	IcVal = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_2);
 80004ea:	4b4b      	ldr	r3, [pc, #300]	; (8000618 <HAL_TIM_IC_CaptureCallback+0x140>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004f0:	b29a      	uxth	r2, r3
 80004f2:	4b4a      	ldr	r3, [pc, #296]	; (800061c <HAL_TIM_IC_CaptureCallback+0x144>)
 80004f4:	801a      	strh	r2, [r3, #0]
	if (IcVal > PreIcVal) {
 80004f6:	4b49      	ldr	r3, [pc, #292]	; (800061c <HAL_TIM_IC_CaptureCallback+0x144>)
 80004f8:	881a      	ldrh	r2, [r3, #0]
 80004fa:	4b49      	ldr	r3, [pc, #292]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x148>)
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d908      	bls.n	8000514 <HAL_TIM_IC_CaptureCallback+0x3c>
		T = IcVal - PreIcVal;
 8000502:	4b46      	ldr	r3, [pc, #280]	; (800061c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000504:	881a      	ldrh	r2, [r3, #0]
 8000506:	4b46      	ldr	r3, [pc, #280]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	1ad3      	subs	r3, r2, r3
 800050c:	b29a      	uxth	r2, r3
 800050e:	4b45      	ldr	r3, [pc, #276]	; (8000624 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000510:	801a      	strh	r2, [r3, #0]
 8000512:	e00d      	b.n	8000530 <HAL_TIM_IC_CaptureCallback+0x58>
	} else if (IcVal < PreIcVal) {
 8000514:	4b41      	ldr	r3, [pc, #260]	; (800061c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000516:	881a      	ldrh	r2, [r3, #0]
 8000518:	4b41      	ldr	r3, [pc, #260]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x148>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	429a      	cmp	r2, r3
 800051e:	d207      	bcs.n	8000530 <HAL_TIM_IC_CaptureCallback+0x58>
		T = 0xffff - PreIcVal + IcVal + 1;
 8000520:	4b3e      	ldr	r3, [pc, #248]	; (800061c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000522:	881a      	ldrh	r2, [r3, #0]
 8000524:	4b3e      	ldr	r3, [pc, #248]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	b29a      	uxth	r2, r3
 800052c:	4b3d      	ldr	r3, [pc, #244]	; (8000624 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800052e:	801a      	strh	r2, [r3, #0]
	}
	PreIcVal = IcVal;
 8000530:	4b3a      	ldr	r3, [pc, #232]	; (800061c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000532:	881a      	ldrh	r2, [r3, #0]
 8000534:	4b3a      	ldr	r3, [pc, #232]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000536:	801a      	strh	r2, [r3, #0]

	if (start == 1) {
 8000538:	4b3b      	ldr	r3, [pc, #236]	; (8000628 <HAL_TIM_IC_CaptureCallback+0x150>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d11d      	bne.n	800057c <HAL_TIM_IC_CaptureCallback+0xa4>
		if (thietbi == 1) {
 8000540:	4b3a      	ldr	r3, [pc, #232]	; (800062c <HAL_TIM_IC_CaptureCallback+0x154>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d119      	bne.n	800057c <HAL_TIM_IC_CaptureCallback+0xa4>
			if (counter < 399) {
 8000548:	4b39      	ldr	r3, [pc, #228]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x158>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 8000550:	d80e      	bhi.n	8000570 <HAL_TIM_IC_CaptureCallback+0x98>
				IR_thietbi1[counter] = T;
 8000552:	4b37      	ldr	r3, [pc, #220]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	461a      	mov	r2, r3
 8000558:	4b32      	ldr	r3, [pc, #200]	; (8000624 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800055a:	8819      	ldrh	r1, [r3, #0]
 800055c:	4b35      	ldr	r3, [pc, #212]	; (8000634 <HAL_TIM_IC_CaptureCallback+0x15c>)
 800055e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				counter++;
 8000562:	4b33      	ldr	r3, [pc, #204]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	b29a      	uxth	r2, r3
 800056a:	4b31      	ldr	r3, [pc, #196]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x158>)
 800056c:	801a      	strh	r2, [r3, #0]
 800056e:	e005      	b.n	800057c <HAL_TIM_IC_CaptureCallback+0xa4>
			} else {
				counter = 0;
 8000570:	4b2f      	ldr	r3, [pc, #188]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000572:	2200      	movs	r2, #0
 8000574:	801a      	strh	r2, [r3, #0]
				thietbi = 2;
 8000576:	4b2d      	ldr	r3, [pc, #180]	; (800062c <HAL_TIM_IC_CaptureCallback+0x154>)
 8000578:	2202      	movs	r2, #2
 800057a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (start == 2) {
 800057c:	4b2a      	ldr	r3, [pc, #168]	; (8000628 <HAL_TIM_IC_CaptureCallback+0x150>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b02      	cmp	r3, #2
 8000582:	d11d      	bne.n	80005c0 <HAL_TIM_IC_CaptureCallback+0xe8>
		if (thietbi == 2) {
 8000584:	4b29      	ldr	r3, [pc, #164]	; (800062c <HAL_TIM_IC_CaptureCallback+0x154>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b02      	cmp	r3, #2
 800058a:	d119      	bne.n	80005c0 <HAL_TIM_IC_CaptureCallback+0xe8>
			if (counter < 399) {
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x158>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 8000594:	d80e      	bhi.n	80005b4 <HAL_TIM_IC_CaptureCallback+0xdc>
				IR_thietbi2[counter] = T;
 8000596:	4b26      	ldr	r3, [pc, #152]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	461a      	mov	r2, r3
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800059e:	8819      	ldrh	r1, [r3, #0]
 80005a0:	4b25      	ldr	r3, [pc, #148]	; (8000638 <HAL_TIM_IC_CaptureCallback+0x160>)
 80005a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				counter++;
 80005a6:	4b22      	ldr	r3, [pc, #136]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x158>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	3301      	adds	r3, #1
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	4b20      	ldr	r3, [pc, #128]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x158>)
 80005b0:	801a      	strh	r2, [r3, #0]
 80005b2:	e005      	b.n	80005c0 <HAL_TIM_IC_CaptureCallback+0xe8>
			} else {
				counter = 0;
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x158>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	801a      	strh	r2, [r3, #0]
				thietbi = 3;
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <HAL_TIM_IC_CaptureCallback+0x154>)
 80005bc:	2203      	movs	r2, #3
 80005be:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if (start == 3) {
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <HAL_TIM_IC_CaptureCallback+0x150>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	d120      	bne.n	800060a <HAL_TIM_IC_CaptureCallback+0x132>
		if (thietbi == 3) {
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <HAL_TIM_IC_CaptureCallback+0x154>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d11c      	bne.n	800060a <HAL_TIM_IC_CaptureCallback+0x132>
			if (counter < 399) {
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x158>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 80005d8:	d80e      	bhi.n	80005f8 <HAL_TIM_IC_CaptureCallback+0x120>
				IR_thietbi3[counter] = T;
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x158>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80005e2:	8819      	ldrh	r1, [r3, #0]
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <HAL_TIM_IC_CaptureCallback+0x164>)
 80005e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				counter++;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x158>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x158>)
 80005f4:	801a      	strh	r2, [r3, #0]
				thietbi = 1;
				start = 0;
			}
		}
	}
}
 80005f6:	e008      	b.n	800060a <HAL_TIM_IC_CaptureCallback+0x132>
				counter = 0;
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x158>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	801a      	strh	r2, [r3, #0]
				thietbi = 1;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <HAL_TIM_IC_CaptureCallback+0x154>)
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
				start = 0;
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40020c00 	.word	0x40020c00
 8000618:	20000a2c 	.word	0x20000a2c
 800061c:	200000b0 	.word	0x200000b0
 8000620:	200000b2 	.word	0x200000b2
 8000624:	20000ac0 	.word	0x20000ac0
 8000628:	20000a16 	.word	0x20000a16
 800062c:	20000000 	.word	0x20000000
 8000630:	20000a14 	.word	0x20000a14
 8000634:	200000b4 	.word	0x200000b4
 8000638:	200003d4 	.word	0x200003d4
 800063c:	200006f4 	.word	0x200006f4

08000640 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_0) {
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d10f      	bne.n	8000670 <HAL_GPIO_EXTI_Callback+0x30>
		start++;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <HAL_GPIO_EXTI_Callback+0x74>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <HAL_GPIO_EXTI_Callback+0x74>)
 800065a:	701a      	strb	r2, [r3, #0]
		if (start > thietbi) {
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <HAL_GPIO_EXTI_Callback+0x74>)
 800065e:	781a      	ldrb	r2, [r3, #0]
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x78>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	429a      	cmp	r2, r3
 8000666:	d903      	bls.n	8000670 <HAL_GPIO_EXTI_Callback+0x30>
			start = thietbi;
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x78>)
 800066a:	781a      	ldrb	r2, [r3, #0]
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <HAL_GPIO_EXTI_Callback+0x74>)
 800066e:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_1) {
 8000670:	88fb      	ldrh	r3, [r7, #6]
 8000672:	2b02      	cmp	r3, #2
 8000674:	d11a      	bne.n	80006ac <HAL_GPIO_EXTI_Callback+0x6c>
		for (uint8_t i = 0; i < 200; i++) {
 8000676:	2300      	movs	r3, #0
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e00e      	b.n	800069a <HAL_GPIO_EXTI_Callback+0x5a>
			HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800067c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000680:	480e      	ldr	r0, [pc, #56]	; (80006bc <HAL_GPIO_EXTI_Callback+0x7c>)
 8000682:	f001 f93e 	bl	8001902 <HAL_GPIO_TogglePin>
			delay_us(IR_thietbi1[i]);
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <HAL_GPIO_EXTI_Callback+0x80>)
 800068a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f818 	bl	80006c4 <delay_us>
		for (uint8_t i = 0; i < 200; i++) {
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	3301      	adds	r3, #1
 8000698:	73fb      	strb	r3, [r7, #15]
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2bc7      	cmp	r3, #199	; 0xc7
 800069e:	d9ed      	bls.n	800067c <HAL_GPIO_EXTI_Callback+0x3c>
		}
		HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <HAL_GPIO_EXTI_Callback+0x7c>)
 80006a8:	f001 f912 	bl	80018d0 <HAL_GPIO_WritePin>
	}

}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000a16 	.word	0x20000a16
 80006b8:	20000000 	.word	0x20000000
 80006bc:	40020c00 	.word	0x40020c00
 80006c0:	200000b4 	.word	0x200000b4

080006c4 <delay_us>:

void delay_us(uint32_t us) {
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <delay_us+0x2c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 80006d4:	bf00      	nop
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <delay_us+0x2c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d8f9      	bhi.n	80006d6 <delay_us+0x12>
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000b1c 	.word	0x20000b1c

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fdc2 	bl	8001280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f81a 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f000 fa1a 	bl	8000b38 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000704:	f000 f89a 	bl	800083c <MX_I2C1_Init>
  MX_I2S2_Init();
 8000708:	f000 f8c6 	bl	8000898 <MX_I2S2_Init>
  MX_I2S3_Init();
 800070c:	f000 f8f2 	bl	80008f4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000710:	f000 f920 	bl	8000954 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000714:	f007 fe64 	bl	80083e0 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000718:	f000 f952 	bl	80009c0 <MX_TIM2_Init>
  MX_TIM4_Init();
 800071c:	f000 f99c 	bl	8000a58 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000720:	2104      	movs	r1, #4
 8000722:	4803      	ldr	r0, [pc, #12]	; (8000730 <main+0x3c>)
 8000724:	f004 fa4a 	bl	8004bbc <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000728:	f007 fe80 	bl	800842c <MX_USB_HOST_Process>
 800072c:	e7fc      	b.n	8000728 <main+0x34>
 800072e:	bf00      	nop
 8000730:	20000a2c 	.word	0x20000a2c

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b09a      	sub	sp, #104	; 0x68
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800073e:	2230      	movs	r2, #48	; 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f008 f98e 	bl	8008a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
 8000768:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b31      	ldr	r3, [pc, #196]	; (8000834 <SystemClock_Config+0x100>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	4a30      	ldr	r2, [pc, #192]	; (8000834 <SystemClock_Config+0x100>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	6413      	str	r3, [r2, #64]	; 0x40
 800077a:	4b2e      	ldr	r3, [pc, #184]	; (8000834 <SystemClock_Config+0x100>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <SystemClock_Config+0x104>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a2a      	ldr	r2, [pc, #168]	; (8000838 <SystemClock_Config+0x104>)
 8000790:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000794:	6013      	str	r3, [r2, #0]
 8000796:	4b28      	ldr	r3, [pc, #160]	; (8000838 <SystemClock_Config+0x104>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a2:	2301      	movs	r3, #1
 80007a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007a6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b6:	2304      	movs	r3, #4
 80007b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007ba:	23c0      	movs	r3, #192	; 0xc0
 80007bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007be:	2304      	movs	r3, #4
 80007c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80007c2:	2308      	movs	r3, #8
 80007c4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 fb96 	bl	8003efc <HAL_RCC_OscConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007d6:	f000 fa9b 	bl	8000d10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2302      	movs	r3, #2
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f4:	2103      	movs	r1, #3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 fdf0 	bl	80043dc <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000802:	f000 fa85 	bl	8000d10 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000806:	2301      	movs	r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800080a:	23c8      	movs	r3, #200	; 0xc8
 800080c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800080e:	2305      	movs	r3, #5
 8000810:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4618      	mov	r0, r3
 800081c:	f003 ffbc 	bl	8004798 <HAL_RCCEx_PeriphCLKConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000826:	f000 fa73 	bl	8000d10 <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3768      	adds	r7, #104	; 0x68
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_I2C1_Init+0x50>)
 8000842:	4a13      	ldr	r2, [pc, #76]	; (8000890 <MX_I2C1_Init+0x54>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_I2C1_Init+0x50>)
 8000848:	4a12      	ldr	r2, [pc, #72]	; (8000894 <MX_I2C1_Init+0x58>)
 800084a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_I2C1_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_I2C1_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_I2C1_Init+0x50>)
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_I2C1_Init+0x50>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_I2C1_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_I2C1_Init+0x50>)
 800087a:	f002 fd67 	bl	800334c <HAL_I2C_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000884:	f000 fa44 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000a6c 	.word	0x20000a6c
 8000890:	40005400 	.word	0x40005400
 8000894:	000186a0 	.word	0x000186a0

08000898 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_I2S2_Init+0x50>)
 800089e:	4a13      	ldr	r2, [pc, #76]	; (80008ec <MX_I2S2_Init+0x54>)
 80008a0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_I2S2_Init+0x50>)
 80008a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_I2S2_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008b0:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <MX_I2S2_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_I2S2_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_I2S2_Init+0x50>)
 80008be:	4a0c      	ldr	r2, [pc, #48]	; (80008f0 <MX_I2S2_Init+0x58>)
 80008c0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_I2S2_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_I2S2_Init+0x50>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_I2S2_Init+0x50>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_I2S2_Init+0x50>)
 80008d6:	f002 fe71 	bl	80035bc <HAL_I2S_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80008e0:	f000 fa16 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000b5c 	.word	0x20000b5c
 80008ec:	40003800 	.word	0x40003800
 80008f0:	00017700 	.word	0x00017700

080008f4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_I2S3_Init+0x54>)
 80008fa:	4a14      	ldr	r2, [pc, #80]	; (800094c <MX_I2S3_Init+0x58>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_I2S3_Init+0x54>)
 8000900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000904:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_I2S3_Init+0x54>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_I2S3_Init+0x54>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_I2S3_Init+0x54>)
 8000914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000918:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_I2S3_Init+0x54>)
 800091c:	4a0c      	ldr	r2, [pc, #48]	; (8000950 <MX_I2S3_Init+0x5c>)
 800091e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_I2S3_Init+0x54>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_I2S3_Init+0x54>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_I2S3_Init+0x54>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_I2S3_Init+0x54>)
 8000934:	f002 fe42 	bl	80035bc <HAL_I2S_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800093e:	f000 f9e7 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000ba4 	.word	0x20000ba4
 800094c:	40003c00 	.word	0x40003c00
 8000950:	00017700 	.word	0x00017700

08000954 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_SPI1_Init+0x64>)
 800095a:	4a18      	ldr	r2, [pc, #96]	; (80009bc <MX_SPI1_Init+0x68>)
 800095c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800095e:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_SPI1_Init+0x64>)
 8000960:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000964:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_SPI1_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_SPI1_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_SPI1_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_SPI1_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_SPI1_Init+0x64>)
 8000980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000984:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_SPI1_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_SPI1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_SPI1_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <MX_SPI1_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_SPI1_Init+0x64>)
 80009a0:	220a      	movs	r2, #10
 80009a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_SPI1_Init+0x64>)
 80009a6:	f004 f845 	bl	8004a34 <HAL_SPI_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009b0:	f000 f9ae 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000ac4 	.word	0x20000ac4
 80009bc:	40013000 	.word	0x40013000

080009c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d4:	463b      	mov	r3, r7
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_TIM2_Init+0x94>)
 80009de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_TIM2_Init+0x94>)
 80009e6:	220f      	movs	r2, #15
 80009e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_TIM2_Init+0x94>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_TIM2_Init+0x94>)
 80009f2:	f04f 32ff 	mov.w	r2, #4294967295
 80009f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_TIM2_Init+0x94>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_TIM2_Init+0x94>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a04:	4813      	ldr	r0, [pc, #76]	; (8000a54 <MX_TIM2_Init+0x94>)
 8000a06:	f004 f879 	bl	8004afc <HAL_TIM_Base_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a10:	f000 f97e 	bl	8000d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <MX_TIM2_Init+0x94>)
 8000a22:	f004 fad7 	bl	8004fd4 <HAL_TIM_ConfigClockSource>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a2c:	f000 f970 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_TIM2_Init+0x94>)
 8000a3e:	f004 fe07 	bl	8005650 <HAL_TIMEx_MasterConfigSynchronization>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a48:	f000 f962 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000b1c 	.word	0x20000b1c

08000a58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5e:	f107 0318 	add.w	r3, r7, #24
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a76:	463b      	mov	r3, r7
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <MX_TIM4_Init+0xd8>)
 8000a84:	4a2b      	ldr	r2, [pc, #172]	; (8000b34 <MX_TIM4_Init+0xdc>)
 8000a86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8000a88:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <MX_TIM4_Init+0xd8>)
 8000a8a:	220f      	movs	r2, #15
 8000a8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <MX_TIM4_Init+0xd8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a94:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <MX_TIM4_Init+0xd8>)
 8000a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a9a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <MX_TIM4_Init+0xd8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <MX_TIM4_Init+0xd8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000aa8:	4821      	ldr	r0, [pc, #132]	; (8000b30 <MX_TIM4_Init+0xd8>)
 8000aaa:	f004 f827 	bl	8004afc <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000ab4:	f000 f92c 	bl	8000d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000abe:	f107 0318 	add.w	r3, r7, #24
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481a      	ldr	r0, [pc, #104]	; (8000b30 <MX_TIM4_Init+0xd8>)
 8000ac6:	f004 fa85 	bl	8004fd4 <HAL_TIM_ConfigClockSource>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000ad0:	f000 f91e 	bl	8000d10 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000ad4:	4816      	ldr	r0, [pc, #88]	; (8000b30 <MX_TIM4_Init+0xd8>)
 8000ad6:	f004 f83c 	bl	8004b52 <HAL_TIM_IC_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000ae0:	f000 f916 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	4619      	mov	r1, r3
 8000af2:	480f      	ldr	r0, [pc, #60]	; (8000b30 <MX_TIM4_Init+0xd8>)
 8000af4:	f004 fdac 	bl	8005650 <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8000afe:	f000 f907 	bl	8000d10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000b02:	230a      	movs	r3, #10
 8000b04:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b06:	2301      	movs	r3, #1
 8000b08:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b12:	463b      	mov	r3, r7
 8000b14:	2204      	movs	r2, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_TIM4_Init+0xd8>)
 8000b1a:	f004 f9bf 	bl	8004e9c <HAL_TIM_IC_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000b24:	f000 f8f4 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	; 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000a2c 	.word	0x20000a2c
 8000b34:	40000800 	.word	0x40000800

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
 8000b52:	4b68      	ldr	r3, [pc, #416]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a67      	ldr	r2, [pc, #412]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000b58:	f043 0310 	orr.w	r3, r3, #16
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b65      	ldr	r3, [pc, #404]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0310 	and.w	r3, r3, #16
 8000b66:	61bb      	str	r3, [r7, #24]
 8000b68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	4b61      	ldr	r3, [pc, #388]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a60      	ldr	r2, [pc, #384]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b5e      	ldr	r3, [pc, #376]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b5a      	ldr	r3, [pc, #360]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a59      	ldr	r2, [pc, #356]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b57      	ldr	r3, [pc, #348]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b53      	ldr	r3, [pc, #332]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a52      	ldr	r2, [pc, #328]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b50      	ldr	r3, [pc, #320]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	4b4c      	ldr	r3, [pc, #304]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a4b      	ldr	r2, [pc, #300]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b49      	ldr	r3, [pc, #292]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b45      	ldr	r3, [pc, #276]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a44      	ldr	r2, [pc, #272]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b42      	ldr	r3, [pc, #264]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	483f      	ldr	r0, [pc, #252]	; (8000cf8 <MX_GPIO_Init+0x1c0>)
 8000bfc:	f000 fe68 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	2101      	movs	r1, #1
 8000c04:	483d      	ldr	r0, [pc, #244]	; (8000cfc <MX_GPIO_Init+0x1c4>)
 8000c06:	f000 fe63 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led_Pin|led_blue_Pin|LD5_Pin|LD6_Pin
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f24d 1110 	movw	r1, #53520	; 0xd110
 8000c10:	483b      	ldr	r0, [pc, #236]	; (8000d00 <MX_GPIO_Init+0x1c8>)
 8000c12:	f000 fe5d 	bl	80018d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000c16:	2304      	movs	r3, #4
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4833      	ldr	r0, [pc, #204]	; (8000cf8 <MX_GPIO_Init+0x1c0>)
 8000c2a:	f000 fccf 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c2e:	2308      	movs	r3, #8
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	482c      	ldr	r0, [pc, #176]	; (8000cf8 <MX_GPIO_Init+0x1c0>)
 8000c46:	f000 fcc1 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 8000c4a:	2330      	movs	r3, #48	; 0x30
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <MX_GPIO_Init+0x1cc>)
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4826      	ldr	r0, [pc, #152]	; (8000cf8 <MX_GPIO_Init+0x1c0>)
 8000c5e:	f000 fcb5 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c62:	2301      	movs	r3, #1
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	4820      	ldr	r0, [pc, #128]	; (8000cfc <MX_GPIO_Init+0x1c4>)
 8000c7a:	f000 fca7 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c82:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <MX_GPIO_Init+0x1d0>)
 8000c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	481e      	ldr	r0, [pc, #120]	; (8000d0c <MX_GPIO_Init+0x1d4>)
 8000c92:	f000 fc9b 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : led_Pin led_blue_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = led_Pin|led_blue_Pin|LD5_Pin|LD6_Pin
 8000c96:	f24d 1310 	movw	r3, #53520	; 0xd110
 8000c9a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	4814      	ldr	r0, [pc, #80]	; (8000d00 <MX_GPIO_Init+0x1c8>)
 8000cb0:	f000 fc8c 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cb4:	2320      	movs	r3, #32
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480e      	ldr	r0, [pc, #56]	; (8000d00 <MX_GPIO_Init+0x1c8>)
 8000cc8:	f000 fc80 	bl	80015cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2102      	movs	r1, #2
 8000cd0:	2006      	movs	r0, #6
 8000cd2:	f000 fc44 	bl	800155e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cd6:	2006      	movs	r0, #6
 8000cd8:	f000 fc5d 	bl	8001596 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2102      	movs	r1, #2
 8000ce0:	2007      	movs	r0, #7
 8000ce2:	f000 fc3c 	bl	800155e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ce6:	2007      	movs	r0, #7
 8000ce8:	f000 fc55 	bl	8001596 <HAL_NVIC_EnableIRQ>

}
 8000cec:	bf00      	nop
 8000cee:	3730      	adds	r7, #48	; 0x30
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40020800 	.word	0x40020800
 8000d00:	40020c00 	.word	0x40020c00
 8000d04:	10120000 	.word	0x10120000
 8000d08:	10110000 	.word	0x10110000
 8000d0c:	40020000 	.word	0x40020000

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000d5e:	2005      	movs	r0, #5
 8000d60:	f000 fbf2 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800

08000d70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a19      	ldr	r2, [pc, #100]	; (8000df4 <HAL_I2C_MspInit+0x84>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d12c      	bne.n	8000dec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <HAL_I2C_MspInit+0x88>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a17      	ldr	r2, [pc, #92]	; (8000df8 <HAL_I2C_MspInit+0x88>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_I2C_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000dae:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db4:	2312      	movs	r3, #18
 8000db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480c      	ldr	r0, [pc, #48]	; (8000dfc <HAL_I2C_MspInit+0x8c>)
 8000dcc:	f000 fbfe 	bl	80015cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_I2C_MspInit+0x88>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_I2C_MspInit+0x88>)
 8000dda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dde:	6413      	str	r3, [r2, #64]	; 0x40
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_I2C_MspInit+0x88>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	; 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40005400 	.word	0x40005400
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020400 	.word	0x40020400

08000e00 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08e      	sub	sp, #56	; 0x38
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a59      	ldr	r2, [pc, #356]	; (8000f84 <HAL_I2S_MspInit+0x184>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d15b      	bne.n	8000eda <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
 8000e26:	4b58      	ldr	r3, [pc, #352]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a57      	ldr	r2, [pc, #348]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b55      	ldr	r3, [pc, #340]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	623b      	str	r3, [r7, #32]
 8000e3c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	4b51      	ldr	r3, [pc, #324]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a50      	ldr	r2, [pc, #320]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b4e      	ldr	r3, [pc, #312]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	61fb      	str	r3, [r7, #28]
 8000e58:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
 8000e5e:	4b4a      	ldr	r3, [pc, #296]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a49      	ldr	r2, [pc, #292]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b47      	ldr	r3, [pc, #284]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e76:	2304      	movs	r3, #4
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000e86:	2306      	movs	r3, #6
 8000e88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8e:	4619      	mov	r1, r3
 8000e90:	483e      	ldr	r0, [pc, #248]	; (8000f8c <HAL_I2S_MspInit+0x18c>)
 8000e92:	f000 fb9b 	bl	80015cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e96:	2308      	movs	r3, #8
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4836      	ldr	r0, [pc, #216]	; (8000f8c <HAL_I2S_MspInit+0x18c>)
 8000eb2:	f000 fb8b 	bl	80015cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000eb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ec8:	2305      	movs	r3, #5
 8000eca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	482f      	ldr	r0, [pc, #188]	; (8000f90 <HAL_I2S_MspInit+0x190>)
 8000ed4:	f000 fb7a 	bl	80015cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ed8:	e04f      	b.n	8000f7a <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a2d      	ldr	r2, [pc, #180]	; (8000f94 <HAL_I2S_MspInit+0x194>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d14a      	bne.n	8000f7a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	4a26      	ldr	r2, [pc, #152]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	4a18      	ldr	r2, [pc, #96]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <HAL_I2S_MspInit+0x188>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f38:	2310      	movs	r3, #16
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f48:	2306      	movs	r3, #6
 8000f4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f50:	4619      	mov	r1, r3
 8000f52:	4811      	ldr	r0, [pc, #68]	; (8000f98 <HAL_I2S_MspInit+0x198>)
 8000f54:	f000 fb3a 	bl	80015cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f58:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_I2S_MspInit+0x18c>)
 8000f76:	f000 fb29 	bl	80015cc <HAL_GPIO_Init>
}
 8000f7a:	bf00      	nop
 8000f7c:	3738      	adds	r7, #56	; 0x38
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40003800 	.word	0x40003800
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40003c00 	.word	0x40003c00
 8000f98:	40020000 	.word	0x40020000

08000f9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_SPI_MspInit+0x84>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d12b      	bne.n	8001016 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ff6:	23e0      	movs	r3, #224	; 0xe0
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001006:	2305      	movs	r3, #5
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <HAL_SPI_MspInit+0x8c>)
 8001012:	f000 fadb 	bl	80015cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	; 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40013000 	.word	0x40013000
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000

0800102c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800104c:	d10e      	bne.n	800106c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <HAL_TIM_Base_MspInit+0xbc>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a24      	ldr	r2, [pc, #144]	; (80010e8 <HAL_TIM_Base_MspInit+0xbc>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <HAL_TIM_Base_MspInit+0xbc>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800106a:	e039      	b.n	80010e0 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM4)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a1e      	ldr	r2, [pc, #120]	; (80010ec <HAL_TIM_Base_MspInit+0xc0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d134      	bne.n	80010e0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <HAL_TIM_Base_MspInit+0xbc>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a1a      	ldr	r2, [pc, #104]	; (80010e8 <HAL_TIM_Base_MspInit+0xbc>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_TIM_Base_MspInit+0xbc>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <HAL_TIM_Base_MspInit+0xbc>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <HAL_TIM_Base_MspInit+0xbc>)
 800109c:	f043 0308 	orr.w	r3, r3, #8
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_TIM_Base_MspInit+0xbc>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010c0:	2302      	movs	r3, #2
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4809      	ldr	r0, [pc, #36]	; (80010f0 <HAL_TIM_Base_MspInit+0xc4>)
 80010cc:	f000 fa7e 	bl	80015cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2101      	movs	r1, #1
 80010d4:	201e      	movs	r0, #30
 80010d6:	f000 fa42 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010da:	201e      	movs	r0, #30
 80010dc:	f000 fa5b 	bl	8001596 <HAL_NVIC_EnableIRQ>
}
 80010e0:	bf00      	nop
 80010e2:	3728      	adds	r7, #40	; 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40000800 	.word	0x40000800
 80010f0:	40020c00 	.word	0x40020c00

080010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <MemManage_Handler+0x4>

0800110e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler+0x4>

0800111a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001148:	f000 f8ec 	bl	8001324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001154:	2001      	movs	r0, #1
 8001156:	f000 fbef 	bl	8001938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}

0800115e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001162:	2002      	movs	r0, #2
 8001164:	f000 fbe8 	bl	8001938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <TIM4_IRQHandler+0x10>)
 8001172:	f003 fd8b 	bl	8004c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000a2c 	.word	0x20000a2c

08001180 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <OTG_FS_IRQHandler+0x10>)
 8001186:	f000 fe7f 	bl	8001e88 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000fc8 	.word	0x20000fc8

08001194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800119c:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <_sbrk+0x5c>)
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <_sbrk+0x60>)
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <_sbrk+0x64>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <_sbrk+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d207      	bcs.n	80011d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c4:	f007 fc14 	bl	80089f0 <__errno>
 80011c8:	4602      	mov	r2, r0
 80011ca:	230c      	movs	r3, #12
 80011cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	e009      	b.n	80011e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <_sbrk+0x64>)
 80011e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20020000 	.word	0x20020000
 80011f4:	00000400 	.word	0x00000400
 80011f8:	20000a18 	.word	0x20000a18
 80011fc:	20001290 	.word	0x20001290

08001200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <SystemInit+0x28>)
 8001206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <SystemInit+0x28>)
 800120c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <SystemInit+0x28>)
 8001216:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800121a:	609a      	str	r2, [r3, #8]
#endif
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800122c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001264 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001230:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001232:	e003      	b.n	800123c <LoopCopyDataInit>

08001234 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001236:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001238:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800123a:	3104      	adds	r1, #4

0800123c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800123c:	480b      	ldr	r0, [pc, #44]	; (800126c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001240:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001242:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001244:	d3f6      	bcc.n	8001234 <CopyDataInit>
  ldr  r2, =_sbss
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001248:	e002      	b.n	8001250 <LoopFillZerobss>

0800124a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800124a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800124c:	f842 3b04 	str.w	r3, [r2], #4

08001250 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001252:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001254:	d3f9      	bcc.n	800124a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001256:	f7ff ffd3 	bl	8001200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125a:	f007 fbcf 	bl	80089fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125e:	f7ff fa49 	bl	80006f4 <main>
  bx  lr    
 8001262:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001264:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001268:	08008c2c 	.word	0x08008c2c
  ldr  r0, =_sdata
 800126c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001270:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001274:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001278:	20001290 	.word	0x20001290

0800127c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC_IRQHandler>
	...

08001280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_Init+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <HAL_Init+0x40>)
 800128a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_Init+0x40>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_Init+0x40>)
 8001296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <HAL_Init+0x40>)
 80012a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f000 f94d 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f000 f808 	bl	80012c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b4:	f7ff fd34 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023c00 	.word	0x40023c00

080012c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_InitTick+0x54>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x58>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	fbb3 f3f1 	udiv	r3, r3, r1
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f965 	bl	80015b2 <HAL_SYSTICK_Config>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00e      	b.n	8001310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b0f      	cmp	r3, #15
 80012f6:	d80a      	bhi.n	800130e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f8:	2200      	movs	r2, #0
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f000 f92d 	bl	800155e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001304:	4a06      	ldr	r2, [pc, #24]	; (8001320 <HAL_InitTick+0x5c>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e000      	b.n	8001310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000004 	.word	0x20000004
 800131c:	2000000c 	.word	0x2000000c
 8001320:	20000008 	.word	0x20000008

08001324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x20>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x24>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4413      	add	r3, r2
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <HAL_IncTick+0x24>)
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	2000000c 	.word	0x2000000c
 8001348:	20000bec 	.word	0x20000bec

0800134c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return uwTick;
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <HAL_GetTick+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000bec 	.word	0x20000bec

08001364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800136c:	f7ff ffee 	bl	800134c <HAL_GetTick>
 8001370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137c:	d005      	beq.n	800138a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_Delay+0x40>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4413      	add	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800138a:	bf00      	nop
 800138c:	f7ff ffde 	bl	800134c <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	429a      	cmp	r2, r3
 800139a:	d8f7      	bhi.n	800138c <HAL_Delay+0x28>
  {
  }
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	2000000c 	.word	0x2000000c

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	db0b      	blt.n	8001436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 021f 	and.w	r2, r3, #31
 8001424:	4907      	ldr	r1, [pc, #28]	; (8001444 <__NVIC_EnableIRQ+0x38>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	; (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	; 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001514:	d301      	bcc.n	800151a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001516:	2301      	movs	r3, #1
 8001518:	e00f      	b.n	800153a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <SysTick_Config+0x40>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001522:	210f      	movs	r1, #15
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f7ff ff8e 	bl	8001448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <SysTick_Config+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <SysTick_Config+0x40>)
 8001534:	2207      	movs	r2, #7
 8001536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	e000e010 	.word	0xe000e010

08001548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff29 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001570:	f7ff ff3e 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 8001574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	f7ff ff8e 	bl	800149c <NVIC_EncodePriority>
 8001580:	4602      	mov	r2, r0
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff5d 	bl	8001448 <__NVIC_SetPriority>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff31 	bl	800140c <__NVIC_EnableIRQ>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ffa2 	bl	8001504 <SysTick_Config>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	e159      	b.n	800189c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015e8:	2201      	movs	r2, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	429a      	cmp	r2, r3
 8001602:	f040 8148 	bne.w	8001896 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d00b      	beq.n	8001626 <HAL_GPIO_Init+0x5a>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d007      	beq.n	8001626 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800161a:	2b11      	cmp	r3, #17
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b12      	cmp	r3, #18
 8001624:	d130      	bne.n	8001688 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800165c:	2201      	movs	r2, #1
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	f003 0201 	and.w	r2, r3, #1
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	2203      	movs	r2, #3
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0xfc>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b12      	cmp	r3, #18
 80016c6:	d123      	bne.n	8001710 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	08da      	lsrs	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3208      	adds	r2, #8
 80016d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	220f      	movs	r2, #15
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	08da      	lsrs	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3208      	adds	r2, #8
 800170a:	69b9      	ldr	r1, [r7, #24]
 800170c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0203 	and.w	r2, r3, #3
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80a2 	beq.w	8001896 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b56      	ldr	r3, [pc, #344]	; (80018b0 <HAL_GPIO_Init+0x2e4>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	4a55      	ldr	r2, [pc, #340]	; (80018b0 <HAL_GPIO_Init+0x2e4>)
 800175c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001760:	6453      	str	r3, [r2, #68]	; 0x44
 8001762:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_GPIO_Init+0x2e4>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800176e:	4a51      	ldr	r2, [pc, #324]	; (80018b4 <HAL_GPIO_Init+0x2e8>)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	3302      	adds	r3, #2
 8001776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	220f      	movs	r2, #15
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a48      	ldr	r2, [pc, #288]	; (80018b8 <HAL_GPIO_Init+0x2ec>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d019      	beq.n	80017ce <HAL_GPIO_Init+0x202>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a47      	ldr	r2, [pc, #284]	; (80018bc <HAL_GPIO_Init+0x2f0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d013      	beq.n	80017ca <HAL_GPIO_Init+0x1fe>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a46      	ldr	r2, [pc, #280]	; (80018c0 <HAL_GPIO_Init+0x2f4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00d      	beq.n	80017c6 <HAL_GPIO_Init+0x1fa>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a45      	ldr	r2, [pc, #276]	; (80018c4 <HAL_GPIO_Init+0x2f8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d007      	beq.n	80017c2 <HAL_GPIO_Init+0x1f6>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a44      	ldr	r2, [pc, #272]	; (80018c8 <HAL_GPIO_Init+0x2fc>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_GPIO_Init+0x1f2>
 80017ba:	2304      	movs	r3, #4
 80017bc:	e008      	b.n	80017d0 <HAL_GPIO_Init+0x204>
 80017be:	2307      	movs	r3, #7
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x204>
 80017c2:	2303      	movs	r3, #3
 80017c4:	e004      	b.n	80017d0 <HAL_GPIO_Init+0x204>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_Init+0x204>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_GPIO_Init+0x204>
 80017ce:	2300      	movs	r3, #0
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	f002 0203 	and.w	r2, r2, #3
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	4093      	lsls	r3, r2
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e0:	4934      	ldr	r1, [pc, #208]	; (80018b4 <HAL_GPIO_Init+0x2e8>)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ee:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_GPIO_Init+0x300>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001812:	4a2e      	ldr	r2, [pc, #184]	; (80018cc <HAL_GPIO_Init+0x300>)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001818:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <HAL_GPIO_Init+0x300>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800183c:	4a23      	ldr	r2, [pc, #140]	; (80018cc <HAL_GPIO_Init+0x300>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <HAL_GPIO_Init+0x300>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001866:	4a19      	ldr	r2, [pc, #100]	; (80018cc <HAL_GPIO_Init+0x300>)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_GPIO_Init+0x300>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001890:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <HAL_GPIO_Init+0x300>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3301      	adds	r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	2b0f      	cmp	r3, #15
 80018a0:	f67f aea2 	bls.w	80015e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018a4:	bf00      	nop
 80018a6:	3724      	adds	r7, #36	; 0x24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40013800 	.word	0x40013800
 80018b8:	40020000 	.word	0x40020000
 80018bc:	40020400 	.word	0x40020400
 80018c0:	40020800 	.word	0x40020800
 80018c4:	40020c00 	.word	0x40020c00
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40013c00 	.word	0x40013c00

080018d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e0:	787b      	ldrb	r3, [r7, #1]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018ec:	e003      	b.n	80018f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	041a      	lsls	r2, r3, #16
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	619a      	str	r2, [r3, #24]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	401a      	ands	r2, r3
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	429a      	cmp	r2, r3
 800191a:	d104      	bne.n	8001926 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800191c:	887b      	ldrh	r3, [r7, #2]
 800191e:	041a      	lsls	r2, r3, #16
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001924:	e002      	b.n	800192c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	619a      	str	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	4013      	ands	r3, r2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d006      	beq.n	800195c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fe72 	bl	8000640 <HAL_GPIO_EXTI_Callback>
  }
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40013c00 	.word	0x40013c00

08001968 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196a:	b08f      	sub	sp, #60	; 0x3c
 800196c:	af0a      	add	r7, sp, #40	; 0x28
 800196e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e054      	b.n	8001a24 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d106      	bne.n	800199a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f006 fd81 	bl	800849c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2203      	movs	r2, #3
 800199e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d102      	bne.n	80019b4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 ff3d 	bl	8005838 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	687e      	ldr	r6, [r7, #4]
 80019c6:	466d      	mov	r5, sp
 80019c8:	f106 0410 	add.w	r4, r6, #16
 80019cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80019dc:	1d33      	adds	r3, r6, #4
 80019de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019e0:	6838      	ldr	r0, [r7, #0]
 80019e2:	f003 feb7 	bl	8005754 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2101      	movs	r1, #1
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 ff34 	bl	800585a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	687e      	ldr	r6, [r7, #4]
 80019fa:	466d      	mov	r5, sp
 80019fc:	f106 0410 	add.w	r4, r6, #16
 8001a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a10:	1d33      	adds	r3, r6, #4
 8001a12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a14:	6838      	ldr	r0, [r7, #0]
 8001a16:	f004 f847 	bl	8005aa8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a2c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af04      	add	r7, sp, #16
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	4608      	mov	r0, r1
 8001a36:	4611      	mov	r1, r2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	70fb      	strb	r3, [r7, #3]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	70bb      	strb	r3, [r7, #2]
 8001a42:	4613      	mov	r3, r2
 8001a44:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_HCD_HC_Init+0x28>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e07f      	b.n	8001b54 <HAL_HCD_HC_Init+0x128>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	440b      	add	r3, r1
 8001a6a:	333d      	adds	r3, #61	; 0x3d
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3338      	adds	r3, #56	; 0x38
 8001a80:	787a      	ldrb	r2, [r7, #1]
 8001a82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	3340      	adds	r3, #64	; 0x40
 8001a94:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a96:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3339      	adds	r3, #57	; 0x39
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001aac:	78fa      	ldrb	r2, [r7, #3]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	440b      	add	r3, r1
 8001aba:	333f      	adds	r3, #63	; 0x3f
 8001abc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ac0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ac2:	78fa      	ldrb	r2, [r7, #3]
 8001ac4:	78bb      	ldrb	r3, [r7, #2]
 8001ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aca:	b2d8      	uxtb	r0, r3
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	440b      	add	r3, r1
 8001ad8:	333a      	adds	r3, #58	; 0x3a
 8001ada:	4602      	mov	r2, r0
 8001adc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001ade:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	da0a      	bge.n	8001afc <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	333b      	adds	r3, #59	; 0x3b
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	e009      	b.n	8001b10 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	333b      	adds	r3, #59	; 0x3b
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001b10:	78fa      	ldrb	r2, [r7, #3]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	440b      	add	r3, r1
 8001b1e:	333c      	adds	r3, #60	; 0x3c
 8001b20:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b24:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	787c      	ldrb	r4, [r7, #1]
 8001b2c:	78ba      	ldrb	r2, [r7, #2]
 8001b2e:	78f9      	ldrb	r1, [r7, #3]
 8001b30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b32:	9302      	str	r3, [sp, #8]
 8001b34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b38:	9301      	str	r3, [sp, #4]
 8001b3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	4623      	mov	r3, r4
 8001b42:	f004 f933 	bl	8005dac <USB_HC_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd90      	pop	{r4, r7, pc}

08001b5c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_HCD_HC_Halt+0x1e>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e00f      	b.n	8001b9a <HAL_HCD_HC_Halt+0x3e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f004 fb6f 	bl	800626e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	4608      	mov	r0, r1
 8001bae:	4611      	mov	r1, r2
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	70fb      	strb	r3, [r7, #3]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	70bb      	strb	r3, [r7, #2]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001bbe:	78fa      	ldrb	r2, [r7, #3]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	333b      	adds	r3, #59	; 0x3b
 8001bce:	78ba      	ldrb	r2, [r7, #2]
 8001bd0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	440b      	add	r3, r1
 8001be0:	333f      	adds	r3, #63	; 0x3f
 8001be2:	787a      	ldrb	r2, [r7, #1]
 8001be4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001be6:	7c3b      	ldrb	r3, [r7, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d114      	bne.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3342      	adds	r3, #66	; 0x42
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c00:	78fa      	ldrb	r2, [r7, #3]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	333d      	adds	r3, #61	; 0x3d
 8001c10:	7f3a      	ldrb	r2, [r7, #28]
 8001c12:	701a      	strb	r2, [r3, #0]
 8001c14:	e009      	b.n	8001c2a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	440b      	add	r3, r1
 8001c24:	3342      	adds	r3, #66	; 0x42
 8001c26:	2202      	movs	r2, #2
 8001c28:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c2a:	787b      	ldrb	r3, [r7, #1]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	f200 80d6 	bhi.w	8001dde <HAL_HCD_HC_SubmitRequest+0x23a>
 8001c32:	a201      	add	r2, pc, #4	; (adr r2, 8001c38 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c38:	08001c49 	.word	0x08001c49
 8001c3c:	08001dc9 	.word	0x08001dc9
 8001c40:	08001cb5 	.word	0x08001cb5
 8001c44:	08001d3f 	.word	0x08001d3f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001c48:	7c3b      	ldrb	r3, [r7, #16]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	f040 80c9 	bne.w	8001de2 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001c50:	78bb      	ldrb	r3, [r7, #2]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 80c5 	bne.w	8001de2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001c58:	8b3b      	ldrh	r3, [r7, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c5e:	78fa      	ldrb	r2, [r7, #3]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3351      	adds	r3, #81	; 0x51
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c72:	78fa      	ldrb	r2, [r7, #3]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	3351      	adds	r3, #81	; 0x51
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10a      	bne.n	8001c9e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	440b      	add	r3, r1
 8001c96:	3342      	adds	r3, #66	; 0x42
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c9c:	e0a1      	b.n	8001de2 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	440b      	add	r3, r1
 8001cac:	3342      	adds	r3, #66	; 0x42
 8001cae:	2202      	movs	r2, #2
 8001cb0:	701a      	strb	r2, [r3, #0]
      break;
 8001cb2:	e096      	b.n	8001de2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001cb4:	78bb      	ldrb	r3, [r7, #2]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d120      	bne.n	8001cfc <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3351      	adds	r3, #81	; 0x51
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10a      	bne.n	8001ce6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	440b      	add	r3, r1
 8001cde:	3342      	adds	r3, #66	; 0x42
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ce4:	e07e      	b.n	8001de4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3342      	adds	r3, #66	; 0x42
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	701a      	strb	r2, [r3, #0]
      break;
 8001cfa:	e073      	b.n	8001de4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	440b      	add	r3, r1
 8001d0a:	3350      	adds	r3, #80	; 0x50
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10a      	bne.n	8001d28 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	3342      	adds	r3, #66	; 0x42
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
      break;
 8001d26:	e05d      	b.n	8001de4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	3342      	adds	r3, #66	; 0x42
 8001d38:	2202      	movs	r2, #2
 8001d3a:	701a      	strb	r2, [r3, #0]
      break;
 8001d3c:	e052      	b.n	8001de4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d3e:	78bb      	ldrb	r3, [r7, #2]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d120      	bne.n	8001d86 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d44:	78fa      	ldrb	r2, [r7, #3]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	3351      	adds	r3, #81	; 0x51
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10a      	bne.n	8001d70 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d5a:	78fa      	ldrb	r2, [r7, #3]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	3342      	adds	r3, #66	; 0x42
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d6e:	e039      	b.n	8001de4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	3342      	adds	r3, #66	; 0x42
 8001d80:	2202      	movs	r2, #2
 8001d82:	701a      	strb	r2, [r3, #0]
      break;
 8001d84:	e02e      	b.n	8001de4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	440b      	add	r3, r1
 8001d94:	3350      	adds	r3, #80	; 0x50
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10a      	bne.n	8001db2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	3342      	adds	r3, #66	; 0x42
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
      break;
 8001db0:	e018      	b.n	8001de4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001db2:	78fa      	ldrb	r2, [r7, #3]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3342      	adds	r3, #66	; 0x42
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	701a      	strb	r2, [r3, #0]
      break;
 8001dc6:	e00d      	b.n	8001de4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	440b      	add	r3, r1
 8001dd6:	3342      	adds	r3, #66	; 0x42
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
      break;
 8001ddc:	e002      	b.n	8001de4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001dde:	bf00      	nop
 8001de0:	e000      	b.n	8001de4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001de2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001de4:	78fa      	ldrb	r2, [r7, #3]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	440b      	add	r3, r1
 8001df2:	3344      	adds	r3, #68	; 0x44
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	8b39      	ldrh	r1, [r7, #24]
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4403      	add	r3, r0
 8001e08:	3348      	adds	r3, #72	; 0x48
 8001e0a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001e0c:	78fa      	ldrb	r2, [r7, #3]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	440b      	add	r3, r1
 8001e1a:	335c      	adds	r3, #92	; 0x5c
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	334c      	adds	r3, #76	; 0x4c
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	440b      	add	r3, r1
 8001e42:	3339      	adds	r3, #57	; 0x39
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e48:	78fa      	ldrb	r2, [r7, #3]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	335d      	adds	r3, #93	; 0x5d
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	3338      	adds	r3, #56	; 0x38
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	18d1      	adds	r1, r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	f004 f8a2 	bl	8005fc0 <USB_HC_StartXfer>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop

08001e88 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 fdbf 	bl	8005a22 <USB_GetMode>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	f040 80ef 	bne.w	800208a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f003 fda3 	bl	80059fc <USB_ReadInterrupts>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80e5 	beq.w	8002088 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 fd9a 	bl	80059fc <USB_ReadInterrupts>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ece:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ed2:	d104      	bne.n	8001ede <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001edc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 fd8a 	bl	80059fc <USB_ReadInterrupts>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ef2:	d104      	bne.n	8001efe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001efc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f003 fd7a 	bl	80059fc <USB_ReadInterrupts>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f12:	d104      	bne.n	8001f1e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 fd6a 	bl	80059fc <USB_ReadInterrupts>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d103      	bne.n	8001f3a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2202      	movs	r2, #2
 8001f38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 fd5c 	bl	80059fc <USB_ReadInterrupts>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f4e:	d115      	bne.n	8001f7c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f58:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d108      	bne.n	8001f7c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f006 fb14 	bl	8008598 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2101      	movs	r1, #1
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 fe52 	bl	8005c20 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 fd3b 	bl	80059fc <USB_ReadInterrupts>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f90:	d102      	bne.n	8001f98 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f001 f966 	bl	8003264 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f003 fd2d 	bl	80059fc <USB_ReadInterrupts>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d106      	bne.n	8001fba <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f006 fad7 	bl	8008560 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 fd1c 	bl	80059fc <USB_ReadInterrupts>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fce:	d138      	bne.n	8002042 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f004 f939 	bl	800624c <USB_HC_ReadInterrupt>
 8001fda:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	e025      	b.n	800202e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	fa22 f303 	lsr.w	r3, r2, r3
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d018      	beq.n	8002028 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800200c:	d106      	bne.n	800201c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	4619      	mov	r1, r3
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f8cf 	bl	80021b8 <HCD_HC_IN_IRQHandler>
 800201a:	e005      	b.n	8002028 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	4619      	mov	r1, r3
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fcfd 	bl	8002a22 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3301      	adds	r3, #1
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	429a      	cmp	r2, r3
 8002036:	d3d4      	bcc.n	8001fe2 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002040:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f003 fcd8 	bl	80059fc <USB_ReadInterrupts>
 800204c:	4603      	mov	r3, r0
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b10      	cmp	r3, #16
 8002054:	d101      	bne.n	800205a <HAL_HCD_IRQHandler+0x1d2>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_HCD_IRQHandler+0x1d4>
 800205a:	2300      	movs	r3, #0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d014      	beq.n	800208a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0210 	bic.w	r2, r2, #16
 800206e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f001 f84b 	bl	800310c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699a      	ldr	r2, [r3, #24]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 0210 	orr.w	r2, r2, #16
 8002084:	619a      	str	r2, [r3, #24]
 8002086:	e000      	b.n	800208a <HAL_HCD_IRQHandler+0x202>
      return;
 8002088:	bf00      	nop
    }
  }
}
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_HCD_Start+0x16>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e013      	b.n	80020ce <HAL_HCD_Start+0x3e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f003 fbaf 	bl	8005816 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2101      	movs	r1, #1
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 fe12 	bl	8005ce8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_HCD_Stop+0x16>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e00d      	b.n	8002108 <HAL_HCD_Stop+0x32>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f004 f9f3 	bl	80064e4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f003 fdb9 	bl	8005c94 <USB_ResetPort>
 8002122:	4603      	mov	r3, r0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	440b      	add	r3, r1
 8002146:	335c      	adds	r3, #92	; 0x5c
 8002148:	781b      	ldrb	r3, [r3, #0]
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	460b      	mov	r3, r1
 8002160:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	440b      	add	r3, r1
 8002170:	334c      	adds	r3, #76	; 0x4c
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f003 fdfb 	bl	8005d88 <USB_GetCurrentFrame>
 8002192:	4603      	mov	r3, r0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f003 fdd6 	bl	8005d5a <USB_GetHostSpeed>
 80021ae:	4603      	mov	r3, r0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d119      	bne.n	800221c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f4:	461a      	mov	r2, r3
 80021f6:	2304      	movs	r3, #4
 80021f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4413      	add	r3, r2
 8002202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	0151      	lsls	r1, r2, #5
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	440a      	add	r2, r1
 8002210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	60d3      	str	r3, [r2, #12]
 800221a:	e0ce      	b.n	80023ba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4413      	add	r3, r2
 8002224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002232:	d12c      	bne.n	800228e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4413      	add	r3, r2
 800223c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002240:	461a      	mov	r2, r3
 8002242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002246:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	335d      	adds	r3, #93	; 0x5d
 8002258:	2207      	movs	r2, #7
 800225a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	0151      	lsls	r1, r2, #5
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	440a      	add	r2, r1
 8002272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002276:	f043 0302 	orr.w	r3, r3, #2
 800227a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f003 fff1 	bl	800626e <USB_HC_Halt>
 800228c:	e095      	b.n	80023ba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0320 	and.w	r3, r3, #32
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d109      	bne.n	80022b8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b0:	461a      	mov	r2, r3
 80022b2:	2320      	movs	r3, #32
 80022b4:	6093      	str	r3, [r2, #8]
 80022b6:	e080      	b.n	80023ba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d134      	bne.n	8002338 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	0151      	lsls	r1, r2, #5
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	440a      	add	r2, r1
 80022e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	335d      	adds	r3, #93	; 0x5d
 80022fe:	2205      	movs	r2, #5
 8002300:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230e:	461a      	mov	r2, r3
 8002310:	2310      	movs	r3, #16
 8002312:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4413      	add	r3, r2
 800231c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002320:	461a      	mov	r2, r3
 8002322:	2308      	movs	r3, #8
 8002324:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f003 ff9c 	bl	800626e <USB_HC_Halt>
 8002336:	e040      	b.n	80023ba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800234e:	d134      	bne.n	80023ba <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	0151      	lsls	r1, r2, #5
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	440a      	add	r2, r1
 8002366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800236a:	f043 0302 	orr.w	r3, r3, #2
 800236e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f003 ff77 	bl	800626e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4413      	add	r3, r2
 8002388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238c:	461a      	mov	r2, r3
 800238e:	2310      	movs	r3, #16
 8002390:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	440b      	add	r3, r1
 80023a0:	335d      	adds	r3, #93	; 0x5d
 80023a2:	2208      	movs	r2, #8
 80023a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b2:	461a      	mov	r2, r3
 80023b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023b8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d0:	d122      	bne.n	8002418 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	0151      	lsls	r1, r2, #5
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	440a      	add	r2, r1
 80023e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f003 ff36 	bl	800626e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4413      	add	r3, r2
 800240a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240e:	461a      	mov	r2, r3
 8002410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002414:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002416:	e300      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4413      	add	r3, r2
 8002420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	f040 80fd 	bne.w	800262a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01b      	beq.n	8002470 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	440b      	add	r3, r1
 8002446:	3348      	adds	r3, #72	; 0x48
 8002448:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	0159      	lsls	r1, r3, #5
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	440b      	add	r3, r1
 8002452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800245c:	1ad1      	subs	r1, r2, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4403      	add	r3, r0
 800246c:	334c      	adds	r3, #76	; 0x4c
 800246e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	335d      	adds	r3, #93	; 0x5d
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	440b      	add	r3, r1
 8002492:	3358      	adds	r3, #88	; 0x58
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a4:	461a      	mov	r2, r3
 80024a6:	2301      	movs	r3, #1
 80024a8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	440b      	add	r3, r1
 80024b8:	333f      	adds	r3, #63	; 0x3f
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	440b      	add	r3, r1
 80024ce:	333f      	adds	r3, #63	; 0x3f
 80024d0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d121      	bne.n	800251a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	0151      	lsls	r1, r2, #5
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	440a      	add	r2, r1
 80024ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f003 feb4 	bl	800626e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	461a      	mov	r2, r3
 8002514:	2310      	movs	r3, #16
 8002516:	6093      	str	r3, [r2, #8]
 8002518:	e070      	b.n	80025fc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	440b      	add	r3, r1
 8002528:	333f      	adds	r3, #63	; 0x3f
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d12a      	bne.n	8002586 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	0151      	lsls	r1, r2, #5
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	440a      	add	r2, r1
 8002546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800254a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800254e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	335c      	adds	r3, #92	; 0x5c
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	b2d8      	uxtb	r0, r3
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	440b      	add	r3, r1
 8002576:	335c      	adds	r3, #92	; 0x5c
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	4601      	mov	r1, r0
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f006 f818 	bl	80085b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002584:	e03a      	b.n	80025fc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	333f      	adds	r3, #63	; 0x3f
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d12f      	bne.n	80025fc <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	440b      	add	r3, r1
 80025aa:	335c      	adds	r3, #92	; 0x5c
 80025ac:	2201      	movs	r2, #1
 80025ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	440b      	add	r3, r1
 80025be:	3350      	adds	r3, #80	; 0x50
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	f083 0301 	eor.w	r3, r3, #1
 80025c6:	b2d8      	uxtb	r0, r3
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	440b      	add	r3, r1
 80025d6:	3350      	adds	r3, #80	; 0x50
 80025d8:	4602      	mov	r2, r0
 80025da:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	b2d8      	uxtb	r0, r3
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	440b      	add	r3, r1
 80025ee:	335c      	adds	r3, #92	; 0x5c
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	4601      	mov	r1, r0
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f005 ffdc 	bl	80085b4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	440b      	add	r3, r1
 800260a:	3350      	adds	r3, #80	; 0x50
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	f083 0301 	eor.w	r3, r3, #1
 8002612:	b2d8      	uxtb	r0, r3
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	440b      	add	r3, r1
 8002622:	3350      	adds	r3, #80	; 0x50
 8002624:	4602      	mov	r2, r0
 8002626:	701a      	strb	r2, [r3, #0]
}
 8002628:	e1f7      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b02      	cmp	r3, #2
 800263e:	f040 811a 	bne.w	8002876 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	0151      	lsls	r1, r2, #5
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	440a      	add	r2, r1
 8002658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800265c:	f023 0302 	bic.w	r3, r3, #2
 8002660:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	440b      	add	r3, r1
 8002670:	335d      	adds	r3, #93	; 0x5d
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d10a      	bne.n	800268e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	335c      	adds	r3, #92	; 0x5c
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	e0d9      	b.n	8002842 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	335d      	adds	r3, #93	; 0x5d
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	d10a      	bne.n	80026ba <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	440b      	add	r3, r1
 80026b2:	335c      	adds	r3, #92	; 0x5c
 80026b4:	2205      	movs	r2, #5
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	e0c3      	b.n	8002842 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	440b      	add	r3, r1
 80026c8:	335d      	adds	r3, #93	; 0x5d
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b06      	cmp	r3, #6
 80026ce:	d00a      	beq.n	80026e6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	440b      	add	r3, r1
 80026de:	335d      	adds	r3, #93	; 0x5d
 80026e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d156      	bne.n	8002794 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	3358      	adds	r3, #88	; 0x58
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	1c59      	adds	r1, r3, #1
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4403      	add	r3, r0
 8002708:	3358      	adds	r3, #88	; 0x58
 800270a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	440b      	add	r3, r1
 800271a:	3358      	adds	r3, #88	; 0x58
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b03      	cmp	r3, #3
 8002720:	d914      	bls.n	800274c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	3358      	adds	r3, #88	; 0x58
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	440b      	add	r3, r1
 8002744:	335c      	adds	r3, #92	; 0x5c
 8002746:	2204      	movs	r2, #4
 8002748:	701a      	strb	r2, [r3, #0]
 800274a:	e009      	b.n	8002760 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	335c      	adds	r3, #92	; 0x5c
 800275c:	2202      	movs	r2, #2
 800275e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002776:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800277e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	461a      	mov	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e056      	b.n	8002842 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	335d      	adds	r3, #93	; 0x5d
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d123      	bne.n	80027f2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	440b      	add	r3, r1
 80027b8:	335c      	adds	r3, #92	; 0x5c
 80027ba:	2202      	movs	r2, #2
 80027bc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027d4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027dc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ea:	461a      	mov	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	e027      	b.n	8002842 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	440b      	add	r3, r1
 8002800:	335d      	adds	r3, #93	; 0x5d
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b07      	cmp	r3, #7
 8002806:	d11c      	bne.n	8002842 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	440b      	add	r3, r1
 8002816:	3358      	adds	r3, #88	; 0x58
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	1c59      	adds	r1, r3, #1
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4403      	add	r3, r0
 800282a:	3358      	adds	r3, #88	; 0x58
 800282c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	440b      	add	r3, r1
 800283c:	335c      	adds	r3, #92	; 0x5c
 800283e:	2204      	movs	r2, #4
 8002840:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4413      	add	r3, r2
 800284a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284e:	461a      	mov	r2, r3
 8002850:	2302      	movs	r3, #2
 8002852:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	b2d8      	uxtb	r0, r3
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	440b      	add	r3, r1
 8002866:	335c      	adds	r3, #92	; 0x5c
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	4601      	mov	r1, r0
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f005 fea0 	bl	80085b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002874:	e0d1      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4413      	add	r3, r2
 800287e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002888:	2b80      	cmp	r3, #128	; 0x80
 800288a:	d13e      	bne.n	800290a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	0151      	lsls	r1, r2, #5
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	440a      	add	r2, r1
 80028a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028a6:	f043 0302 	orr.w	r3, r3, #2
 80028aa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	440b      	add	r3, r1
 80028ba:	3358      	adds	r3, #88	; 0x58
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	1c59      	adds	r1, r3, #1
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4403      	add	r3, r0
 80028ce:	3358      	adds	r3, #88	; 0x58
 80028d0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	335d      	adds	r3, #93	; 0x5d
 80028e2:	2206      	movs	r2, #6
 80028e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f003 fcbc 	bl	800626e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002902:	461a      	mov	r2, r3
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	6093      	str	r3, [r2, #8]
}
 8002908:	e087      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b10      	cmp	r3, #16
 800291e:	d17c      	bne.n	8002a1a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	440b      	add	r3, r1
 800292e:	333f      	adds	r3, #63	; 0x3f
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b03      	cmp	r3, #3
 8002934:	d122      	bne.n	800297c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	440b      	add	r3, r1
 8002944:	3358      	adds	r3, #88	; 0x58
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	0151      	lsls	r1, r2, #5
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	440a      	add	r2, r1
 8002960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f003 fc7a 	bl	800626e <USB_HC_Halt>
 800297a:	e045      	b.n	8002a08 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	333f      	adds	r3, #63	; 0x3f
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	440b      	add	r3, r1
 80029a0:	333f      	adds	r3, #63	; 0x3f
 80029a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d12f      	bne.n	8002a08 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	440b      	add	r3, r1
 80029b6:	3358      	adds	r3, #88	; 0x58
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d121      	bne.n	8002a08 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	440b      	add	r3, r1
 80029d2:	335d      	adds	r3, #93	; 0x5d
 80029d4:	2203      	movs	r2, #3
 80029d6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	0151      	lsls	r1, r2, #5
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	440a      	add	r2, r1
 80029ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029f2:	f043 0302 	orr.w	r3, r3, #2
 80029f6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	4611      	mov	r1, r2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 fc33 	bl	800626e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	461a      	mov	r2, r3
 8002a16:	2310      	movs	r3, #16
 8002a18:	6093      	str	r3, [r2, #8]
}
 8002a1a:	bf00      	nop
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d119      	bne.n	8002a86 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5e:	461a      	mov	r2, r3
 8002a60:	2304      	movs	r3, #4
 8002a62:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	0151      	lsls	r1, r2, #5
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	440a      	add	r2, r1
 8002a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a7e:	f043 0302 	orr.w	r3, r3, #2
 8002a82:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002a84:	e33e      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d141      	bne.n	8002b20 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2320      	movs	r3, #32
 8002aac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	440b      	add	r3, r1
 8002abc:	333d      	adds	r3, #61	; 0x3d
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	f040 831f 	bne.w	8003104 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	440b      	add	r3, r1
 8002ad4:	333d      	adds	r3, #61	; 0x3d
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	440b      	add	r3, r1
 8002ae8:	335c      	adds	r3, #92	; 0x5c
 8002aea:	2202      	movs	r2, #2
 8002aec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	0151      	lsls	r1, r2, #5
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	440a      	add	r2, r1
 8002b04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 fba8 	bl	800626e <USB_HC_Halt>
}
 8002b1e:	e2f1      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b32:	2b40      	cmp	r3, #64	; 0x40
 8002b34:	d13f      	bne.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	440b      	add	r3, r1
 8002b44:	335d      	adds	r3, #93	; 0x5d
 8002b46:	2204      	movs	r2, #4
 8002b48:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	440b      	add	r3, r1
 8002b58:	333d      	adds	r3, #61	; 0x3d
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3358      	adds	r3, #88	; 0x58
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	0151      	lsls	r1, r2, #5
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	440a      	add	r2, r1
 8002b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f003 fb66 	bl	800626e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2340      	movs	r3, #64	; 0x40
 8002bb2:	6093      	str	r3, [r2, #8]
}
 8002bb4:	e2a6      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bcc:	d122      	bne.n	8002c14 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	0151      	lsls	r1, r2, #5
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	440a      	add	r2, r1
 8002be4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002be8:	f043 0302 	orr.w	r3, r3, #2
 8002bec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 fb38 	bl	800626e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c10:	6093      	str	r3, [r2, #8]
}
 8002c12:	e277      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d135      	bne.n	8002c96 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	3358      	adds	r3, #88	; 0x58
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	0151      	lsls	r1, r2, #5
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	440a      	add	r2, r1
 8002c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f003 fb00 	bl	800626e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	440b      	add	r3, r1
 8002c8e:	335d      	adds	r3, #93	; 0x5d
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
}
 8002c94:	e236      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d12b      	bne.n	8002d04 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2308      	movs	r3, #8
 8002cbc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	0151      	lsls	r1, r2, #5
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	440a      	add	r2, r1
 8002cd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cd8:	f043 0302 	orr.w	r3, r3, #2
 8002cdc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f003 fac0 	bl	800626e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	440b      	add	r3, r1
 8002cfc:	335d      	adds	r3, #93	; 0x5d
 8002cfe:	2205      	movs	r2, #5
 8002d00:	701a      	strb	r2, [r3, #0]
}
 8002d02:	e1ff      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b10      	cmp	r3, #16
 8002d18:	d155      	bne.n	8002dc6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	440b      	add	r3, r1
 8002d28:	3358      	adds	r3, #88	; 0x58
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	335d      	adds	r3, #93	; 0x5d
 8002d3e:	2203      	movs	r2, #3
 8002d40:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	440b      	add	r3, r1
 8002d50:	333d      	adds	r3, #61	; 0x3d
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d114      	bne.n	8002d82 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	333c      	adds	r3, #60	; 0x3c
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	440b      	add	r3, r1
 8002d7c:	333d      	adds	r3, #61	; 0x3d
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	0151      	lsls	r1, r2, #5
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	440a      	add	r2, r1
 8002d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d9c:	f043 0302 	orr.w	r3, r3, #2
 8002da0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 fa5e 	bl	800626e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2310      	movs	r3, #16
 8002dc2:	6093      	str	r3, [r2, #8]
}
 8002dc4:	e19e      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd8:	2b80      	cmp	r3, #128	; 0x80
 8002dda:	d12b      	bne.n	8002e34 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	0151      	lsls	r1, r2, #5
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	440a      	add	r2, r1
 8002df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002df6:	f043 0302 	orr.w	r3, r3, #2
 8002dfa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f003 fa31 	bl	800626e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	440b      	add	r3, r1
 8002e1a:	335d      	adds	r3, #93	; 0x5d
 8002e1c:	2206      	movs	r2, #6
 8002e1e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	6093      	str	r3, [r2, #8]
}
 8002e32:	e167      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e4a:	d135      	bne.n	8002eb8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	0151      	lsls	r1, r2, #5
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	440a      	add	r2, r1
 8002e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e66:	f043 0302 	orr.w	r3, r3, #2
 8002e6a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 f9f9 	bl	800626e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2310      	movs	r3, #16
 8002e8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ea0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	335d      	adds	r3, #93	; 0x5d
 8002eb2:	2208      	movs	r2, #8
 8002eb4:	701a      	strb	r2, [r3, #0]
}
 8002eb6:	e125      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	f040 811a 	bne.w	8003104 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	0151      	lsls	r1, r2, #5
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	440a      	add	r2, r1
 8002ee6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eea:	f023 0302 	bic.w	r3, r3, #2
 8002eee:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	440b      	add	r3, r1
 8002efe:	335d      	adds	r3, #93	; 0x5d
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d137      	bne.n	8002f76 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	440b      	add	r3, r1
 8002f14:	335c      	adds	r3, #92	; 0x5c
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	440b      	add	r3, r1
 8002f28:	333f      	adds	r3, #63	; 0x3f
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d00b      	beq.n	8002f48 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	440b      	add	r3, r1
 8002f3e:	333f      	adds	r3, #63	; 0x3f
 8002f40:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	f040 80c5 	bne.w	80030d2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	440b      	add	r3, r1
 8002f56:	3351      	adds	r3, #81	; 0x51
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	f083 0301 	eor.w	r3, r3, #1
 8002f5e:	b2d8      	uxtb	r0, r3
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	440b      	add	r3, r1
 8002f6e:	3351      	adds	r3, #81	; 0x51
 8002f70:	4602      	mov	r2, r0
 8002f72:	701a      	strb	r2, [r3, #0]
 8002f74:	e0ad      	b.n	80030d2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	440b      	add	r3, r1
 8002f84:	335d      	adds	r3, #93	; 0x5d
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d10a      	bne.n	8002fa2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	440b      	add	r3, r1
 8002f9a:	335c      	adds	r3, #92	; 0x5c
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	701a      	strb	r2, [r3, #0]
 8002fa0:	e097      	b.n	80030d2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	440b      	add	r3, r1
 8002fb0:	335d      	adds	r3, #93	; 0x5d
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d10a      	bne.n	8002fce <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	440b      	add	r3, r1
 8002fc6:	335c      	adds	r3, #92	; 0x5c
 8002fc8:	2202      	movs	r2, #2
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	e081      	b.n	80030d2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	440b      	add	r3, r1
 8002fdc:	335d      	adds	r3, #93	; 0x5d
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b05      	cmp	r3, #5
 8002fe2:	d10a      	bne.n	8002ffa <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	440b      	add	r3, r1
 8002ff2:	335c      	adds	r3, #92	; 0x5c
 8002ff4:	2205      	movs	r2, #5
 8002ff6:	701a      	strb	r2, [r3, #0]
 8002ff8:	e06b      	b.n	80030d2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	440b      	add	r3, r1
 8003008:	335d      	adds	r3, #93	; 0x5d
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b06      	cmp	r3, #6
 800300e:	d00a      	beq.n	8003026 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	440b      	add	r3, r1
 800301e:	335d      	adds	r3, #93	; 0x5d
 8003020:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003022:	2b08      	cmp	r3, #8
 8003024:	d155      	bne.n	80030d2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	440b      	add	r3, r1
 8003034:	3358      	adds	r3, #88	; 0x58
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	1c59      	adds	r1, r3, #1
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4403      	add	r3, r0
 8003048:	3358      	adds	r3, #88	; 0x58
 800304a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	440b      	add	r3, r1
 800305a:	3358      	adds	r3, #88	; 0x58
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b03      	cmp	r3, #3
 8003060:	d914      	bls.n	800308c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	440b      	add	r3, r1
 8003070:	3358      	adds	r3, #88	; 0x58
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	440b      	add	r3, r1
 8003084:	335c      	adds	r3, #92	; 0x5c
 8003086:	2204      	movs	r2, #4
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e009      	b.n	80030a0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	440b      	add	r3, r1
 800309a:	335c      	adds	r3, #92	; 0x5c
 800309c:	2202      	movs	r2, #2
 800309e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030b6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030be:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030cc:	461a      	mov	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030de:	461a      	mov	r2, r3
 80030e0:	2302      	movs	r3, #2
 80030e2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	b2d8      	uxtb	r0, r3
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	440b      	add	r3, r1
 80030f6:	335c      	adds	r3, #92	; 0x5c
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	4601      	mov	r1, r0
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f005 fa58 	bl	80085b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003104:	bf00      	nop
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	0c5b      	lsrs	r3, r3, #17
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003140:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d003      	beq.n	8003150 <HCD_RXQLVL_IRQHandler+0x44>
 8003148:	2b05      	cmp	r3, #5
 800314a:	f000 8082 	beq.w	8003252 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800314e:	e083      	b.n	8003258 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d07f      	beq.n	8003256 <HCD_RXQLVL_IRQHandler+0x14a>
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	440b      	add	r3, r1
 8003164:	3344      	adds	r3, #68	; 0x44
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d074      	beq.n	8003256 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	440b      	add	r3, r1
 800317e:	3344      	adds	r3, #68	; 0x44
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	b292      	uxth	r2, r2
 8003186:	4619      	mov	r1, r3
 8003188:	f002 fc0f 	bl	80059aa <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	440b      	add	r3, r1
 800319a:	3344      	adds	r3, #68	; 0x44
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	18d1      	adds	r1, r2, r3
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4403      	add	r3, r0
 80031b0:	3344      	adds	r3, #68	; 0x44
 80031b2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	334c      	adds	r3, #76	; 0x4c
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	18d1      	adds	r1, r2, r3
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4403      	add	r3, r0
 80031d8:	334c      	adds	r3, #76	; 0x4c
 80031da:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <HCD_RXQLVL_IRQHandler+0x154>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d031      	beq.n	8003256 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003208:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003210:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	461a      	mov	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	440b      	add	r3, r1
 8003232:	3350      	adds	r3, #80	; 0x50
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	f083 0301 	eor.w	r3, r3, #1
 800323a:	b2d8      	uxtb	r0, r3
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	3350      	adds	r3, #80	; 0x50
 800324c:	4602      	mov	r2, r0
 800324e:	701a      	strb	r2, [r3, #0]
      break;
 8003250:	e001      	b.n	8003256 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003252:	bf00      	nop
 8003254:	e000      	b.n	8003258 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003256:	bf00      	nop
  }
}
 8003258:	bf00      	nop
 800325a:	3728      	adds	r7, #40	; 0x28
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	1ff80000 	.word	0x1ff80000

08003264 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003290:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b02      	cmp	r3, #2
 800329a:	d10b      	bne.n	80032b4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d102      	bne.n	80032ac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f005 f968 	bl	800857c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f043 0302 	orr.w	r3, r3, #2
 80032b2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d132      	bne.n	8003324 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f043 0308 	orr.w	r3, r3, #8
 80032c4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d126      	bne.n	800331e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d113      	bne.n	8003300 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80032de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032e2:	d106      	bne.n	80032f2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2102      	movs	r1, #2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f002 fc98 	bl	8005c20 <USB_InitFSLSPClkSel>
 80032f0:	e011      	b.n	8003316 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2101      	movs	r1, #1
 80032f8:	4618      	mov	r0, r3
 80032fa:	f002 fc91 	bl	8005c20 <USB_InitFSLSPClkSel>
 80032fe:	e00a      	b.n	8003316 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d106      	bne.n	8003316 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800330e:	461a      	mov	r2, r3
 8003310:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003314:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f005 f95a 	bl	80085d0 <HAL_HCD_PortEnabled_Callback>
 800331c:	e002      	b.n	8003324 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f005 f964 	bl	80085ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b20      	cmp	r3, #32
 800332c:	d103      	bne.n	8003336 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f043 0320 	orr.w	r3, r3, #32
 8003334:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800333c:	461a      	mov	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	6013      	str	r3, [r2, #0]
}
 8003342:	bf00      	nop
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e11f      	b.n	800359e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd fcfc 	bl	8000d70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2224      	movs	r2, #36	; 0x24
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0201 	bic.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800339e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033b0:	f001 f9de 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 80033b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4a7b      	ldr	r2, [pc, #492]	; (80035a8 <HAL_I2C_Init+0x25c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d807      	bhi.n	80033d0 <HAL_I2C_Init+0x84>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4a7a      	ldr	r2, [pc, #488]	; (80035ac <HAL_I2C_Init+0x260>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	bf94      	ite	ls
 80033c8:	2301      	movls	r3, #1
 80033ca:	2300      	movhi	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e006      	b.n	80033de <HAL_I2C_Init+0x92>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4a77      	ldr	r2, [pc, #476]	; (80035b0 <HAL_I2C_Init+0x264>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	bf94      	ite	ls
 80033d8:	2301      	movls	r3, #1
 80033da:	2300      	movhi	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e0db      	b.n	800359e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a72      	ldr	r2, [pc, #456]	; (80035b4 <HAL_I2C_Init+0x268>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	0c9b      	lsrs	r3, r3, #18
 80033f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4a64      	ldr	r2, [pc, #400]	; (80035a8 <HAL_I2C_Init+0x25c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d802      	bhi.n	8003420 <HAL_I2C_Init+0xd4>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	3301      	adds	r3, #1
 800341e:	e009      	b.n	8003434 <HAL_I2C_Init+0xe8>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	4a63      	ldr	r2, [pc, #396]	; (80035b8 <HAL_I2C_Init+0x26c>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	099b      	lsrs	r3, r3, #6
 8003432:	3301      	adds	r3, #1
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	430b      	orrs	r3, r1
 800343a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003446:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4956      	ldr	r1, [pc, #344]	; (80035a8 <HAL_I2C_Init+0x25c>)
 8003450:	428b      	cmp	r3, r1
 8003452:	d80d      	bhi.n	8003470 <HAL_I2C_Init+0x124>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1e59      	subs	r1, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003462:	3301      	adds	r3, #1
 8003464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003468:	2b04      	cmp	r3, #4
 800346a:	bf38      	it	cc
 800346c:	2304      	movcc	r3, #4
 800346e:	e04f      	b.n	8003510 <HAL_I2C_Init+0x1c4>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d111      	bne.n	800349c <HAL_I2C_Init+0x150>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1e58      	subs	r0, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6859      	ldr	r1, [r3, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	440b      	add	r3, r1
 8003486:	fbb0 f3f3 	udiv	r3, r0, r3
 800348a:	3301      	adds	r3, #1
 800348c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	e012      	b.n	80034c2 <HAL_I2C_Init+0x176>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1e58      	subs	r0, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	0099      	lsls	r1, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b2:	3301      	adds	r3, #1
 80034b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_Init+0x17e>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e022      	b.n	8003510 <HAL_I2C_Init+0x1c4>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10e      	bne.n	80034f0 <HAL_I2C_Init+0x1a4>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1e58      	subs	r0, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6859      	ldr	r1, [r3, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	440b      	add	r3, r1
 80034e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ee:	e00f      	b.n	8003510 <HAL_I2C_Init+0x1c4>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1e58      	subs	r0, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	0099      	lsls	r1, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	fbb0 f3f3 	udiv	r3, r0, r3
 8003506:	3301      	adds	r3, #1
 8003508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	6809      	ldr	r1, [r1, #0]
 8003514:	4313      	orrs	r3, r2
 8003516:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800353e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6911      	ldr	r1, [r2, #16]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68d2      	ldr	r2, [r2, #12]
 800354a:	4311      	orrs	r1, r2
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	430b      	orrs	r3, r1
 8003552:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	000186a0 	.word	0x000186a0
 80035ac:	001e847f 	.word	0x001e847f
 80035b0:	003d08ff 	.word	0x003d08ff
 80035b4:	431bde83 	.word	0x431bde83
 80035b8:	10624dd3 	.word	0x10624dd3

080035bc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e128      	b.n	8003820 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a90      	ldr	r2, [pc, #576]	; (8003828 <HAL_I2S_Init+0x26c>)
 80035e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7fd fc09 	bl	8000e00 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2202      	movs	r2, #2
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003604:	f023 030f 	bic.w	r3, r3, #15
 8003608:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2202      	movs	r2, #2
 8003610:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d060      	beq.n	80036dc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d102      	bne.n	8003628 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003622:	2310      	movs	r3, #16
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	e001      	b.n	800362c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003628:	2320      	movs	r3, #32
 800362a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b20      	cmp	r3, #32
 8003632:	d802      	bhi.n	800363a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800363a:	2001      	movs	r0, #1
 800363c:	f001 f99c 	bl	8004978 <HAL_RCCEx_GetPeriphCLKFreq>
 8003640:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364a:	d125      	bne.n	8003698 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d010      	beq.n	8003676 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	fbb2 f2f3 	udiv	r2, r2, r3
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	461a      	mov	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	3305      	adds	r3, #5
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	e01f      	b.n	80036b6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	461a      	mov	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003692:	3305      	adds	r3, #5
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	e00e      	b.n	80036b6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	fbb2 f2f3 	udiv	r2, r2, r3
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	461a      	mov	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	3305      	adds	r3, #5
 80036b4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4a5c      	ldr	r2, [pc, #368]	; (800382c <HAL_I2S_Init+0x270>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	08db      	lsrs	r3, r3, #3
 80036c0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	61bb      	str	r3, [r7, #24]
 80036da:	e003      	b.n	80036e4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80036dc:	2302      	movs	r3, #2
 80036de:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d902      	bls.n	80036f0 <HAL_I2S_Init+0x134>
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	2bff      	cmp	r3, #255	; 0xff
 80036ee:	d907      	bls.n	8003700 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	f043 0210 	orr.w	r2, r3, #16
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e08f      	b.n	8003820 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	ea42 0103 	orr.w	r1, r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69fa      	ldr	r2, [r7, #28]
 8003710:	430a      	orrs	r2, r1
 8003712:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800371e:	f023 030f 	bic.w	r3, r3, #15
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6851      	ldr	r1, [r2, #4]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6892      	ldr	r2, [r2, #8]
 800372a:	4311      	orrs	r1, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68d2      	ldr	r2, [r2, #12]
 8003730:	4311      	orrs	r1, r2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6992      	ldr	r2, [r2, #24]
 8003736:	430a      	orrs	r2, r1
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003742:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d161      	bne.n	8003810 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a38      	ldr	r2, [pc, #224]	; (8003830 <HAL_I2S_Init+0x274>)
 8003750:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a37      	ldr	r2, [pc, #220]	; (8003834 <HAL_I2S_Init+0x278>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d101      	bne.n	8003760 <HAL_I2S_Init+0x1a4>
 800375c:	4b36      	ldr	r3, [pc, #216]	; (8003838 <HAL_I2S_Init+0x27c>)
 800375e:	e001      	b.n	8003764 <HAL_I2S_Init+0x1a8>
 8003760:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	4932      	ldr	r1, [pc, #200]	; (8003834 <HAL_I2S_Init+0x278>)
 800376c:	428a      	cmp	r2, r1
 800376e:	d101      	bne.n	8003774 <HAL_I2S_Init+0x1b8>
 8003770:	4a31      	ldr	r2, [pc, #196]	; (8003838 <HAL_I2S_Init+0x27c>)
 8003772:	e001      	b.n	8003778 <HAL_I2S_Init+0x1bc>
 8003774:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003778:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800377c:	f023 030f 	bic.w	r3, r3, #15
 8003780:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a2b      	ldr	r2, [pc, #172]	; (8003834 <HAL_I2S_Init+0x278>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d101      	bne.n	8003790 <HAL_I2S_Init+0x1d4>
 800378c:	4b2a      	ldr	r3, [pc, #168]	; (8003838 <HAL_I2S_Init+0x27c>)
 800378e:	e001      	b.n	8003794 <HAL_I2S_Init+0x1d8>
 8003790:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003794:	2202      	movs	r2, #2
 8003796:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a25      	ldr	r2, [pc, #148]	; (8003834 <HAL_I2S_Init+0x278>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d101      	bne.n	80037a6 <HAL_I2S_Init+0x1ea>
 80037a2:	4b25      	ldr	r3, [pc, #148]	; (8003838 <HAL_I2S_Init+0x27c>)
 80037a4:	e001      	b.n	80037aa <HAL_I2S_Init+0x1ee>
 80037a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b6:	d003      	beq.n	80037c0 <HAL_I2S_Init+0x204>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d103      	bne.n	80037c8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80037c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	e001      	b.n	80037cc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	b299      	uxth	r1, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80037e2:	4303      	orrs	r3, r0
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	430b      	orrs	r3, r1
 80037e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80037ea:	4313      	orrs	r3, r2
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	897b      	ldrh	r3, [r7, #10]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037f8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a0d      	ldr	r2, [pc, #52]	; (8003834 <HAL_I2S_Init+0x278>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d101      	bne.n	8003808 <HAL_I2S_Init+0x24c>
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <HAL_I2S_Init+0x27c>)
 8003806:	e001      	b.n	800380c <HAL_I2S_Init+0x250>
 8003808:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800380c:	897a      	ldrh	r2, [r7, #10]
 800380e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3720      	adds	r7, #32
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	08003933 	.word	0x08003933
 800382c:	cccccccd 	.word	0xcccccccd
 8003830:	08003a49 	.word	0x08003a49
 8003834:	40003800 	.word	0x40003800
 8003838:	40003400 	.word	0x40003400

0800383c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	881a      	ldrh	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	1c9a      	adds	r2, r3, #2
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10e      	bne.n	80038cc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038bc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff ffb8 	bl	800383c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80038cc:	bf00      	nop
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	b292      	uxth	r2, r2
 80038e8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	1c9a      	adds	r2, r3, #2
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10e      	bne.n	800392a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800391a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff ff93 	bl	8003850 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b086      	sub	sp, #24
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b04      	cmp	r3, #4
 800394c:	d13a      	bne.n	80039c4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b01      	cmp	r3, #1
 8003956:	d109      	bne.n	800396c <I2S_IRQHandler+0x3a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003962:	2b40      	cmp	r3, #64	; 0x40
 8003964:	d102      	bne.n	800396c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff ffb4 	bl	80038d4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	d126      	bne.n	80039c4 <I2S_IRQHandler+0x92>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b20      	cmp	r3, #32
 8003982:	d11f      	bne.n	80039c4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003992:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003994:	2300      	movs	r3, #0
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f043 0202 	orr.w	r2, r3, #2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff ff50 	bl	8003864 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d136      	bne.n	8003a3e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d109      	bne.n	80039ee <I2S_IRQHandler+0xbc>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e4:	2b80      	cmp	r3, #128	; 0x80
 80039e6:	d102      	bne.n	80039ee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ff45 	bl	8003878 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d122      	bne.n	8003a3e <I2S_IRQHandler+0x10c>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d11b      	bne.n	8003a3e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a14:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	f043 0204 	orr.w	r2, r3, #4
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff ff13 	bl	8003864 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a3e:	bf00      	nop
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4aa2      	ldr	r2, [pc, #648]	; (8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d101      	bne.n	8003a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003a62:	4ba2      	ldr	r3, [pc, #648]	; (8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a64:	e001      	b.n	8003a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003a66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a9b      	ldr	r2, [pc, #620]	; (8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d101      	bne.n	8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003a80:	4b9a      	ldr	r3, [pc, #616]	; (8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a82:	e001      	b.n	8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003a84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a94:	d004      	beq.n	8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f040 8099 	bne.w	8003bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d107      	bne.n	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f925 	bl	8003d04 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d107      	bne.n	8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f9c8 	bl	8003e64 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	d13a      	bne.n	8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d035      	beq.n	8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a7e      	ldr	r2, [pc, #504]	; (8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d101      	bne.n	8003af6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003af2:	4b7e      	ldr	r3, [pc, #504]	; (8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003af4:	e001      	b.n	8003afa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003af6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4979      	ldr	r1, [pc, #484]	; (8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b02:	428b      	cmp	r3, r1
 8003b04:	d101      	bne.n	8003b0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003b06:	4b79      	ldr	r3, [pc, #484]	; (8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b08:	e001      	b.n	8003b0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003b0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b12:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b22:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	f043 0202 	orr.w	r2, r3, #2
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff fe88 	bl	8003864 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	f040 80be 	bne.w	8003cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80b8 	beq.w	8003cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b7a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a59      	ldr	r2, [pc, #356]	; (8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003b86:	4b59      	ldr	r3, [pc, #356]	; (8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b88:	e001      	b.n	8003b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4954      	ldr	r1, [pc, #336]	; (8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b96:	428b      	cmp	r3, r1
 8003b98:	d101      	bne.n	8003b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003b9a:	4b54      	ldr	r3, [pc, #336]	; (8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b9c:	e001      	b.n	8003ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003b9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ba6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	f043 0204 	orr.w	r2, r3, #4
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff fe4a 	bl	8003864 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003bd0:	e084      	b.n	8003cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d107      	bne.n	8003bec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f8be 	bl	8003d68 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d107      	bne.n	8003c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f8fd 	bl	8003e00 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	2b40      	cmp	r3, #64	; 0x40
 8003c0e:	d12f      	bne.n	8003c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d02a      	beq.n	8003c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c28:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a2e      	ldr	r2, [pc, #184]	; (8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d101      	bne.n	8003c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003c34:	4b2d      	ldr	r3, [pc, #180]	; (8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c36:	e001      	b.n	8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003c38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4929      	ldr	r1, [pc, #164]	; (8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c44:	428b      	cmp	r3, r1
 8003c46:	d101      	bne.n	8003c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003c48:	4b28      	ldr	r3, [pc, #160]	; (8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c4a:	e001      	b.n	8003c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003c4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	f043 0202 	orr.w	r2, r3, #2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff fdfa 	bl	8003864 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d131      	bne.n	8003cde <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d02c      	beq.n	8003cde <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a17      	ldr	r2, [pc, #92]	; (8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d101      	bne.n	8003c92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003c8e:	4b17      	ldr	r3, [pc, #92]	; (8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c90:	e001      	b.n	8003c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003c92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4912      	ldr	r1, [pc, #72]	; (8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c9e:	428b      	cmp	r3, r1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003ca2:	4b12      	ldr	r3, [pc, #72]	; (8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ca4:	e001      	b.n	8003caa <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003ca6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003caa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cbe:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ccc:	f043 0204 	orr.w	r2, r3, #4
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff fdc5 	bl	8003864 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cda:	e000      	b.n	8003cde <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cdc:	bf00      	nop
}
 8003cde:	bf00      	nop
 8003ce0:	3720      	adds	r7, #32
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40003800 	.word	0x40003800
 8003cec:	40003400 	.word	0x40003400

08003cf0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	1c99      	adds	r1, r3, #2
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6251      	str	r1, [r2, #36]	; 0x24
 8003d16:	881a      	ldrh	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d113      	bne.n	8003d5e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d44:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d106      	bne.n	8003d5e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff ffc9 	bl	8003cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	1c99      	adds	r1, r3, #2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6251      	str	r1, [r2, #36]	; 0x24
 8003d7a:	8819      	ldrh	r1, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1d      	ldr	r2, [pc, #116]	; (8003df8 <I2SEx_TxISR_I2SExt+0x90>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d101      	bne.n	8003d8a <I2SEx_TxISR_I2SExt+0x22>
 8003d86:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <I2SEx_TxISR_I2SExt+0x94>)
 8003d88:	e001      	b.n	8003d8e <I2SEx_TxISR_I2SExt+0x26>
 8003d8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d8e:	460a      	mov	r2, r1
 8003d90:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d121      	bne.n	8003dee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a12      	ldr	r2, [pc, #72]	; (8003df8 <I2SEx_TxISR_I2SExt+0x90>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d101      	bne.n	8003db8 <I2SEx_TxISR_I2SExt+0x50>
 8003db4:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <I2SEx_TxISR_I2SExt+0x94>)
 8003db6:	e001      	b.n	8003dbc <I2SEx_TxISR_I2SExt+0x54>
 8003db8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	490d      	ldr	r1, [pc, #52]	; (8003df8 <I2SEx_TxISR_I2SExt+0x90>)
 8003dc4:	428b      	cmp	r3, r1
 8003dc6:	d101      	bne.n	8003dcc <I2SEx_TxISR_I2SExt+0x64>
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <I2SEx_TxISR_I2SExt+0x94>)
 8003dca:	e001      	b.n	8003dd0 <I2SEx_TxISR_I2SExt+0x68>
 8003dcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dd4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d106      	bne.n	8003dee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff ff81 	bl	8003cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40003800 	.word	0x40003800
 8003dfc:	40003400 	.word	0x40003400

08003e00 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68d8      	ldr	r0, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	1c99      	adds	r1, r3, #2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e18:	b282      	uxth	r2, r0
 8003e1a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d113      	bne.n	8003e5c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e42:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff ff4a 	bl	8003cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e5c:	bf00      	nop
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a20      	ldr	r2, [pc, #128]	; (8003ef4 <I2SEx_RxISR_I2SExt+0x90>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d101      	bne.n	8003e7a <I2SEx_RxISR_I2SExt+0x16>
 8003e76:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <I2SEx_RxISR_I2SExt+0x94>)
 8003e78:	e001      	b.n	8003e7e <I2SEx_RxISR_I2SExt+0x1a>
 8003e7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e7e:	68d8      	ldr	r0, [r3, #12]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	1c99      	adds	r1, r3, #2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e8a:	b282      	uxth	r2, r0
 8003e8c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d121      	bne.n	8003eea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a12      	ldr	r2, [pc, #72]	; (8003ef4 <I2SEx_RxISR_I2SExt+0x90>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d101      	bne.n	8003eb4 <I2SEx_RxISR_I2SExt+0x50>
 8003eb0:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <I2SEx_RxISR_I2SExt+0x94>)
 8003eb2:	e001      	b.n	8003eb8 <I2SEx_RxISR_I2SExt+0x54>
 8003eb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	490d      	ldr	r1, [pc, #52]	; (8003ef4 <I2SEx_RxISR_I2SExt+0x90>)
 8003ec0:	428b      	cmp	r3, r1
 8003ec2:	d101      	bne.n	8003ec8 <I2SEx_RxISR_I2SExt+0x64>
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <I2SEx_RxISR_I2SExt+0x94>)
 8003ec6:	e001      	b.n	8003ecc <I2SEx_RxISR_I2SExt+0x68>
 8003ec8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ecc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ed0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d106      	bne.n	8003eea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff ff03 	bl	8003cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40003800 	.word	0x40003800
 8003ef8:	40003400 	.word	0x40003400

08003efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e25b      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d075      	beq.n	8004006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f1a:	4ba3      	ldr	r3, [pc, #652]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d00c      	beq.n	8003f40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f26:	4ba0      	ldr	r3, [pc, #640]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d112      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f32:	4b9d      	ldr	r3, [pc, #628]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f3e:	d10b      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f40:	4b99      	ldr	r3, [pc, #612]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d05b      	beq.n	8004004 <HAL_RCC_OscConfig+0x108>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d157      	bne.n	8004004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e236      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f60:	d106      	bne.n	8003f70 <HAL_RCC_OscConfig+0x74>
 8003f62:	4b91      	ldr	r3, [pc, #580]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a90      	ldr	r2, [pc, #576]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e01d      	b.n	8003fac <HAL_RCC_OscConfig+0xb0>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x98>
 8003f7a:	4b8b      	ldr	r3, [pc, #556]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a8a      	ldr	r2, [pc, #552]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b88      	ldr	r3, [pc, #544]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a87      	ldr	r2, [pc, #540]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e00b      	b.n	8003fac <HAL_RCC_OscConfig+0xb0>
 8003f94:	4b84      	ldr	r3, [pc, #528]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a83      	ldr	r2, [pc, #524]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b81      	ldr	r3, [pc, #516]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a80      	ldr	r2, [pc, #512]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d013      	beq.n	8003fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fd f9ca 	bl	800134c <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fd f9c6 	bl	800134c <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e1fb      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	4b76      	ldr	r3, [pc, #472]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0xc0>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fd f9b6 	bl	800134c <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe4:	f7fd f9b2 	bl	800134c <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	; 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e1e7      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff6:	4b6c      	ldr	r3, [pc, #432]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0xe8>
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d063      	beq.n	80040da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004012:	4b65      	ldr	r3, [pc, #404]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800401e:	4b62      	ldr	r3, [pc, #392]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004026:	2b08      	cmp	r3, #8
 8004028:	d11c      	bne.n	8004064 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402a:	4b5f      	ldr	r3, [pc, #380]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d116      	bne.n	8004064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	4b5c      	ldr	r3, [pc, #368]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_RCC_OscConfig+0x152>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e1bb      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404e:	4b56      	ldr	r3, [pc, #344]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4952      	ldr	r1, [pc, #328]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004062:	e03a      	b.n	80040da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d020      	beq.n	80040ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800406c:	4b4f      	ldr	r3, [pc, #316]	; (80041ac <HAL_RCC_OscConfig+0x2b0>)
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004072:	f7fd f96b 	bl	800134c <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800407a:	f7fd f967 	bl	800134c <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e19c      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408c:	4b46      	ldr	r3, [pc, #280]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b43      	ldr	r3, [pc, #268]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4940      	ldr	r1, [pc, #256]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	600b      	str	r3, [r1, #0]
 80040ac:	e015      	b.n	80040da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ae:	4b3f      	ldr	r3, [pc, #252]	; (80041ac <HAL_RCC_OscConfig+0x2b0>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fd f94a 	bl	800134c <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040bc:	f7fd f946 	bl	800134c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e17b      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ce:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d030      	beq.n	8004148 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d016      	beq.n	800411c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ee:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <HAL_RCC_OscConfig+0x2b4>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fd f92a 	bl	800134c <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040fc:	f7fd f926 	bl	800134c <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e15b      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410e:	4b26      	ldr	r3, [pc, #152]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0x200>
 800411a:	e015      	b.n	8004148 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800411c:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <HAL_RCC_OscConfig+0x2b4>)
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004122:	f7fd f913 	bl	800134c <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800412a:	f7fd f90f 	bl	800134c <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e144      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800413c:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800413e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f0      	bne.n	800412a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80a0 	beq.w	8004296 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004156:	2300      	movs	r3, #0
 8004158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800415a:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10f      	bne.n	8004186 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	4a0e      	ldr	r2, [pc, #56]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004174:	6413      	str	r3, [r2, #64]	; 0x40
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417e:	60bb      	str	r3, [r7, #8]
 8004180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004182:	2301      	movs	r3, #1
 8004184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_RCC_OscConfig+0x2b8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d121      	bne.n	80041d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <HAL_RCC_OscConfig+0x2b8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a07      	ldr	r2, [pc, #28]	; (80041b4 <HAL_RCC_OscConfig+0x2b8>)
 8004198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800419e:	f7fd f8d5 	bl	800134c <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a4:	e011      	b.n	80041ca <HAL_RCC_OscConfig+0x2ce>
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800
 80041ac:	42470000 	.word	0x42470000
 80041b0:	42470e80 	.word	0x42470e80
 80041b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b8:	f7fd f8c8 	bl	800134c <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e0fd      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ca:	4b81      	ldr	r3, [pc, #516]	; (80043d0 <HAL_RCC_OscConfig+0x4d4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d106      	bne.n	80041ec <HAL_RCC_OscConfig+0x2f0>
 80041de:	4b7d      	ldr	r3, [pc, #500]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	4a7c      	ldr	r2, [pc, #496]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ea:	e01c      	b.n	8004226 <HAL_RCC_OscConfig+0x32a>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b05      	cmp	r3, #5
 80041f2:	d10c      	bne.n	800420e <HAL_RCC_OscConfig+0x312>
 80041f4:	4b77      	ldr	r3, [pc, #476]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f8:	4a76      	ldr	r2, [pc, #472]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 80041fa:	f043 0304 	orr.w	r3, r3, #4
 80041fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004200:	4b74      	ldr	r3, [pc, #464]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	4a73      	ldr	r2, [pc, #460]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	6713      	str	r3, [r2, #112]	; 0x70
 800420c:	e00b      	b.n	8004226 <HAL_RCC_OscConfig+0x32a>
 800420e:	4b71      	ldr	r3, [pc, #452]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	4a70      	ldr	r2, [pc, #448]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	6713      	str	r3, [r2, #112]	; 0x70
 800421a:	4b6e      	ldr	r3, [pc, #440]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	4a6d      	ldr	r2, [pc, #436]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 8004220:	f023 0304 	bic.w	r3, r3, #4
 8004224:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d015      	beq.n	800425a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422e:	f7fd f88d 	bl	800134c <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004234:	e00a      	b.n	800424c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004236:	f7fd f889 	bl	800134c <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f241 3288 	movw	r2, #5000	; 0x1388
 8004244:	4293      	cmp	r3, r2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e0bc      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424c:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 800424e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0ee      	beq.n	8004236 <HAL_RCC_OscConfig+0x33a>
 8004258:	e014      	b.n	8004284 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425a:	f7fd f877 	bl	800134c <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004260:	e00a      	b.n	8004278 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004262:	f7fd f873 	bl	800134c <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004270:	4293      	cmp	r3, r2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e0a6      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004278:	4b56      	ldr	r3, [pc, #344]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1ee      	bne.n	8004262 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004284:	7dfb      	ldrb	r3, [r7, #23]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d105      	bne.n	8004296 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800428a:	4b52      	ldr	r3, [pc, #328]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	4a51      	ldr	r2, [pc, #324]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 8004290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004294:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8092 	beq.w	80043c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042a0:	4b4c      	ldr	r3, [pc, #304]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 030c 	and.w	r3, r3, #12
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d05c      	beq.n	8004366 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d141      	bne.n	8004338 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b4:	4b48      	ldr	r3, [pc, #288]	; (80043d8 <HAL_RCC_OscConfig+0x4dc>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ba:	f7fd f847 	bl	800134c <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c2:	f7fd f843 	bl	800134c <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e078      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d4:	4b3f      	ldr	r3, [pc, #252]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1f0      	bne.n	80042c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	019b      	lsls	r3, r3, #6
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	085b      	lsrs	r3, r3, #1
 80042f8:	3b01      	subs	r3, #1
 80042fa:	041b      	lsls	r3, r3, #16
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	061b      	lsls	r3, r3, #24
 8004304:	4933      	ldr	r1, [pc, #204]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 8004306:	4313      	orrs	r3, r2
 8004308:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800430a:	4b33      	ldr	r3, [pc, #204]	; (80043d8 <HAL_RCC_OscConfig+0x4dc>)
 800430c:	2201      	movs	r2, #1
 800430e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004310:	f7fd f81c 	bl	800134c <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004318:	f7fd f818 	bl	800134c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e04d      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432a:	4b2a      	ldr	r3, [pc, #168]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0x41c>
 8004336:	e045      	b.n	80043c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004338:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <HAL_RCC_OscConfig+0x4dc>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433e:	f7fd f805 	bl	800134c <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004346:	f7fd f801 	bl	800134c <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e036      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004358:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f0      	bne.n	8004346 <HAL_RCC_OscConfig+0x44a>
 8004364:	e02e      	b.n	80043c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e029      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004372:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	429a      	cmp	r2, r3
 8004384:	d11c      	bne.n	80043c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004390:	429a      	cmp	r2, r3
 8004392:	d115      	bne.n	80043c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800439a:	4013      	ands	r3, r2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d10d      	bne.n	80043c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d106      	bne.n	80043c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043bc:	429a      	cmp	r2, r3
 80043be:	d001      	beq.n	80043c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40007000 	.word	0x40007000
 80043d4:	40023800 	.word	0x40023800
 80043d8:	42470060 	.word	0x42470060

080043dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0cc      	b.n	800458a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043f0:	4b68      	ldr	r3, [pc, #416]	; (8004594 <HAL_RCC_ClockConfig+0x1b8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d90c      	bls.n	8004418 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fe:	4b65      	ldr	r3, [pc, #404]	; (8004594 <HAL_RCC_ClockConfig+0x1b8>)
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004406:	4b63      	ldr	r3, [pc, #396]	; (8004594 <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0b8      	b.n	800458a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d020      	beq.n	8004466 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004430:	4b59      	ldr	r3, [pc, #356]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	4a58      	ldr	r2, [pc, #352]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800443a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004448:	4b53      	ldr	r3, [pc, #332]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	4a52      	ldr	r2, [pc, #328]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004452:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004454:	4b50      	ldr	r3, [pc, #320]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	494d      	ldr	r1, [pc, #308]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	4313      	orrs	r3, r2
 8004464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d044      	beq.n	80044fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d107      	bne.n	800448a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	4b47      	ldr	r3, [pc, #284]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d119      	bne.n	80044ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e07f      	b.n	800458a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b02      	cmp	r3, #2
 8004490:	d003      	beq.n	800449a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004496:	2b03      	cmp	r3, #3
 8004498:	d107      	bne.n	80044aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449a:	4b3f      	ldr	r3, [pc, #252]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e06f      	b.n	800458a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044aa:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e067      	b.n	800458a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ba:	4b37      	ldr	r3, [pc, #220]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f023 0203 	bic.w	r2, r3, #3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	4934      	ldr	r1, [pc, #208]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044cc:	f7fc ff3e 	bl	800134c <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d4:	f7fc ff3a 	bl	800134c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e04f      	b.n	800458a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ea:	4b2b      	ldr	r3, [pc, #172]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 020c 	and.w	r2, r3, #12
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d1eb      	bne.n	80044d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044fc:	4b25      	ldr	r3, [pc, #148]	; (8004594 <HAL_RCC_ClockConfig+0x1b8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d20c      	bcs.n	8004524 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b22      	ldr	r3, [pc, #136]	; (8004594 <HAL_RCC_ClockConfig+0x1b8>)
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004512:	4b20      	ldr	r3, [pc, #128]	; (8004594 <HAL_RCC_ClockConfig+0x1b8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d001      	beq.n	8004524 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e032      	b.n	800458a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d008      	beq.n	8004542 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004530:	4b19      	ldr	r3, [pc, #100]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4916      	ldr	r1, [pc, #88]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	4313      	orrs	r3, r2
 8004540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800454e:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	490e      	ldr	r1, [pc, #56]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	4313      	orrs	r3, r2
 8004560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004562:	f000 f821 	bl	80045a8 <HAL_RCC_GetSysClockFreq>
 8004566:	4601      	mov	r1, r0
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	4a0a      	ldr	r2, [pc, #40]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 8004574:	5cd3      	ldrb	r3, [r2, r3]
 8004576:	fa21 f303 	lsr.w	r3, r1, r3
 800457a:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800457c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800457e:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f7fc fe9e 	bl	80012c4 <HAL_InitTick>

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40023c00 	.word	0x40023c00
 8004598:	40023800 	.word	0x40023800
 800459c:	08008c04 	.word	0x08008c04
 80045a0:	20000004 	.word	0x20000004
 80045a4:	20000008 	.word	0x20000008

080045a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	2300      	movs	r3, #0
 80045b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045be:	4b63      	ldr	r3, [pc, #396]	; (800474c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d007      	beq.n	80045da <HAL_RCC_GetSysClockFreq+0x32>
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d008      	beq.n	80045e0 <HAL_RCC_GetSysClockFreq+0x38>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f040 80b4 	bne.w	800473c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045d4:	4b5e      	ldr	r3, [pc, #376]	; (8004750 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80045d6:	60bb      	str	r3, [r7, #8]
       break;
 80045d8:	e0b3      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045da:	4b5e      	ldr	r3, [pc, #376]	; (8004754 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80045dc:	60bb      	str	r3, [r7, #8]
      break;
 80045de:	e0b0      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045e0:	4b5a      	ldr	r3, [pc, #360]	; (800474c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045ea:	4b58      	ldr	r3, [pc, #352]	; (800474c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d04a      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f6:	4b55      	ldr	r3, [pc, #340]	; (800474c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	099b      	lsrs	r3, r3, #6
 80045fc:	f04f 0400 	mov.w	r4, #0
 8004600:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	ea03 0501 	and.w	r5, r3, r1
 800460c:	ea04 0602 	and.w	r6, r4, r2
 8004610:	4629      	mov	r1, r5
 8004612:	4632      	mov	r2, r6
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	f04f 0400 	mov.w	r4, #0
 800461c:	0154      	lsls	r4, r2, #5
 800461e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004622:	014b      	lsls	r3, r1, #5
 8004624:	4619      	mov	r1, r3
 8004626:	4622      	mov	r2, r4
 8004628:	1b49      	subs	r1, r1, r5
 800462a:	eb62 0206 	sbc.w	r2, r2, r6
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	f04f 0400 	mov.w	r4, #0
 8004636:	0194      	lsls	r4, r2, #6
 8004638:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800463c:	018b      	lsls	r3, r1, #6
 800463e:	1a5b      	subs	r3, r3, r1
 8004640:	eb64 0402 	sbc.w	r4, r4, r2
 8004644:	f04f 0100 	mov.w	r1, #0
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	00e2      	lsls	r2, r4, #3
 800464e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004652:	00d9      	lsls	r1, r3, #3
 8004654:	460b      	mov	r3, r1
 8004656:	4614      	mov	r4, r2
 8004658:	195b      	adds	r3, r3, r5
 800465a:	eb44 0406 	adc.w	r4, r4, r6
 800465e:	f04f 0100 	mov.w	r1, #0
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	0262      	lsls	r2, r4, #9
 8004668:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800466c:	0259      	lsls	r1, r3, #9
 800466e:	460b      	mov	r3, r1
 8004670:	4614      	mov	r4, r2
 8004672:	4618      	mov	r0, r3
 8004674:	4621      	mov	r1, r4
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f04f 0400 	mov.w	r4, #0
 800467c:	461a      	mov	r2, r3
 800467e:	4623      	mov	r3, r4
 8004680:	f7fb fdaa 	bl	80001d8 <__aeabi_uldivmod>
 8004684:	4603      	mov	r3, r0
 8004686:	460c      	mov	r4, r1
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	e049      	b.n	8004720 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800468c:	4b2f      	ldr	r3, [pc, #188]	; (800474c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	099b      	lsrs	r3, r3, #6
 8004692:	f04f 0400 	mov.w	r4, #0
 8004696:	f240 11ff 	movw	r1, #511	; 0x1ff
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	ea03 0501 	and.w	r5, r3, r1
 80046a2:	ea04 0602 	and.w	r6, r4, r2
 80046a6:	4629      	mov	r1, r5
 80046a8:	4632      	mov	r2, r6
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	f04f 0400 	mov.w	r4, #0
 80046b2:	0154      	lsls	r4, r2, #5
 80046b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80046b8:	014b      	lsls	r3, r1, #5
 80046ba:	4619      	mov	r1, r3
 80046bc:	4622      	mov	r2, r4
 80046be:	1b49      	subs	r1, r1, r5
 80046c0:	eb62 0206 	sbc.w	r2, r2, r6
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	f04f 0400 	mov.w	r4, #0
 80046cc:	0194      	lsls	r4, r2, #6
 80046ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046d2:	018b      	lsls	r3, r1, #6
 80046d4:	1a5b      	subs	r3, r3, r1
 80046d6:	eb64 0402 	sbc.w	r4, r4, r2
 80046da:	f04f 0100 	mov.w	r1, #0
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	00e2      	lsls	r2, r4, #3
 80046e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046e8:	00d9      	lsls	r1, r3, #3
 80046ea:	460b      	mov	r3, r1
 80046ec:	4614      	mov	r4, r2
 80046ee:	195b      	adds	r3, r3, r5
 80046f0:	eb44 0406 	adc.w	r4, r4, r6
 80046f4:	f04f 0100 	mov.w	r1, #0
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	02a2      	lsls	r2, r4, #10
 80046fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004702:	0299      	lsls	r1, r3, #10
 8004704:	460b      	mov	r3, r1
 8004706:	4614      	mov	r4, r2
 8004708:	4618      	mov	r0, r3
 800470a:	4621      	mov	r1, r4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f04f 0400 	mov.w	r4, #0
 8004712:	461a      	mov	r2, r3
 8004714:	4623      	mov	r3, r4
 8004716:	f7fb fd5f 	bl	80001d8 <__aeabi_uldivmod>
 800471a:	4603      	mov	r3, r0
 800471c:	460c      	mov	r4, r1
 800471e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	0c1b      	lsrs	r3, r3, #16
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	3301      	adds	r3, #1
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	60bb      	str	r3, [r7, #8]
      break;
 800473a:	e002      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800473c:	4b04      	ldr	r3, [pc, #16]	; (8004750 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800473e:	60bb      	str	r3, [r7, #8]
      break;
 8004740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004742:	68bb      	ldr	r3, [r7, #8]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800474c:	40023800 	.word	0x40023800
 8004750:	00f42400 	.word	0x00f42400
 8004754:	007a1200 	.word	0x007a1200

08004758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800475c:	4b03      	ldr	r3, [pc, #12]	; (800476c <HAL_RCC_GetHCLKFreq+0x14>)
 800475e:	681b      	ldr	r3, [r3, #0]
}
 8004760:	4618      	mov	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	20000004 	.word	0x20000004

08004770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004774:	f7ff fff0 	bl	8004758 <HAL_RCC_GetHCLKFreq>
 8004778:	4601      	mov	r1, r0
 800477a:	4b05      	ldr	r3, [pc, #20]	; (8004790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	0a9b      	lsrs	r3, r3, #10
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	4a03      	ldr	r2, [pc, #12]	; (8004794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004786:	5cd3      	ldrb	r3, [r2, r3]
 8004788:	fa21 f303 	lsr.w	r3, r1, r3
}
 800478c:	4618      	mov	r0, r3
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40023800 	.word	0x40023800
 8004794:	08008c14 	.word	0x08008c14

08004798 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d105      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d038      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047c0:	4b68      	ldr	r3, [pc, #416]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047c6:	f7fc fdc1 	bl	800134c <HAL_GetTick>
 80047ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047cc:	e008      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047ce:	f7fc fdbd 	bl	800134c <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e0bd      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047e0:	4b61      	ldr	r3, [pc, #388]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f0      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	019b      	lsls	r3, r3, #6
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	071b      	lsls	r3, r3, #28
 80047fe:	495a      	ldr	r1, [pc, #360]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004806:	4b57      	ldr	r3, [pc, #348]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004808:	2201      	movs	r2, #1
 800480a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800480c:	f7fc fd9e 	bl	800134c <HAL_GetTick>
 8004810:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004814:	f7fc fd9a 	bl	800134c <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e09a      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004826:	4b50      	ldr	r3, [pc, #320]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 8083 	beq.w	8004946 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	4b48      	ldr	r3, [pc, #288]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	4a47      	ldr	r2, [pc, #284]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800484e:	6413      	str	r3, [r2, #64]	; 0x40
 8004850:	4b45      	ldr	r3, [pc, #276]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800485c:	4b43      	ldr	r3, [pc, #268]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a42      	ldr	r2, [pc, #264]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004866:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004868:	f7fc fd70 	bl	800134c <HAL_GetTick>
 800486c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004870:	f7fc fd6c 	bl	800134c <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e06c      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004882:	4b3a      	ldr	r3, [pc, #232]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800488e:	4b36      	ldr	r3, [pc, #216]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004896:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d02f      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x166>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d028      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048ac:	4b2e      	ldr	r3, [pc, #184]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048b6:	4b2e      	ldr	r3, [pc, #184]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048bc:	4b2c      	ldr	r3, [pc, #176]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80048c2:	4a29      	ldr	r2, [pc, #164]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048c8:	4b27      	ldr	r3, [pc, #156]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d114      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80048d4:	f7fc fd3a 	bl	800134c <HAL_GetTick>
 80048d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048da:	e00a      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048dc:	f7fc fd36 	bl	800134c <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e034      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f2:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0ee      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800490a:	d10d      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800490c:	4b16      	ldr	r3, [pc, #88]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800491c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004920:	4911      	ldr	r1, [pc, #68]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004922:	4313      	orrs	r3, r2
 8004924:	608b      	str	r3, [r1, #8]
 8004926:	e005      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004928:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a0e      	ldr	r2, [pc, #56]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800492e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004932:	6093      	str	r3, [r2, #8]
 8004934:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004936:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004940:	4909      	ldr	r1, [pc, #36]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004942:	4313      	orrs	r3, r2
 8004944:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	7d1a      	ldrb	r2, [r3, #20]
 8004956:	4b07      	ldr	r3, [pc, #28]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004958:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	42470068 	.word	0x42470068
 8004968:	40023800 	.word	0x40023800
 800496c:	40007000 	.word	0x40007000
 8004970:	42470e40 	.word	0x42470e40
 8004974:	424711e0 	.word	0x424711e0

08004978 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d13f      	bne.n	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004996:	4b23      	ldr	r3, [pc, #140]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800499e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d004      	beq.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d131      	bne.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80049aa:	4b1f      	ldr	r3, [pc, #124]	; (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049ac:	617b      	str	r3, [r7, #20]
          break;
 80049ae:	e031      	b.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80049b0:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049bc:	d109      	bne.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80049be:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c8:	4a18      	ldr	r2, [pc, #96]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80049ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	e008      	b.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80049d2:	4b14      	ldr	r3, [pc, #80]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049dc:	4a14      	ldr	r2, [pc, #80]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80049de:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e2:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80049e4:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ea:	099b      	lsrs	r3, r3, #6
 80049ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	fb02 f303 	mul.w	r3, r2, r3
 80049f6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80049f8:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049fe:	0f1b      	lsrs	r3, r3, #28
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0a:	617b      	str	r3, [r7, #20]
          break;
 8004a0c:	e002      	b.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
          break;
 8004a12:	bf00      	nop
        }
      }
      break;
 8004a14:	bf00      	nop
    }
  }
  return frequency;
 8004a16:	697b      	ldr	r3, [r7, #20]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	40023800 	.word	0x40023800
 8004a28:	00bb8000 	.word	0x00bb8000
 8004a2c:	007a1200 	.word	0x007a1200
 8004a30:	00f42400 	.word	0x00f42400

08004a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e056      	b.n	8004af4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d106      	bne.n	8004a66 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7fc fa9b 	bl	8000f9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a7c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	ea42 0103 	orr.w	r1, r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	0c1b      	lsrs	r3, r3, #16
 8004ac4:	f003 0104 	and.w	r1, r3, #4
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69da      	ldr	r2, [r3, #28]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ae2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e01d      	b.n	8004b4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fc fa82 	bl	800102c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3304      	adds	r3, #4
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	f000 fb2a 	bl	8005194 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e01d      	b.n	8004ba0 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d106      	bne.n	8004b7e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f815 	bl	8004ba8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2202      	movs	r2, #2
 8004b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4610      	mov	r0, r2
 8004b92:	f000 faff 	bl	8005194 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b0c      	cmp	r3, #12
 8004bca:	d841      	bhi.n	8004c50 <HAL_TIM_IC_Start_IT+0x94>
 8004bcc:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <HAL_TIM_IC_Start_IT+0x18>)
 8004bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd2:	bf00      	nop
 8004bd4:	08004c09 	.word	0x08004c09
 8004bd8:	08004c51 	.word	0x08004c51
 8004bdc:	08004c51 	.word	0x08004c51
 8004be0:	08004c51 	.word	0x08004c51
 8004be4:	08004c1b 	.word	0x08004c1b
 8004be8:	08004c51 	.word	0x08004c51
 8004bec:	08004c51 	.word	0x08004c51
 8004bf0:	08004c51 	.word	0x08004c51
 8004bf4:	08004c2d 	.word	0x08004c2d
 8004bf8:	08004c51 	.word	0x08004c51
 8004bfc:	08004c51 	.word	0x08004c51
 8004c00:	08004c51 	.word	0x08004c51
 8004c04:	08004c3f 	.word	0x08004c3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0202 	orr.w	r2, r2, #2
 8004c16:	60da      	str	r2, [r3, #12]
      break;
 8004c18:	e01b      	b.n	8004c52 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0204 	orr.w	r2, r2, #4
 8004c28:	60da      	str	r2, [r3, #12]
      break;
 8004c2a:	e012      	b.n	8004c52 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0208 	orr.w	r2, r2, #8
 8004c3a:	60da      	str	r2, [r3, #12]
      break;
 8004c3c:	e009      	b.n	8004c52 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0210 	orr.w	r2, r2, #16
 8004c4c:	60da      	str	r2, [r3, #12]
      break;
 8004c4e:	e000      	b.n	8004c52 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004c50:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2201      	movs	r2, #1
 8004c58:	6839      	ldr	r1, [r7, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fcd2 	bl	8005604 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b06      	cmp	r3, #6
 8004c70:	d007      	beq.n	8004c82 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0201 	orr.w	r2, r2, #1
 8004c80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d122      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d11b      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0202 	mvn.w	r2, #2
 8004cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fb fc02 	bl	80004d8 <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e005      	b.n	8004ce2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fa3d 	bl	8005156 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fa44 	bl	800516a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d122      	bne.n	8004d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d11b      	bne.n	8004d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0204 	mvn.w	r2, #4
 8004d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2202      	movs	r2, #2
 8004d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fb fbd8 	bl	80004d8 <HAL_TIM_IC_CaptureCallback>
 8004d28:	e005      	b.n	8004d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fa13 	bl	8005156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fa1a 	bl	800516a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d122      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d11b      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0208 	mvn.w	r2, #8
 8004d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2204      	movs	r2, #4
 8004d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fb fbae 	bl	80004d8 <HAL_TIM_IC_CaptureCallback>
 8004d7c:	e005      	b.n	8004d8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9e9 	bl	8005156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f9f0 	bl	800516a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	2b10      	cmp	r3, #16
 8004d9c:	d122      	bne.n	8004de4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d11b      	bne.n	8004de4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0210 	mvn.w	r2, #16
 8004db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2208      	movs	r2, #8
 8004dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fb fb84 	bl	80004d8 <HAL_TIM_IC_CaptureCallback>
 8004dd0:	e005      	b.n	8004dde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f9bf 	bl	8005156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f9c6 	bl	800516a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d10e      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d107      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0201 	mvn.w	r2, #1
 8004e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f999 	bl	8005142 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1a:	2b80      	cmp	r3, #128	; 0x80
 8004e1c:	d10e      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e28:	2b80      	cmp	r3, #128	; 0x80
 8004e2a:	d107      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fc82 	bl	8005740 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e46:	2b40      	cmp	r3, #64	; 0x40
 8004e48:	d10e      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e54:	2b40      	cmp	r3, #64	; 0x40
 8004e56:	d107      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f98b 	bl	800517e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d10e      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	d107      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0220 	mvn.w	r2, #32
 8004e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fc4c 	bl	800572c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e08a      	b.n	8004fcc <HAL_TIM_IC_ConfigChannel+0x130>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d11b      	bne.n	8004f04 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	6819      	ldr	r1, [r3, #0]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f000 f9da 	bl	8005294 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 020c 	bic.w	r2, r2, #12
 8004eee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6999      	ldr	r1, [r3, #24]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	619a      	str	r2, [r3, #24]
 8004f02:	e05a      	b.n	8004fba <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d11c      	bne.n	8004f44 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	6819      	ldr	r1, [r3, #0]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f000 fa52 	bl	80053c2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6999      	ldr	r1, [r3, #24]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	021a      	lsls	r2, r3, #8
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	619a      	str	r2, [r3, #24]
 8004f42:	e03a      	b.n	8004fba <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d11b      	bne.n	8004f82 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	6819      	ldr	r1, [r3, #0]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f000 fa9f 	bl	800549c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 020c 	bic.w	r2, r2, #12
 8004f6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69d9      	ldr	r1, [r3, #28]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	61da      	str	r2, [r3, #28]
 8004f80:	e01b      	b.n	8004fba <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	6819      	ldr	r1, [r3, #0]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f000 fabf 	bl	8005514 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004fa4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69d9      	ldr	r1, [r3, #28]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	021a      	lsls	r2, r3, #8
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_TIM_ConfigClockSource+0x18>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e0a6      	b.n	800513a <HAL_TIM_ConfigClockSource+0x166>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800500a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005012:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d067      	beq.n	80050f4 <HAL_TIM_ConfigClockSource+0x120>
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d80b      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x6c>
 8005028:	2b10      	cmp	r3, #16
 800502a:	d073      	beq.n	8005114 <HAL_TIM_ConfigClockSource+0x140>
 800502c:	2b10      	cmp	r3, #16
 800502e:	d802      	bhi.n	8005036 <HAL_TIM_ConfigClockSource+0x62>
 8005030:	2b00      	cmp	r3, #0
 8005032:	d06f      	beq.n	8005114 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005034:	e078      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005036:	2b20      	cmp	r3, #32
 8005038:	d06c      	beq.n	8005114 <HAL_TIM_ConfigClockSource+0x140>
 800503a:	2b30      	cmp	r3, #48	; 0x30
 800503c:	d06a      	beq.n	8005114 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800503e:	e073      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005040:	2b70      	cmp	r3, #112	; 0x70
 8005042:	d00d      	beq.n	8005060 <HAL_TIM_ConfigClockSource+0x8c>
 8005044:	2b70      	cmp	r3, #112	; 0x70
 8005046:	d804      	bhi.n	8005052 <HAL_TIM_ConfigClockSource+0x7e>
 8005048:	2b50      	cmp	r3, #80	; 0x50
 800504a:	d033      	beq.n	80050b4 <HAL_TIM_ConfigClockSource+0xe0>
 800504c:	2b60      	cmp	r3, #96	; 0x60
 800504e:	d041      	beq.n	80050d4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005050:	e06a      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005056:	d066      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x152>
 8005058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800505c:	d017      	beq.n	800508e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800505e:	e063      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	6899      	ldr	r1, [r3, #8]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f000 faa8 	bl	80055c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005082:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	609a      	str	r2, [r3, #8]
      break;
 800508c:	e04c      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	6899      	ldr	r1, [r3, #8]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f000 fa91 	bl	80055c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050b0:	609a      	str	r2, [r3, #8]
      break;
 80050b2:	e039      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6818      	ldr	r0, [r3, #0]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	6859      	ldr	r1, [r3, #4]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	461a      	mov	r2, r3
 80050c2:	f000 f94f 	bl	8005364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2150      	movs	r1, #80	; 0x50
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fa5e 	bl	800558e <TIM_ITRx_SetConfig>
      break;
 80050d2:	e029      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6818      	ldr	r0, [r3, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	6859      	ldr	r1, [r3, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	461a      	mov	r2, r3
 80050e2:	f000 f9ab 	bl	800543c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2160      	movs	r1, #96	; 0x60
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 fa4e 	bl	800558e <TIM_ITRx_SetConfig>
      break;
 80050f2:	e019      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	6859      	ldr	r1, [r3, #4]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	461a      	mov	r2, r3
 8005102:	f000 f92f 	bl	8005364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2140      	movs	r1, #64	; 0x40
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fa3e 	bl	800558e <TIM_ITRx_SetConfig>
      break;
 8005112:	e009      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f000 fa35 	bl	800558e <TIM_ITRx_SetConfig>
      break;
 8005124:	e000      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005126:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
	...

08005194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a34      	ldr	r2, [pc, #208]	; (8005278 <TIM_Base_SetConfig+0xe4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00f      	beq.n	80051cc <TIM_Base_SetConfig+0x38>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b2:	d00b      	beq.n	80051cc <TIM_Base_SetConfig+0x38>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a31      	ldr	r2, [pc, #196]	; (800527c <TIM_Base_SetConfig+0xe8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d007      	beq.n	80051cc <TIM_Base_SetConfig+0x38>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a30      	ldr	r2, [pc, #192]	; (8005280 <TIM_Base_SetConfig+0xec>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d003      	beq.n	80051cc <TIM_Base_SetConfig+0x38>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a2f      	ldr	r2, [pc, #188]	; (8005284 <TIM_Base_SetConfig+0xf0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d108      	bne.n	80051de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a25      	ldr	r2, [pc, #148]	; (8005278 <TIM_Base_SetConfig+0xe4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d01b      	beq.n	800521e <TIM_Base_SetConfig+0x8a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ec:	d017      	beq.n	800521e <TIM_Base_SetConfig+0x8a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a22      	ldr	r2, [pc, #136]	; (800527c <TIM_Base_SetConfig+0xe8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d013      	beq.n	800521e <TIM_Base_SetConfig+0x8a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a21      	ldr	r2, [pc, #132]	; (8005280 <TIM_Base_SetConfig+0xec>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00f      	beq.n	800521e <TIM_Base_SetConfig+0x8a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a20      	ldr	r2, [pc, #128]	; (8005284 <TIM_Base_SetConfig+0xf0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00b      	beq.n	800521e <TIM_Base_SetConfig+0x8a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a1f      	ldr	r2, [pc, #124]	; (8005288 <TIM_Base_SetConfig+0xf4>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d007      	beq.n	800521e <TIM_Base_SetConfig+0x8a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a1e      	ldr	r2, [pc, #120]	; (800528c <TIM_Base_SetConfig+0xf8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d003      	beq.n	800521e <TIM_Base_SetConfig+0x8a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a1d      	ldr	r2, [pc, #116]	; (8005290 <TIM_Base_SetConfig+0xfc>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d108      	bne.n	8005230 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a08      	ldr	r2, [pc, #32]	; (8005278 <TIM_Base_SetConfig+0xe4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d103      	bne.n	8005264 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	615a      	str	r2, [r3, #20]
}
 800526a:	bf00      	nop
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40010000 	.word	0x40010000
 800527c:	40000400 	.word	0x40000400
 8005280:	40000800 	.word	0x40000800
 8005284:	40000c00 	.word	0x40000c00
 8005288:	40014000 	.word	0x40014000
 800528c:	40014400 	.word	0x40014400
 8005290:	40014800 	.word	0x40014800

08005294 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	f023 0201 	bic.w	r2, r3, #1
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4a24      	ldr	r2, [pc, #144]	; (8005350 <TIM_TI1_SetConfig+0xbc>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d013      	beq.n	80052ea <TIM_TI1_SetConfig+0x56>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c8:	d00f      	beq.n	80052ea <TIM_TI1_SetConfig+0x56>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4a21      	ldr	r2, [pc, #132]	; (8005354 <TIM_TI1_SetConfig+0xc0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00b      	beq.n	80052ea <TIM_TI1_SetConfig+0x56>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4a20      	ldr	r2, [pc, #128]	; (8005358 <TIM_TI1_SetConfig+0xc4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d007      	beq.n	80052ea <TIM_TI1_SetConfig+0x56>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4a1f      	ldr	r2, [pc, #124]	; (800535c <TIM_TI1_SetConfig+0xc8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d003      	beq.n	80052ea <TIM_TI1_SetConfig+0x56>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4a1e      	ldr	r2, [pc, #120]	; (8005360 <TIM_TI1_SetConfig+0xcc>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d101      	bne.n	80052ee <TIM_TI1_SetConfig+0x5a>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <TIM_TI1_SetConfig+0x5c>
 80052ee:	2300      	movs	r3, #0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d008      	beq.n	8005306 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f023 0303 	bic.w	r3, r3, #3
 80052fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4313      	orrs	r3, r2
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	e003      	b.n	800530e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005314:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	b2db      	uxtb	r3, r3
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f023 030a 	bic.w	r3, r3, #10
 8005328:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f003 030a 	and.w	r3, r3, #10
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	621a      	str	r2, [r3, #32]
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40010000 	.word	0x40010000
 8005354:	40000400 	.word	0x40000400
 8005358:	40000800 	.word	0x40000800
 800535c:	40000c00 	.word	0x40000c00
 8005360:	40014000 	.word	0x40014000

08005364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	f023 0201 	bic.w	r2, r3, #1
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800538e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f023 030a 	bic.w	r3, r3, #10
 80053a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	621a      	str	r2, [r3, #32]
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b087      	sub	sp, #28
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	f023 0210 	bic.w	r2, r3, #16
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005400:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	031b      	lsls	r3, r3, #12
 8005406:	b29b      	uxth	r3, r3
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005414:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	621a      	str	r2, [r3, #32]
}
 8005430:	bf00      	nop
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	f023 0210 	bic.w	r2, r3, #16
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005466:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	031b      	lsls	r3, r3, #12
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005478:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	621a      	str	r2, [r3, #32]
}
 8005490:	bf00      	nop
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 0303 	bic.w	r3, r3, #3
 80054c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80054ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	621a      	str	r2, [r3, #32]
}
 8005508:	bf00      	nop
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005540:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	021b      	lsls	r3, r3, #8
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005552:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	031b      	lsls	r3, r3, #12
 8005558:	b29b      	uxth	r3, r3
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005566:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	031b      	lsls	r3, r3, #12
 800556c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800558e:	b480      	push	{r7}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f043 0307 	orr.w	r3, r3, #7
 80055b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	609a      	str	r2, [r3, #8]
}
 80055b8:	bf00      	nop
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	021a      	lsls	r2, r3, #8
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	609a      	str	r2, [r3, #8]
}
 80055f8:	bf00      	nop
 80055fa:	371c      	adds	r7, #28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	2201      	movs	r2, #1
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a1a      	ldr	r2, [r3, #32]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	43db      	mvns	r3, r3
 8005626:	401a      	ands	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a1a      	ldr	r2, [r3, #32]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f003 031f 	and.w	r3, r3, #31
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	fa01 f303 	lsl.w	r3, r1, r3
 800563c:	431a      	orrs	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	621a      	str	r2, [r3, #32]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
	...

08005650 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005664:	2302      	movs	r3, #2
 8005666:	e050      	b.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1c      	ldr	r2, [pc, #112]	; (8005718 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d018      	beq.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b4:	d013      	beq.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a18      	ldr	r2, [pc, #96]	; (800571c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00e      	beq.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a16      	ldr	r2, [pc, #88]	; (8005720 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d009      	beq.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a15      	ldr	r2, [pc, #84]	; (8005724 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d004      	beq.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a13      	ldr	r2, [pc, #76]	; (8005728 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d10c      	bne.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40010000 	.word	0x40010000
 800571c:	40000400 	.word	0x40000400
 8005720:	40000800 	.word	0x40000800
 8005724:	40000c00 	.word	0x40000c00
 8005728:	40014000 	.word	0x40014000

0800572c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005754:	b084      	sub	sp, #16
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	f107 001c 	add.w	r0, r7, #28
 8005762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	2b01      	cmp	r3, #1
 800576a:	d122      	bne.n	80057b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005796:	2b01      	cmp	r3, #1
 8005798:	d105      	bne.n	80057a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f94a 	bl	8005a40 <USB_CoreReset>
 80057ac:	4603      	mov	r3, r0
 80057ae:	73fb      	strb	r3, [r7, #15]
 80057b0:	e01a      	b.n	80057e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f93e 	bl	8005a40 <USB_CoreReset>
 80057c4:	4603      	mov	r3, r0
 80057c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d106      	bne.n	80057dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	639a      	str	r2, [r3, #56]	; 0x38
 80057da:	e005      	b.n	80057e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d10b      	bne.n	8005806 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f043 0206 	orr.w	r2, r3, #6
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f043 0220 	orr.w	r2, r3, #32
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005806:	7bfb      	ldrb	r3, [r7, #15]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005812:	b004      	add	sp, #16
 8005814:	4770      	bx	lr

08005816 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f043 0201 	orr.w	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f023 0201 	bic.w	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b082      	sub	sp, #8
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	460b      	mov	r3, r1
 8005864:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d106      	bne.n	8005886 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	60da      	str	r2, [r3, #12]
 8005884:	e00b      	b.n	800589e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005886:	78fb      	ldrb	r3, [r7, #3]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	60da      	str	r2, [r3, #12]
 8005898:	e001      	b.n	800589e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e003      	b.n	80058a6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800589e:	2032      	movs	r0, #50	; 0x32
 80058a0:	f7fb fd60 	bl	8001364 <HAL_Delay>

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	019b      	lsls	r3, r3, #6
 80058c2:	f043 0220 	orr.w	r2, r3, #32
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3301      	adds	r3, #1
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4a09      	ldr	r2, [pc, #36]	; (80058f8 <USB_FlushTxFifo+0x48>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d901      	bls.n	80058dc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e006      	b.n	80058ea <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d0f0      	beq.n	80058ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	00030d40 	.word	0x00030d40

080058fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2210      	movs	r2, #16
 800590c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3301      	adds	r3, #1
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4a09      	ldr	r2, [pc, #36]	; (800593c <USB_FlushRxFifo+0x40>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d901      	bls.n	8005920 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e006      	b.n	800592e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f003 0310 	and.w	r3, r3, #16
 8005928:	2b10      	cmp	r3, #16
 800592a:	d0f0      	beq.n	800590e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	00030d40 	.word	0x00030d40

08005940 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	; 0x24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	4611      	mov	r1, r2
 800594c:	461a      	mov	r2, r3
 800594e:	460b      	mov	r3, r1
 8005950:	71fb      	strb	r3, [r7, #7]
 8005952:	4613      	mov	r3, r2
 8005954:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800595e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	d11a      	bne.n	800599c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005966:	88bb      	ldrh	r3, [r7, #4]
 8005968:	3303      	adds	r3, #3
 800596a:	089b      	lsrs	r3, r3, #2
 800596c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800596e:	2300      	movs	r3, #0
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	e00f      	b.n	8005994 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005974:	79fb      	ldrb	r3, [r7, #7]
 8005976:	031a      	lsls	r2, r3, #12
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	4413      	add	r3, r2
 800597c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005980:	461a      	mov	r2, r3
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	3304      	adds	r3, #4
 800598c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	3301      	adds	r3, #1
 8005992:	61bb      	str	r3, [r7, #24]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	429a      	cmp	r2, r3
 800599a:	d3eb      	bcc.n	8005974 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3724      	adds	r7, #36	; 0x24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b089      	sub	sp, #36	; 0x24
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	4613      	mov	r3, r2
 80059b6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80059c0:	88fb      	ldrh	r3, [r7, #6]
 80059c2:	3303      	adds	r3, #3
 80059c4:	089b      	lsrs	r3, r3, #2
 80059c6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80059c8:	2300      	movs	r3, #0
 80059ca:	61bb      	str	r3, [r7, #24]
 80059cc:	e00b      	b.n	80059e6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	601a      	str	r2, [r3, #0]
    pDest++;
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	3304      	adds	r3, #4
 80059de:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	3301      	adds	r3, #1
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d3ef      	bcc.n	80059ce <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80059ee:	69fb      	ldr	r3, [r7, #28]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3724      	adds	r7, #36	; 0x24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4013      	ands	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a14:	68fb      	ldr	r3, [r7, #12]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
	...

08005a40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4a13      	ldr	r2, [pc, #76]	; (8005aa4 <USB_CoreReset+0x64>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d901      	bls.n	8005a5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e01b      	b.n	8005a96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	daf2      	bge.n	8005a4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f043 0201 	orr.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <USB_CoreReset+0x64>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d901      	bls.n	8005a88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e006      	b.n	8005a96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d0f0      	beq.n	8005a76 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	00030d40 	.word	0x00030d40

08005aa8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	f107 001c 	add.w	r0, r7, #28
 8005ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d018      	beq.n	8005b2c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d10a      	bne.n	8005b16 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b0e:	f043 0304 	orr.w	r3, r3, #4
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	e014      	b.n	8005b40 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b24:	f023 0304 	bic.w	r3, r3, #4
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	e009      	b.n	8005b40 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b3a:	f023 0304 	bic.w	r3, r3, #4
 8005b3e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005b40:	2110      	movs	r1, #16
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff feb4 	bl	80058b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff fed7 	bl	80058fc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	e015      	b.n	8005b80 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b60:	461a      	mov	r2, r3
 8005b62:	f04f 33ff 	mov.w	r3, #4294967295
 8005b66:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b74:	461a      	mov	r2, r3
 8005b76:	2300      	movs	r3, #0
 8005b78:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d3e5      	bcc.n	8005b54 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005b88:	2101      	movs	r1, #1
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f8ac 	bl	8005ce8 <USB_DriveVbus>

  HAL_Delay(200U);
 8005b90:	20c8      	movs	r0, #200	; 0xc8
 8005b92:	f7fb fbe7 	bl	8001364 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00b      	beq.n	8005bc8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bb6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a14      	ldr	r2, [pc, #80]	; (8005c0c <USB_HostInit+0x164>)
 8005bbc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a13      	ldr	r2, [pc, #76]	; (8005c10 <USB_HostInit+0x168>)
 8005bc2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005bc6:	e009      	b.n	8005bdc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2280      	movs	r2, #128	; 0x80
 8005bcc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a10      	ldr	r2, [pc, #64]	; (8005c14 <USB_HostInit+0x16c>)
 8005bd2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a10      	ldr	r2, [pc, #64]	; (8005c18 <USB_HostInit+0x170>)
 8005bd8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d105      	bne.n	8005bee <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	f043 0210 	orr.w	r2, r3, #16
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <USB_HostInit+0x174>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c06:	b004      	add	sp, #16
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	01000200 	.word	0x01000200
 8005c10:	00e00300 	.word	0x00e00300
 8005c14:	00600080 	.word	0x00600080
 8005c18:	004000e0 	.word	0x004000e0
 8005c1c:	a3200008 	.word	0xa3200008

08005c20 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c3e:	f023 0303 	bic.w	r3, r3, #3
 8005c42:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	68f9      	ldr	r1, [r7, #12]
 8005c54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d107      	bne.n	8005c72 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c6e:	6053      	str	r3, [r2, #4]
 8005c70:	e009      	b.n	8005c86 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005c72:	78fb      	ldrb	r3, [r7, #3]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d106      	bne.n	8005c86 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f241 7370 	movw	r3, #6000	; 0x1770
 8005c84:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005cb4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005cc4:	2064      	movs	r0, #100	; 0x64
 8005cc6:	f7fb fb4d 	bl	8001364 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005cd8:	200a      	movs	r0, #10
 8005cda:	f7fb fb43 	bl	8001364 <HAL_Delay>

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d0c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d109      	bne.n	8005d2c <USB_DriveVbus+0x44>
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d106      	bne.n	8005d2c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d2a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d36:	d109      	bne.n	8005d4c <USB_DriveVbus+0x64>
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d4a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	0c5b      	lsrs	r3, r3, #17
 8005d78:	f003 0303 	and.w	r3, r3, #3
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	b29b      	uxth	r3, r3
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
	...

08005dac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	4608      	mov	r0, r1
 8005db6:	4611      	mov	r1, r2
 8005db8:	461a      	mov	r2, r3
 8005dba:	4603      	mov	r3, r0
 8005dbc:	70fb      	strb	r3, [r7, #3]
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	70bb      	strb	r3, [r7, #2]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005dce:	78fb      	ldrb	r3, [r7, #3]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8005de0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005de2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d87e      	bhi.n	8005ee8 <USB_HC_Init+0x13c>
 8005dea:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <USB_HC_Init+0x44>)
 8005dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df0:	08005e01 	.word	0x08005e01
 8005df4:	08005eab 	.word	0x08005eab
 8005df8:	08005e01 	.word	0x08005e01
 8005dfc:	08005e6d 	.word	0x08005e6d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005e12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005e14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	da10      	bge.n	8005e3e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	78fa      	ldrb	r2, [r7, #3]
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e3a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005e3c:	e057      	b.n	8005eee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d051      	beq.n	8005eee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005e4a:	78fb      	ldrb	r3, [r7, #3]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	78fa      	ldrb	r2, [r7, #3]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e68:	60d3      	str	r3, [r2, #12]
      break;
 8005e6a:	e040      	b.n	8005eee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005e7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	da34      	bge.n	8005ef2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	78fa      	ldrb	r2, [r7, #3]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ea8:	e023      	b.n	8005ef2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f240 2325 	movw	r3, #549	; 0x225
 8005ebc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ebe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	da17      	bge.n	8005ef6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	78fa      	ldrb	r2, [r7, #3]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ee0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005ee4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ee6:	e006      	b.n	8005ef6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	75fb      	strb	r3, [r7, #23]
      break;
 8005eec:	e004      	b.n	8005ef8 <USB_HC_Init+0x14c>
      break;
 8005eee:	bf00      	nop
 8005ef0:	e002      	b.n	8005ef8 <USB_HC_Init+0x14c>
      break;
 8005ef2:	bf00      	nop
 8005ef4:	e000      	b.n	8005ef8 <USB_HC_Init+0x14c>
      break;
 8005ef6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005efe:	699a      	ldr	r2, [r3, #24]
 8005f00:	78fb      	ldrb	r3, [r7, #3]
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	2101      	movs	r1, #1
 8005f08:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0c:	68b9      	ldr	r1, [r7, #8]
 8005f0e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f12:	4313      	orrs	r3, r2
 8005f14:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005f22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	da03      	bge.n	8005f32 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	e001      	b.n	8005f36 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005f36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d103      	bne.n	8005f46 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	e001      	b.n	8005f4a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f4a:	787b      	ldrb	r3, [r7, #1]
 8005f4c:	059b      	lsls	r3, r3, #22
 8005f4e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f52:	78bb      	ldrb	r3, [r7, #2]
 8005f54:	02db      	lsls	r3, r3, #11
 8005f56:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f5a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f60:	049b      	lsls	r3, r3, #18
 8005f62:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f66:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f6e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	0159      	lsls	r1, r3, #5
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	440b      	add	r3, r1
 8005f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f80:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f86:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005f88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f8c:	2b03      	cmp	r3, #3
 8005f8e:	d10f      	bne.n	8005fb0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	78fa      	ldrb	r2, [r7, #3]
 8005fa0:	0151      	lsls	r1, r2, #5
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005faa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fae:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop

08005fc0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08c      	sub	sp, #48	; 0x30
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fdc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d028      	beq.n	800603c <USB_HC_StartXfer+0x7c>
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	791b      	ldrb	r3, [r3, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d124      	bne.n	800603c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10b      	bne.n	8006010 <USB_HC_StartXfer+0x50>
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	795b      	ldrb	r3, [r3, #5]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d107      	bne.n	8006010 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	785b      	ldrb	r3, [r3, #1]
 8006004:	4619      	mov	r1, r3
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 fa30 	bl	800646c <USB_DoPing>
      return HAL_OK;
 800600c:	2300      	movs	r3, #0
 800600e:	e114      	b.n	800623a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006010:	79fb      	ldrb	r3, [r7, #7]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d112      	bne.n	800603c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	4413      	add	r3, r2
 800601e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	69fa      	ldr	r2, [r7, #28]
 8006026:	0151      	lsls	r1, r2, #5
 8006028:	6a3a      	ldr	r2, [r7, #32]
 800602a:	440a      	add	r2, r1
 800602c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006030:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006034:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2200      	movs	r2, #0
 800603a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d018      	beq.n	8006076 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	8912      	ldrh	r2, [r2, #8]
 800604c:	4413      	add	r3, r2
 800604e:	3b01      	subs	r3, #1
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	8912      	ldrh	r2, [r2, #8]
 8006054:	fbb3 f3f2 	udiv	r3, r3, r2
 8006058:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800605a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800605c:	8b7b      	ldrh	r3, [r7, #26]
 800605e:	429a      	cmp	r2, r3
 8006060:	d90b      	bls.n	800607a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006062:	8b7b      	ldrh	r3, [r7, #26]
 8006064:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006066:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	8912      	ldrh	r2, [r2, #8]
 800606c:	fb02 f203 	mul.w	r2, r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	611a      	str	r2, [r3, #16]
 8006074:	e001      	b.n	800607a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006076:	2301      	movs	r3, #1
 8006078:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	78db      	ldrb	r3, [r3, #3]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d006      	beq.n	8006090 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006082:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	8912      	ldrh	r2, [r2, #8]
 8006088:	fb02 f203 	mul.w	r2, r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006098:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800609a:	04d9      	lsls	r1, r3, #19
 800609c:	4b69      	ldr	r3, [pc, #420]	; (8006244 <USB_HC_StartXfer+0x284>)
 800609e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80060a0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	7a9b      	ldrb	r3, [r3, #10]
 80060a6:	075b      	lsls	r3, r3, #29
 80060a8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80060ac:	69f9      	ldr	r1, [r7, #28]
 80060ae:	0148      	lsls	r0, r1, #5
 80060b0:	6a39      	ldr	r1, [r7, #32]
 80060b2:	4401      	add	r1, r0
 80060b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060b8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80060ba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80060bc:	79fb      	ldrb	r3, [r7, #7]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d009      	beq.n	80060d6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	68d9      	ldr	r1, [r3, #12]
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d2:	460a      	mov	r2, r1
 80060d4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	bf0c      	ite	eq
 80060e6:	2301      	moveq	r3, #1
 80060e8:	2300      	movne	r3, #0
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	0151      	lsls	r1, r2, #5
 8006100:	6a3a      	ldr	r2, [r7, #32]
 8006102:	440a      	add	r2, r1
 8006104:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006108:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800610c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	4413      	add	r3, r2
 8006116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	7e7b      	ldrb	r3, [r7, #25]
 800611e:	075b      	lsls	r3, r3, #29
 8006120:	69f9      	ldr	r1, [r7, #28]
 8006122:	0148      	lsls	r0, r1, #5
 8006124:	6a39      	ldr	r1, [r7, #32]
 8006126:	4401      	add	r1, r0
 8006128:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800612c:	4313      	orrs	r3, r2
 800612e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	4413      	add	r3, r2
 8006138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a42      	ldr	r2, [pc, #264]	; (8006248 <USB_HC_StartXfer+0x288>)
 8006140:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006142:	4b41      	ldr	r3, [pc, #260]	; (8006248 <USB_HC_StartXfer+0x288>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800614a:	4a3f      	ldr	r2, [pc, #252]	; (8006248 <USB_HC_StartXfer+0x288>)
 800614c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	78db      	ldrb	r3, [r3, #3]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d006      	beq.n	8006164 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006156:	4b3c      	ldr	r3, [pc, #240]	; (8006248 <USB_HC_StartXfer+0x288>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800615e:	4a3a      	ldr	r2, [pc, #232]	; (8006248 <USB_HC_StartXfer+0x288>)
 8006160:	6013      	str	r3, [r2, #0]
 8006162:	e005      	b.n	8006170 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006164:	4b38      	ldr	r3, [pc, #224]	; (8006248 <USB_HC_StartXfer+0x288>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800616c:	4a36      	ldr	r2, [pc, #216]	; (8006248 <USB_HC_StartXfer+0x288>)
 800616e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006170:	4b35      	ldr	r3, [pc, #212]	; (8006248 <USB_HC_StartXfer+0x288>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006178:	4a33      	ldr	r2, [pc, #204]	; (8006248 <USB_HC_StartXfer+0x288>)
 800617a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	4413      	add	r3, r2
 8006184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006188:	461a      	mov	r2, r3
 800618a:	4b2f      	ldr	r3, [pc, #188]	; (8006248 <USB_HC_StartXfer+0x288>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	e04f      	b.n	800623a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	78db      	ldrb	r3, [r3, #3]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d14a      	bne.n	8006238 <USB_HC_StartXfer+0x278>
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d046      	beq.n	8006238 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	79db      	ldrb	r3, [r3, #7]
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d830      	bhi.n	8006214 <USB_HC_StartXfer+0x254>
 80061b2:	a201      	add	r2, pc, #4	; (adr r2, 80061b8 <USB_HC_StartXfer+0x1f8>)
 80061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b8:	080061c9 	.word	0x080061c9
 80061bc:	080061ed 	.word	0x080061ed
 80061c0:	080061c9 	.word	0x080061c9
 80061c4:	080061ed 	.word	0x080061ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	3303      	adds	r3, #3
 80061ce:	089b      	lsrs	r3, r3, #2
 80061d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80061d2:	8afa      	ldrh	r2, [r7, #22]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	b29b      	uxth	r3, r3
 80061da:	429a      	cmp	r2, r3
 80061dc:	d91c      	bls.n	8006218 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f043 0220 	orr.w	r2, r3, #32
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80061ea:	e015      	b.n	8006218 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	3303      	adds	r3, #3
 80061f2:	089b      	lsrs	r3, r3, #2
 80061f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80061f6:	8afa      	ldrh	r2, [r7, #22]
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	b29b      	uxth	r3, r3
 8006202:	429a      	cmp	r2, r3
 8006204:	d90a      	bls.n	800621c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	619a      	str	r2, [r3, #24]
        }
        break;
 8006212:	e003      	b.n	800621c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006214:	bf00      	nop
 8006216:	e002      	b.n	800621e <USB_HC_StartXfer+0x25e>
        break;
 8006218:	bf00      	nop
 800621a:	e000      	b.n	800621e <USB_HC_StartXfer+0x25e>
        break;
 800621c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	68d9      	ldr	r1, [r3, #12]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	785a      	ldrb	r2, [r3, #1]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	b298      	uxth	r0, r3
 800622c:	2300      	movs	r3, #0
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	4603      	mov	r3, r0
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f7ff fb84 	bl	8005940 <USB_WritePacket>
  }

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3728      	adds	r7, #40	; 0x28
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	1ff80000 	.word	0x1ff80000
 8006248:	20000a1c 	.word	0x20000a1c

0800624c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	b29b      	uxth	r3, r3
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800626e:	b480      	push	{r7}
 8006270:	b087      	sub	sp, #28
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	460b      	mov	r3, r1
 8006278:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	4413      	add	r3, r2
 800628e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	0c9b      	lsrs	r3, r3, #18
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <USB_HC_Halt+0x3a>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d16c      	bne.n	8006382 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	0151      	lsls	r1, r2, #5
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	440a      	add	r2, r1
 80062be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062c6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d143      	bne.n	800635c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	0151      	lsls	r1, r2, #5
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	440a      	add	r2, r1
 80062ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	0151      	lsls	r1, r2, #5
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	440a      	add	r2, r1
 800630a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800630e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006312:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	4413      	add	r3, r2
 800631c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	440a      	add	r2, r1
 800632a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800632e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006332:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	3301      	adds	r3, #1
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006340:	d81d      	bhi.n	800637e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	4413      	add	r3, r2
 800634a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006358:	d0ec      	beq.n	8006334 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800635a:	e080      	b.n	800645e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	4413      	add	r3, r2
 8006364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	0151      	lsls	r1, r2, #5
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	440a      	add	r2, r1
 8006372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006376:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800637a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800637c:	e06f      	b.n	800645e <USB_HC_Halt+0x1f0>
          break;
 800637e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006380:	e06d      	b.n	800645e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	4413      	add	r3, r2
 800638a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	0151      	lsls	r1, r2, #5
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	440a      	add	r2, r1
 8006398:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800639c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063a0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d143      	bne.n	800643a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	0151      	lsls	r1, r2, #5
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	440a      	add	r2, r1
 80063c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063d0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	0151      	lsls	r1, r2, #5
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	440a      	add	r2, r1
 80063e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063f0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	440a      	add	r2, r1
 8006408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800640c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006410:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	3301      	adds	r3, #1
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800641e:	d81d      	bhi.n	800645c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	4413      	add	r3, r2
 8006428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006436:	d0ec      	beq.n	8006412 <USB_HC_Halt+0x1a4>
 8006438:	e011      	b.n	800645e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	4413      	add	r3, r2
 8006442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	0151      	lsls	r1, r2, #5
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	440a      	add	r2, r1
 8006450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006454:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006458:	6013      	str	r3, [r2, #0]
 800645a:	e000      	b.n	800645e <USB_HC_Halt+0x1f0>
          break;
 800645c:	bf00      	nop
    }
  }

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	371c      	adds	r7, #28
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	460b      	mov	r3, r1
 8006476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006480:	2301      	movs	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	04da      	lsls	r2, r3, #19
 8006488:	4b15      	ldr	r3, [pc, #84]	; (80064e0 <USB_DoPing+0x74>)
 800648a:	4013      	ands	r3, r2
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	0151      	lsls	r1, r2, #5
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	440a      	add	r2, r1
 8006494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800649c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064b4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064bc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ca:	461a      	mov	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	1ff80000 	.word	0x1ff80000

080064e4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff f99f 	bl	8005838 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80064fa:	2110      	movs	r1, #16
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7ff f9d7 	bl	80058b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff f9fa 	bl	80058fc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006508:	2300      	movs	r3, #0
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	e01f      	b.n	800654e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4413      	add	r3, r2
 8006516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006524:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800652c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006534:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4413      	add	r3, r2
 800653e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006542:	461a      	mov	r2, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	3301      	adds	r3, #1
 800654c:	613b      	str	r3, [r7, #16]
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	2b0f      	cmp	r3, #15
 8006552:	d9dc      	bls.n	800650e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006554:	2300      	movs	r3, #0
 8006556:	613b      	str	r3, [r7, #16]
 8006558:	e034      	b.n	80065c4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4413      	add	r3, r2
 8006562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006570:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006578:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006580:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658e:	461a      	mov	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	3301      	adds	r3, #1
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065a0:	d80c      	bhi.n	80065bc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065b8:	d0ec      	beq.n	8006594 <USB_StopHost+0xb0>
 80065ba:	e000      	b.n	80065be <USB_StopHost+0xda>
        break;
 80065bc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	3301      	adds	r3, #1
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2b0f      	cmp	r3, #15
 80065c8:	d9c7      	bls.n	800655a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d0:	461a      	mov	r2, r3
 80065d2:	f04f 33ff 	mov.w	r3, #4294967295
 80065d6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f04f 32ff 	mov.w	r2, #4294967295
 80065de:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff f918 	bl	8005816 <USB_EnableGlobalInt>

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3718      	adds	r7, #24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80065f0:	b590      	push	{r4, r7, lr}
 80065f2:	b089      	sub	sp, #36	; 0x24
 80065f4:	af04      	add	r7, sp, #16
 80065f6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80065f8:	2301      	movs	r3, #1
 80065fa:	2202      	movs	r2, #2
 80065fc:	2102      	movs	r1, #2
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fc68 	bl	8006ed4 <USBH_FindInterface>
 8006604:	4603      	mov	r3, r0
 8006606:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	2bff      	cmp	r3, #255	; 0xff
 800660c:	d002      	beq.n	8006614 <USBH_CDC_InterfaceInit+0x24>
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d901      	bls.n	8006618 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006614:	2302      	movs	r3, #2
 8006616:	e13d      	b.n	8006894 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fc3d 	bl	8006e9c <USBH_SelectInterface>
 8006622:	4603      	mov	r3, r0
 8006624:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006626:	7bbb      	ldrb	r3, [r7, #14]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800662c:	2302      	movs	r3, #2
 800662e:	e131      	b.n	8006894 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006636:	2050      	movs	r0, #80	; 0x50
 8006638:	f002 fa04 	bl	8008a44 <malloc>
 800663c:	4603      	mov	r3, r0
 800663e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006650:	2302      	movs	r3, #2
 8006652:	e11f      	b.n	8006894 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006654:	2250      	movs	r2, #80	; 0x50
 8006656:	2100      	movs	r1, #0
 8006658:	68b8      	ldr	r0, [r7, #8]
 800665a:	f002 fa03 	bl	8008a64 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	211a      	movs	r1, #26
 8006664:	fb01 f303 	mul.w	r3, r1, r3
 8006668:	4413      	add	r3, r2
 800666a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	b25b      	sxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	da15      	bge.n	80066a2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	211a      	movs	r1, #26
 800667c:	fb01 f303 	mul.w	r3, r1, r3
 8006680:	4413      	add	r3, r2
 8006682:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006686:	781a      	ldrb	r2, [r3, #0]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800668c:	7bfb      	ldrb	r3, [r7, #15]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	211a      	movs	r1, #26
 8006692:	fb01 f303 	mul.w	r3, r1, r3
 8006696:	4413      	add	r3, r2
 8006698:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800669c:	881a      	ldrh	r2, [r3, #0]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	4619      	mov	r1, r3
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f001 fe36 	bl	800831a <USBH_AllocPipe>
 80066ae:	4603      	mov	r3, r0
 80066b0:	461a      	mov	r2, r3
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	7819      	ldrb	r1, [r3, #0]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	7858      	ldrb	r0, [r3, #1]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	8952      	ldrh	r2, [r2, #10]
 80066ce:	9202      	str	r2, [sp, #8]
 80066d0:	2203      	movs	r2, #3
 80066d2:	9201      	str	r2, [sp, #4]
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	4623      	mov	r3, r4
 80066d8:	4602      	mov	r2, r0
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f001 fdee 	bl	80082bc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2200      	movs	r2, #0
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f002 f8fb 	bl	80088e4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80066ee:	2300      	movs	r3, #0
 80066f0:	2200      	movs	r2, #0
 80066f2:	210a      	movs	r1, #10
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fbed 	bl	8006ed4 <USBH_FindInterface>
 80066fa:	4603      	mov	r3, r0
 80066fc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	2bff      	cmp	r3, #255	; 0xff
 8006702:	d002      	beq.n	800670a <USBH_CDC_InterfaceInit+0x11a>
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d901      	bls.n	800670e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800670a:	2302      	movs	r3, #2
 800670c:	e0c2      	b.n	8006894 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	211a      	movs	r1, #26
 8006714:	fb01 f303 	mul.w	r3, r1, r3
 8006718:	4413      	add	r3, r2
 800671a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	b25b      	sxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	da16      	bge.n	8006754 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	211a      	movs	r1, #26
 800672c:	fb01 f303 	mul.w	r3, r1, r3
 8006730:	4413      	add	r3, r2
 8006732:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006736:	781a      	ldrb	r2, [r3, #0]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	211a      	movs	r1, #26
 8006742:	fb01 f303 	mul.w	r3, r1, r3
 8006746:	4413      	add	r3, r2
 8006748:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800674c:	881a      	ldrh	r2, [r3, #0]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	835a      	strh	r2, [r3, #26]
 8006752:	e015      	b.n	8006780 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	211a      	movs	r1, #26
 800675a:	fb01 f303 	mul.w	r3, r1, r3
 800675e:	4413      	add	r3, r2
 8006760:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006764:	781a      	ldrb	r2, [r3, #0]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800676a:	7bfb      	ldrb	r3, [r7, #15]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	211a      	movs	r1, #26
 8006770:	fb01 f303 	mul.w	r3, r1, r3
 8006774:	4413      	add	r3, r2
 8006776:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800677a:	881a      	ldrh	r2, [r3, #0]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	211a      	movs	r1, #26
 8006786:	fb01 f303 	mul.w	r3, r1, r3
 800678a:	4413      	add	r3, r2
 800678c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	b25b      	sxtb	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	da16      	bge.n	80067c6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	211a      	movs	r1, #26
 800679e:	fb01 f303 	mul.w	r3, r1, r3
 80067a2:	4413      	add	r3, r2
 80067a4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067a8:	781a      	ldrb	r2, [r3, #0]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	211a      	movs	r1, #26
 80067b4:	fb01 f303 	mul.w	r3, r1, r3
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067be:	881a      	ldrh	r2, [r3, #0]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	835a      	strh	r2, [r3, #26]
 80067c4:	e015      	b.n	80067f2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	211a      	movs	r1, #26
 80067cc:	fb01 f303 	mul.w	r3, r1, r3
 80067d0:	4413      	add	r3, r2
 80067d2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067d6:	781a      	ldrb	r2, [r3, #0]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	211a      	movs	r1, #26
 80067e2:	fb01 f303 	mul.w	r3, r1, r3
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067ec:	881a      	ldrh	r2, [r3, #0]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	7b9b      	ldrb	r3, [r3, #14]
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 fd8e 	bl	800831a <USBH_AllocPipe>
 80067fe:	4603      	mov	r3, r0
 8006800:	461a      	mov	r2, r3
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	7bdb      	ldrb	r3, [r3, #15]
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f001 fd84 	bl	800831a <USBH_AllocPipe>
 8006812:	4603      	mov	r3, r0
 8006814:	461a      	mov	r2, r3
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	7b59      	ldrb	r1, [r3, #13]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	7b98      	ldrb	r0, [r3, #14]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	8b12      	ldrh	r2, [r2, #24]
 8006832:	9202      	str	r2, [sp, #8]
 8006834:	2202      	movs	r2, #2
 8006836:	9201      	str	r2, [sp, #4]
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	4623      	mov	r3, r4
 800683c:	4602      	mov	r2, r0
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f001 fd3c 	bl	80082bc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	7b19      	ldrb	r1, [r3, #12]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	7bd8      	ldrb	r0, [r3, #15]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	8b52      	ldrh	r2, [r2, #26]
 800685c:	9202      	str	r2, [sp, #8]
 800685e:	2202      	movs	r2, #2
 8006860:	9201      	str	r2, [sp, #4]
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	4623      	mov	r3, r4
 8006866:	4602      	mov	r2, r0
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 fd27 	bl	80082bc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	7b5b      	ldrb	r3, [r3, #13]
 800687a:	2200      	movs	r2, #0
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f002 f830 	bl	80088e4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	7b1b      	ldrb	r3, [r3, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f002 f829 	bl	80088e4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	bd90      	pop	{r4, r7, pc}

0800689c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00e      	beq.n	80068d4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f001 fd1c 	bl	80082fa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 fd47 	bl	800835c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	7b1b      	ldrb	r3, [r3, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00e      	beq.n	80068fa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	7b1b      	ldrb	r3, [r3, #12]
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 fd09 	bl	80082fa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	7b1b      	ldrb	r3, [r3, #12]
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f001 fd34 	bl	800835c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	7b5b      	ldrb	r3, [r3, #13]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00e      	beq.n	8006920 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	7b5b      	ldrb	r3, [r3, #13]
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 fcf6 	bl	80082fa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	7b5b      	ldrb	r3, [r3, #13]
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f001 fd21 	bl	800835c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00b      	beq.n	8006944 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	4618      	mov	r0, r3
 8006936:	f002 f88d 	bl	8008a54 <free>
    phost->pActiveClass->pData = 0U;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006940:	2200      	movs	r2, #0
 8006942:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3340      	adds	r3, #64	; 0x40
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f8b1 	bl	8006ace <GetLineCoding>
 800696c:	4603      	mov	r3, r0
 800696e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006970:	7afb      	ldrb	r3, [r7, #11]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d105      	bne.n	8006982 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800697c:	2102      	movs	r1, #2
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006982:	7afb      	ldrb	r3, [r7, #11]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006994:	2301      	movs	r3, #1
 8006996:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069a2:	69db      	ldr	r3, [r3, #28]
 80069a4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d877      	bhi.n	8006aa0 <USBH_CDC_Process+0x114>
 80069b0:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <USBH_CDC_Process+0x2c>)
 80069b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b6:	bf00      	nop
 80069b8:	080069cd 	.word	0x080069cd
 80069bc:	080069d3 	.word	0x080069d3
 80069c0:	08006a03 	.word	0x08006a03
 80069c4:	08006a77 	.word	0x08006a77
 80069c8:	08006a85 	.word	0x08006a85
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]
      break;
 80069d0:	e06d      	b.n	8006aae <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f897 	bl	8006b0c <SetLineCoding>
 80069de:	4603      	mov	r3, r0
 80069e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069e2:	7bbb      	ldrb	r3, [r7, #14]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d104      	bne.n	80069f2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80069f0:	e058      	b.n	8006aa4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80069f2:	7bbb      	ldrb	r3, [r7, #14]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d055      	beq.n	8006aa4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2204      	movs	r2, #4
 80069fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a00:	e050      	b.n	8006aa4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	3340      	adds	r3, #64	; 0x40
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f860 	bl	8006ace <GetLineCoding>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a12:	7bbb      	ldrb	r3, [r7, #14]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d126      	bne.n	8006a66 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2a:	791b      	ldrb	r3, [r3, #4]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d13b      	bne.n	8006aa8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a3a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d133      	bne.n	8006aa8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a4a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d12b      	bne.n	8006aa8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a58:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d124      	bne.n	8006aa8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f95a 	bl	8006d18 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a64:	e020      	b.n	8006aa8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d01d      	beq.n	8006aa8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2204      	movs	r2, #4
 8006a70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a74:	e018      	b.n	8006aa8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f867 	bl	8006b4a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f8dc 	bl	8006c3a <CDC_ProcessReception>
      break;
 8006a82:	e014      	b.n	8006aae <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006a84:	2100      	movs	r1, #0
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 ffe5 	bl	8007a56 <USBH_ClrFeature>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10a      	bne.n	8006aac <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006a9e:	e005      	b.n	8006aac <USBH_CDC_Process+0x120>

    default:
      break;
 8006aa0:	bf00      	nop
 8006aa2:	e004      	b.n	8006aae <USBH_CDC_Process+0x122>
      break;
 8006aa4:	bf00      	nop
 8006aa6:	e002      	b.n	8006aae <USBH_CDC_Process+0x122>
      break;
 8006aa8:	bf00      	nop
 8006aaa:	e000      	b.n	8006aae <USBH_CDC_Process+0x122>
      break;
 8006aac:	bf00      	nop

  }

  return status;
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b082      	sub	sp, #8
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	22a1      	movs	r2, #161	; 0xa1
 8006adc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2221      	movs	r2, #33	; 0x21
 8006ae2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2207      	movs	r2, #7
 8006af4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2207      	movs	r2, #7
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 f98a 	bl	8007e16 <USBH_CtlReq>
 8006b02:	4603      	mov	r3, r0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2221      	movs	r2, #33	; 0x21
 8006b1a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2207      	movs	r2, #7
 8006b32:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2207      	movs	r2, #7
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f001 f96b 	bl	8007e16 <USBH_CtlReq>
 8006b40:	4603      	mov	r3, r0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b086      	sub	sp, #24
 8006b4e:	af02      	add	r7, sp, #8
 8006b50:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d002      	beq.n	8006b70 <CDC_ProcessTransmission+0x26>
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d025      	beq.n	8006bba <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8006b6e:	e060      	b.n	8006c32 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	8b12      	ldrh	r2, [r2, #24]
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d90c      	bls.n	8006b96 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	69d9      	ldr	r1, [r3, #28]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8b1a      	ldrh	r2, [r3, #24]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	7b58      	ldrb	r0, [r3, #13]
 8006b88:	2301      	movs	r3, #1
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f001 fb51 	bl	8008236 <USBH_BulkSendData>
 8006b94:	e00c      	b.n	8006bb0 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	7b58      	ldrb	r0, [r3, #13]
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	4603      	mov	r3, r0
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f001 fb43 	bl	8008236 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006bb8:	e03b      	b.n	8006c32 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	7b5b      	ldrb	r3, [r3, #13]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 fe65 	bl	8008890 <USBH_LL_GetURBState>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006bca:	7afb      	ldrb	r3, [r7, #11]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d128      	bne.n	8006c22 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	8b12      	ldrh	r2, [r2, #24]
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d90e      	bls.n	8006bfa <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	8b12      	ldrh	r2, [r2, #24]
 8006be4:	1a9a      	subs	r2, r3, r2
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	8b12      	ldrh	r2, [r2, #24]
 8006bf2:	441a      	add	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	61da      	str	r2, [r3, #28]
 8006bf8:	e002      	b.n	8006c00 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d004      	beq.n	8006c12 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c10:	e00e      	b.n	8006c30 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f868 	bl	8006cf0 <USBH_CDC_TransmitCallback>
      break;
 8006c20:	e006      	b.n	8006c30 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8006c22:	7afb      	ldrb	r3, [r7, #11]
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d103      	bne.n	8006c30 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c30:	bf00      	nop
  }
}
 8006c32:	bf00      	nop
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b086      	sub	sp, #24
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d002      	beq.n	8006c60 <CDC_ProcessReception+0x26>
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	d00e      	beq.n	8006c7c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c5e:	e043      	b.n	8006ce8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	6a19      	ldr	r1, [r3, #32]
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	8b5a      	ldrh	r2, [r3, #26]
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	7b1b      	ldrb	r3, [r3, #12]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 fb07 	bl	8008280 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2204      	movs	r2, #4
 8006c76:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c7a:	e035      	b.n	8006ce8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	7b1b      	ldrb	r3, [r3, #12]
 8006c80:	4619      	mov	r1, r3
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fe04 	bl	8008890 <USBH_LL_GetURBState>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006c8c:	7cfb      	ldrb	r3, [r7, #19]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d129      	bne.n	8006ce6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	7b1b      	ldrb	r3, [r3, #12]
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 fd67 	bl	800876c <USBH_LL_GetLastXferSize>
 8006c9e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d016      	beq.n	8006cd8 <CDC_ProcessReception+0x9e>
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	8b5b      	ldrh	r3, [r3, #26]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d910      	bls.n	8006cd8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	1ad2      	subs	r2, r2, r3
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	6a1a      	ldr	r2, [r3, #32]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	441a      	add	r2, r3
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2203      	movs	r2, #3
 8006cd2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006cd6:	e006      	b.n	8006ce6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f80f 	bl	8006d04 <USBH_CDC_ReceiveCallback>
      break;
 8006ce6:	bf00      	nop
  }
}
 8006ce8:	bf00      	nop
 8006cea:	3718      	adds	r7, #24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006d40:	2302      	movs	r3, #2
 8006d42:	e029      	b.n	8006d98 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	79fa      	ldrb	r2, [r7, #7]
 8006d48:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 f81f 	bl	8006da0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d003      	beq.n	8006d90 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f001 fc39 	bl	8008608 <USBH_LL_Init>

  return USBH_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006dac:	2300      	movs	r3, #0
 8006dae:	60fb      	str	r3, [r7, #12]
 8006db0:	e009      	b.n	8006dc6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	33e0      	adds	r3, #224	; 0xe0
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b0e      	cmp	r3, #14
 8006dca:	d9f2      	bls.n	8006db2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	e009      	b.n	8006de6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ddc:	2200      	movs	r2, #0
 8006dde:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	3301      	adds	r3, #1
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dec:	d3f1      	bcc.n	8006dd2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2240      	movs	r2, #64	; 0x40
 8006e12:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d016      	beq.n	8006e8a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10e      	bne.n	8006e84 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e6c:	1c59      	adds	r1, r3, #1
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	33de      	adds	r3, #222	; 0xde
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	73fb      	strb	r3, [r7, #15]
 8006e82:	e004      	b.n	8006e8e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006e84:	2302      	movs	r3, #2
 8006e86:	73fb      	strb	r3, [r7, #15]
 8006e88:	e001      	b.n	8006e8e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006eb2:	78fa      	ldrb	r2, [r7, #3]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d204      	bcs.n	8006ec2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	78fa      	ldrb	r2, [r7, #3]
 8006ebc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006ec0:	e001      	b.n	8006ec6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	4608      	mov	r0, r1
 8006ede:	4611      	mov	r1, r2
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	70fb      	strb	r3, [r7, #3]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	70bb      	strb	r3, [r7, #2]
 8006eea:	4613      	mov	r3, r2
 8006eec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006efc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006efe:	e025      	b.n	8006f4c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	221a      	movs	r2, #26
 8006f04:	fb02 f303 	mul.w	r3, r2, r3
 8006f08:	3308      	adds	r3, #8
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	3302      	adds	r3, #2
 8006f10:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	795b      	ldrb	r3, [r3, #5]
 8006f16:	78fa      	ldrb	r2, [r7, #3]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d002      	beq.n	8006f22 <USBH_FindInterface+0x4e>
 8006f1c:	78fb      	ldrb	r3, [r7, #3]
 8006f1e:	2bff      	cmp	r3, #255	; 0xff
 8006f20:	d111      	bne.n	8006f46 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f26:	78ba      	ldrb	r2, [r7, #2]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d002      	beq.n	8006f32 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f2c:	78bb      	ldrb	r3, [r7, #2]
 8006f2e:	2bff      	cmp	r3, #255	; 0xff
 8006f30:	d109      	bne.n	8006f46 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f36:	787a      	ldrb	r2, [r7, #1]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d002      	beq.n	8006f42 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f3c:	787b      	ldrb	r3, [r7, #1]
 8006f3e:	2bff      	cmp	r3, #255	; 0xff
 8006f40:	d101      	bne.n	8006f46 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
 8006f44:	e006      	b.n	8006f54 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d9d6      	bls.n	8006f00 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f52:	23ff      	movs	r3, #255	; 0xff
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	371c      	adds	r7, #28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 fb89 	bl	8008680 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006f6e:	2101      	movs	r1, #1
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 fca0 	bl	80088b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af04      	add	r7, sp, #16
 8006f86:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006f88:	2302      	movs	r3, #2
 8006f8a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d102      	bne.n	8006fa2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2203      	movs	r2, #3
 8006fa0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b0b      	cmp	r3, #11
 8006faa:	f200 81b3 	bhi.w	8007314 <USBH_Process+0x394>
 8006fae:	a201      	add	r2, pc, #4	; (adr r2, 8006fb4 <USBH_Process+0x34>)
 8006fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb4:	08006fe5 	.word	0x08006fe5
 8006fb8:	08007017 	.word	0x08007017
 8006fbc:	0800707f 	.word	0x0800707f
 8006fc0:	080072af 	.word	0x080072af
 8006fc4:	08007315 	.word	0x08007315
 8006fc8:	08007123 	.word	0x08007123
 8006fcc:	08007255 	.word	0x08007255
 8006fd0:	08007159 	.word	0x08007159
 8006fd4:	08007179 	.word	0x08007179
 8006fd8:	08007199 	.word	0x08007199
 8006fdc:	080071c7 	.word	0x080071c7
 8006fe0:	08007297 	.word	0x08007297
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 8193 	beq.w	8007318 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006ff8:	20c8      	movs	r0, #200	; 0xc8
 8006ffa:	f001 fca6 	bl	800894a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f001 fb99 	bl	8008736 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007014:	e180      	b.n	8007318 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800701c:	2b01      	cmp	r3, #1
 800701e:	d107      	bne.n	8007030 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800702e:	e182      	b.n	8007336 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800703a:	d914      	bls.n	8007066 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007042:	3301      	adds	r3, #1
 8007044:	b2da      	uxtb	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007052:	2b03      	cmp	r3, #3
 8007054:	d903      	bls.n	800705e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	220d      	movs	r2, #13
 800705a:	701a      	strb	r2, [r3, #0]
      break;
 800705c:	e16b      	b.n	8007336 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	701a      	strb	r2, [r3, #0]
      break;
 8007064:	e167      	b.n	8007336 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800706c:	f103 020a 	add.w	r2, r3, #10
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007076:	200a      	movs	r0, #10
 8007078:	f001 fc67 	bl	800894a <USBH_Delay>
      break;
 800707c:	e15b      	b.n	8007336 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d005      	beq.n	8007094 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800708e:	2104      	movs	r1, #4
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007094:	2064      	movs	r0, #100	; 0x64
 8007096:	f001 fc58 	bl	800894a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f001 fb26 	bl	80086ec <USBH_LL_GetSpeed>
 80070a0:	4603      	mov	r3, r0
 80070a2:	461a      	mov	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2205      	movs	r2, #5
 80070ae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80070b0:	2100      	movs	r1, #0
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f001 f931 	bl	800831a <USBH_AllocPipe>
 80070b8:	4603      	mov	r3, r0
 80070ba:	461a      	mov	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80070c0:	2180      	movs	r1, #128	; 0x80
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f001 f929 	bl	800831a <USBH_AllocPipe>
 80070c8:	4603      	mov	r3, r0
 80070ca:	461a      	mov	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	7919      	ldrb	r1, [r3, #4]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070e4:	b292      	uxth	r2, r2
 80070e6:	9202      	str	r2, [sp, #8]
 80070e8:	2200      	movs	r2, #0
 80070ea:	9201      	str	r2, [sp, #4]
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	4603      	mov	r3, r0
 80070f0:	2280      	movs	r2, #128	; 0x80
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f001 f8e2 	bl	80082bc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	7959      	ldrb	r1, [r3, #5]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800710c:	b292      	uxth	r2, r2
 800710e:	9202      	str	r2, [sp, #8]
 8007110:	2200      	movs	r2, #0
 8007112:	9201      	str	r2, [sp, #4]
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	4603      	mov	r3, r0
 8007118:	2200      	movs	r2, #0
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f001 f8ce 	bl	80082bc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007120:	e109      	b.n	8007336 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f90c 	bl	8007340 <USBH_HandleEnum>
 8007128:	4603      	mov	r3, r0
 800712a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	f040 80f3 	bne.w	800731c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007144:	2b01      	cmp	r3, #1
 8007146:	d103      	bne.n	8007150 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2208      	movs	r2, #8
 800714c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800714e:	e0e5      	b.n	800731c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2207      	movs	r2, #7
 8007154:	701a      	strb	r2, [r3, #0]
      break;
 8007156:	e0e1      	b.n	800731c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 80de 	beq.w	8007320 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800716a:	2101      	movs	r1, #1
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2208      	movs	r2, #8
 8007174:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007176:	e0d3      	b.n	8007320 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800717e:	b29b      	uxth	r3, r3
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fc20 	bl	80079c8 <USBH_SetCfg>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	f040 80ca 	bne.w	8007324 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2209      	movs	r2, #9
 8007194:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007196:	e0c5      	b.n	8007324 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800719e:	f003 0320 	and.w	r3, r3, #32
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00b      	beq.n	80071be <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80071a6:	2101      	movs	r1, #1
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fc30 	bl	8007a0e <USBH_SetFeature>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f040 80b9 	bne.w	8007328 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	220a      	movs	r2, #10
 80071ba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80071bc:	e0b4      	b.n	8007328 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	220a      	movs	r2, #10
 80071c2:	701a      	strb	r2, [r3, #0]
      break;
 80071c4:	e0b0      	b.n	8007328 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 80ad 	beq.w	800732c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80071da:	2300      	movs	r3, #0
 80071dc:	73fb      	strb	r3, [r7, #15]
 80071de:	e016      	b.n	800720e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80071e0:	7bfa      	ldrb	r2, [r7, #15]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	32de      	adds	r2, #222	; 0xde
 80071e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ea:	791a      	ldrb	r2, [r3, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d108      	bne.n	8007208 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80071f6:	7bfa      	ldrb	r2, [r7, #15]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	32de      	adds	r2, #222	; 0xde
 80071fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007206:	e005      	b.n	8007214 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	3301      	adds	r3, #1
 800720c:	73fb      	strb	r3, [r7, #15]
 800720e:	7bfb      	ldrb	r3, [r7, #15]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0e5      	beq.n	80071e0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800721a:	2b00      	cmp	r3, #0
 800721c:	d016      	beq.n	800724c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d109      	bne.n	8007244 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2206      	movs	r2, #6
 8007234:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800723c:	2103      	movs	r1, #3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007242:	e073      	b.n	800732c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	220d      	movs	r2, #13
 8007248:	701a      	strb	r2, [r3, #0]
      break;
 800724a:	e06f      	b.n	800732c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	220d      	movs	r2, #13
 8007250:	701a      	strb	r2, [r3, #0]
      break;
 8007252:	e06b      	b.n	800732c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800725a:	2b00      	cmp	r3, #0
 800725c:	d017      	beq.n	800728e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	4798      	blx	r3
 800726a:	4603      	mov	r3, r0
 800726c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800726e:	7bbb      	ldrb	r3, [r7, #14]
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d103      	bne.n	800727e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	220b      	movs	r2, #11
 800727a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800727c:	e058      	b.n	8007330 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d154      	bne.n	8007330 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	220d      	movs	r2, #13
 800728a:	701a      	strb	r2, [r3, #0]
      break;
 800728c:	e050      	b.n	8007330 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	220d      	movs	r2, #13
 8007292:	701a      	strb	r2, [r3, #0]
      break;
 8007294:	e04c      	b.n	8007330 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800729c:	2b00      	cmp	r3, #0
 800729e:	d049      	beq.n	8007334 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	4798      	blx	r3
      }
      break;
 80072ac:	e042      	b.n	8007334 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7ff fd72 	bl	8006da0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d009      	beq.n	80072da <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d005      	beq.n	80072f0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072ea:	2105      	movs	r1, #5
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d107      	bne.n	800730c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7ff fe2b 	bl	8006f60 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800730a:	e014      	b.n	8007336 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f001 f9b7 	bl	8008680 <USBH_LL_Start>
      break;
 8007312:	e010      	b.n	8007336 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007314:	bf00      	nop
 8007316:	e00e      	b.n	8007336 <USBH_Process+0x3b6>
      break;
 8007318:	bf00      	nop
 800731a:	e00c      	b.n	8007336 <USBH_Process+0x3b6>
      break;
 800731c:	bf00      	nop
 800731e:	e00a      	b.n	8007336 <USBH_Process+0x3b6>
    break;
 8007320:	bf00      	nop
 8007322:	e008      	b.n	8007336 <USBH_Process+0x3b6>
      break;
 8007324:	bf00      	nop
 8007326:	e006      	b.n	8007336 <USBH_Process+0x3b6>
      break;
 8007328:	bf00      	nop
 800732a:	e004      	b.n	8007336 <USBH_Process+0x3b6>
      break;
 800732c:	bf00      	nop
 800732e:	e002      	b.n	8007336 <USBH_Process+0x3b6>
      break;
 8007330:	bf00      	nop
 8007332:	e000      	b.n	8007336 <USBH_Process+0x3b6>
      break;
 8007334:	bf00      	nop
  }
  return USBH_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af04      	add	r7, sp, #16
 8007346:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007348:	2301      	movs	r3, #1
 800734a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800734c:	2301      	movs	r3, #1
 800734e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	785b      	ldrb	r3, [r3, #1]
 8007354:	2b07      	cmp	r3, #7
 8007356:	f200 81c1 	bhi.w	80076dc <USBH_HandleEnum+0x39c>
 800735a:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <USBH_HandleEnum+0x20>)
 800735c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007360:	08007381 	.word	0x08007381
 8007364:	0800743f 	.word	0x0800743f
 8007368:	080074a9 	.word	0x080074a9
 800736c:	08007537 	.word	0x08007537
 8007370:	080075a1 	.word	0x080075a1
 8007374:	08007611 	.word	0x08007611
 8007378:	08007657 	.word	0x08007657
 800737c:	0800769d 	.word	0x0800769d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007380:	2108      	movs	r1, #8
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fa50 	bl	8007828 <USBH_Get_DevDesc>
 8007388:	4603      	mov	r3, r0
 800738a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d130      	bne.n	80073f4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	7919      	ldrb	r1, [r3, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80073b6:	b292      	uxth	r2, r2
 80073b8:	9202      	str	r2, [sp, #8]
 80073ba:	2200      	movs	r2, #0
 80073bc:	9201      	str	r2, [sp, #4]
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	4603      	mov	r3, r0
 80073c2:	2280      	movs	r2, #128	; 0x80
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 ff79 	bl	80082bc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	7959      	ldrb	r1, [r3, #5]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073de:	b292      	uxth	r2, r2
 80073e0:	9202      	str	r2, [sp, #8]
 80073e2:	2200      	movs	r2, #0
 80073e4:	9201      	str	r2, [sp, #4]
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	4603      	mov	r3, r0
 80073ea:	2200      	movs	r2, #0
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 ff65 	bl	80082bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80073f2:	e175      	b.n	80076e0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	f040 8172 	bne.w	80076e0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007402:	3301      	adds	r3, #1
 8007404:	b2da      	uxtb	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007412:	2b03      	cmp	r3, #3
 8007414:	d903      	bls.n	800741e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	220d      	movs	r2, #13
 800741a:	701a      	strb	r2, [r3, #0]
      break;
 800741c:	e160      	b.n	80076e0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	795b      	ldrb	r3, [r3, #5]
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 ff99 	bl	800835c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	791b      	ldrb	r3, [r3, #4]
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 ff93 	bl	800835c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	701a      	strb	r2, [r3, #0]
      break;
 800743c:	e150      	b.n	80076e0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800743e:	2112      	movs	r1, #18
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f9f1 	bl	8007828 <USBH_Get_DevDesc>
 8007446:	4603      	mov	r3, r0
 8007448:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800744a:	7bbb      	ldrb	r3, [r7, #14]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d103      	bne.n	8007458 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007456:	e145      	b.n	80076e4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	2b03      	cmp	r3, #3
 800745c:	f040 8142 	bne.w	80076e4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007466:	3301      	adds	r3, #1
 8007468:	b2da      	uxtb	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007476:	2b03      	cmp	r3, #3
 8007478:	d903      	bls.n	8007482 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	220d      	movs	r2, #13
 800747e:	701a      	strb	r2, [r3, #0]
      break;
 8007480:	e130      	b.n	80076e4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	795b      	ldrb	r3, [r3, #5]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 ff67 	bl	800835c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	791b      	ldrb	r3, [r3, #4]
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 ff61 	bl	800835c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	701a      	strb	r2, [r3, #0]
      break;
 80074a6:	e11d      	b.n	80076e4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80074a8:	2101      	movs	r1, #1
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fa68 	bl	8007980 <USBH_SetAddress>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d132      	bne.n	8007520 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80074ba:	2002      	movs	r0, #2
 80074bc:	f001 fa45 	bl	800894a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2203      	movs	r2, #3
 80074cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	7919      	ldrb	r1, [r3, #4]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074e2:	b292      	uxth	r2, r2
 80074e4:	9202      	str	r2, [sp, #8]
 80074e6:	2200      	movs	r2, #0
 80074e8:	9201      	str	r2, [sp, #4]
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	4603      	mov	r3, r0
 80074ee:	2280      	movs	r2, #128	; 0x80
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fee3 	bl	80082bc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	7959      	ldrb	r1, [r3, #5]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800750a:	b292      	uxth	r2, r2
 800750c:	9202      	str	r2, [sp, #8]
 800750e:	2200      	movs	r2, #0
 8007510:	9201      	str	r2, [sp, #4]
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	4603      	mov	r3, r0
 8007516:	2200      	movs	r2, #0
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fecf 	bl	80082bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800751e:	e0e3      	b.n	80076e8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007520:	7bbb      	ldrb	r3, [r7, #14]
 8007522:	2b03      	cmp	r3, #3
 8007524:	f040 80e0 	bne.w	80076e8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	220d      	movs	r2, #13
 800752c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	705a      	strb	r2, [r3, #1]
      break;
 8007534:	e0d8      	b.n	80076e8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007536:	2109      	movs	r1, #9
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f99d 	bl	8007878 <USBH_Get_CfgDesc>
 800753e:	4603      	mov	r3, r0
 8007540:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d103      	bne.n	8007550 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2204      	movs	r2, #4
 800754c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800754e:	e0cd      	b.n	80076ec <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2b03      	cmp	r3, #3
 8007554:	f040 80ca 	bne.w	80076ec <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800755e:	3301      	adds	r3, #1
 8007560:	b2da      	uxtb	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800756e:	2b03      	cmp	r3, #3
 8007570:	d903      	bls.n	800757a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	220d      	movs	r2, #13
 8007576:	701a      	strb	r2, [r3, #0]
      break;
 8007578:	e0b8      	b.n	80076ec <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	795b      	ldrb	r3, [r3, #5]
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 feeb 	bl	800835c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	791b      	ldrb	r3, [r3, #4]
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fee5 	bl	800835c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	701a      	strb	r2, [r3, #0]
      break;
 800759e:	e0a5      	b.n	80076ec <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 f965 	bl	8007878 <USBH_Get_CfgDesc>
 80075ae:	4603      	mov	r3, r0
 80075b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d103      	bne.n	80075c0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2205      	movs	r2, #5
 80075bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075be:	e097      	b.n	80076f0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075c0:	7bbb      	ldrb	r3, [r7, #14]
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	f040 8094 	bne.w	80076f0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075ce:	3301      	adds	r3, #1
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d903      	bls.n	80075ea <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	220d      	movs	r2, #13
 80075e6:	701a      	strb	r2, [r3, #0]
      break;
 80075e8:	e082      	b.n	80076f0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	795b      	ldrb	r3, [r3, #5]
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 feb3 	bl	800835c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	791b      	ldrb	r3, [r3, #4]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fead 	bl	800835c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	701a      	strb	r2, [r3, #0]
      break;
 800760e:	e06f      	b.n	80076f0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007616:	2b00      	cmp	r3, #0
 8007618:	d019      	beq.n	800764e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007626:	23ff      	movs	r3, #255	; 0xff
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f949 	bl	80078c0 <USBH_Get_StringDesc>
 800762e:	4603      	mov	r3, r0
 8007630:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d103      	bne.n	8007640 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2206      	movs	r2, #6
 800763c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800763e:	e059      	b.n	80076f4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007640:	7bbb      	ldrb	r3, [r7, #14]
 8007642:	2b03      	cmp	r3, #3
 8007644:	d156      	bne.n	80076f4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2206      	movs	r2, #6
 800764a:	705a      	strb	r2, [r3, #1]
      break;
 800764c:	e052      	b.n	80076f4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2206      	movs	r2, #6
 8007652:	705a      	strb	r2, [r3, #1]
      break;
 8007654:	e04e      	b.n	80076f4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800765c:	2b00      	cmp	r3, #0
 800765e:	d019      	beq.n	8007694 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800766c:	23ff      	movs	r3, #255	; 0xff
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f926 	bl	80078c0 <USBH_Get_StringDesc>
 8007674:	4603      	mov	r3, r0
 8007676:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007678:	7bbb      	ldrb	r3, [r7, #14]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d103      	bne.n	8007686 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2207      	movs	r2, #7
 8007682:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007684:	e038      	b.n	80076f8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007686:	7bbb      	ldrb	r3, [r7, #14]
 8007688:	2b03      	cmp	r3, #3
 800768a:	d135      	bne.n	80076f8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2207      	movs	r2, #7
 8007690:	705a      	strb	r2, [r3, #1]
      break;
 8007692:	e031      	b.n	80076f8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2207      	movs	r2, #7
 8007698:	705a      	strb	r2, [r3, #1]
      break;
 800769a:	e02d      	b.n	80076f8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d017      	beq.n	80076d6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076b2:	23ff      	movs	r3, #255	; 0xff
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f903 	bl	80078c0 <USBH_Get_StringDesc>
 80076ba:	4603      	mov	r3, r0
 80076bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d102      	bne.n	80076ca <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80076c8:	e018      	b.n	80076fc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076ca:	7bbb      	ldrb	r3, [r7, #14]
 80076cc:	2b03      	cmp	r3, #3
 80076ce:	d115      	bne.n	80076fc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	73fb      	strb	r3, [r7, #15]
      break;
 80076d4:	e012      	b.n	80076fc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]
      break;
 80076da:	e00f      	b.n	80076fc <USBH_HandleEnum+0x3bc>

    default:
      break;
 80076dc:	bf00      	nop
 80076de:	e00e      	b.n	80076fe <USBH_HandleEnum+0x3be>
      break;
 80076e0:	bf00      	nop
 80076e2:	e00c      	b.n	80076fe <USBH_HandleEnum+0x3be>
      break;
 80076e4:	bf00      	nop
 80076e6:	e00a      	b.n	80076fe <USBH_HandleEnum+0x3be>
      break;
 80076e8:	bf00      	nop
 80076ea:	e008      	b.n	80076fe <USBH_HandleEnum+0x3be>
      break;
 80076ec:	bf00      	nop
 80076ee:	e006      	b.n	80076fe <USBH_HandleEnum+0x3be>
      break;
 80076f0:	bf00      	nop
 80076f2:	e004      	b.n	80076fe <USBH_HandleEnum+0x3be>
      break;
 80076f4:	bf00      	nop
 80076f6:	e002      	b.n	80076fe <USBH_HandleEnum+0x3be>
      break;
 80076f8:	bf00      	nop
 80076fa:	e000      	b.n	80076fe <USBH_HandleEnum+0x3be>
      break;
 80076fc:	bf00      	nop
  }
  return Status;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800771a:	bf00      	nop
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f804 	bl	800774a <USBH_HandleSof>
}
 8007742:	bf00      	nop
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b082      	sub	sp, #8
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b0b      	cmp	r3, #11
 800775a:	d10a      	bne.n	8007772 <USBH_HandleSof+0x28>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007762:	2b00      	cmp	r3, #0
 8007764:	d005      	beq.n	8007772 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	4798      	blx	r3
  }
}
 8007772:	bf00      	nop
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800778a:	bf00      	nop
}
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80077a6:	bf00      	nop
}
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b083      	sub	sp, #12
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 ff58 	bl	80086b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	791b      	ldrb	r3, [r3, #4]
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fda5 	bl	800835c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	795b      	ldrb	r3, [r3, #5]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fd9f 	bl	800835c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af02      	add	r7, sp, #8
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800783a:	78fb      	ldrb	r3, [r7, #3]
 800783c:	b29b      	uxth	r3, r3
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	4613      	mov	r3, r2
 8007842:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007846:	2100      	movs	r1, #0
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f864 	bl	8007916 <USBH_GetDescriptor>
 800784e:	4603      	mov	r3, r0
 8007850:	73fb      	strb	r3, [r7, #15]
 8007852:	7bfb      	ldrb	r3, [r7, #15]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10a      	bne.n	800786e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007864:	78fa      	ldrb	r2, [r7, #3]
 8007866:	b292      	uxth	r2, r2
 8007868:	4619      	mov	r1, r3
 800786a:	f000 f918 	bl	8007a9e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800786e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af02      	add	r7, sp, #8
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	331c      	adds	r3, #28
 8007888:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800788a:	887b      	ldrh	r3, [r7, #2]
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007894:	2100      	movs	r1, #0
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f83d 	bl	8007916 <USBH_GetDescriptor>
 800789c:	4603      	mov	r3, r0
 800789e:	72fb      	strb	r3, [r7, #11]
 80078a0:	7afb      	ldrb	r3, [r7, #11]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d107      	bne.n	80078b6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80078ac:	887a      	ldrh	r2, [r7, #2]
 80078ae:	68f9      	ldr	r1, [r7, #12]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 f964 	bl	8007b7e <USBH_ParseCfgDesc>
  }

  return status;
 80078b6:	7afb      	ldrb	r3, [r7, #11]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b088      	sub	sp, #32
 80078c4:	af02      	add	r7, sp, #8
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	607a      	str	r2, [r7, #4]
 80078ca:	461a      	mov	r2, r3
 80078cc:	460b      	mov	r3, r1
 80078ce:	72fb      	strb	r3, [r7, #11]
 80078d0:	4613      	mov	r3, r2
 80078d2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80078d4:	7afb      	ldrb	r3, [r7, #11]
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80078dc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80078e4:	893b      	ldrh	r3, [r7, #8]
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	460b      	mov	r3, r1
 80078ea:	2100      	movs	r1, #0
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 f812 	bl	8007916 <USBH_GetDescriptor>
 80078f2:	4603      	mov	r3, r0
 80078f4:	75fb      	strb	r3, [r7, #23]
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d107      	bne.n	800790c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007902:	893a      	ldrh	r2, [r7, #8]
 8007904:	6879      	ldr	r1, [r7, #4]
 8007906:	4618      	mov	r0, r3
 8007908:	f000 fa37 	bl	8007d7a <USBH_ParseStringDesc>
  }

  return status;
 800790c:	7dfb      	ldrb	r3, [r7, #23]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	60f8      	str	r0, [r7, #12]
 800791e:	607b      	str	r3, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	72fb      	strb	r3, [r7, #11]
 8007924:	4613      	mov	r3, r2
 8007926:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	789b      	ldrb	r3, [r3, #2]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d11c      	bne.n	800796a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007930:	7afb      	ldrb	r3, [r7, #11]
 8007932:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007936:	b2da      	uxtb	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2206      	movs	r2, #6
 8007940:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	893a      	ldrh	r2, [r7, #8]
 8007946:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007948:	893b      	ldrh	r3, [r7, #8]
 800794a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800794e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007952:	d104      	bne.n	800795e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f240 4209 	movw	r2, #1033	; 0x409
 800795a:	829a      	strh	r2, [r3, #20]
 800795c:	e002      	b.n	8007964 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8b3a      	ldrh	r2, [r7, #24]
 8007968:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800796a:	8b3b      	ldrh	r3, [r7, #24]
 800796c:	461a      	mov	r2, r3
 800796e:	6879      	ldr	r1, [r7, #4]
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 fa50 	bl	8007e16 <USBH_CtlReq>
 8007976:	4603      	mov	r3, r0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	460b      	mov	r3, r1
 800798a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	789b      	ldrb	r3, [r3, #2]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d10f      	bne.n	80079b4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2205      	movs	r2, #5
 800799e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80079b4:	2200      	movs	r2, #0
 80079b6:	2100      	movs	r1, #0
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fa2c 	bl	8007e16 <USBH_CtlReq>
 80079be:	4603      	mov	r3, r0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	789b      	ldrb	r3, [r3, #2]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d10e      	bne.n	80079fa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2209      	movs	r2, #9
 80079e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	887a      	ldrh	r2, [r7, #2]
 80079ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80079fa:	2200      	movs	r2, #0
 80079fc:	2100      	movs	r1, #0
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fa09 	bl	8007e16 <USBH_CtlReq>
 8007a04:	4603      	mov	r3, r0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	460b      	mov	r3, r1
 8007a18:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	789b      	ldrb	r3, [r3, #2]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d10f      	bne.n	8007a42 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2203      	movs	r2, #3
 8007a2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007a2e:	78fb      	ldrb	r3, [r7, #3]
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007a42:	2200      	movs	r2, #0
 8007a44:	2100      	movs	r1, #0
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f9e5 	bl	8007e16 <USBH_CtlReq>
 8007a4c:	4603      	mov	r3, r0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	789b      	ldrb	r3, [r3, #2]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d10f      	bne.n	8007a8a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2202      	movs	r2, #2
 8007a6e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007a7c:	78fb      	ldrb	r3, [r7, #3]
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f9c1 	bl	8007e16 <USBH_CtlReq>
 8007a94:	4603      	mov	r3, r0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b085      	sub	sp, #20
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	781a      	ldrb	r2, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	785a      	ldrb	r2, [r3, #1]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	3302      	adds	r3, #2
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	3303      	adds	r3, #3
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	021b      	lsls	r3, r3, #8
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	791a      	ldrb	r2, [r3, #4]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	795a      	ldrb	r2, [r3, #5]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	799a      	ldrb	r2, [r3, #6]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	79da      	ldrb	r2, [r3, #7]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007af8:	88fb      	ldrh	r3, [r7, #6]
 8007afa:	2b08      	cmp	r3, #8
 8007afc:	d939      	bls.n	8007b72 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	3308      	adds	r3, #8
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	3309      	adds	r3, #9
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	021b      	lsls	r3, r3, #8
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	4313      	orrs	r3, r2
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	330a      	adds	r3, #10
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	330b      	adds	r3, #11
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	330c      	adds	r3, #12
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	330d      	adds	r3, #13
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	021b      	lsls	r3, r3, #8
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	7b9a      	ldrb	r2, [r3, #14]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	7bda      	ldrb	r2, [r3, #15]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	7c1a      	ldrb	r2, [r3, #16]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	7c5a      	ldrb	r2, [r3, #17]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	745a      	strb	r2, [r3, #17]
  }
}
 8007b72:	bf00      	nop
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b08a      	sub	sp, #40	; 0x28
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	60b9      	str	r1, [r7, #8]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	781a      	ldrb	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	785a      	ldrb	r2, [r3, #1]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	3302      	adds	r3, #2
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	3303      	adds	r3, #3
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	021b      	lsls	r3, r3, #8
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	791a      	ldrb	r2, [r3, #4]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	795a      	ldrb	r2, [r3, #5]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	799a      	ldrb	r2, [r3, #6]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	79da      	ldrb	r2, [r3, #7]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	7a1a      	ldrb	r2, [r3, #8]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007bf4:	88fb      	ldrh	r3, [r7, #6]
 8007bf6:	2b09      	cmp	r3, #9
 8007bf8:	d95f      	bls.n	8007cba <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007bfa:	2309      	movs	r3, #9
 8007bfc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c02:	e051      	b.n	8007ca8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c04:	f107 0316 	add.w	r3, r7, #22
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c0c:	f000 f8e8 	bl	8007de0 <USBH_GetNextDesc>
 8007c10:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	785b      	ldrb	r3, [r3, #1]
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	d146      	bne.n	8007ca8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007c1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c1e:	221a      	movs	r2, #26
 8007c20:	fb02 f303 	mul.w	r3, r2, r3
 8007c24:	3308      	adds	r3, #8
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	4413      	add	r3, r2
 8007c2a:	3302      	adds	r3, #2
 8007c2c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007c2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c30:	69f8      	ldr	r0, [r7, #28]
 8007c32:	f000 f846 	bl	8007cc2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c40:	e022      	b.n	8007c88 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c42:	f107 0316 	add.w	r3, r7, #22
 8007c46:	4619      	mov	r1, r3
 8007c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c4a:	f000 f8c9 	bl	8007de0 <USBH_GetNextDesc>
 8007c4e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	2b05      	cmp	r3, #5
 8007c56:	d117      	bne.n	8007c88 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007c58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c5c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007c60:	3201      	adds	r2, #1
 8007c62:	00d2      	lsls	r2, r2, #3
 8007c64:	211a      	movs	r1, #26
 8007c66:	fb01 f303 	mul.w	r3, r1, r3
 8007c6a:	4413      	add	r3, r2
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	4413      	add	r3, r2
 8007c72:	3304      	adds	r3, #4
 8007c74:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007c76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c78:	69b8      	ldr	r0, [r7, #24]
 8007c7a:	f000 f851 	bl	8007d20 <USBH_ParseEPDesc>
            ep_ix++;
 8007c7e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007c82:	3301      	adds	r3, #1
 8007c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	791b      	ldrb	r3, [r3, #4]
 8007c8c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d204      	bcs.n	8007c9e <USBH_ParseCfgDesc+0x120>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	885a      	ldrh	r2, [r3, #2]
 8007c98:	8afb      	ldrh	r3, [r7, #22]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d8d1      	bhi.n	8007c42 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007c9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ca8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d804      	bhi.n	8007cba <USBH_ParseCfgDesc+0x13c>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	885a      	ldrh	r2, [r3, #2]
 8007cb4:	8afb      	ldrh	r3, [r7, #22]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d8a4      	bhi.n	8007c04 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007cba:	bf00      	nop
 8007cbc:	3728      	adds	r7, #40	; 0x28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	781a      	ldrb	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	785a      	ldrb	r2, [r3, #1]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	789a      	ldrb	r2, [r3, #2]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	78da      	ldrb	r2, [r3, #3]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	791a      	ldrb	r2, [r3, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	795a      	ldrb	r2, [r3, #5]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	799a      	ldrb	r2, [r3, #6]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	79da      	ldrb	r2, [r3, #7]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	7a1a      	ldrb	r2, [r3, #8]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	721a      	strb	r2, [r3, #8]
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781a      	ldrb	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	785a      	ldrb	r2, [r3, #1]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	789a      	ldrb	r2, [r3, #2]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	78da      	ldrb	r2, [r3, #3]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	3305      	adds	r3, #5
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	799a      	ldrb	r2, [r3, #6]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	719a      	strb	r2, [r3, #6]
}
 8007d6e:	bf00      	nop
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b087      	sub	sp, #28
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	60b9      	str	r1, [r7, #8]
 8007d84:	4613      	mov	r3, r2
 8007d86:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d120      	bne.n	8007dd4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	1e9a      	subs	r2, r3, #2
 8007d98:	88fb      	ldrh	r3, [r7, #6]
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	bf28      	it	cs
 8007d9e:	4613      	movcs	r3, r2
 8007da0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3302      	adds	r3, #2
 8007da6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007da8:	2300      	movs	r3, #0
 8007daa:	82fb      	strh	r3, [r7, #22]
 8007dac:	e00b      	b.n	8007dc6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007dae:	8afb      	ldrh	r3, [r7, #22]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	4413      	add	r3, r2
 8007db4:	781a      	ldrb	r2, [r3, #0]
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007dc0:	8afb      	ldrh	r3, [r7, #22]
 8007dc2:	3302      	adds	r3, #2
 8007dc4:	82fb      	strh	r3, [r7, #22]
 8007dc6:	8afa      	ldrh	r2, [r7, #22]
 8007dc8:	8abb      	ldrh	r3, [r7, #20]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d3ef      	bcc.n	8007dae <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	701a      	strb	r2, [r3, #0]
  }
}
 8007dd4:	bf00      	nop
 8007dd6:	371c      	adds	r7, #28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	881a      	ldrh	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	4413      	add	r3, r2
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4413      	add	r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e08:	68fb      	ldr	r3, [r7, #12]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b086      	sub	sp, #24
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	60f8      	str	r0, [r7, #12]
 8007e1e:	60b9      	str	r1, [r7, #8]
 8007e20:	4613      	mov	r3, r2
 8007e22:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007e24:	2301      	movs	r3, #1
 8007e26:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	789b      	ldrb	r3, [r3, #2]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d002      	beq.n	8007e36 <USBH_CtlReq+0x20>
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d00f      	beq.n	8007e54 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007e34:	e027      	b.n	8007e86 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	88fa      	ldrh	r2, [r7, #6]
 8007e40:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2201      	movs	r2, #1
 8007e46:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	75fb      	strb	r3, [r7, #23]
      break;
 8007e52:	e018      	b.n	8007e86 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 f81b 	bl	8007e90 <USBH_HandleControl>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <USBH_CtlReq+0x54>
 8007e64:	7dfb      	ldrb	r3, [r7, #23]
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d106      	bne.n	8007e78 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	761a      	strb	r2, [r3, #24]
      break;
 8007e76:	e005      	b.n	8007e84 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d102      	bne.n	8007e84 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2201      	movs	r2, #1
 8007e82:	709a      	strb	r2, [r3, #2]
      break;
 8007e84:	bf00      	nop
  }
  return status;
 8007e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af02      	add	r7, sp, #8
 8007e96:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	7e1b      	ldrb	r3, [r3, #24]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	2b0a      	cmp	r3, #10
 8007ea8:	f200 8158 	bhi.w	800815c <USBH_HandleControl+0x2cc>
 8007eac:	a201      	add	r2, pc, #4	; (adr r2, 8007eb4 <USBH_HandleControl+0x24>)
 8007eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb2:	bf00      	nop
 8007eb4:	08007ee1 	.word	0x08007ee1
 8007eb8:	08007efb 	.word	0x08007efb
 8007ebc:	08007f65 	.word	0x08007f65
 8007ec0:	08007f8b 	.word	0x08007f8b
 8007ec4:	08007fc3 	.word	0x08007fc3
 8007ec8:	08007fef 	.word	0x08007fef
 8007ecc:	08008041 	.word	0x08008041
 8007ed0:	08008063 	.word	0x08008063
 8007ed4:	0800809f 	.word	0x0800809f
 8007ed8:	080080c7 	.word	0x080080c7
 8007edc:	08008105 	.word	0x08008105
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f103 0110 	add.w	r1, r3, #16
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	795b      	ldrb	r3, [r3, #5]
 8007eea:	461a      	mov	r2, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f945 	bl	800817c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	761a      	strb	r2, [r3, #24]
      break;
 8007ef8:	e13b      	b.n	8008172 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	795b      	ldrb	r3, [r3, #5]
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fcc5 	bl	8008890 <USBH_LL_GetURBState>
 8007f06:	4603      	mov	r3, r0
 8007f08:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d11e      	bne.n	8007f4e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	7c1b      	ldrb	r3, [r3, #16]
 8007f14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f18:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	8adb      	ldrh	r3, [r3, #22]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007f22:	7b7b      	ldrb	r3, [r7, #13]
 8007f24:	2b80      	cmp	r3, #128	; 0x80
 8007f26:	d103      	bne.n	8007f30 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2203      	movs	r2, #3
 8007f2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007f2e:	e117      	b.n	8008160 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2205      	movs	r2, #5
 8007f34:	761a      	strb	r2, [r3, #24]
      break;
 8007f36:	e113      	b.n	8008160 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8007f38:	7b7b      	ldrb	r3, [r7, #13]
 8007f3a:	2b80      	cmp	r3, #128	; 0x80
 8007f3c:	d103      	bne.n	8007f46 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2209      	movs	r2, #9
 8007f42:	761a      	strb	r2, [r3, #24]
      break;
 8007f44:	e10c      	b.n	8008160 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2207      	movs	r2, #7
 8007f4a:	761a      	strb	r2, [r3, #24]
      break;
 8007f4c:	e108      	b.n	8008160 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007f4e:	7bbb      	ldrb	r3, [r7, #14]
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d003      	beq.n	8007f5c <USBH_HandleControl+0xcc>
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	f040 8102 	bne.w	8008160 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	220b      	movs	r2, #11
 8007f60:	761a      	strb	r2, [r3, #24]
      break;
 8007f62:	e0fd      	b.n	8008160 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6899      	ldr	r1, [r3, #8]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	899a      	ldrh	r2, [r3, #12]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	791b      	ldrb	r3, [r3, #4]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f93c 	bl	80081fa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2204      	movs	r2, #4
 8007f86:	761a      	strb	r2, [r3, #24]
      break;
 8007f88:	e0f3      	b.n	8008172 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	791b      	ldrb	r3, [r3, #4]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fc7d 	bl	8008890 <USBH_LL_GetURBState>
 8007f96:	4603      	mov	r3, r0
 8007f98:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d102      	bne.n	8007fa6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2209      	movs	r2, #9
 8007fa4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	2b05      	cmp	r3, #5
 8007faa:	d102      	bne.n	8007fb2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007fac:	2303      	movs	r3, #3
 8007fae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007fb0:	e0d8      	b.n	8008164 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	2b04      	cmp	r3, #4
 8007fb6:	f040 80d5 	bne.w	8008164 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	220b      	movs	r2, #11
 8007fbe:	761a      	strb	r2, [r3, #24]
      break;
 8007fc0:	e0d0      	b.n	8008164 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6899      	ldr	r1, [r3, #8]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	899a      	ldrh	r2, [r3, #12]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	7958      	ldrb	r0, [r3, #5]
 8007fce:	2301      	movs	r3, #1
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f8eb 	bl	80081b0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2206      	movs	r2, #6
 8007fea:	761a      	strb	r2, [r3, #24]
      break;
 8007fec:	e0c1      	b.n	8008172 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	795b      	ldrb	r3, [r3, #5]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fc4b 	bl	8008890 <USBH_LL_GetURBState>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d103      	bne.n	800800c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2207      	movs	r2, #7
 8008008:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800800a:	e0ad      	b.n	8008168 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800800c:	7bbb      	ldrb	r3, [r7, #14]
 800800e:	2b05      	cmp	r3, #5
 8008010:	d105      	bne.n	800801e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	220c      	movs	r2, #12
 8008016:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008018:	2303      	movs	r3, #3
 800801a:	73fb      	strb	r3, [r7, #15]
      break;
 800801c:	e0a4      	b.n	8008168 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800801e:	7bbb      	ldrb	r3, [r7, #14]
 8008020:	2b02      	cmp	r3, #2
 8008022:	d103      	bne.n	800802c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2205      	movs	r2, #5
 8008028:	761a      	strb	r2, [r3, #24]
      break;
 800802a:	e09d      	b.n	8008168 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	2b04      	cmp	r3, #4
 8008030:	f040 809a 	bne.w	8008168 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	220b      	movs	r2, #11
 8008038:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800803a:	2302      	movs	r3, #2
 800803c:	73fb      	strb	r3, [r7, #15]
      break;
 800803e:	e093      	b.n	8008168 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	791b      	ldrb	r3, [r3, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	2100      	movs	r1, #0
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f8d6 	bl	80081fa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008054:	b29a      	uxth	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2208      	movs	r2, #8
 800805e:	761a      	strb	r2, [r3, #24]

      break;
 8008060:	e087      	b.n	8008172 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	791b      	ldrb	r3, [r3, #4]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fc11 	bl	8008890 <USBH_LL_GetURBState>
 800806e:	4603      	mov	r3, r0
 8008070:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d105      	bne.n	8008084 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	220d      	movs	r2, #13
 800807c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008082:	e073      	b.n	800816c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008084:	7bbb      	ldrb	r3, [r7, #14]
 8008086:	2b04      	cmp	r3, #4
 8008088:	d103      	bne.n	8008092 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	220b      	movs	r2, #11
 800808e:	761a      	strb	r2, [r3, #24]
      break;
 8008090:	e06c      	b.n	800816c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	2b05      	cmp	r3, #5
 8008096:	d169      	bne.n	800816c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008098:	2303      	movs	r3, #3
 800809a:	73fb      	strb	r3, [r7, #15]
      break;
 800809c:	e066      	b.n	800816c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	795a      	ldrb	r2, [r3, #5]
 80080a2:	2301      	movs	r3, #1
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	4613      	mov	r3, r2
 80080a8:	2200      	movs	r2, #0
 80080aa:	2100      	movs	r1, #0
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f87f 	bl	80081b0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	220a      	movs	r2, #10
 80080c2:	761a      	strb	r2, [r3, #24]
      break;
 80080c4:	e055      	b.n	8008172 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	795b      	ldrb	r3, [r3, #5]
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fbdf 	bl	8008890 <USBH_LL_GetURBState>
 80080d2:	4603      	mov	r3, r0
 80080d4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d105      	bne.n	80080e8 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	220d      	movs	r2, #13
 80080e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80080e6:	e043      	b.n	8008170 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d103      	bne.n	80080f6 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2209      	movs	r2, #9
 80080f2:	761a      	strb	r2, [r3, #24]
      break;
 80080f4:	e03c      	b.n	8008170 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	2b04      	cmp	r3, #4
 80080fa:	d139      	bne.n	8008170 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	220b      	movs	r2, #11
 8008100:	761a      	strb	r2, [r3, #24]
      break;
 8008102:	e035      	b.n	8008170 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	7e5b      	ldrb	r3, [r3, #25]
 8008108:	3301      	adds	r3, #1
 800810a:	b2da      	uxtb	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	765a      	strb	r2, [r3, #25]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	7e5b      	ldrb	r3, [r3, #25]
 8008114:	2b02      	cmp	r3, #2
 8008116:	d806      	bhi.n	8008126 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008124:	e025      	b.n	8008172 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800812c:	2106      	movs	r1, #6
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	795b      	ldrb	r3, [r3, #5]
 800813c:	4619      	mov	r1, r3
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f90c 	bl	800835c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	791b      	ldrb	r3, [r3, #4]
 8008148:	4619      	mov	r1, r3
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f906 	bl	800835c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008156:	2302      	movs	r3, #2
 8008158:	73fb      	strb	r3, [r7, #15]
      break;
 800815a:	e00a      	b.n	8008172 <USBH_HandleControl+0x2e2>

    default:
      break;
 800815c:	bf00      	nop
 800815e:	e008      	b.n	8008172 <USBH_HandleControl+0x2e2>
      break;
 8008160:	bf00      	nop
 8008162:	e006      	b.n	8008172 <USBH_HandleControl+0x2e2>
      break;
 8008164:	bf00      	nop
 8008166:	e004      	b.n	8008172 <USBH_HandleControl+0x2e2>
      break;
 8008168:	bf00      	nop
 800816a:	e002      	b.n	8008172 <USBH_HandleControl+0x2e2>
      break;
 800816c:	bf00      	nop
 800816e:	e000      	b.n	8008172 <USBH_HandleControl+0x2e2>
      break;
 8008170:	bf00      	nop
  }

  return status;
 8008172:	7bfb      	ldrb	r3, [r7, #15]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b088      	sub	sp, #32
 8008180:	af04      	add	r7, sp, #16
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	4613      	mov	r3, r2
 8008188:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800818a:	79f9      	ldrb	r1, [r7, #7]
 800818c:	2300      	movs	r3, #0
 800818e:	9303      	str	r3, [sp, #12]
 8008190:	2308      	movs	r3, #8
 8008192:	9302      	str	r3, [sp, #8]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	2300      	movs	r3, #0
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	2300      	movs	r3, #0
 800819e:	2200      	movs	r2, #0
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 fb44 	bl	800882e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b088      	sub	sp, #32
 80081b4:	af04      	add	r7, sp, #16
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	4611      	mov	r1, r2
 80081bc:	461a      	mov	r2, r3
 80081be:	460b      	mov	r3, r1
 80081c0:	80fb      	strh	r3, [r7, #6]
 80081c2:	4613      	mov	r3, r2
 80081c4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80081d4:	7979      	ldrb	r1, [r7, #5]
 80081d6:	7e3b      	ldrb	r3, [r7, #24]
 80081d8:	9303      	str	r3, [sp, #12]
 80081da:	88fb      	ldrh	r3, [r7, #6]
 80081dc:	9302      	str	r3, [sp, #8]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	9301      	str	r3, [sp, #4]
 80081e2:	2301      	movs	r3, #1
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	2300      	movs	r3, #0
 80081e8:	2200      	movs	r2, #0
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 fb1f 	bl	800882e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b088      	sub	sp, #32
 80081fe:	af04      	add	r7, sp, #16
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	4611      	mov	r1, r2
 8008206:	461a      	mov	r2, r3
 8008208:	460b      	mov	r3, r1
 800820a:	80fb      	strh	r3, [r7, #6]
 800820c:	4613      	mov	r3, r2
 800820e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008210:	7979      	ldrb	r1, [r7, #5]
 8008212:	2300      	movs	r3, #0
 8008214:	9303      	str	r3, [sp, #12]
 8008216:	88fb      	ldrh	r3, [r7, #6]
 8008218:	9302      	str	r3, [sp, #8]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	9301      	str	r3, [sp, #4]
 800821e:	2301      	movs	r3, #1
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	2300      	movs	r3, #0
 8008224:	2201      	movs	r2, #1
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f000 fb01 	bl	800882e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800822c:	2300      	movs	r3, #0

}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b088      	sub	sp, #32
 800823a:	af04      	add	r7, sp, #16
 800823c:	60f8      	str	r0, [r7, #12]
 800823e:	60b9      	str	r1, [r7, #8]
 8008240:	4611      	mov	r1, r2
 8008242:	461a      	mov	r2, r3
 8008244:	460b      	mov	r3, r1
 8008246:	80fb      	strh	r3, [r7, #6]
 8008248:	4613      	mov	r3, r2
 800824a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800825a:	7979      	ldrb	r1, [r7, #5]
 800825c:	7e3b      	ldrb	r3, [r7, #24]
 800825e:	9303      	str	r3, [sp, #12]
 8008260:	88fb      	ldrh	r3, [r7, #6]
 8008262:	9302      	str	r3, [sp, #8]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	9301      	str	r3, [sp, #4]
 8008268:	2301      	movs	r3, #1
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	2302      	movs	r3, #2
 800826e:	2200      	movs	r2, #0
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 fadc 	bl	800882e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af04      	add	r7, sp, #16
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	4611      	mov	r1, r2
 800828c:	461a      	mov	r2, r3
 800828e:	460b      	mov	r3, r1
 8008290:	80fb      	strh	r3, [r7, #6]
 8008292:	4613      	mov	r3, r2
 8008294:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008296:	7979      	ldrb	r1, [r7, #5]
 8008298:	2300      	movs	r3, #0
 800829a:	9303      	str	r3, [sp, #12]
 800829c:	88fb      	ldrh	r3, [r7, #6]
 800829e:	9302      	str	r3, [sp, #8]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	9301      	str	r3, [sp, #4]
 80082a4:	2301      	movs	r3, #1
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	2302      	movs	r3, #2
 80082aa:	2201      	movs	r2, #1
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 fabe 	bl	800882e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af04      	add	r7, sp, #16
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	4608      	mov	r0, r1
 80082c6:	4611      	mov	r1, r2
 80082c8:	461a      	mov	r2, r3
 80082ca:	4603      	mov	r3, r0
 80082cc:	70fb      	strb	r3, [r7, #3]
 80082ce:	460b      	mov	r3, r1
 80082d0:	70bb      	strb	r3, [r7, #2]
 80082d2:	4613      	mov	r3, r2
 80082d4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80082d6:	7878      	ldrb	r0, [r7, #1]
 80082d8:	78ba      	ldrb	r2, [r7, #2]
 80082da:	78f9      	ldrb	r1, [r7, #3]
 80082dc:	8b3b      	ldrh	r3, [r7, #24]
 80082de:	9302      	str	r3, [sp, #8]
 80082e0:	7d3b      	ldrb	r3, [r7, #20]
 80082e2:	9301      	str	r3, [sp, #4]
 80082e4:	7c3b      	ldrb	r3, [r7, #16]
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	4603      	mov	r3, r0
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fa51 	bl	8008792 <USBH_LL_OpenPipe>

  return USBH_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b082      	sub	sp, #8
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
 8008302:	460b      	mov	r3, r1
 8008304:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008306:	78fb      	ldrb	r3, [r7, #3]
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fa70 	bl	80087f0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	460b      	mov	r3, r1
 8008324:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f836 	bl	8008398 <USBH_GetFreePipe>
 800832c:	4603      	mov	r3, r0
 800832e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008330:	89fb      	ldrh	r3, [r7, #14]
 8008332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008336:	4293      	cmp	r3, r2
 8008338:	d00a      	beq.n	8008350 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800833a:	78fa      	ldrb	r2, [r7, #3]
 800833c:	89fb      	ldrh	r3, [r7, #14]
 800833e:	f003 030f 	and.w	r3, r3, #15
 8008342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	33e0      	adds	r3, #224	; 0xe0
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	440b      	add	r3, r1
 800834e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008350:	89fb      	ldrh	r3, [r7, #14]
 8008352:	b2db      	uxtb	r3, r3
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	460b      	mov	r3, r1
 8008366:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	2b0a      	cmp	r3, #10
 800836c:	d80d      	bhi.n	800838a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800836e:	78fb      	ldrb	r3, [r7, #3]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	33e0      	adds	r3, #224	; 0xe0
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	78fb      	ldrb	r3, [r7, #3]
 800837c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008380:	6879      	ldr	r1, [r7, #4]
 8008382:	33e0      	adds	r3, #224	; 0xe0
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	440b      	add	r3, r1
 8008388:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80083a0:	2300      	movs	r3, #0
 80083a2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80083a4:	2300      	movs	r3, #0
 80083a6:	73fb      	strb	r3, [r7, #15]
 80083a8:	e00f      	b.n	80083ca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	33e0      	adds	r3, #224	; 0xe0
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d102      	bne.n	80083c4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	e007      	b.n	80083d4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	3301      	adds	r3, #1
 80083c8:	73fb      	strb	r3, [r7, #15]
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
 80083cc:	2b0a      	cmp	r3, #10
 80083ce:	d9ec      	bls.n	80083aa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80083d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80083e4:	2201      	movs	r2, #1
 80083e6:	490e      	ldr	r1, [pc, #56]	; (8008420 <MX_USB_HOST_Init+0x40>)
 80083e8:	480e      	ldr	r0, [pc, #56]	; (8008424 <MX_USB_HOST_Init+0x44>)
 80083ea:	f7fe fc9f 	bl	8006d2c <USBH_Init>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80083f4:	f7f8 fc8c 	bl	8000d10 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80083f8:	490b      	ldr	r1, [pc, #44]	; (8008428 <MX_USB_HOST_Init+0x48>)
 80083fa:	480a      	ldr	r0, [pc, #40]	; (8008424 <MX_USB_HOST_Init+0x44>)
 80083fc:	f7fe fd24 	bl	8006e48 <USBH_RegisterClass>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008406:	f7f8 fc83 	bl	8000d10 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800840a:	4806      	ldr	r0, [pc, #24]	; (8008424 <MX_USB_HOST_Init+0x44>)
 800840c:	f7fe fda8 	bl	8006f60 <USBH_Start>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008416:	f7f8 fc7b 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800841a:	bf00      	nop
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	08008441 	.word	0x08008441
 8008424:	20000bf0 	.word	0x20000bf0
 8008428:	20000010 	.word	0x20000010

0800842c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008430:	4802      	ldr	r0, [pc, #8]	; (800843c <MX_USB_HOST_Process+0x10>)
 8008432:	f7fe fda5 	bl	8006f80 <USBH_Process>
}
 8008436:	bf00      	nop
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20000bf0 	.word	0x20000bf0

08008440 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	460b      	mov	r3, r1
 800844a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	3b01      	subs	r3, #1
 8008450:	2b04      	cmp	r3, #4
 8008452:	d819      	bhi.n	8008488 <USBH_UserProcess+0x48>
 8008454:	a201      	add	r2, pc, #4	; (adr r2, 800845c <USBH_UserProcess+0x1c>)
 8008456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845a:	bf00      	nop
 800845c:	08008489 	.word	0x08008489
 8008460:	08008479 	.word	0x08008479
 8008464:	08008489 	.word	0x08008489
 8008468:	08008481 	.word	0x08008481
 800846c:	08008471 	.word	0x08008471
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008470:	4b09      	ldr	r3, [pc, #36]	; (8008498 <USBH_UserProcess+0x58>)
 8008472:	2203      	movs	r2, #3
 8008474:	701a      	strb	r2, [r3, #0]
  break;
 8008476:	e008      	b.n	800848a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008478:	4b07      	ldr	r3, [pc, #28]	; (8008498 <USBH_UserProcess+0x58>)
 800847a:	2202      	movs	r2, #2
 800847c:	701a      	strb	r2, [r3, #0]
  break;
 800847e:	e004      	b.n	800848a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008480:	4b05      	ldr	r3, [pc, #20]	; (8008498 <USBH_UserProcess+0x58>)
 8008482:	2201      	movs	r2, #1
 8008484:	701a      	strb	r2, [r3, #0]
  break;
 8008486:	e000      	b.n	800848a <USBH_UserProcess+0x4a>

  default:
  break;
 8008488:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800848a:	bf00      	nop
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	20000a20 	.word	0x20000a20

0800849c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b08a      	sub	sp, #40	; 0x28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084a4:	f107 0314 	add.w	r3, r7, #20
 80084a8:	2200      	movs	r2, #0
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	605a      	str	r2, [r3, #4]
 80084ae:	609a      	str	r2, [r3, #8]
 80084b0:	60da      	str	r2, [r3, #12]
 80084b2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084bc:	d147      	bne.n	800854e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084be:	2300      	movs	r3, #0
 80084c0:	613b      	str	r3, [r7, #16]
 80084c2:	4b25      	ldr	r3, [pc, #148]	; (8008558 <HAL_HCD_MspInit+0xbc>)
 80084c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c6:	4a24      	ldr	r2, [pc, #144]	; (8008558 <HAL_HCD_MspInit+0xbc>)
 80084c8:	f043 0301 	orr.w	r3, r3, #1
 80084cc:	6313      	str	r3, [r2, #48]	; 0x30
 80084ce:	4b22      	ldr	r3, [pc, #136]	; (8008558 <HAL_HCD_MspInit+0xbc>)
 80084d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	613b      	str	r3, [r7, #16]
 80084d8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80084da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084e0:	2300      	movs	r3, #0
 80084e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084e4:	2300      	movs	r3, #0
 80084e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80084e8:	f107 0314 	add.w	r3, r7, #20
 80084ec:	4619      	mov	r1, r3
 80084ee:	481b      	ldr	r0, [pc, #108]	; (800855c <HAL_HCD_MspInit+0xc0>)
 80084f0:	f7f9 f86c 	bl	80015cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80084f4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80084f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084fa:	2302      	movs	r3, #2
 80084fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084fe:	2300      	movs	r3, #0
 8008500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008502:	2303      	movs	r3, #3
 8008504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008506:	230a      	movs	r3, #10
 8008508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800850a:	f107 0314 	add.w	r3, r7, #20
 800850e:	4619      	mov	r1, r3
 8008510:	4812      	ldr	r0, [pc, #72]	; (800855c <HAL_HCD_MspInit+0xc0>)
 8008512:	f7f9 f85b 	bl	80015cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008516:	4b10      	ldr	r3, [pc, #64]	; (8008558 <HAL_HCD_MspInit+0xbc>)
 8008518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800851a:	4a0f      	ldr	r2, [pc, #60]	; (8008558 <HAL_HCD_MspInit+0xbc>)
 800851c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008520:	6353      	str	r3, [r2, #52]	; 0x34
 8008522:	2300      	movs	r3, #0
 8008524:	60fb      	str	r3, [r7, #12]
 8008526:	4b0c      	ldr	r3, [pc, #48]	; (8008558 <HAL_HCD_MspInit+0xbc>)
 8008528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800852a:	4a0b      	ldr	r2, [pc, #44]	; (8008558 <HAL_HCD_MspInit+0xbc>)
 800852c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008530:	6453      	str	r3, [r2, #68]	; 0x44
 8008532:	4b09      	ldr	r3, [pc, #36]	; (8008558 <HAL_HCD_MspInit+0xbc>)
 8008534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800853a:	60fb      	str	r3, [r7, #12]
 800853c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800853e:	2200      	movs	r2, #0
 8008540:	2100      	movs	r1, #0
 8008542:	2043      	movs	r0, #67	; 0x43
 8008544:	f7f9 f80b 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008548:	2043      	movs	r0, #67	; 0x43
 800854a:	f7f9 f824 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800854e:	bf00      	nop
 8008550:	3728      	adds	r7, #40	; 0x28
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	40023800 	.word	0x40023800
 800855c:	40020000 	.word	0x40020000

08008560 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800856e:	4618      	mov	r0, r3
 8008570:	f7ff f8d9 	bl	8007726 <USBH_LL_IncTimer>
}
 8008574:	bf00      	nop
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800858a:	4618      	mov	r0, r3
 800858c:	f7ff f911 	bl	80077b2 <USBH_LL_Connect>
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff f91a 	bl	80077e0 <USBH_LL_Disconnect>
}
 80085ac:	bf00      	nop
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	70fb      	strb	r3, [r7, #3]
 80085c0:	4613      	mov	r3, r2
 80085c2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff f8cb 	bl	800777a <USBH_LL_PortEnabled>
}
 80085e4:	bf00      	nop
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7ff f8cb 	bl	8007796 <USBH_LL_PortDisabled>
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008616:	2b01      	cmp	r3, #1
 8008618:	d12a      	bne.n	8008670 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800861a:	4a18      	ldr	r2, [pc, #96]	; (800867c <USBH_LL_Init+0x74>)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a15      	ldr	r2, [pc, #84]	; (800867c <USBH_LL_Init+0x74>)
 8008626:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800862a:	4b14      	ldr	r3, [pc, #80]	; (800867c <USBH_LL_Init+0x74>)
 800862c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008630:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008632:	4b12      	ldr	r3, [pc, #72]	; (800867c <USBH_LL_Init+0x74>)
 8008634:	2208      	movs	r2, #8
 8008636:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008638:	4b10      	ldr	r3, [pc, #64]	; (800867c <USBH_LL_Init+0x74>)
 800863a:	2201      	movs	r2, #1
 800863c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800863e:	4b0f      	ldr	r3, [pc, #60]	; (800867c <USBH_LL_Init+0x74>)
 8008640:	2200      	movs	r2, #0
 8008642:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008644:	4b0d      	ldr	r3, [pc, #52]	; (800867c <USBH_LL_Init+0x74>)
 8008646:	2202      	movs	r2, #2
 8008648:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800864a:	4b0c      	ldr	r3, [pc, #48]	; (800867c <USBH_LL_Init+0x74>)
 800864c:	2200      	movs	r2, #0
 800864e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008650:	480a      	ldr	r0, [pc, #40]	; (800867c <USBH_LL_Init+0x74>)
 8008652:	f7f9 f989 	bl	8001968 <HAL_HCD_Init>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800865c:	f7f8 fb58 	bl	8000d10 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008660:	4806      	ldr	r0, [pc, #24]	; (800867c <USBH_LL_Init+0x74>)
 8008662:	f7f9 fd8d 	bl	8002180 <HAL_HCD_GetCurrentFrame>
 8008666:	4603      	mov	r3, r0
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff f84c 	bl	8007708 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20000fc8 	.word	0x20000fc8

08008680 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008696:	4618      	mov	r0, r3
 8008698:	f7f9 fcfa 	bl	8002090 <HAL_HCD_Start>
 800869c:	4603      	mov	r3, r0
 800869e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 f95c 	bl	8008960 <USBH_Get_USB_Status>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b084      	sub	sp, #16
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7f9 fd02 	bl	80020d6 <HAL_HCD_Stop>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 f941 	bl	8008960 <USBH_Get_USB_Status>
 80086de:	4603      	mov	r3, r0
 80086e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80086f4:	2301      	movs	r3, #1
 80086f6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086fe:	4618      	mov	r0, r3
 8008700:	f7f9 fd4c 	bl	800219c <HAL_HCD_GetCurrentSpeed>
 8008704:	4603      	mov	r3, r0
 8008706:	2b01      	cmp	r3, #1
 8008708:	d007      	beq.n	800871a <USBH_LL_GetSpeed+0x2e>
 800870a:	2b01      	cmp	r3, #1
 800870c:	d302      	bcc.n	8008714 <USBH_LL_GetSpeed+0x28>
 800870e:	2b02      	cmp	r3, #2
 8008710:	d006      	beq.n	8008720 <USBH_LL_GetSpeed+0x34>
 8008712:	e008      	b.n	8008726 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008714:	2300      	movs	r3, #0
 8008716:	73fb      	strb	r3, [r7, #15]
    break;
 8008718:	e008      	b.n	800872c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800871a:	2301      	movs	r3, #1
 800871c:	73fb      	strb	r3, [r7, #15]
    break;
 800871e:	e005      	b.n	800872c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008720:	2302      	movs	r3, #2
 8008722:	73fb      	strb	r3, [r7, #15]
    break;
 8008724:	e002      	b.n	800872c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008726:	2301      	movs	r3, #1
 8008728:	73fb      	strb	r3, [r7, #15]
    break;
 800872a:	bf00      	nop
  }
  return  speed;
 800872c:	7bfb      	ldrb	r3, [r7, #15]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800874c:	4618      	mov	r0, r3
 800874e:	f7f9 fcdf 	bl	8002110 <HAL_HCD_ResetPort>
 8008752:	4603      	mov	r3, r0
 8008754:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	4618      	mov	r0, r3
 800875a:	f000 f901 	bl	8008960 <USBH_Get_USB_Status>
 800875e:	4603      	mov	r3, r0
 8008760:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008762:	7bbb      	ldrb	r3, [r7, #14]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800877e:	78fa      	ldrb	r2, [r7, #3]
 8008780:	4611      	mov	r1, r2
 8008782:	4618      	mov	r0, r3
 8008784:	f7f9 fce7 	bl	8002156 <HAL_HCD_HC_GetXferCount>
 8008788:	4603      	mov	r3, r0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008792:	b590      	push	{r4, r7, lr}
 8008794:	b089      	sub	sp, #36	; 0x24
 8008796:	af04      	add	r7, sp, #16
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	4608      	mov	r0, r1
 800879c:	4611      	mov	r1, r2
 800879e:	461a      	mov	r2, r3
 80087a0:	4603      	mov	r3, r0
 80087a2:	70fb      	strb	r3, [r7, #3]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70bb      	strb	r3, [r7, #2]
 80087a8:	4613      	mov	r3, r2
 80087aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80087ba:	787c      	ldrb	r4, [r7, #1]
 80087bc:	78ba      	ldrb	r2, [r7, #2]
 80087be:	78f9      	ldrb	r1, [r7, #3]
 80087c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087c2:	9302      	str	r3, [sp, #8]
 80087c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087c8:	9301      	str	r3, [sp, #4]
 80087ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	4623      	mov	r3, r4
 80087d2:	f7f9 f92b 	bl	8001a2c <HAL_HCD_HC_Init>
 80087d6:	4603      	mov	r3, r0
 80087d8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80087da:	7bfb      	ldrb	r3, [r7, #15]
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 f8bf 	bl	8008960 <USBH_Get_USB_Status>
 80087e2:	4603      	mov	r3, r0
 80087e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd90      	pop	{r4, r7, pc}

080087f0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800880a:	78fa      	ldrb	r2, [r7, #3]
 800880c:	4611      	mov	r1, r2
 800880e:	4618      	mov	r0, r3
 8008810:	f7f9 f9a4 	bl	8001b5c <HAL_HCD_HC_Halt>
 8008814:	4603      	mov	r3, r0
 8008816:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008818:	7bfb      	ldrb	r3, [r7, #15]
 800881a:	4618      	mov	r0, r3
 800881c:	f000 f8a0 	bl	8008960 <USBH_Get_USB_Status>
 8008820:	4603      	mov	r3, r0
 8008822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008824:	7bbb      	ldrb	r3, [r7, #14]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800882e:	b590      	push	{r4, r7, lr}
 8008830:	b089      	sub	sp, #36	; 0x24
 8008832:	af04      	add	r7, sp, #16
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	4608      	mov	r0, r1
 8008838:	4611      	mov	r1, r2
 800883a:	461a      	mov	r2, r3
 800883c:	4603      	mov	r3, r0
 800883e:	70fb      	strb	r3, [r7, #3]
 8008840:	460b      	mov	r3, r1
 8008842:	70bb      	strb	r3, [r7, #2]
 8008844:	4613      	mov	r3, r2
 8008846:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008856:	787c      	ldrb	r4, [r7, #1]
 8008858:	78ba      	ldrb	r2, [r7, #2]
 800885a:	78f9      	ldrb	r1, [r7, #3]
 800885c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008860:	9303      	str	r3, [sp, #12]
 8008862:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008864:	9302      	str	r3, [sp, #8]
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	9301      	str	r3, [sp, #4]
 800886a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	4623      	mov	r3, r4
 8008872:	f7f9 f997 	bl	8001ba4 <HAL_HCD_HC_SubmitRequest>
 8008876:	4603      	mov	r3, r0
 8008878:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	4618      	mov	r0, r3
 800887e:	f000 f86f 	bl	8008960 <USBH_Get_USB_Status>
 8008882:	4603      	mov	r3, r0
 8008884:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008886:	7bbb      	ldrb	r3, [r7, #14]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	bd90      	pop	{r4, r7, pc}

08008890 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088a2:	78fa      	ldrb	r2, [r7, #3]
 80088a4:	4611      	mov	r1, r2
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7f9 fc40 	bl	800212c <HAL_HCD_HC_GetURBState>
 80088ac:	4603      	mov	r3, r0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	460b      	mov	r3, r1
 80088c0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d103      	bne.n	80088d4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80088cc:	78fb      	ldrb	r3, [r7, #3]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 f872 	bl	80089b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80088d4:	20c8      	movs	r0, #200	; 0xc8
 80088d6:	f7f8 fd45 	bl	8001364 <HAL_Delay>
  return USBH_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70fb      	strb	r3, [r7, #3]
 80088f0:	4613      	mov	r3, r2
 80088f2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088fa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80088fc:	78fa      	ldrb	r2, [r7, #3]
 80088fe:	68f9      	ldr	r1, [r7, #12]
 8008900:	4613      	mov	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	00db      	lsls	r3, r3, #3
 8008908:	440b      	add	r3, r1
 800890a:	333b      	adds	r3, #59	; 0x3b
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00a      	beq.n	8008928 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008912:	78fa      	ldrb	r2, [r7, #3]
 8008914:	68f9      	ldr	r1, [r7, #12]
 8008916:	4613      	mov	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	00db      	lsls	r3, r3, #3
 800891e:	440b      	add	r3, r1
 8008920:	3350      	adds	r3, #80	; 0x50
 8008922:	78ba      	ldrb	r2, [r7, #2]
 8008924:	701a      	strb	r2, [r3, #0]
 8008926:	e009      	b.n	800893c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008928:	78fa      	ldrb	r2, [r7, #3]
 800892a:	68f9      	ldr	r1, [r7, #12]
 800892c:	4613      	mov	r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	440b      	add	r3, r1
 8008936:	3351      	adds	r3, #81	; 0x51
 8008938:	78ba      	ldrb	r2, [r7, #2]
 800893a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b082      	sub	sp, #8
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7f8 fd06 	bl	8001364 <HAL_Delay>
}
 8008958:	bf00      	nop
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	2b03      	cmp	r3, #3
 8008972:	d817      	bhi.n	80089a4 <USBH_Get_USB_Status+0x44>
 8008974:	a201      	add	r2, pc, #4	; (adr r2, 800897c <USBH_Get_USB_Status+0x1c>)
 8008976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897a:	bf00      	nop
 800897c:	0800898d 	.word	0x0800898d
 8008980:	08008993 	.word	0x08008993
 8008984:	08008999 	.word	0x08008999
 8008988:	0800899f 	.word	0x0800899f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	73fb      	strb	r3, [r7, #15]
    break;
 8008990:	e00b      	b.n	80089aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008992:	2302      	movs	r3, #2
 8008994:	73fb      	strb	r3, [r7, #15]
    break;
 8008996:	e008      	b.n	80089aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008998:	2301      	movs	r3, #1
 800899a:	73fb      	strb	r3, [r7, #15]
    break;
 800899c:	e005      	b.n	80089aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800899e:	2302      	movs	r3, #2
 80089a0:	73fb      	strb	r3, [r7, #15]
    break;
 80089a2:	e002      	b.n	80089aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80089a4:	2302      	movs	r3, #2
 80089a6:	73fb      	strb	r3, [r7, #15]
    break;
 80089a8:	bf00      	nop
  }
  return usb_status;
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	4603      	mov	r3, r0
 80089c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80089c2:	79fb      	ldrb	r3, [r7, #7]
 80089c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80089c6:	79fb      	ldrb	r3, [r7, #7]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d102      	bne.n	80089d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80089cc:	2301      	movs	r3, #1
 80089ce:	73fb      	strb	r3, [r7, #15]
 80089d0:	e001      	b.n	80089d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80089d2:	2300      	movs	r3, #0
 80089d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
 80089d8:	461a      	mov	r2, r3
 80089da:	2101      	movs	r1, #1
 80089dc:	4803      	ldr	r0, [pc, #12]	; (80089ec <MX_DriverVbusFS+0x34>)
 80089de:	f7f8 ff77 	bl	80018d0 <HAL_GPIO_WritePin>
}
 80089e2:	bf00      	nop
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	40020800 	.word	0x40020800

080089f0 <__errno>:
 80089f0:	4b01      	ldr	r3, [pc, #4]	; (80089f8 <__errno+0x8>)
 80089f2:	6818      	ldr	r0, [r3, #0]
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	20000030 	.word	0x20000030

080089fc <__libc_init_array>:
 80089fc:	b570      	push	{r4, r5, r6, lr}
 80089fe:	4e0d      	ldr	r6, [pc, #52]	; (8008a34 <__libc_init_array+0x38>)
 8008a00:	4c0d      	ldr	r4, [pc, #52]	; (8008a38 <__libc_init_array+0x3c>)
 8008a02:	1ba4      	subs	r4, r4, r6
 8008a04:	10a4      	asrs	r4, r4, #2
 8008a06:	2500      	movs	r5, #0
 8008a08:	42a5      	cmp	r5, r4
 8008a0a:	d109      	bne.n	8008a20 <__libc_init_array+0x24>
 8008a0c:	4e0b      	ldr	r6, [pc, #44]	; (8008a3c <__libc_init_array+0x40>)
 8008a0e:	4c0c      	ldr	r4, [pc, #48]	; (8008a40 <__libc_init_array+0x44>)
 8008a10:	f000 f8ea 	bl	8008be8 <_init>
 8008a14:	1ba4      	subs	r4, r4, r6
 8008a16:	10a4      	asrs	r4, r4, #2
 8008a18:	2500      	movs	r5, #0
 8008a1a:	42a5      	cmp	r5, r4
 8008a1c:	d105      	bne.n	8008a2a <__libc_init_array+0x2e>
 8008a1e:	bd70      	pop	{r4, r5, r6, pc}
 8008a20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a24:	4798      	blx	r3
 8008a26:	3501      	adds	r5, #1
 8008a28:	e7ee      	b.n	8008a08 <__libc_init_array+0xc>
 8008a2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a2e:	4798      	blx	r3
 8008a30:	3501      	adds	r5, #1
 8008a32:	e7f2      	b.n	8008a1a <__libc_init_array+0x1e>
 8008a34:	08008c24 	.word	0x08008c24
 8008a38:	08008c24 	.word	0x08008c24
 8008a3c:	08008c24 	.word	0x08008c24
 8008a40:	08008c28 	.word	0x08008c28

08008a44 <malloc>:
 8008a44:	4b02      	ldr	r3, [pc, #8]	; (8008a50 <malloc+0xc>)
 8008a46:	4601      	mov	r1, r0
 8008a48:	6818      	ldr	r0, [r3, #0]
 8008a4a:	f000 b861 	b.w	8008b10 <_malloc_r>
 8008a4e:	bf00      	nop
 8008a50:	20000030 	.word	0x20000030

08008a54 <free>:
 8008a54:	4b02      	ldr	r3, [pc, #8]	; (8008a60 <free+0xc>)
 8008a56:	4601      	mov	r1, r0
 8008a58:	6818      	ldr	r0, [r3, #0]
 8008a5a:	f000 b80b 	b.w	8008a74 <_free_r>
 8008a5e:	bf00      	nop
 8008a60:	20000030 	.word	0x20000030

08008a64 <memset>:
 8008a64:	4402      	add	r2, r0
 8008a66:	4603      	mov	r3, r0
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d100      	bne.n	8008a6e <memset+0xa>
 8008a6c:	4770      	bx	lr
 8008a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a72:	e7f9      	b.n	8008a68 <memset+0x4>

08008a74 <_free_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4605      	mov	r5, r0
 8008a78:	2900      	cmp	r1, #0
 8008a7a:	d045      	beq.n	8008b08 <_free_r+0x94>
 8008a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a80:	1f0c      	subs	r4, r1, #4
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	bfb8      	it	lt
 8008a86:	18e4      	addlt	r4, r4, r3
 8008a88:	f000 f8ac 	bl	8008be4 <__malloc_lock>
 8008a8c:	4a1f      	ldr	r2, [pc, #124]	; (8008b0c <_free_r+0x98>)
 8008a8e:	6813      	ldr	r3, [r2, #0]
 8008a90:	4610      	mov	r0, r2
 8008a92:	b933      	cbnz	r3, 8008aa2 <_free_r+0x2e>
 8008a94:	6063      	str	r3, [r4, #4]
 8008a96:	6014      	str	r4, [r2, #0]
 8008a98:	4628      	mov	r0, r5
 8008a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a9e:	f000 b8a2 	b.w	8008be6 <__malloc_unlock>
 8008aa2:	42a3      	cmp	r3, r4
 8008aa4:	d90c      	bls.n	8008ac0 <_free_r+0x4c>
 8008aa6:	6821      	ldr	r1, [r4, #0]
 8008aa8:	1862      	adds	r2, r4, r1
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	bf04      	itt	eq
 8008aae:	681a      	ldreq	r2, [r3, #0]
 8008ab0:	685b      	ldreq	r3, [r3, #4]
 8008ab2:	6063      	str	r3, [r4, #4]
 8008ab4:	bf04      	itt	eq
 8008ab6:	1852      	addeq	r2, r2, r1
 8008ab8:	6022      	streq	r2, [r4, #0]
 8008aba:	6004      	str	r4, [r0, #0]
 8008abc:	e7ec      	b.n	8008a98 <_free_r+0x24>
 8008abe:	4613      	mov	r3, r2
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	b10a      	cbz	r2, 8008ac8 <_free_r+0x54>
 8008ac4:	42a2      	cmp	r2, r4
 8008ac6:	d9fa      	bls.n	8008abe <_free_r+0x4a>
 8008ac8:	6819      	ldr	r1, [r3, #0]
 8008aca:	1858      	adds	r0, r3, r1
 8008acc:	42a0      	cmp	r0, r4
 8008ace:	d10b      	bne.n	8008ae8 <_free_r+0x74>
 8008ad0:	6820      	ldr	r0, [r4, #0]
 8008ad2:	4401      	add	r1, r0
 8008ad4:	1858      	adds	r0, r3, r1
 8008ad6:	4282      	cmp	r2, r0
 8008ad8:	6019      	str	r1, [r3, #0]
 8008ada:	d1dd      	bne.n	8008a98 <_free_r+0x24>
 8008adc:	6810      	ldr	r0, [r2, #0]
 8008ade:	6852      	ldr	r2, [r2, #4]
 8008ae0:	605a      	str	r2, [r3, #4]
 8008ae2:	4401      	add	r1, r0
 8008ae4:	6019      	str	r1, [r3, #0]
 8008ae6:	e7d7      	b.n	8008a98 <_free_r+0x24>
 8008ae8:	d902      	bls.n	8008af0 <_free_r+0x7c>
 8008aea:	230c      	movs	r3, #12
 8008aec:	602b      	str	r3, [r5, #0]
 8008aee:	e7d3      	b.n	8008a98 <_free_r+0x24>
 8008af0:	6820      	ldr	r0, [r4, #0]
 8008af2:	1821      	adds	r1, r4, r0
 8008af4:	428a      	cmp	r2, r1
 8008af6:	bf04      	itt	eq
 8008af8:	6811      	ldreq	r1, [r2, #0]
 8008afa:	6852      	ldreq	r2, [r2, #4]
 8008afc:	6062      	str	r2, [r4, #4]
 8008afe:	bf04      	itt	eq
 8008b00:	1809      	addeq	r1, r1, r0
 8008b02:	6021      	streq	r1, [r4, #0]
 8008b04:	605c      	str	r4, [r3, #4]
 8008b06:	e7c7      	b.n	8008a98 <_free_r+0x24>
 8008b08:	bd38      	pop	{r3, r4, r5, pc}
 8008b0a:	bf00      	nop
 8008b0c:	20000a24 	.word	0x20000a24

08008b10 <_malloc_r>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	1ccd      	adds	r5, r1, #3
 8008b14:	f025 0503 	bic.w	r5, r5, #3
 8008b18:	3508      	adds	r5, #8
 8008b1a:	2d0c      	cmp	r5, #12
 8008b1c:	bf38      	it	cc
 8008b1e:	250c      	movcc	r5, #12
 8008b20:	2d00      	cmp	r5, #0
 8008b22:	4606      	mov	r6, r0
 8008b24:	db01      	blt.n	8008b2a <_malloc_r+0x1a>
 8008b26:	42a9      	cmp	r1, r5
 8008b28:	d903      	bls.n	8008b32 <_malloc_r+0x22>
 8008b2a:	230c      	movs	r3, #12
 8008b2c:	6033      	str	r3, [r6, #0]
 8008b2e:	2000      	movs	r0, #0
 8008b30:	bd70      	pop	{r4, r5, r6, pc}
 8008b32:	f000 f857 	bl	8008be4 <__malloc_lock>
 8008b36:	4a21      	ldr	r2, [pc, #132]	; (8008bbc <_malloc_r+0xac>)
 8008b38:	6814      	ldr	r4, [r2, #0]
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	b991      	cbnz	r1, 8008b64 <_malloc_r+0x54>
 8008b3e:	4c20      	ldr	r4, [pc, #128]	; (8008bc0 <_malloc_r+0xb0>)
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	b91b      	cbnz	r3, 8008b4c <_malloc_r+0x3c>
 8008b44:	4630      	mov	r0, r6
 8008b46:	f000 f83d 	bl	8008bc4 <_sbrk_r>
 8008b4a:	6020      	str	r0, [r4, #0]
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f000 f838 	bl	8008bc4 <_sbrk_r>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	d124      	bne.n	8008ba2 <_malloc_r+0x92>
 8008b58:	230c      	movs	r3, #12
 8008b5a:	6033      	str	r3, [r6, #0]
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f000 f842 	bl	8008be6 <__malloc_unlock>
 8008b62:	e7e4      	b.n	8008b2e <_malloc_r+0x1e>
 8008b64:	680b      	ldr	r3, [r1, #0]
 8008b66:	1b5b      	subs	r3, r3, r5
 8008b68:	d418      	bmi.n	8008b9c <_malloc_r+0x8c>
 8008b6a:	2b0b      	cmp	r3, #11
 8008b6c:	d90f      	bls.n	8008b8e <_malloc_r+0x7e>
 8008b6e:	600b      	str	r3, [r1, #0]
 8008b70:	50cd      	str	r5, [r1, r3]
 8008b72:	18cc      	adds	r4, r1, r3
 8008b74:	4630      	mov	r0, r6
 8008b76:	f000 f836 	bl	8008be6 <__malloc_unlock>
 8008b7a:	f104 000b 	add.w	r0, r4, #11
 8008b7e:	1d23      	adds	r3, r4, #4
 8008b80:	f020 0007 	bic.w	r0, r0, #7
 8008b84:	1ac3      	subs	r3, r0, r3
 8008b86:	d0d3      	beq.n	8008b30 <_malloc_r+0x20>
 8008b88:	425a      	negs	r2, r3
 8008b8a:	50e2      	str	r2, [r4, r3]
 8008b8c:	e7d0      	b.n	8008b30 <_malloc_r+0x20>
 8008b8e:	428c      	cmp	r4, r1
 8008b90:	684b      	ldr	r3, [r1, #4]
 8008b92:	bf16      	itet	ne
 8008b94:	6063      	strne	r3, [r4, #4]
 8008b96:	6013      	streq	r3, [r2, #0]
 8008b98:	460c      	movne	r4, r1
 8008b9a:	e7eb      	b.n	8008b74 <_malloc_r+0x64>
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	6849      	ldr	r1, [r1, #4]
 8008ba0:	e7cc      	b.n	8008b3c <_malloc_r+0x2c>
 8008ba2:	1cc4      	adds	r4, r0, #3
 8008ba4:	f024 0403 	bic.w	r4, r4, #3
 8008ba8:	42a0      	cmp	r0, r4
 8008baa:	d005      	beq.n	8008bb8 <_malloc_r+0xa8>
 8008bac:	1a21      	subs	r1, r4, r0
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f000 f808 	bl	8008bc4 <_sbrk_r>
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	d0cf      	beq.n	8008b58 <_malloc_r+0x48>
 8008bb8:	6025      	str	r5, [r4, #0]
 8008bba:	e7db      	b.n	8008b74 <_malloc_r+0x64>
 8008bbc:	20000a24 	.word	0x20000a24
 8008bc0:	20000a28 	.word	0x20000a28

08008bc4 <_sbrk_r>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	4c06      	ldr	r4, [pc, #24]	; (8008be0 <_sbrk_r+0x1c>)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	4605      	mov	r5, r0
 8008bcc:	4608      	mov	r0, r1
 8008bce:	6023      	str	r3, [r4, #0]
 8008bd0:	f7f8 fae0 	bl	8001194 <_sbrk>
 8008bd4:	1c43      	adds	r3, r0, #1
 8008bd6:	d102      	bne.n	8008bde <_sbrk_r+0x1a>
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	b103      	cbz	r3, 8008bde <_sbrk_r+0x1a>
 8008bdc:	602b      	str	r3, [r5, #0]
 8008bde:	bd38      	pop	{r3, r4, r5, pc}
 8008be0:	2000128c 	.word	0x2000128c

08008be4 <__malloc_lock>:
 8008be4:	4770      	bx	lr

08008be6 <__malloc_unlock>:
 8008be6:	4770      	bx	lr

08008be8 <_init>:
 8008be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bea:	bf00      	nop
 8008bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bee:	bc08      	pop	{r3}
 8008bf0:	469e      	mov	lr, r3
 8008bf2:	4770      	bx	lr

08008bf4 <_fini>:
 8008bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf6:	bf00      	nop
 8008bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfa:	bc08      	pop	{r3}
 8008bfc:	469e      	mov	lr, r3
 8008bfe:	4770      	bx	lr
