
ir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a80  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002c14  08002c14  00012c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c4c  08002c4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c4c  08002c4c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c4c  08002c4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c4c  08002c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000000c  08002c60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08002c60  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a35b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017c1  00000000  00000000  0002a397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002bb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002c4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f347  00000000  00000000  0002cde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc5b  00000000  00000000  0004c127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1038  00000000  00000000  00057d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118dba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c4  00000000  00000000  00118e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002bfc 	.word	0x08002bfc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002bfc 	.word	0x08002bfc

080001d4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80001e4:	d138      	bne.n	8000258 <HAL_TIM_IC_CaptureCallback+0x84>
		IC_Val1 = __HAL_TIM_GetCounter(&htim2);
 80001e6:	4b2f      	ldr	r3, [pc, #188]	; (80002a4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001ec:	4a2e      	ldr	r2, [pc, #184]	; (80002a8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80001ee:	6013      	str	r3, [r2, #0]
		a++;
 80001f0:	4b2e      	ldr	r3, [pc, #184]	; (80002ac <HAL_TIM_IC_CaptureCallback+0xd8>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	3301      	adds	r3, #1
 80001f6:	b2da      	uxtb	r2, r3
 80001f8:	4b2c      	ldr	r3, [pc, #176]	; (80002ac <HAL_TIM_IC_CaptureCallback+0xd8>)
 80001fa:	701a      	strb	r2, [r3, #0]
		if(a%2 == 0){
 80001fc:	4b2b      	ldr	r3, [pc, #172]	; (80002ac <HAL_TIM_IC_CaptureCallback+0xd8>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	f003 0301 	and.w	r3, r3, #1
 8000204:	b2db      	uxtb	r3, r3
 8000206:	2b00      	cmp	r3, #0
 8000208:	d112      	bne.n	8000230 <HAL_TIM_IC_CaptureCallback+0x5c>
			SPACE = IC_Val1;
 800020a:	4b27      	ldr	r3, [pc, #156]	; (80002a8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a28      	ldr	r2, [pc, #160]	; (80002b0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000210:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 8000212:	4b24      	ldr	r3, [pc, #144]	; (80002a4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	6a1a      	ldr	r2, [r3, #32]
 8000218:	4b22      	ldr	r3, [pc, #136]	; (80002a4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f022 020a 	bic.w	r2, r2, #10
 8000220:	621a      	str	r2, [r3, #32]
 8000222:	4b20      	ldr	r3, [pc, #128]	; (80002a4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	4b1f      	ldr	r3, [pc, #124]	; (80002a4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	6a12      	ldr	r2, [r2, #32]
 800022c:	621a      	str	r2, [r3, #32]
 800022e:	e013      	b.n	8000258 <HAL_TIM_IC_CaptureCallback+0x84>
		}
		else{
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8000230:	4b1c      	ldr	r3, [pc, #112]	; (80002a4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	6a1a      	ldr	r2, [r3, #32]
 8000236:	4b1b      	ldr	r3, [pc, #108]	; (80002a4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f022 020a 	bic.w	r2, r2, #10
 800023e:	621a      	str	r2, [r3, #32]
 8000240:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	6a1a      	ldr	r2, [r3, #32]
 8000246:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f042 0202 	orr.w	r2, r2, #2
 800024e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SetCounter(htim,0);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2200      	movs	r2, #0
 8000256:	625a      	str	r2, [r3, #36]	; 0x24
			}
	}
	if(SPACE < 300){
 8000258:	4b15      	ldr	r3, [pc, #84]	; (80002b0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000260:	d217      	bcs.n	8000292 <HAL_TIM_IC_CaptureCallback+0xbe>
		if(SPACE > 11){
 8000262:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b0b      	cmp	r3, #11
 8000268:	d909      	bls.n	800027e <HAL_TIM_IC_CaptureCallback+0xaa>
			data[(a/2-1)] ="1";
 800026a:	4a12      	ldr	r2, [pc, #72]	; (80002b4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <HAL_TIM_IC_CaptureCallback+0xd8>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	085b      	lsrs	r3, r3, #1
 8000272:	b2db      	uxtb	r3, r3
 8000274:	3b01      	subs	r3, #1
 8000276:	b2d1      	uxtb	r1, r2
 8000278:	4a0f      	ldr	r2, [pc, #60]	; (80002b8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800027a:	54d1      	strb	r1, [r2, r3]
		}
	}
	else{
		a = 0;
	}
}
 800027c:	e00c      	b.n	8000298 <HAL_TIM_IC_CaptureCallback+0xc4>
			data[(a/2-1)] ="0";
 800027e:	4a0f      	ldr	r2, [pc, #60]	; (80002bc <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	085b      	lsrs	r3, r3, #1
 8000286:	b2db      	uxtb	r3, r3
 8000288:	3b01      	subs	r3, #1
 800028a:	b2d1      	uxtb	r1, r2
 800028c:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800028e:	54d1      	strb	r1, [r2, r3]
}
 8000290:	e002      	b.n	8000298 <HAL_TIM_IC_CaptureCallback+0xc4>
		a = 0;
 8000292:	4b06      	ldr	r3, [pc, #24]	; (80002ac <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	20000050 	.word	0x20000050
 80002a8:	2000002c 	.word	0x2000002c
 80002ac:	2000009c 	.word	0x2000009c
 80002b0:	20000028 	.word	0x20000028
 80002b4:	08002c14 	.word	0x08002c14
 80002b8:	20000030 	.word	0x20000030
 80002bc:	08002c18 	.word	0x08002c18

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c4:	f000 f9b4 	bl	8000630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c8:	f000 f80e 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002cc:	f000 f8b6 	bl	800043c <MX_GPIO_Init>
  MX_TIM2_Init();
 80002d0:	f000 f85e 	bl	8000390 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  counterVal = __HAL_TIM_GetCounter(&htim2);
 80002d4:	4b02      	ldr	r3, [pc, #8]	; (80002e0 <main+0x20>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002da:	4a02      	ldr	r2, [pc, #8]	; (80002e4 <main+0x24>)
 80002dc:	6013      	str	r3, [r2, #0]
 80002de:	e7f9      	b.n	80002d4 <main+0x14>
 80002e0:	20000050 	.word	0x20000050
 80002e4:	200000a0 	.word	0x200000a0

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b0a6      	sub	sp, #152	; 0x98
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002f2:	2228      	movs	r2, #40	; 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 fc78 	bl	8002bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2258      	movs	r2, #88	; 0x58
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f002 fc6a 	bl	8002bec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000318:	2302      	movs	r3, #2
 800031a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031c:	2301      	movs	r3, #1
 800031e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000320:	2310      	movs	r3, #16
 8000322:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000326:	2300      	movs	r3, #0
 8000328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fc7f 	bl	8000c34 <HAL_RCC_OscConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800033c:	f000 f896 	bl	800046c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	230f      	movs	r3, #15
 8000342:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000344:	2300      	movs	r3, #0
 8000346:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000354:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f001 fb80 	bl	8001a60 <HAL_RCC_ClockConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000366:	f000 f881 	bl	800046c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM2;
 800036a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800036e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000370:	2300      	movs	r3, #0
 8000372:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	4618      	mov	r0, r3
 8000378:	f001 fd58 	bl	8001e2c <HAL_RCCEx_PeriphCLKConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000382:	f000 f873 	bl	800046c <Error_Handler>
  }
}
 8000386:	bf00      	nop
 8000388:	3798      	adds	r7, #152	; 0x98
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003ae:	4b21      	ldr	r3, [pc, #132]	; (8000434 <MX_TIM2_Init+0xa4>)
 80003b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 80003b6:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <MX_TIM2_Init+0xa4>)
 80003b8:	f240 321f 	movw	r2, #799	; 0x31f
 80003bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003be:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <MX_TIM2_Init+0xa4>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <MX_TIM2_Init+0xa4>)
 80003c6:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <MX_TIM2_Init+0xa8>)
 80003c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_TIM2_Init+0xa4>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d0:	4b18      	ldr	r3, [pc, #96]	; (8000434 <MX_TIM2_Init+0xa4>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80003d6:	4817      	ldr	r0, [pc, #92]	; (8000434 <MX_TIM2_Init+0xa4>)
 80003d8:	f001 ff46 	bl	8002268 <HAL_TIM_IC_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80003e2:	f000 f843 	bl	800046c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003ee:	f107 0314 	add.w	r3, r7, #20
 80003f2:	4619      	mov	r1, r3
 80003f4:	480f      	ldr	r0, [pc, #60]	; (8000434 <MX_TIM2_Init+0xa4>)
 80003f6:	f002 fb2b 	bl	8002a50 <HAL_TIMEx_MasterConfigSynchronization>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000400:	f000 f834 	bl	800046c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000404:	2300      	movs	r3, #0
 8000406:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000408:	2301      	movs	r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	4619      	mov	r1, r3
 800041a:	4806      	ldr	r0, [pc, #24]	; (8000434 <MX_TIM2_Init+0xa4>)
 800041c:	f002 f89a 	bl	8002554 <HAL_TIM_IC_ConfigChannel>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000426:	f000 f821 	bl	800046c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800042a:	bf00      	nop
 800042c:	3720      	adds	r7, #32
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000050 	.word	0x20000050
 8000438:	0001869f 	.word	0x0001869f

0800043c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <MX_GPIO_Init+0x2c>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a08      	ldr	r2, [pc, #32]	; (8000468 <MX_GPIO_Init+0x2c>)
 8000448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <MX_GPIO_Init+0x2c>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000470:	b672      	cpsid	i
}
 8000472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000474:	e7fe      	b.n	8000474 <Error_Handler+0x8>
	...

08000478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <HAL_MspInit+0x44>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <HAL_MspInit+0x44>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6193      	str	r3, [r2, #24]
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <HAL_MspInit+0x44>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <HAL_MspInit+0x44>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	4a08      	ldr	r2, [pc, #32]	; (80004bc <HAL_MspInit+0x44>)
 800049c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a0:	61d3      	str	r3, [r2, #28]
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <HAL_MspInit+0x44>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000

080004c0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c8:	f107 0314 	add.w	r3, r7, #20
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004e0:	d130      	bne.n	8000544 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004e2:	4b1a      	ldr	r3, [pc, #104]	; (800054c <HAL_TIM_IC_MspInit+0x8c>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a19      	ldr	r2, [pc, #100]	; (800054c <HAL_TIM_IC_MspInit+0x8c>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b17      	ldr	r3, [pc, #92]	; (800054c <HAL_TIM_IC_MspInit+0x8c>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b14      	ldr	r3, [pc, #80]	; (800054c <HAL_TIM_IC_MspInit+0x8c>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a13      	ldr	r2, [pc, #76]	; (800054c <HAL_TIM_IC_MspInit+0x8c>)
 8000500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <HAL_TIM_IC_MspInit+0x8c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000512:	2301      	movs	r3, #1
 8000514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000516:	2302      	movs	r3, #2
 8000518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800051a:	2301      	movs	r3, #1
 800051c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2300      	movs	r3, #0
 8000520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000522:	2301      	movs	r3, #1
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	4619      	mov	r1, r3
 800052c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000530:	f000 f9f6 	bl	8000920 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000534:	2200      	movs	r2, #0
 8000536:	2100      	movs	r1, #0
 8000538:	201c      	movs	r0, #28
 800053a:	f000 f9ba 	bl	80008b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800053e:	201c      	movs	r0, #28
 8000540:	f000 f9d3 	bl	80008ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000544:	bf00      	nop
 8000546:	3728      	adds	r7, #40	; 0x28
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40021000 	.word	0x40021000

08000550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <NMI_Handler+0x4>

08000556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055a:	e7fe      	b.n	800055a <HardFault_Handler+0x4>

0800055c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <MemManage_Handler+0x4>

08000562 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000566:	e7fe      	b.n	8000566 <BusFault_Handler+0x4>

08000568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800056c:	e7fe      	b.n	800056c <UsageFault_Handler+0x4>

0800056e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059c:	f000 f88e 	bl	80006bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <TIM2_IRQHandler+0x10>)
 80005aa:	f001 feb4 	bl	8002316 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000050 	.word	0x20000050

080005b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <SystemInit+0x20>)
 80005be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <SystemInit+0x20>)
 80005c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000614 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e2:	490e      	ldr	r1, [pc, #56]	; (800061c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e4:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <LoopForever+0xe>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e8:	e002      	b.n	80005f0 <LoopCopyDataInit>

080005ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ee:	3304      	adds	r3, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f4:	d3f9      	bcc.n	80005ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f6:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f8:	4c0b      	ldr	r4, [pc, #44]	; (8000628 <LoopForever+0x16>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005fc:	e001      	b.n	8000602 <LoopFillZerobss>

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000600:	3204      	adds	r2, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000606:	f7ff ffd7 	bl	80005b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800060a:	f002 facb 	bl	8002ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800060e:	f7ff fe57 	bl	80002c0 <main>

08000612 <LoopForever>:

LoopForever:
    b LoopForever
 8000612:	e7fe      	b.n	8000612 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000614:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000620:	08002c54 	.word	0x08002c54
  ldr r2, =_sbss
 8000624:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000628:	200000a8 	.word	0x200000a8

0800062c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC1_2_IRQHandler>
	...

08000630 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_Init+0x28>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <HAL_Init+0x28>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000640:	2003      	movs	r0, #3
 8000642:	f000 f92b 	bl	800089c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000646:	2000      	movs	r0, #0
 8000648:	f000 f808 	bl	800065c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800064c:	f7ff ff14 	bl	8000478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40022000 	.word	0x40022000

0800065c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_InitTick+0x54>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_InitTick+0x58>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000672:	fbb3 f3f1 	udiv	r3, r3, r1
 8000676:	fbb2 f3f3 	udiv	r3, r2, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f943 	bl	8000906 <HAL_SYSTICK_Config>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	e00e      	b.n	80006a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d80a      	bhi.n	80006a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000690:	2200      	movs	r2, #0
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f000 f90b 	bl	80008b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800069c:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <HAL_InitTick+0x5c>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006a2:	2300      	movs	r3, #0
 80006a4:	e000      	b.n	80006a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000000 	.word	0x20000000
 80006b4:	20000008 	.word	0x20000008
 80006b8:	20000004 	.word	0x20000004

080006bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_IncTick+0x20>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_IncTick+0x24>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_IncTick+0x24>)
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000008 	.word	0x20000008
 80006e0:	200000a4 	.word	0x200000a4

080006e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <HAL_GetTick+0x14>)
 80006ea:	681b      	ldr	r3, [r3, #0]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	200000a4 	.word	0x200000a4

080006fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <__NVIC_SetPriorityGrouping+0x44>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000718:	4013      	ands	r3, r2
 800071a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072e:	4a04      	ldr	r2, [pc, #16]	; (8000740 <__NVIC_SetPriorityGrouping+0x44>)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	60d3      	str	r3, [r2, #12]
}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <__NVIC_GetPriorityGrouping+0x18>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	0a1b      	lsrs	r3, r3, #8
 800074e:	f003 0307 	and.w	r3, r3, #7
}
 8000752:	4618      	mov	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	2b00      	cmp	r3, #0
 8000770:	db0b      	blt.n	800078a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f003 021f 	and.w	r2, r3, #31
 8000778:	4907      	ldr	r1, [pc, #28]	; (8000798 <__NVIC_EnableIRQ+0x38>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	095b      	lsrs	r3, r3, #5
 8000780:	2001      	movs	r0, #1
 8000782:	fa00 f202 	lsl.w	r2, r0, r2
 8000786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000e100 	.word	0xe000e100

0800079c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	db0a      	blt.n	80007c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	490c      	ldr	r1, [pc, #48]	; (80007e8 <__NVIC_SetPriority+0x4c>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	b2d2      	uxtb	r2, r2
 80007be:	440b      	add	r3, r1
 80007c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c4:	e00a      	b.n	80007dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4908      	ldr	r1, [pc, #32]	; (80007ec <__NVIC_SetPriority+0x50>)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	3b04      	subs	r3, #4
 80007d4:	0112      	lsls	r2, r2, #4
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	440b      	add	r3, r1
 80007da:	761a      	strb	r2, [r3, #24]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000e100 	.word	0xe000e100
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b089      	sub	sp, #36	; 0x24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	f1c3 0307 	rsb	r3, r3, #7
 800080a:	2b04      	cmp	r3, #4
 800080c:	bf28      	it	cs
 800080e:	2304      	movcs	r3, #4
 8000810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3304      	adds	r3, #4
 8000816:	2b06      	cmp	r3, #6
 8000818:	d902      	bls.n	8000820 <NVIC_EncodePriority+0x30>
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3b03      	subs	r3, #3
 800081e:	e000      	b.n	8000822 <NVIC_EncodePriority+0x32>
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	43da      	mvns	r2, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	401a      	ands	r2, r3
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000838:	f04f 31ff 	mov.w	r1, #4294967295
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43d9      	mvns	r1, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	4313      	orrs	r3, r2
         );
}
 800084a:	4618      	mov	r0, r3
 800084c:	3724      	adds	r7, #36	; 0x24
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3b01      	subs	r3, #1
 8000864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000868:	d301      	bcc.n	800086e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800086a:	2301      	movs	r3, #1
 800086c:	e00f      	b.n	800088e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <SysTick_Config+0x40>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3b01      	subs	r3, #1
 8000874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000876:	210f      	movs	r1, #15
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f7ff ff8e 	bl	800079c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <SysTick_Config+0x40>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <SysTick_Config+0x40>)
 8000888:	2207      	movs	r2, #7
 800088a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	e000e010 	.word	0xe000e010

0800089c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff ff29 	bl	80006fc <__NVIC_SetPriorityGrouping>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b086      	sub	sp, #24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
 80008be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008c4:	f7ff ff3e 	bl	8000744 <__NVIC_GetPriorityGrouping>
 80008c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	68b9      	ldr	r1, [r7, #8]
 80008ce:	6978      	ldr	r0, [r7, #20]
 80008d0:	f7ff ff8e 	bl	80007f0 <NVIC_EncodePriority>
 80008d4:	4602      	mov	r2, r0
 80008d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008da:	4611      	mov	r1, r2
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff5d 	bl	800079c <__NVIC_SetPriority>
}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff31 	bl	8000760 <__NVIC_EnableIRQ>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ffa2 	bl	8000858 <SysTick_Config>
 8000914:	4603      	mov	r3, r0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000920:	b480      	push	{r7}
 8000922:	b087      	sub	sp, #28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800092e:	e160      	b.n	8000bf2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	2101      	movs	r1, #1
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	fa01 f303 	lsl.w	r3, r1, r3
 800093c:	4013      	ands	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	f000 8152 	beq.w	8000bec <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d00b      	beq.n	8000968 <HAL_GPIO_Init+0x48>
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	2b02      	cmp	r3, #2
 8000956:	d007      	beq.n	8000968 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800095c:	2b11      	cmp	r3, #17
 800095e:	d003      	beq.n	8000968 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2b12      	cmp	r3, #18
 8000966:	d130      	bne.n	80009ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	2203      	movs	r2, #3
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	68da      	ldr	r2, [r3, #12]
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4313      	orrs	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800099e:	2201      	movs	r2, #1
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	091b      	lsrs	r3, r3, #4
 80009b4:	f003 0201 	and.w	r2, r3, #1
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	2203      	movs	r2, #3
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d003      	beq.n	8000a0a <HAL_GPIO_Init+0xea>
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b12      	cmp	r3, #18
 8000a08:	d123      	bne.n	8000a52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	08da      	lsrs	r2, r3, #3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3208      	adds	r2, #8
 8000a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	220f      	movs	r2, #15
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	691a      	ldr	r2, [r3, #16]
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	f003 0307 	and.w	r3, r3, #7
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	08da      	lsrs	r2, r3, #3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3208      	adds	r2, #8
 8000a4c:	6939      	ldr	r1, [r7, #16]
 8000a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f003 0203 	and.w	r2, r3, #3
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f000 80ac 	beq.w	8000bec <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a94:	4b5e      	ldr	r3, [pc, #376]	; (8000c10 <HAL_GPIO_Init+0x2f0>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a5d      	ldr	r2, [pc, #372]	; (8000c10 <HAL_GPIO_Init+0x2f0>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b5b      	ldr	r3, [pc, #364]	; (8000c10 <HAL_GPIO_Init+0x2f0>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000aac:	4a59      	ldr	r2, [pc, #356]	; (8000c14 <HAL_GPIO_Init+0x2f4>)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	220f      	movs	r2, #15
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ad6:	d025      	beq.n	8000b24 <HAL_GPIO_Init+0x204>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a4f      	ldr	r2, [pc, #316]	; (8000c18 <HAL_GPIO_Init+0x2f8>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d01f      	beq.n	8000b20 <HAL_GPIO_Init+0x200>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a4e      	ldr	r2, [pc, #312]	; (8000c1c <HAL_GPIO_Init+0x2fc>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d019      	beq.n	8000b1c <HAL_GPIO_Init+0x1fc>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a4d      	ldr	r2, [pc, #308]	; (8000c20 <HAL_GPIO_Init+0x300>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d013      	beq.n	8000b18 <HAL_GPIO_Init+0x1f8>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a4c      	ldr	r2, [pc, #304]	; (8000c24 <HAL_GPIO_Init+0x304>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d00d      	beq.n	8000b14 <HAL_GPIO_Init+0x1f4>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a4b      	ldr	r2, [pc, #300]	; (8000c28 <HAL_GPIO_Init+0x308>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d007      	beq.n	8000b10 <HAL_GPIO_Init+0x1f0>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a4a      	ldr	r2, [pc, #296]	; (8000c2c <HAL_GPIO_Init+0x30c>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d101      	bne.n	8000b0c <HAL_GPIO_Init+0x1ec>
 8000b08:	2306      	movs	r3, #6
 8000b0a:	e00c      	b.n	8000b26 <HAL_GPIO_Init+0x206>
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	e00a      	b.n	8000b26 <HAL_GPIO_Init+0x206>
 8000b10:	2305      	movs	r3, #5
 8000b12:	e008      	b.n	8000b26 <HAL_GPIO_Init+0x206>
 8000b14:	2304      	movs	r3, #4
 8000b16:	e006      	b.n	8000b26 <HAL_GPIO_Init+0x206>
 8000b18:	2303      	movs	r3, #3
 8000b1a:	e004      	b.n	8000b26 <HAL_GPIO_Init+0x206>
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	e002      	b.n	8000b26 <HAL_GPIO_Init+0x206>
 8000b20:	2301      	movs	r3, #1
 8000b22:	e000      	b.n	8000b26 <HAL_GPIO_Init+0x206>
 8000b24:	2300      	movs	r3, #0
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	f002 0203 	and.w	r2, r2, #3
 8000b2c:	0092      	lsls	r2, r2, #2
 8000b2e:	4093      	lsls	r3, r2
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b36:	4937      	ldr	r1, [pc, #220]	; (8000c14 <HAL_GPIO_Init+0x2f4>)
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b44:	4b3a      	ldr	r3, [pc, #232]	; (8000c30 <HAL_GPIO_Init+0x310>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b68:	4a31      	ldr	r2, [pc, #196]	; (8000c30 <HAL_GPIO_Init+0x310>)
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b6e:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <HAL_GPIO_Init+0x310>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b92:	4a27      	ldr	r2, [pc, #156]	; (8000c30 <HAL_GPIO_Init+0x310>)
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <HAL_GPIO_Init+0x310>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d003      	beq.n	8000bbc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bbc:	4a1c      	ldr	r2, [pc, #112]	; (8000c30 <HAL_GPIO_Init+0x310>)
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <HAL_GPIO_Init+0x310>)
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <HAL_GPIO_Init+0x310>)
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f47f ae97 	bne.w	8000930 <HAL_GPIO_Init+0x10>
  }
}
 8000c02:	bf00      	nop
 8000c04:	bf00      	nop
 8000c06:	371c      	adds	r7, #28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010000 	.word	0x40010000
 8000c18:	48000400 	.word	0x48000400
 8000c1c:	48000800 	.word	0x48000800
 8000c20:	48000c00 	.word	0x48000c00
 8000c24:	48001000 	.word	0x48001000
 8000c28:	48001400 	.word	0x48001400
 8000c2c:	48001800 	.word	0x48001800
 8000c30:	40010400 	.word	0x40010400

08000c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	f000 bf01 	b.w	8001a50 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f000 8160 	beq.w	8000f1e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c5e:	4bae      	ldr	r3, [pc, #696]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 030c 	and.w	r3, r3, #12
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	d00c      	beq.n	8000c84 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c6a:	4bab      	ldr	r3, [pc, #684]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f003 030c 	and.w	r3, r3, #12
 8000c72:	2b08      	cmp	r3, #8
 8000c74:	d159      	bne.n	8000d2a <HAL_RCC_OscConfig+0xf6>
 8000c76:	4ba8      	ldr	r3, [pc, #672]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c82:	d152      	bne.n	8000d2a <HAL_RCC_OscConfig+0xf6>
 8000c84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c88:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c8c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000c90:	fa93 f3a3 	rbit	r3, r3
 8000c94:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c98:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c9c:	fab3 f383 	clz	r3, r3
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d102      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x82>
 8000cb0:	4b99      	ldr	r3, [pc, #612]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	e015      	b.n	8000ce2 <HAL_RCC_OscConfig+0xae>
 8000cb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000cc2:	fa93 f3a3 	rbit	r3, r3
 8000cc6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000cca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000cd2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000cd6:	fa93 f3a3 	rbit	r3, r3
 8000cda:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000cde:	4b8e      	ldr	r3, [pc, #568]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ce6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000cea:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000cee:	fa92 f2a2 	rbit	r2, r2
 8000cf2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000cf6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	f042 0220 	orr.w	r2, r2, #32
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	f002 021f 	and.w	r2, r2, #31
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d10:	4013      	ands	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f000 8102 	beq.w	8000f1c <HAL_RCC_OscConfig+0x2e8>
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 80fc 	bne.w	8000f1c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	f000 be93 	b.w	8001a50 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d34:	d106      	bne.n	8000d44 <HAL_RCC_OscConfig+0x110>
 8000d36:	4b78      	ldr	r3, [pc, #480]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a77      	ldr	r2, [pc, #476]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	e030      	b.n	8000da6 <HAL_RCC_OscConfig+0x172>
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10c      	bne.n	8000d68 <HAL_RCC_OscConfig+0x134>
 8000d4e:	4b72      	ldr	r3, [pc, #456]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a71      	ldr	r2, [pc, #452]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	4b6f      	ldr	r3, [pc, #444]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a6e      	ldr	r2, [pc, #440]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000d60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	e01e      	b.n	8000da6 <HAL_RCC_OscConfig+0x172>
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d72:	d10c      	bne.n	8000d8e <HAL_RCC_OscConfig+0x15a>
 8000d74:	4b68      	ldr	r3, [pc, #416]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a67      	ldr	r2, [pc, #412]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000d7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	4b65      	ldr	r3, [pc, #404]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a64      	ldr	r2, [pc, #400]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	e00b      	b.n	8000da6 <HAL_RCC_OscConfig+0x172>
 8000d8e:	4b62      	ldr	r3, [pc, #392]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a61      	ldr	r2, [pc, #388]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	4b5f      	ldr	r3, [pc, #380]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a5e      	ldr	r2, [pc, #376]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d059      	beq.n	8000e64 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fc98 	bl	80006e4 <HAL_GetTick>
 8000db4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db8:	e00a      	b.n	8000dd0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dba:	f7ff fc93 	bl	80006e4 <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b64      	cmp	r3, #100	; 0x64
 8000dc8:	d902      	bls.n	8000dd0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	f000 be40 	b.w	8001a50 <HAL_RCC_OscConfig+0xe1c>
 8000dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000ddc:	fa93 f3a3 	rbit	r3, r3
 8000de0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000de4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de8:	fab3 f383 	clz	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d102      	bne.n	8000e02 <HAL_RCC_OscConfig+0x1ce>
 8000dfc:	4b46      	ldr	r3, [pc, #280]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	e015      	b.n	8000e2e <HAL_RCC_OscConfig+0x1fa>
 8000e02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e06:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e0a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000e0e:	fa93 f3a3 	rbit	r3, r3
 8000e12:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000e16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e1a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e1e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000e22:	fa93 f3a3 	rbit	r3, r3
 8000e26:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e2a:	4b3b      	ldr	r3, [pc, #236]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e32:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000e36:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000e3a:	fa92 f2a2 	rbit	r2, r2
 8000e3e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000e42:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e46:	fab2 f282 	clz	r2, r2
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	f042 0220 	orr.w	r2, r2, #32
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	f002 021f 	and.w	r2, r2, #31
 8000e56:	2101      	movs	r1, #1
 8000e58:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0ab      	beq.n	8000dba <HAL_RCC_OscConfig+0x186>
 8000e62:	e05c      	b.n	8000f1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e64:	f7ff fc3e 	bl	80006e4 <HAL_GetTick>
 8000e68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e6c:	e00a      	b.n	8000e84 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e6e:	f7ff fc39 	bl	80006e4 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b64      	cmp	r3, #100	; 0x64
 8000e7c:	d902      	bls.n	8000e84 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	f000 bde6 	b.w	8001a50 <HAL_RCC_OscConfig+0xe1c>
 8000e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e88:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000e90:	fa93 f3a3 	rbit	r3, r3
 8000e94:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000e98:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9c:	fab3 f383 	clz	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d102      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x282>
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	e015      	b.n	8000ee2 <HAL_RCC_OscConfig+0x2ae>
 8000eb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000ec2:	fa93 f3a3 	rbit	r3, r3
 8000ec6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000eca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ece:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000ed2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000ed6:	fa93 f3a3 	rbit	r3, r3
 8000eda:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_RCC_OscConfig+0x2e4>)
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ee6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000eea:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000eee:	fa92 f2a2 	rbit	r2, r2
 8000ef2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000ef6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000efa:	fab2 f282 	clz	r2, r2
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	f042 0220 	orr.w	r2, r2, #32
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	f002 021f 	and.w	r2, r2, #31
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1ab      	bne.n	8000e6e <HAL_RCC_OscConfig+0x23a>
 8000f16:	e002      	b.n	8000f1e <HAL_RCC_OscConfig+0x2ea>
 8000f18:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 8170 	beq.w	800120e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f2e:	4bd0      	ldr	r3, [pc, #832]	; (8001270 <HAL_RCC_OscConfig+0x63c>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 030c 	and.w	r3, r3, #12
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d00c      	beq.n	8000f54 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f3a:	4bcd      	ldr	r3, [pc, #820]	; (8001270 <HAL_RCC_OscConfig+0x63c>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 030c 	and.w	r3, r3, #12
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	d16d      	bne.n	8001022 <HAL_RCC_OscConfig+0x3ee>
 8000f46:	4bca      	ldr	r3, [pc, #808]	; (8001270 <HAL_RCC_OscConfig+0x63c>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f52:	d166      	bne.n	8001022 <HAL_RCC_OscConfig+0x3ee>
 8000f54:	2302      	movs	r3, #2
 8000f56:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000f5e:	fa93 f3a3 	rbit	r3, r3
 8000f62:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000f66:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6a:	fab3 f383 	clz	r3, r3
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	095b      	lsrs	r3, r3, #5
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d102      	bne.n	8000f84 <HAL_RCC_OscConfig+0x350>
 8000f7e:	4bbc      	ldr	r3, [pc, #752]	; (8001270 <HAL_RCC_OscConfig+0x63c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	e013      	b.n	8000fac <HAL_RCC_OscConfig+0x378>
 8000f84:	2302      	movs	r3, #2
 8000f86:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000f8e:	fa93 f3a3 	rbit	r3, r3
 8000f92:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000f96:	2302      	movs	r3, #2
 8000f98:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f9c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000fa0:	fa93 f3a3 	rbit	r3, r3
 8000fa4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000fa8:	4bb1      	ldr	r3, [pc, #708]	; (8001270 <HAL_RCC_OscConfig+0x63c>)
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	2202      	movs	r2, #2
 8000fae:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000fb2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000fb6:	fa92 f2a2 	rbit	r2, r2
 8000fba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000fbe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000fc2:	fab2 f282 	clz	r2, r2
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	f042 0220 	orr.w	r2, r2, #32
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	f002 021f 	and.w	r2, r2, #31
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd8:	4013      	ands	r3, r2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d007      	beq.n	8000fee <HAL_RCC_OscConfig+0x3ba>
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d002      	beq.n	8000fee <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f000 bd31 	b.w	8001a50 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fee:	4ba0      	ldr	r3, [pc, #640]	; (8001270 <HAL_RCC_OscConfig+0x63c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	21f8      	movs	r1, #248	; 0xf8
 8000ffe:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001002:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001006:	fa91 f1a1 	rbit	r1, r1
 800100a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800100e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001012:	fab1 f181 	clz	r1, r1
 8001016:	b2c9      	uxtb	r1, r1
 8001018:	408b      	lsls	r3, r1
 800101a:	4995      	ldr	r1, [pc, #596]	; (8001270 <HAL_RCC_OscConfig+0x63c>)
 800101c:	4313      	orrs	r3, r2
 800101e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001020:	e0f5      	b.n	800120e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 8085 	beq.w	8001138 <HAL_RCC_OscConfig+0x504>
 800102e:	2301      	movs	r3, #1
 8001030:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001034:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001038:	fa93 f3a3 	rbit	r3, r3
 800103c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001040:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001044:	fab3 f383 	clz	r3, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800104e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	461a      	mov	r2, r3
 8001056:	2301      	movs	r3, #1
 8001058:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105a:	f7ff fb43 	bl	80006e4 <HAL_GetTick>
 800105e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001062:	e00a      	b.n	800107a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001064:	f7ff fb3e 	bl	80006e4 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d902      	bls.n	800107a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	f000 bceb 	b.w	8001a50 <HAL_RCC_OscConfig+0xe1c>
 800107a:	2302      	movs	r3, #2
 800107c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001080:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001084:	fa93 f3a3 	rbit	r3, r3
 8001088:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800108c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001090:	fab3 f383 	clz	r3, r3
 8001094:	b2db      	uxtb	r3, r3
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	b2db      	uxtb	r3, r3
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d102      	bne.n	80010aa <HAL_RCC_OscConfig+0x476>
 80010a4:	4b72      	ldr	r3, [pc, #456]	; (8001270 <HAL_RCC_OscConfig+0x63c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	e013      	b.n	80010d2 <HAL_RCC_OscConfig+0x49e>
 80010aa:	2302      	movs	r3, #2
 80010ac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80010b4:	fa93 f3a3 	rbit	r3, r3
 80010b8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80010bc:	2302      	movs	r3, #2
 80010be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80010c2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80010c6:	fa93 f3a3 	rbit	r3, r3
 80010ca:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80010ce:	4b68      	ldr	r3, [pc, #416]	; (8001270 <HAL_RCC_OscConfig+0x63c>)
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	2202      	movs	r2, #2
 80010d4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80010d8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80010dc:	fa92 f2a2 	rbit	r2, r2
 80010e0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80010e4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80010e8:	fab2 f282 	clz	r2, r2
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	f042 0220 	orr.w	r2, r2, #32
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	f002 021f 	and.w	r2, r2, #31
 80010f8:	2101      	movs	r1, #1
 80010fa:	fa01 f202 	lsl.w	r2, r1, r2
 80010fe:	4013      	ands	r3, r2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0af      	beq.n	8001064 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001104:	4b5a      	ldr	r3, [pc, #360]	; (8001270 <HAL_RCC_OscConfig+0x63c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	21f8      	movs	r1, #248	; 0xf8
 8001114:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001118:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800111c:	fa91 f1a1 	rbit	r1, r1
 8001120:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001124:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001128:	fab1 f181 	clz	r1, r1
 800112c:	b2c9      	uxtb	r1, r1
 800112e:	408b      	lsls	r3, r1
 8001130:	494f      	ldr	r1, [pc, #316]	; (8001270 <HAL_RCC_OscConfig+0x63c>)
 8001132:	4313      	orrs	r3, r2
 8001134:	600b      	str	r3, [r1, #0]
 8001136:	e06a      	b.n	800120e <HAL_RCC_OscConfig+0x5da>
 8001138:	2301      	movs	r3, #1
 800113a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001142:	fa93 f3a3 	rbit	r3, r3
 8001146:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800114a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800114e:	fab3 f383 	clz	r3, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001158:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	461a      	mov	r2, r3
 8001160:	2300      	movs	r3, #0
 8001162:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fabe 	bl	80006e4 <HAL_GetTick>
 8001168:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116c:	e00a      	b.n	8001184 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116e:	f7ff fab9 	bl	80006e4 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d902      	bls.n	8001184 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	f000 bc66 	b.w	8001a50 <HAL_RCC_OscConfig+0xe1c>
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800118e:	fa93 f3a3 	rbit	r3, r3
 8001192:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001196:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119a:	fab3 f383 	clz	r3, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	095b      	lsrs	r3, r3, #5
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d102      	bne.n	80011b4 <HAL_RCC_OscConfig+0x580>
 80011ae:	4b30      	ldr	r3, [pc, #192]	; (8001270 <HAL_RCC_OscConfig+0x63c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	e013      	b.n	80011dc <HAL_RCC_OscConfig+0x5a8>
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80011c6:	2302      	movs	r3, #2
 80011c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80011cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80011d0:	fa93 f3a3 	rbit	r3, r3
 80011d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <HAL_RCC_OscConfig+0x63c>)
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	2202      	movs	r2, #2
 80011de:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80011e2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80011e6:	fa92 f2a2 	rbit	r2, r2
 80011ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80011ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80011f2:	fab2 f282 	clz	r2, r2
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	f042 0220 	orr.w	r2, r2, #32
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	f002 021f 	and.w	r2, r2, #31
 8001202:	2101      	movs	r1, #1
 8001204:	fa01 f202 	lsl.w	r2, r1, r2
 8001208:	4013      	ands	r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1af      	bne.n	800116e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80da 	beq.w	80013d2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d069      	beq.n	80012fc <HAL_RCC_OscConfig+0x6c8>
 8001228:	2301      	movs	r3, #1
 800122a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001232:	fa93 f3a3 	rbit	r3, r3
 8001236:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800123a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800123e:	fab3 f383 	clz	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <HAL_RCC_OscConfig+0x640>)
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	461a      	mov	r2, r3
 800124e:	2301      	movs	r3, #1
 8001250:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001252:	f7ff fa47 	bl	80006e4 <HAL_GetTick>
 8001256:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125a:	e00d      	b.n	8001278 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125c:	f7ff fa42 	bl	80006e4 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d905      	bls.n	8001278 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e3ef      	b.n	8001a50 <HAL_RCC_OscConfig+0xe1c>
 8001270:	40021000 	.word	0x40021000
 8001274:	10908120 	.word	0x10908120
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001282:	fa93 f2a3 	rbit	r2, r3
 8001286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001290:	2202      	movs	r2, #2
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	fa93 f2a3 	rbit	r2, r3
 800129e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012a8:	2202      	movs	r2, #2
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	fa93 f2a3 	rbit	r2, r3
 80012b6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80012ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012bc:	4ba4      	ldr	r3, [pc, #656]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 80012be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012c0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80012c4:	2102      	movs	r1, #2
 80012c6:	6019      	str	r1, [r3, #0]
 80012c8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	fa93 f1a3 	rbit	r1, r3
 80012d2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80012d6:	6019      	str	r1, [r3, #0]
  return result;
 80012d8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	fab3 f383 	clz	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f003 031f 	and.w	r3, r3, #31
 80012ee:	2101      	movs	r1, #1
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0b0      	beq.n	800125c <HAL_RCC_OscConfig+0x628>
 80012fa:	e06a      	b.n	80013d2 <HAL_RCC_OscConfig+0x79e>
 80012fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001304:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	fa93 f2a3 	rbit	r2, r3
 800130e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001312:	601a      	str	r2, [r3, #0]
  return result;
 8001314:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001318:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131a:	fab3 f383 	clz	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	4b8c      	ldr	r3, [pc, #560]	; (8001554 <HAL_RCC_OscConfig+0x920>)
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	461a      	mov	r2, r3
 800132a:	2300      	movs	r3, #0
 800132c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132e:	f7ff f9d9 	bl	80006e4 <HAL_GetTick>
 8001332:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001336:	e009      	b.n	800134c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001338:	f7ff f9d4 	bl	80006e4 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e381      	b.n	8001a50 <HAL_RCC_OscConfig+0xe1c>
 800134c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001350:	2202      	movs	r2, #2
 8001352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001354:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	fa93 f2a3 	rbit	r2, r3
 800135e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001368:	2202      	movs	r2, #2
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	fa93 f2a3 	rbit	r2, r3
 8001376:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001380:	2202      	movs	r2, #2
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	fa93 f2a3 	rbit	r2, r3
 800138e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001392:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001394:	4b6e      	ldr	r3, [pc, #440]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 8001396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001398:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800139c:	2102      	movs	r1, #2
 800139e:	6019      	str	r1, [r3, #0]
 80013a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	fa93 f1a3 	rbit	r1, r3
 80013aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013ae:	6019      	str	r1, [r3, #0]
  return result;
 80013b0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	fab3 f383 	clz	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	2101      	movs	r1, #1
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1b2      	bne.n	8001338 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 8157 	beq.w	8001690 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e8:	4b59      	ldr	r3, [pc, #356]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d112      	bne.n	800141a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f4:	4b56      	ldr	r3, [pc, #344]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	4a55      	ldr	r2, [pc, #340]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 80013fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fe:	61d3      	str	r3, [r2, #28]
 8001400:	4b53      	ldr	r3, [pc, #332]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001414:	2301      	movs	r3, #1
 8001416:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141a:	4b4f      	ldr	r3, [pc, #316]	; (8001558 <HAL_RCC_OscConfig+0x924>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001422:	2b00      	cmp	r3, #0
 8001424:	d11a      	bne.n	800145c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001426:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <HAL_RCC_OscConfig+0x924>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a4b      	ldr	r2, [pc, #300]	; (8001558 <HAL_RCC_OscConfig+0x924>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001430:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001432:	f7ff f957 	bl	80006e4 <HAL_GetTick>
 8001436:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143a:	e009      	b.n	8001450 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143c:	f7ff f952 	bl	80006e4 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b64      	cmp	r3, #100	; 0x64
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e2ff      	b.n	8001a50 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001450:	4b41      	ldr	r3, [pc, #260]	; (8001558 <HAL_RCC_OscConfig+0x924>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0ef      	beq.n	800143c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d106      	bne.n	8001474 <HAL_RCC_OscConfig+0x840>
 8001466:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	4a39      	ldr	r2, [pc, #228]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6213      	str	r3, [r2, #32]
 8001472:	e02f      	b.n	80014d4 <HAL_RCC_OscConfig+0x8a0>
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x864>
 800147e:	4b34      	ldr	r3, [pc, #208]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4a33      	ldr	r2, [pc, #204]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6213      	str	r3, [r2, #32]
 800148a:	4b31      	ldr	r3, [pc, #196]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a30      	ldr	r2, [pc, #192]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 8001490:	f023 0304 	bic.w	r3, r3, #4
 8001494:	6213      	str	r3, [r2, #32]
 8001496:	e01d      	b.n	80014d4 <HAL_RCC_OscConfig+0x8a0>
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x888>
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4a2a      	ldr	r2, [pc, #168]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6213      	str	r3, [r2, #32]
 80014ae:	4b28      	ldr	r3, [pc, #160]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	4a27      	ldr	r2, [pc, #156]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6213      	str	r3, [r2, #32]
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0x8a0>
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4a23      	ldr	r2, [pc, #140]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 80014c2:	f023 0301 	bic.w	r3, r3, #1
 80014c6:	6213      	str	r3, [r2, #32]
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	4a20      	ldr	r2, [pc, #128]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 80014ce:	f023 0304 	bic.w	r3, r3, #4
 80014d2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d06a      	beq.n	80015b4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff f901 	bl	80006e4 <HAL_GetTick>
 80014e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e8:	f7ff f8fc 	bl	80006e4 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e2a7      	b.n	8001a50 <HAL_RCC_OscConfig+0xe1c>
 8001500:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001504:	2202      	movs	r2, #2
 8001506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001508:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	fa93 f2a3 	rbit	r2, r3
 8001512:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800151c:	2202      	movs	r2, #2
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	fa93 f2a3 	rbit	r2, r3
 800152a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800152e:	601a      	str	r2, [r3, #0]
  return result;
 8001530:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001534:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	095b      	lsrs	r3, r3, #5
 800153e:	b2db      	uxtb	r3, r3
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d108      	bne.n	800155c <HAL_RCC_OscConfig+0x928>
 800154a:	4b01      	ldr	r3, [pc, #4]	; (8001550 <HAL_RCC_OscConfig+0x91c>)
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	e013      	b.n	8001578 <HAL_RCC_OscConfig+0x944>
 8001550:	40021000 	.word	0x40021000
 8001554:	10908120 	.word	0x10908120
 8001558:	40007000 	.word	0x40007000
 800155c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001560:	2202      	movs	r2, #2
 8001562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001564:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	fa93 f2a3 	rbit	r2, r3
 800156e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	4bc0      	ldr	r3, [pc, #768]	; (8001878 <HAL_RCC_OscConfig+0xc44>)
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800157c:	2102      	movs	r1, #2
 800157e:	6011      	str	r1, [r2, #0]
 8001580:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	fa92 f1a2 	rbit	r1, r2
 800158a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800158e:	6011      	str	r1, [r2, #0]
  return result;
 8001590:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	fab2 f282 	clz	r2, r2
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	f002 021f 	and.w	r2, r2, #31
 80015a6:	2101      	movs	r1, #1
 80015a8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d09a      	beq.n	80014e8 <HAL_RCC_OscConfig+0x8b4>
 80015b2:	e063      	b.n	800167c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b4:	f7ff f896 	bl	80006e4 <HAL_GetTick>
 80015b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015bc:	e00b      	b.n	80015d6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7ff f891 	bl	80006e4 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e23c      	b.n	8001a50 <HAL_RCC_OscConfig+0xe1c>
 80015d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015da:	2202      	movs	r2, #2
 80015dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	fa93 f2a3 	rbit	r2, r3
 80015e8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015f2:	2202      	movs	r2, #2
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	fa93 f2a3 	rbit	r2, r3
 8001600:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001604:	601a      	str	r2, [r3, #0]
  return result;
 8001606:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800160a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160c:	fab3 f383 	clz	r3, r3
 8001610:	b2db      	uxtb	r3, r3
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f043 0302 	orr.w	r3, r3, #2
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d102      	bne.n	8001626 <HAL_RCC_OscConfig+0x9f2>
 8001620:	4b95      	ldr	r3, [pc, #596]	; (8001878 <HAL_RCC_OscConfig+0xc44>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	e00d      	b.n	8001642 <HAL_RCC_OscConfig+0xa0e>
 8001626:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800162a:	2202      	movs	r2, #2
 800162c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	fa93 f2a3 	rbit	r2, r3
 8001638:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	4b8e      	ldr	r3, [pc, #568]	; (8001878 <HAL_RCC_OscConfig+0xc44>)
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001646:	2102      	movs	r1, #2
 8001648:	6011      	str	r1, [r2, #0]
 800164a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	fa92 f1a2 	rbit	r1, r2
 8001654:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001658:	6011      	str	r1, [r2, #0]
  return result;
 800165a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	fab2 f282 	clz	r2, r2
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	f002 021f 	and.w	r2, r2, #31
 8001670:	2101      	movs	r1, #1
 8001672:	fa01 f202 	lsl.w	r2, r1, r2
 8001676:	4013      	ands	r3, r2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1a0      	bne.n	80015be <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800167c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001680:	2b01      	cmp	r3, #1
 8001682:	d105      	bne.n	8001690 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001684:	4b7c      	ldr	r3, [pc, #496]	; (8001878 <HAL_RCC_OscConfig+0xc44>)
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	4a7b      	ldr	r2, [pc, #492]	; (8001878 <HAL_RCC_OscConfig+0xc44>)
 800168a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800168e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 81d9 	beq.w	8001a4e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800169c:	4b76      	ldr	r3, [pc, #472]	; (8001878 <HAL_RCC_OscConfig+0xc44>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 030c 	and.w	r3, r3, #12
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	f000 81a6 	beq.w	80019f6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	f040 811e 	bne.w	80018f2 <HAL_RCC_OscConfig+0xcbe>
 80016b6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	fa93 f2a3 	rbit	r2, r3
 80016ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016ce:	601a      	str	r2, [r3, #0]
  return result;
 80016d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d6:	fab3 f383 	clz	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	461a      	mov	r2, r3
 80016e8:	2300      	movs	r3, #0
 80016ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7fe fffa 	bl	80006e4 <HAL_GetTick>
 80016f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f4:	e009      	b.n	800170a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f6:	f7fe fff5 	bl	80006e4 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e1a2      	b.n	8001a50 <HAL_RCC_OscConfig+0xe1c>
 800170a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800170e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001712:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001714:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	fa93 f2a3 	rbit	r2, r3
 800171e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001722:	601a      	str	r2, [r3, #0]
  return result;
 8001724:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001728:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172a:	fab3 f383 	clz	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	095b      	lsrs	r3, r3, #5
 8001732:	b2db      	uxtb	r3, r3
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b01      	cmp	r3, #1
 800173c:	d102      	bne.n	8001744 <HAL_RCC_OscConfig+0xb10>
 800173e:	4b4e      	ldr	r3, [pc, #312]	; (8001878 <HAL_RCC_OscConfig+0xc44>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	e01b      	b.n	800177c <HAL_RCC_OscConfig+0xb48>
 8001744:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001748:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800174c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	fa93 f2a3 	rbit	r2, r3
 8001758:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001762:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	fa93 f2a3 	rbit	r2, r3
 8001772:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <HAL_RCC_OscConfig+0xc44>)
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001780:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001784:	6011      	str	r1, [r2, #0]
 8001786:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	fa92 f1a2 	rbit	r1, r2
 8001790:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001794:	6011      	str	r1, [r2, #0]
  return result;
 8001796:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	fab2 f282 	clz	r2, r2
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	f042 0220 	orr.w	r2, r2, #32
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	f002 021f 	and.w	r2, r2, #31
 80017ac:	2101      	movs	r1, #1
 80017ae:	fa01 f202 	lsl.w	r2, r1, r2
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d19e      	bne.n	80016f6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b8:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <HAL_RCC_OscConfig+0xc44>)
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	f023 020f 	bic.w	r2, r3, #15
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	492c      	ldr	r1, [pc, #176]	; (8001878 <HAL_RCC_OscConfig+0xc44>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	62cb      	str	r3, [r1, #44]	; 0x2c
 80017cc:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <HAL_RCC_OscConfig+0xc44>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6a19      	ldr	r1, [r3, #32]
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	430b      	orrs	r3, r1
 80017e2:	4925      	ldr	r1, [pc, #148]	; (8001878 <HAL_RCC_OscConfig+0xc44>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]
 80017e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	fa93 f2a3 	rbit	r2, r3
 80017fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001800:	601a      	str	r2, [r3, #0]
  return result;
 8001802:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001806:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001808:	fab3 f383 	clz	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001812:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	461a      	mov	r2, r3
 800181a:	2301      	movs	r3, #1
 800181c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7fe ff61 	bl	80006e4 <HAL_GetTick>
 8001822:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001826:	e009      	b.n	800183c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001828:	f7fe ff5c 	bl	80006e4 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e109      	b.n	8001a50 <HAL_RCC_OscConfig+0xe1c>
 800183c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001840:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	fa93 f2a3 	rbit	r2, r3
 8001850:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001854:	601a      	str	r2, [r3, #0]
  return result;
 8001856:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800185a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800185c:	fab3 f383 	clz	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b01      	cmp	r3, #1
 800186e:	d105      	bne.n	800187c <HAL_RCC_OscConfig+0xc48>
 8001870:	4b01      	ldr	r3, [pc, #4]	; (8001878 <HAL_RCC_OscConfig+0xc44>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	e01e      	b.n	80018b4 <HAL_RCC_OscConfig+0xc80>
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001880:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001884:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fa93 f2a3 	rbit	r2, r3
 8001890:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800189a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	fa93 f2a3 	rbit	r2, r3
 80018aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	4b6a      	ldr	r3, [pc, #424]	; (8001a5c <HAL_RCC_OscConfig+0xe28>)
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80018b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018bc:	6011      	str	r1, [r2, #0]
 80018be:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	fa92 f1a2 	rbit	r1, r2
 80018c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018cc:	6011      	str	r1, [r2, #0]
  return result;
 80018ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	fab2 f282 	clz	r2, r2
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	f042 0220 	orr.w	r2, r2, #32
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	f002 021f 	and.w	r2, r2, #31
 80018e4:	2101      	movs	r1, #1
 80018e6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d09b      	beq.n	8001828 <HAL_RCC_OscConfig+0xbf4>
 80018f0:	e0ad      	b.n	8001a4e <HAL_RCC_OscConfig+0xe1a>
 80018f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	fa93 f2a3 	rbit	r2, r3
 8001906:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800190a:	601a      	str	r2, [r3, #0]
  return result;
 800190c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001910:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800191c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	461a      	mov	r2, r3
 8001924:	2300      	movs	r3, #0
 8001926:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7fe fedc 	bl	80006e4 <HAL_GetTick>
 800192c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001930:	e009      	b.n	8001946 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001932:	f7fe fed7 	bl	80006e4 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e084      	b.n	8001a50 <HAL_RCC_OscConfig+0xe1c>
 8001946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800194e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	fa93 f2a3 	rbit	r2, r3
 800195a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195e:	601a      	str	r2, [r3, #0]
  return result;
 8001960:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001964:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	095b      	lsrs	r3, r3, #5
 800196e:	b2db      	uxtb	r3, r3
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d102      	bne.n	8001980 <HAL_RCC_OscConfig+0xd4c>
 800197a:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <HAL_RCC_OscConfig+0xe28>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	e01b      	b.n	80019b8 <HAL_RCC_OscConfig+0xd84>
 8001980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001984:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fa93 f2a3 	rbit	r2, r3
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	fa93 f2a3 	rbit	r2, r3
 80019ae:	f107 0318 	add.w	r3, r7, #24
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <HAL_RCC_OscConfig+0xe28>)
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	f107 0214 	add.w	r2, r7, #20
 80019bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019c0:	6011      	str	r1, [r2, #0]
 80019c2:	f107 0214 	add.w	r2, r7, #20
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	fa92 f1a2 	rbit	r1, r2
 80019cc:	f107 0210 	add.w	r2, r7, #16
 80019d0:	6011      	str	r1, [r2, #0]
  return result;
 80019d2:	f107 0210 	add.w	r2, r7, #16
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	fab2 f282 	clz	r2, r2
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	f042 0220 	orr.w	r2, r2, #32
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	f002 021f 	and.w	r2, r2, #31
 80019e8:	2101      	movs	r1, #1
 80019ea:	fa01 f202 	lsl.w	r2, r1, r2
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d19e      	bne.n	8001932 <HAL_RCC_OscConfig+0xcfe>
 80019f4:	e02b      	b.n	8001a4e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e025      	b.n	8001a50 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_RCC_OscConfig+0xe28>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <HAL_RCC_OscConfig+0xe28>)
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a18:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d111      	bne.n	8001a4a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001a26:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d108      	bne.n	8001a4a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a3c:	f003 020f 	and.w	r2, r3, #15
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b09e      	sub	sp, #120	; 0x78
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e162      	b.n	8001d3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a78:	4b90      	ldr	r3, [pc, #576]	; (8001cbc <HAL_RCC_ClockConfig+0x25c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d910      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b8d      	ldr	r3, [pc, #564]	; (8001cbc <HAL_RCC_ClockConfig+0x25c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 0207 	bic.w	r2, r3, #7
 8001a8e:	498b      	ldr	r1, [pc, #556]	; (8001cbc <HAL_RCC_ClockConfig+0x25c>)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b89      	ldr	r3, [pc, #548]	; (8001cbc <HAL_RCC_ClockConfig+0x25c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e14a      	b.n	8001d3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab4:	4b82      	ldr	r3, [pc, #520]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	497f      	ldr	r1, [pc, #508]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80dc 	beq.w	8001c8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d13c      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xf6>
 8001adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aec:	fab3 f383 	clz	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	095b      	lsrs	r3, r3, #5
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d102      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xa6>
 8001b00:	4b6f      	ldr	r3, [pc, #444]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	e00f      	b.n	8001b26 <HAL_RCC_ClockConfig+0xc6>
 8001b06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	667b      	str	r3, [r7, #100]	; 0x64
 8001b14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b18:	663b      	str	r3, [r7, #96]	; 0x60
 8001b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b22:	4b67      	ldr	r3, [pc, #412]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b2e:	fa92 f2a2 	rbit	r2, r2
 8001b32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001b34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b36:	fab2 f282 	clz	r2, r2
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	f042 0220 	orr.w	r2, r2, #32
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	f002 021f 	and.w	r2, r2, #31
 8001b46:	2101      	movs	r1, #1
 8001b48:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d17b      	bne.n	8001c4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e0f3      	b.n	8001d3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d13c      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0x178>
 8001b5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	095b      	lsrs	r3, r3, #5
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d102      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x128>
 8001b82:	4b4f      	ldr	r3, [pc, #316]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	e00f      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x148>
 8001b88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b90:	fa93 f3a3 	rbit	r3, r3
 8001b94:	647b      	str	r3, [r7, #68]	; 0x44
 8001b96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b9a:	643b      	str	r3, [r7, #64]	; 0x40
 8001b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ba4:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bac:	63ba      	str	r2, [r7, #56]	; 0x38
 8001bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bb0:	fa92 f2a2 	rbit	r2, r2
 8001bb4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bb8:	fab2 f282 	clz	r2, r2
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	f042 0220 	orr.w	r2, r2, #32
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	f002 021f 	and.w	r2, r2, #31
 8001bc8:	2101      	movs	r1, #1
 8001bca:	fa01 f202 	lsl.w	r2, r1, r2
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d13a      	bne.n	8001c4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0b2      	b.n	8001d3e <HAL_RCC_ClockConfig+0x2de>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	095b      	lsrs	r3, r3, #5
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d102      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x1a0>
 8001bfa:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	e00d      	b.n	8001c1c <HAL_RCC_ClockConfig+0x1bc>
 8001c00:	2302      	movs	r3, #2
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	623b      	str	r3, [r7, #32]
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	61ba      	str	r2, [r7, #24]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	fa92 f2a2 	rbit	r2, r2
 8001c26:	617a      	str	r2, [r7, #20]
  return result;
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	fab2 f282 	clz	r2, r2
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	f042 0220 	orr.w	r2, r2, #32
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	f002 021f 	and.w	r2, r2, #31
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e079      	b.n	8001d3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f023 0203 	bic.w	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	491a      	ldr	r1, [pc, #104]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c5c:	f7fe fd42 	bl	80006e4 <HAL_GetTick>
 8001c60:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c62:	e00a      	b.n	8001c7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c64:	f7fe fd3e 	bl	80006e4 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e061      	b.n	8001d3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 020c 	and.w	r2, r3, #12
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d1eb      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_RCC_ClockConfig+0x25c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d214      	bcs.n	8001cc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_RCC_ClockConfig+0x25c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 0207 	bic.w	r2, r3, #7
 8001ca2:	4906      	ldr	r1, [pc, #24]	; (8001cbc <HAL_RCC_ClockConfig+0x25c>)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <HAL_RCC_ClockConfig+0x25c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d005      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e040      	b.n	8001d3e <HAL_RCC_ClockConfig+0x2de>
 8001cbc:	40022000 	.word	0x40022000
 8001cc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCC_ClockConfig+0x2e8>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	491a      	ldr	r1, [pc, #104]	; (8001d48 <HAL_RCC_ClockConfig+0x2e8>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <HAL_RCC_ClockConfig+0x2e8>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4912      	ldr	r1, [pc, #72]	; (8001d48 <HAL_RCC_ClockConfig+0x2e8>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d02:	f000 f829 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001d06:	4601      	mov	r1, r0
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_RCC_ClockConfig+0x2e8>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d10:	22f0      	movs	r2, #240	; 0xf0
 8001d12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	fa92 f2a2 	rbit	r2, r2
 8001d1a:	60fa      	str	r2, [r7, #12]
  return result;
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	fab2 f282 	clz	r2, r2
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	40d3      	lsrs	r3, r2
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_RCC_ClockConfig+0x2ec>)
 8001d28:	5cd3      	ldrb	r3, [r2, r3]
 8001d2a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d2e:	4a08      	ldr	r2, [pc, #32]	; (8001d50 <HAL_RCC_ClockConfig+0x2f0>)
 8001d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <HAL_RCC_ClockConfig+0x2f4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc90 	bl	800065c <HAL_InitTick>
  
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3778      	adds	r7, #120	; 0x78
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	08002c1c 	.word	0x08002c1c
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b08b      	sub	sp, #44	; 0x2c
 8001d5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d002      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x30>
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x36>
 8001d86:	e03f      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d88:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d8a:	623b      	str	r3, [r7, #32]
      break;
 8001d8c:	e03f      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001d98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	fa92 f2a2 	rbit	r2, r2
 8001da0:	607a      	str	r2, [r7, #4]
  return result;
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	fab2 f282 	clz	r2, r2
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	40d3      	lsrs	r3, r2
 8001dac:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001dae:	5cd3      	ldrb	r3, [r2, r3]
 8001db0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	220f      	movs	r2, #15
 8001dbc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	fa92 f2a2 	rbit	r2, r2
 8001dc4:	60fa      	str	r2, [r7, #12]
  return result;
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	fab2 f282 	clz	r2, r2
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	40d3      	lsrs	r3, r2
 8001dd0:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001dd2:	5cd3      	ldrb	r3, [r2, r3]
 8001dd4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001de0:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
 8001df0:	e007      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001df2:	4a0b      	ldr	r2, [pc, #44]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	fb02 f303 	mul.w	r3, r2, r3
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	623b      	str	r3, [r7, #32]
      break;
 8001e06:	e002      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e0a:	623b      	str	r3, [r7, #32]
      break;
 8001e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	372c      	adds	r7, #44	; 0x2c
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	007a1200 	.word	0x007a1200
 8001e24:	08002c2c 	.word	0x08002c2c
 8001e28:	08002c3c 	.word	0x08002c3c

08001e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b092      	sub	sp, #72	; 0x48
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80d4 	beq.w	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e50:	4b4e      	ldr	r3, [pc, #312]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10e      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5c:	4b4b      	ldr	r3, [pc, #300]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	4a4a      	ldr	r2, [pc, #296]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e66:	61d3      	str	r3, [r2, #28]
 8001e68:	4b48      	ldr	r3, [pc, #288]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e74:	2301      	movs	r3, #1
 8001e76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7a:	4b45      	ldr	r3, [pc, #276]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d118      	bne.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e86:	4b42      	ldr	r3, [pc, #264]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a41      	ldr	r2, [pc, #260]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e92:	f7fe fc27 	bl	80006e4 <HAL_GetTick>
 8001e96:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	e008      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9a:	f7fe fc23 	bl	80006e4 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b64      	cmp	r3, #100	; 0x64
 8001ea6:	d901      	bls.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e1d6      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	4b38      	ldr	r3, [pc, #224]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eb8:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 8084 	beq.w	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d07c      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ed8:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ee2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ee6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	461a      	mov	r2, r3
 8001f02:	2301      	movs	r3, #1
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	461a      	mov	r2, r3
 8001f26:	2300      	movs	r3, #0
 8001f28:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f2a:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f2e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d04b      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7fe fbd3 	bl	80006e4 <HAL_GetTick>
 8001f3e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7fe fbcf 	bl	80006e4 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e180      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
 8001f64:	2302      	movs	r3, #2
 8001f66:	623b      	str	r3, [r7, #32]
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	61fb      	str	r3, [r7, #28]
  return result;
 8001f70:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	095b      	lsrs	r3, r3, #5
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d108      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001f86:	4b01      	ldr	r3, [pc, #4]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	e00d      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40007000 	.word	0x40007000
 8001f94:	10908100 	.word	0x10908100
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	4ba0      	ldr	r3, [pc, #640]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	2202      	movs	r2, #2
 8001faa:	613a      	str	r2, [r7, #16]
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	fa92 f2a2 	rbit	r2, r2
 8001fb2:	60fa      	str	r2, [r7, #12]
  return result;
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	fab2 f282 	clz	r2, r2
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	f002 021f 	and.w	r2, r2, #31
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0b7      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001fd2:	4b95      	ldr	r3, [pc, #596]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	4992      	ldr	r1, [pc, #584]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fe4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d105      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fec:	4b8e      	ldr	r3, [pc, #568]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	4a8d      	ldr	r2, [pc, #564]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002004:	4b88      	ldr	r3, [pc, #544]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	f023 0203 	bic.w	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	4985      	ldr	r1, [pc, #532]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002012:	4313      	orrs	r3, r2
 8002014:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002022:	4b81      	ldr	r3, [pc, #516]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	497e      	ldr	r1, [pc, #504]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002030:	4313      	orrs	r3, r2
 8002032:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002040:	4b79      	ldr	r3, [pc, #484]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	4976      	ldr	r1, [pc, #472]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800204e:	4313      	orrs	r3, r2
 8002050:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b00      	cmp	r3, #0
 800205c:	d008      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800205e:	4b72      	ldr	r3, [pc, #456]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f023 0210 	bic.w	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	496f      	ldr	r1, [pc, #444]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800206c:	4313      	orrs	r3, r2
 800206e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800207c:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002088:	4967      	ldr	r1, [pc, #412]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d008      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f023 0220 	bic.w	r2, r3, #32
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4960      	ldr	r1, [pc, #384]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020b8:	4b5b      	ldr	r3, [pc, #364]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	4958      	ldr	r1, [pc, #352]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020d6:	4b54      	ldr	r3, [pc, #336]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	4951      	ldr	r1, [pc, #324]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d008      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020f4:	4b4c      	ldr	r3, [pc, #304]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	4949      	ldr	r1, [pc, #292]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002102:	4313      	orrs	r3, r2
 8002104:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800210e:	2b00      	cmp	r3, #0
 8002110:	d008      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002112:	4b45      	ldr	r3, [pc, #276]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4942      	ldr	r1, [pc, #264]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002130:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	493a      	ldr	r1, [pc, #232]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800214e:	4b36      	ldr	r3, [pc, #216]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	4933      	ldr	r1, [pc, #204]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800215c:	4313      	orrs	r3, r2
 800215e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800216c:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002178:	492b      	ldr	r1, [pc, #172]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800217a:	4313      	orrs	r3, r2
 800217c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d008      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800218a:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4924      	ldr	r1, [pc, #144]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002198:	4313      	orrs	r3, r2
 800219a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80021a8:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b4:	491c      	ldr	r1, [pc, #112]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d2:	4915      	ldr	r1, [pc, #84]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80021e4:	4b10      	ldr	r3, [pc, #64]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	490d      	ldr	r1, [pc, #52]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d008      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800220e:	4906      	ldr	r1, [pc, #24]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002210:	4313      	orrs	r3, r2
 8002212:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00c      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002220:	4b01      	ldr	r3, [pc, #4]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	e002      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002234:	490b      	ldr	r1, [pc, #44]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002236:	4313      	orrs	r3, r2
 8002238:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d008      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002252:	4904      	ldr	r1, [pc, #16]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002254:	4313      	orrs	r3, r2
 8002256:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3748      	adds	r7, #72	; 0x48
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000

08002268 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e049      	b.n	800230e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7fe f916 	bl	80004c0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3304      	adds	r3, #4
 80022a4:	4619      	mov	r1, r3
 80022a6:	4610      	mov	r0, r2
 80022a8:	f000 fa10 	bl	80026cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b02      	cmp	r3, #2
 800232a:	d122      	bne.n	8002372 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b02      	cmp	r3, #2
 8002338:	d11b      	bne.n	8002372 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f06f 0202 	mvn.w	r2, #2
 8002342:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7fd ff3b 	bl	80001d4 <HAL_TIM_IC_CaptureCallback>
 800235e:	e005      	b.n	800236c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f995 	bl	8002690 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f99c 	bl	80026a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b04      	cmp	r3, #4
 800237e:	d122      	bne.n	80023c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b04      	cmp	r3, #4
 800238c:	d11b      	bne.n	80023c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f06f 0204 	mvn.w	r2, #4
 8002396:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7fd ff11 	bl	80001d4 <HAL_TIM_IC_CaptureCallback>
 80023b2:	e005      	b.n	80023c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f96b 	bl	8002690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f972 	bl	80026a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d122      	bne.n	800241a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d11b      	bne.n	800241a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f06f 0208 	mvn.w	r2, #8
 80023ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2204      	movs	r2, #4
 80023f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7fd fee7 	bl	80001d4 <HAL_TIM_IC_CaptureCallback>
 8002406:	e005      	b.n	8002414 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f941 	bl	8002690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f948 	bl	80026a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b10      	cmp	r3, #16
 8002426:	d122      	bne.n	800246e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b10      	cmp	r3, #16
 8002434:	d11b      	bne.n	800246e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f06f 0210 	mvn.w	r2, #16
 800243e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2208      	movs	r2, #8
 8002444:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7fd febd 	bl	80001d4 <HAL_TIM_IC_CaptureCallback>
 800245a:	e005      	b.n	8002468 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f917 	bl	8002690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f91e 	bl	80026a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b01      	cmp	r3, #1
 800247a:	d10e      	bne.n	800249a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b01      	cmp	r3, #1
 8002488:	d107      	bne.n	800249a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f06f 0201 	mvn.w	r2, #1
 8002492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f8f1 	bl	800267c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a4:	2b80      	cmp	r3, #128	; 0x80
 80024a6:	d10e      	bne.n	80024c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b2:	2b80      	cmp	r3, #128	; 0x80
 80024b4:	d107      	bne.n	80024c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fb5b 	bl	8002b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d4:	d10e      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e0:	2b80      	cmp	r3, #128	; 0x80
 80024e2:	d107      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 fb4e 	bl	8002b90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fe:	2b40      	cmp	r3, #64	; 0x40
 8002500:	d10e      	bne.n	8002520 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250c:	2b40      	cmp	r3, #64	; 0x40
 800250e:	d107      	bne.n	8002520 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f8cc 	bl	80026b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	2b20      	cmp	r3, #32
 800252c:	d10e      	bne.n	800254c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b20      	cmp	r3, #32
 800253a:	d107      	bne.n	800254c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0220 	mvn.w	r2, #32
 8002544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fb0e 	bl	8002b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_TIM_IC_ConfigChannel+0x1a>
 800256a:	2302      	movs	r3, #2
 800256c:	e082      	b.n	8002674 <HAL_TIM_IC_ConfigChannel+0x120>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d11b      	bne.n	80025b4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	6819      	ldr	r1, [r3, #0]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f000 f93c 	bl	8002808 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 020c 	bic.w	r2, r2, #12
 800259e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6999      	ldr	r1, [r3, #24]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	619a      	str	r2, [r3, #24]
 80025b2:	e05a      	b.n	800266a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d11c      	bne.n	80025f4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	6819      	ldr	r1, [r3, #0]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f000 f98b 	bl	80028e4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699a      	ldr	r2, [r3, #24]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6999      	ldr	r1, [r3, #24]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	021a      	lsls	r2, r3, #8
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	619a      	str	r2, [r3, #24]
 80025f2:	e03a      	b.n	800266a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d11b      	bne.n	8002632 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	6819      	ldr	r1, [r3, #0]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f000 f9a8 	bl	800295e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	69da      	ldr	r2, [r3, #28]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 020c 	bic.w	r2, r2, #12
 800261c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69d9      	ldr	r1, [r3, #28]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	61da      	str	r2, [r3, #28]
 8002630:	e01b      	b.n	800266a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	6819      	ldr	r1, [r3, #0]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f000 f9c8 	bl	80029d6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002654:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69d9      	ldr	r1, [r3, #28]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	021a      	lsls	r2, r3, #8
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a42      	ldr	r2, [pc, #264]	; (80027e8 <TIM_Base_SetConfig+0x11c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d013      	beq.n	800270c <TIM_Base_SetConfig+0x40>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ea:	d00f      	beq.n	800270c <TIM_Base_SetConfig+0x40>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a3f      	ldr	r2, [pc, #252]	; (80027ec <TIM_Base_SetConfig+0x120>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d00b      	beq.n	800270c <TIM_Base_SetConfig+0x40>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a3e      	ldr	r2, [pc, #248]	; (80027f0 <TIM_Base_SetConfig+0x124>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d007      	beq.n	800270c <TIM_Base_SetConfig+0x40>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a3d      	ldr	r2, [pc, #244]	; (80027f4 <TIM_Base_SetConfig+0x128>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d003      	beq.n	800270c <TIM_Base_SetConfig+0x40>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a3c      	ldr	r2, [pc, #240]	; (80027f8 <TIM_Base_SetConfig+0x12c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d108      	bne.n	800271e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a31      	ldr	r2, [pc, #196]	; (80027e8 <TIM_Base_SetConfig+0x11c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d01f      	beq.n	8002766 <TIM_Base_SetConfig+0x9a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272c:	d01b      	beq.n	8002766 <TIM_Base_SetConfig+0x9a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a2e      	ldr	r2, [pc, #184]	; (80027ec <TIM_Base_SetConfig+0x120>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d017      	beq.n	8002766 <TIM_Base_SetConfig+0x9a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a2d      	ldr	r2, [pc, #180]	; (80027f0 <TIM_Base_SetConfig+0x124>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d013      	beq.n	8002766 <TIM_Base_SetConfig+0x9a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a2c      	ldr	r2, [pc, #176]	; (80027f4 <TIM_Base_SetConfig+0x128>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00f      	beq.n	8002766 <TIM_Base_SetConfig+0x9a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a2c      	ldr	r2, [pc, #176]	; (80027fc <TIM_Base_SetConfig+0x130>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00b      	beq.n	8002766 <TIM_Base_SetConfig+0x9a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a2b      	ldr	r2, [pc, #172]	; (8002800 <TIM_Base_SetConfig+0x134>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d007      	beq.n	8002766 <TIM_Base_SetConfig+0x9a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <TIM_Base_SetConfig+0x138>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d003      	beq.n	8002766 <TIM_Base_SetConfig+0x9a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a25      	ldr	r2, [pc, #148]	; (80027f8 <TIM_Base_SetConfig+0x12c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d108      	bne.n	8002778 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800276c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4313      	orrs	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <TIM_Base_SetConfig+0x11c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d013      	beq.n	80027cc <TIM_Base_SetConfig+0x100>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <TIM_Base_SetConfig+0x128>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d00f      	beq.n	80027cc <TIM_Base_SetConfig+0x100>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a13      	ldr	r2, [pc, #76]	; (80027fc <TIM_Base_SetConfig+0x130>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d00b      	beq.n	80027cc <TIM_Base_SetConfig+0x100>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <TIM_Base_SetConfig+0x134>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d007      	beq.n	80027cc <TIM_Base_SetConfig+0x100>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a11      	ldr	r2, [pc, #68]	; (8002804 <TIM_Base_SetConfig+0x138>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d003      	beq.n	80027cc <TIM_Base_SetConfig+0x100>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a0c      	ldr	r2, [pc, #48]	; (80027f8 <TIM_Base_SetConfig+0x12c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d103      	bne.n	80027d4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	615a      	str	r2, [r3, #20]
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40012c00 	.word	0x40012c00
 80027ec:	40000400 	.word	0x40000400
 80027f0:	40000800 	.word	0x40000800
 80027f4:	40013400 	.word	0x40013400
 80027f8:	40015000 	.word	0x40015000
 80027fc:	40014000 	.word	0x40014000
 8002800:	40014400 	.word	0x40014400
 8002804:	40014800 	.word	0x40014800

08002808 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f023 0201 	bic.w	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4a26      	ldr	r2, [pc, #152]	; (80028cc <TIM_TI1_SetConfig+0xc4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d017      	beq.n	8002866 <TIM_TI1_SetConfig+0x5e>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283c:	d013      	beq.n	8002866 <TIM_TI1_SetConfig+0x5e>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4a23      	ldr	r2, [pc, #140]	; (80028d0 <TIM_TI1_SetConfig+0xc8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00f      	beq.n	8002866 <TIM_TI1_SetConfig+0x5e>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4a22      	ldr	r2, [pc, #136]	; (80028d4 <TIM_TI1_SetConfig+0xcc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00b      	beq.n	8002866 <TIM_TI1_SetConfig+0x5e>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4a21      	ldr	r2, [pc, #132]	; (80028d8 <TIM_TI1_SetConfig+0xd0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <TIM_TI1_SetConfig+0x5e>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4a20      	ldr	r2, [pc, #128]	; (80028dc <TIM_TI1_SetConfig+0xd4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d003      	beq.n	8002866 <TIM_TI1_SetConfig+0x5e>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <TIM_TI1_SetConfig+0xd8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <TIM_TI1_SetConfig+0x62>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <TIM_TI1_SetConfig+0x64>
 800286a:	2300      	movs	r3, #0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f023 0303 	bic.w	r3, r3, #3
 8002876:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	e003      	b.n	800288a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002890:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	b2db      	uxtb	r3, r3
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	4313      	orrs	r3, r2
 800289c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f023 030a 	bic.w	r3, r3, #10
 80028a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f003 030a 	and.w	r3, r3, #10
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	621a      	str	r2, [r3, #32]
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40012c00 	.word	0x40012c00
 80028d0:	40000400 	.word	0x40000400
 80028d4:	40000800 	.word	0x40000800
 80028d8:	40013400 	.word	0x40013400
 80028dc:	40014000 	.word	0x40014000
 80028e0:	40015000 	.word	0x40015000

080028e4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	f023 0210 	bic.w	r2, r3, #16
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002910:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	021b      	lsls	r3, r3, #8
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002922:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	031b      	lsls	r3, r3, #12
 8002928:	b29b      	uxth	r3, r3
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002936:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	621a      	str	r2, [r3, #32]
}
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800295e:	b480      	push	{r7}
 8002960:	b087      	sub	sp, #28
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f023 0303 	bic.w	r3, r3, #3
 800298a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800299a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80029ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	621a      	str	r2, [r3, #32]
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b087      	sub	sp, #28
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	031b      	lsls	r3, r3, #12
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002a28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	031b      	lsls	r3, r3, #12
 8002a2e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	621a      	str	r2, [r3, #32]
}
 8002a44:	bf00      	nop
 8002a46:	371c      	adds	r7, #28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e06d      	b.n	8002b44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a30      	ldr	r2, [pc, #192]	; (8002b50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d009      	beq.n	8002aa6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a2f      	ldr	r2, [pc, #188]	; (8002b54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d004      	beq.n	8002aa6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a2d      	ldr	r2, [pc, #180]	; (8002b58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d108      	bne.n	8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002aac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1e      	ldr	r2, [pc, #120]	; (8002b50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d01d      	beq.n	8002b18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae4:	d018      	beq.n	8002b18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d013      	beq.n	8002b18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1a      	ldr	r2, [pc, #104]	; (8002b60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00e      	beq.n	8002b18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a15      	ldr	r2, [pc, #84]	; (8002b54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a16      	ldr	r2, [pc, #88]	; (8002b64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d10c      	bne.n	8002b32 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	40012c00 	.word	0x40012c00
 8002b54:	40013400 	.word	0x40013400
 8002b58:	40015000 	.word	0x40015000
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000800 	.word	0x40000800
 8002b64:	40014000 	.word	0x40014000

08002b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <__libc_init_array>:
 8002ba4:	b570      	push	{r4, r5, r6, lr}
 8002ba6:	4d0d      	ldr	r5, [pc, #52]	; (8002bdc <__libc_init_array+0x38>)
 8002ba8:	4c0d      	ldr	r4, [pc, #52]	; (8002be0 <__libc_init_array+0x3c>)
 8002baa:	1b64      	subs	r4, r4, r5
 8002bac:	10a4      	asrs	r4, r4, #2
 8002bae:	2600      	movs	r6, #0
 8002bb0:	42a6      	cmp	r6, r4
 8002bb2:	d109      	bne.n	8002bc8 <__libc_init_array+0x24>
 8002bb4:	4d0b      	ldr	r5, [pc, #44]	; (8002be4 <__libc_init_array+0x40>)
 8002bb6:	4c0c      	ldr	r4, [pc, #48]	; (8002be8 <__libc_init_array+0x44>)
 8002bb8:	f000 f820 	bl	8002bfc <_init>
 8002bbc:	1b64      	subs	r4, r4, r5
 8002bbe:	10a4      	asrs	r4, r4, #2
 8002bc0:	2600      	movs	r6, #0
 8002bc2:	42a6      	cmp	r6, r4
 8002bc4:	d105      	bne.n	8002bd2 <__libc_init_array+0x2e>
 8002bc6:	bd70      	pop	{r4, r5, r6, pc}
 8002bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bcc:	4798      	blx	r3
 8002bce:	3601      	adds	r6, #1
 8002bd0:	e7ee      	b.n	8002bb0 <__libc_init_array+0xc>
 8002bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd6:	4798      	blx	r3
 8002bd8:	3601      	adds	r6, #1
 8002bda:	e7f2      	b.n	8002bc2 <__libc_init_array+0x1e>
 8002bdc:	08002c4c 	.word	0x08002c4c
 8002be0:	08002c4c 	.word	0x08002c4c
 8002be4:	08002c4c 	.word	0x08002c4c
 8002be8:	08002c50 	.word	0x08002c50

08002bec <memset>:
 8002bec:	4402      	add	r2, r0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d100      	bne.n	8002bf6 <memset+0xa>
 8002bf4:	4770      	bx	lr
 8002bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bfa:	e7f9      	b.n	8002bf0 <memset+0x4>

08002bfc <_init>:
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	bf00      	nop
 8002c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c02:	bc08      	pop	{r3}
 8002c04:	469e      	mov	lr, r3
 8002c06:	4770      	bx	lr

08002c08 <_fini>:
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0a:	bf00      	nop
 8002c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0e:	bc08      	pop	{r3}
 8002c10:	469e      	mov	lr, r3
 8002c12:	4770      	bx	lr
